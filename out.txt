
build/SparseRNAFolD:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	f3 0f 1e fa          	endbr64 
    3004:	48 83 ec 08          	sub    rsp,0x8
    3008:	48 8b 05 d9 9f 1e 00 	mov    rax,QWORD PTR [rip+0x1e9fd9]        # 1ecfe8 <__gmon_start__>
    300f:	48 85 c0             	test   rax,rax
    3012:	74 02                	je     3016 <_init+0x16>
    3014:	ff d0                	call   rax
    3016:	48 83 c4 08          	add    rsp,0x8
    301a:	c3                   	ret    

Disassembly of section .plt:

0000000000003020 <.plt>:
    3020:	ff 35 ba 9c 1e 00    	push   QWORD PTR [rip+0x1e9cba]        # 1ecce0 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	f2 ff 25 bb 9c 1e 00 	bnd jmp QWORD PTR [rip+0x1e9cbb]        # 1ecce8 <_GLOBAL_OFFSET_TABLE_+0x10>
    302d:	0f 1f 00             	nop    DWORD PTR [rax]
    3030:	f3 0f 1e fa          	endbr64 
    3034:	68 00 00 00 00       	push   0x0
    3039:	f2 e9 e1 ff ff ff    	bnd jmp 3020 <.plt>
    303f:	90                   	nop
    3040:	f3 0f 1e fa          	endbr64 
    3044:	68 01 00 00 00       	push   0x1
    3049:	f2 e9 d1 ff ff ff    	bnd jmp 3020 <.plt>
    304f:	90                   	nop
    3050:	f3 0f 1e fa          	endbr64 
    3054:	68 02 00 00 00       	push   0x2
    3059:	f2 e9 c1 ff ff ff    	bnd jmp 3020 <.plt>
    305f:	90                   	nop
    3060:	f3 0f 1e fa          	endbr64 
    3064:	68 03 00 00 00       	push   0x3
    3069:	f2 e9 b1 ff ff ff    	bnd jmp 3020 <.plt>
    306f:	90                   	nop
    3070:	f3 0f 1e fa          	endbr64 
    3074:	68 04 00 00 00       	push   0x4
    3079:	f2 e9 a1 ff ff ff    	bnd jmp 3020 <.plt>
    307f:	90                   	nop
    3080:	f3 0f 1e fa          	endbr64 
    3084:	68 05 00 00 00       	push   0x5
    3089:	f2 e9 91 ff ff ff    	bnd jmp 3020 <.plt>
    308f:	90                   	nop
    3090:	f3 0f 1e fa          	endbr64 
    3094:	68 06 00 00 00       	push   0x6
    3099:	f2 e9 81 ff ff ff    	bnd jmp 3020 <.plt>
    309f:	90                   	nop
    30a0:	f3 0f 1e fa          	endbr64 
    30a4:	68 07 00 00 00       	push   0x7
    30a9:	f2 e9 71 ff ff ff    	bnd jmp 3020 <.plt>
    30af:	90                   	nop
    30b0:	f3 0f 1e fa          	endbr64 
    30b4:	68 08 00 00 00       	push   0x8
    30b9:	f2 e9 61 ff ff ff    	bnd jmp 3020 <.plt>
    30bf:	90                   	nop
    30c0:	f3 0f 1e fa          	endbr64 
    30c4:	68 09 00 00 00       	push   0x9
    30c9:	f2 e9 51 ff ff ff    	bnd jmp 3020 <.plt>
    30cf:	90                   	nop
    30d0:	f3 0f 1e fa          	endbr64 
    30d4:	68 0a 00 00 00       	push   0xa
    30d9:	f2 e9 41 ff ff ff    	bnd jmp 3020 <.plt>
    30df:	90                   	nop
    30e0:	f3 0f 1e fa          	endbr64 
    30e4:	68 0b 00 00 00       	push   0xb
    30e9:	f2 e9 31 ff ff ff    	bnd jmp 3020 <.plt>
    30ef:	90                   	nop
    30f0:	f3 0f 1e fa          	endbr64 
    30f4:	68 0c 00 00 00       	push   0xc
    30f9:	f2 e9 21 ff ff ff    	bnd jmp 3020 <.plt>
    30ff:	90                   	nop
    3100:	f3 0f 1e fa          	endbr64 
    3104:	68 0d 00 00 00       	push   0xd
    3109:	f2 e9 11 ff ff ff    	bnd jmp 3020 <.plt>
    310f:	90                   	nop
    3110:	f3 0f 1e fa          	endbr64 
    3114:	68 0e 00 00 00       	push   0xe
    3119:	f2 e9 01 ff ff ff    	bnd jmp 3020 <.plt>
    311f:	90                   	nop
    3120:	f3 0f 1e fa          	endbr64 
    3124:	68 0f 00 00 00       	push   0xf
    3129:	f2 e9 f1 fe ff ff    	bnd jmp 3020 <.plt>
    312f:	90                   	nop
    3130:	f3 0f 1e fa          	endbr64 
    3134:	68 10 00 00 00       	push   0x10
    3139:	f2 e9 e1 fe ff ff    	bnd jmp 3020 <.plt>
    313f:	90                   	nop
    3140:	f3 0f 1e fa          	endbr64 
    3144:	68 11 00 00 00       	push   0x11
    3149:	f2 e9 d1 fe ff ff    	bnd jmp 3020 <.plt>
    314f:	90                   	nop
    3150:	f3 0f 1e fa          	endbr64 
    3154:	68 12 00 00 00       	push   0x12
    3159:	f2 e9 c1 fe ff ff    	bnd jmp 3020 <.plt>
    315f:	90                   	nop
    3160:	f3 0f 1e fa          	endbr64 
    3164:	68 13 00 00 00       	push   0x13
    3169:	f2 e9 b1 fe ff ff    	bnd jmp 3020 <.plt>
    316f:	90                   	nop
    3170:	f3 0f 1e fa          	endbr64 
    3174:	68 14 00 00 00       	push   0x14
    3179:	f2 e9 a1 fe ff ff    	bnd jmp 3020 <.plt>
    317f:	90                   	nop
    3180:	f3 0f 1e fa          	endbr64 
    3184:	68 15 00 00 00       	push   0x15
    3189:	f2 e9 91 fe ff ff    	bnd jmp 3020 <.plt>
    318f:	90                   	nop
    3190:	f3 0f 1e fa          	endbr64 
    3194:	68 16 00 00 00       	push   0x16
    3199:	f2 e9 81 fe ff ff    	bnd jmp 3020 <.plt>
    319f:	90                   	nop
    31a0:	f3 0f 1e fa          	endbr64 
    31a4:	68 17 00 00 00       	push   0x17
    31a9:	f2 e9 71 fe ff ff    	bnd jmp 3020 <.plt>
    31af:	90                   	nop
    31b0:	f3 0f 1e fa          	endbr64 
    31b4:	68 18 00 00 00       	push   0x18
    31b9:	f2 e9 61 fe ff ff    	bnd jmp 3020 <.plt>
    31bf:	90                   	nop
    31c0:	f3 0f 1e fa          	endbr64 
    31c4:	68 19 00 00 00       	push   0x19
    31c9:	f2 e9 51 fe ff ff    	bnd jmp 3020 <.plt>
    31cf:	90                   	nop
    31d0:	f3 0f 1e fa          	endbr64 
    31d4:	68 1a 00 00 00       	push   0x1a
    31d9:	f2 e9 41 fe ff ff    	bnd jmp 3020 <.plt>
    31df:	90                   	nop
    31e0:	f3 0f 1e fa          	endbr64 
    31e4:	68 1b 00 00 00       	push   0x1b
    31e9:	f2 e9 31 fe ff ff    	bnd jmp 3020 <.plt>
    31ef:	90                   	nop
    31f0:	f3 0f 1e fa          	endbr64 
    31f4:	68 1c 00 00 00       	push   0x1c
    31f9:	f2 e9 21 fe ff ff    	bnd jmp 3020 <.plt>
    31ff:	90                   	nop
    3200:	f3 0f 1e fa          	endbr64 
    3204:	68 1d 00 00 00       	push   0x1d
    3209:	f2 e9 11 fe ff ff    	bnd jmp 3020 <.plt>
    320f:	90                   	nop
    3210:	f3 0f 1e fa          	endbr64 
    3214:	68 1e 00 00 00       	push   0x1e
    3219:	f2 e9 01 fe ff ff    	bnd jmp 3020 <.plt>
    321f:	90                   	nop
    3220:	f3 0f 1e fa          	endbr64 
    3224:	68 1f 00 00 00       	push   0x1f
    3229:	f2 e9 f1 fd ff ff    	bnd jmp 3020 <.plt>
    322f:	90                   	nop
    3230:	f3 0f 1e fa          	endbr64 
    3234:	68 20 00 00 00       	push   0x20
    3239:	f2 e9 e1 fd ff ff    	bnd jmp 3020 <.plt>
    323f:	90                   	nop
    3240:	f3 0f 1e fa          	endbr64 
    3244:	68 21 00 00 00       	push   0x21
    3249:	f2 e9 d1 fd ff ff    	bnd jmp 3020 <.plt>
    324f:	90                   	nop
    3250:	f3 0f 1e fa          	endbr64 
    3254:	68 22 00 00 00       	push   0x22
    3259:	f2 e9 c1 fd ff ff    	bnd jmp 3020 <.plt>
    325f:	90                   	nop
    3260:	f3 0f 1e fa          	endbr64 
    3264:	68 23 00 00 00       	push   0x23
    3269:	f2 e9 b1 fd ff ff    	bnd jmp 3020 <.plt>
    326f:	90                   	nop
    3270:	f3 0f 1e fa          	endbr64 
    3274:	68 24 00 00 00       	push   0x24
    3279:	f2 e9 a1 fd ff ff    	bnd jmp 3020 <.plt>
    327f:	90                   	nop
    3280:	f3 0f 1e fa          	endbr64 
    3284:	68 25 00 00 00       	push   0x25
    3289:	f2 e9 91 fd ff ff    	bnd jmp 3020 <.plt>
    328f:	90                   	nop
    3290:	f3 0f 1e fa          	endbr64 
    3294:	68 26 00 00 00       	push   0x26
    3299:	f2 e9 81 fd ff ff    	bnd jmp 3020 <.plt>
    329f:	90                   	nop
    32a0:	f3 0f 1e fa          	endbr64 
    32a4:	68 27 00 00 00       	push   0x27
    32a9:	f2 e9 71 fd ff ff    	bnd jmp 3020 <.plt>
    32af:	90                   	nop
    32b0:	f3 0f 1e fa          	endbr64 
    32b4:	68 28 00 00 00       	push   0x28
    32b9:	f2 e9 61 fd ff ff    	bnd jmp 3020 <.plt>
    32bf:	90                   	nop
    32c0:	f3 0f 1e fa          	endbr64 
    32c4:	68 29 00 00 00       	push   0x29
    32c9:	f2 e9 51 fd ff ff    	bnd jmp 3020 <.plt>
    32cf:	90                   	nop
    32d0:	f3 0f 1e fa          	endbr64 
    32d4:	68 2a 00 00 00       	push   0x2a
    32d9:	f2 e9 41 fd ff ff    	bnd jmp 3020 <.plt>
    32df:	90                   	nop
    32e0:	f3 0f 1e fa          	endbr64 
    32e4:	68 2b 00 00 00       	push   0x2b
    32e9:	f2 e9 31 fd ff ff    	bnd jmp 3020 <.plt>
    32ef:	90                   	nop
    32f0:	f3 0f 1e fa          	endbr64 
    32f4:	68 2c 00 00 00       	push   0x2c
    32f9:	f2 e9 21 fd ff ff    	bnd jmp 3020 <.plt>
    32ff:	90                   	nop
    3300:	f3 0f 1e fa          	endbr64 
    3304:	68 2d 00 00 00       	push   0x2d
    3309:	f2 e9 11 fd ff ff    	bnd jmp 3020 <.plt>
    330f:	90                   	nop
    3310:	f3 0f 1e fa          	endbr64 
    3314:	68 2e 00 00 00       	push   0x2e
    3319:	f2 e9 01 fd ff ff    	bnd jmp 3020 <.plt>
    331f:	90                   	nop
    3320:	f3 0f 1e fa          	endbr64 
    3324:	68 2f 00 00 00       	push   0x2f
    3329:	f2 e9 f1 fc ff ff    	bnd jmp 3020 <.plt>
    332f:	90                   	nop
    3330:	f3 0f 1e fa          	endbr64 
    3334:	68 30 00 00 00       	push   0x30
    3339:	f2 e9 e1 fc ff ff    	bnd jmp 3020 <.plt>
    333f:	90                   	nop
    3340:	f3 0f 1e fa          	endbr64 
    3344:	68 31 00 00 00       	push   0x31
    3349:	f2 e9 d1 fc ff ff    	bnd jmp 3020 <.plt>
    334f:	90                   	nop
    3350:	f3 0f 1e fa          	endbr64 
    3354:	68 32 00 00 00       	push   0x32
    3359:	f2 e9 c1 fc ff ff    	bnd jmp 3020 <.plt>
    335f:	90                   	nop
    3360:	f3 0f 1e fa          	endbr64 
    3364:	68 33 00 00 00       	push   0x33
    3369:	f2 e9 b1 fc ff ff    	bnd jmp 3020 <.plt>
    336f:	90                   	nop
    3370:	f3 0f 1e fa          	endbr64 
    3374:	68 34 00 00 00       	push   0x34
    3379:	f2 e9 a1 fc ff ff    	bnd jmp 3020 <.plt>
    337f:	90                   	nop
    3380:	f3 0f 1e fa          	endbr64 
    3384:	68 35 00 00 00       	push   0x35
    3389:	f2 e9 91 fc ff ff    	bnd jmp 3020 <.plt>
    338f:	90                   	nop
    3390:	f3 0f 1e fa          	endbr64 
    3394:	68 36 00 00 00       	push   0x36
    3399:	f2 e9 81 fc ff ff    	bnd jmp 3020 <.plt>
    339f:	90                   	nop
    33a0:	f3 0f 1e fa          	endbr64 
    33a4:	68 37 00 00 00       	push   0x37
    33a9:	f2 e9 71 fc ff ff    	bnd jmp 3020 <.plt>
    33af:	90                   	nop
    33b0:	f3 0f 1e fa          	endbr64 
    33b4:	68 38 00 00 00       	push   0x38
    33b9:	f2 e9 61 fc ff ff    	bnd jmp 3020 <.plt>
    33bf:	90                   	nop
    33c0:	f3 0f 1e fa          	endbr64 
    33c4:	68 39 00 00 00       	push   0x39
    33c9:	f2 e9 51 fc ff ff    	bnd jmp 3020 <.plt>
    33cf:	90                   	nop
    33d0:	f3 0f 1e fa          	endbr64 
    33d4:	68 3a 00 00 00       	push   0x3a
    33d9:	f2 e9 41 fc ff ff    	bnd jmp 3020 <.plt>
    33df:	90                   	nop
    33e0:	f3 0f 1e fa          	endbr64 
    33e4:	68 3b 00 00 00       	push   0x3b
    33e9:	f2 e9 31 fc ff ff    	bnd jmp 3020 <.plt>
    33ef:	90                   	nop
    33f0:	f3 0f 1e fa          	endbr64 
    33f4:	68 3c 00 00 00       	push   0x3c
    33f9:	f2 e9 21 fc ff ff    	bnd jmp 3020 <.plt>
    33ff:	90                   	nop
    3400:	f3 0f 1e fa          	endbr64 
    3404:	68 3d 00 00 00       	push   0x3d
    3409:	f2 e9 11 fc ff ff    	bnd jmp 3020 <.plt>
    340f:	90                   	nop
    3410:	f3 0f 1e fa          	endbr64 
    3414:	68 3e 00 00 00       	push   0x3e
    3419:	f2 e9 01 fc ff ff    	bnd jmp 3020 <.plt>
    341f:	90                   	nop
    3420:	f3 0f 1e fa          	endbr64 
    3424:	68 3f 00 00 00       	push   0x3f
    3429:	f2 e9 f1 fb ff ff    	bnd jmp 3020 <.plt>
    342f:	90                   	nop
    3430:	f3 0f 1e fa          	endbr64 
    3434:	68 40 00 00 00       	push   0x40
    3439:	f2 e9 e1 fb ff ff    	bnd jmp 3020 <.plt>
    343f:	90                   	nop
    3440:	f3 0f 1e fa          	endbr64 
    3444:	68 41 00 00 00       	push   0x41
    3449:	f2 e9 d1 fb ff ff    	bnd jmp 3020 <.plt>
    344f:	90                   	nop
    3450:	f3 0f 1e fa          	endbr64 
    3454:	68 42 00 00 00       	push   0x42
    3459:	f2 e9 c1 fb ff ff    	bnd jmp 3020 <.plt>
    345f:	90                   	nop
    3460:	f3 0f 1e fa          	endbr64 
    3464:	68 43 00 00 00       	push   0x43
    3469:	f2 e9 b1 fb ff ff    	bnd jmp 3020 <.plt>
    346f:	90                   	nop
    3470:	f3 0f 1e fa          	endbr64 
    3474:	68 44 00 00 00       	push   0x44
    3479:	f2 e9 a1 fb ff ff    	bnd jmp 3020 <.plt>
    347f:	90                   	nop
    3480:	f3 0f 1e fa          	endbr64 
    3484:	68 45 00 00 00       	push   0x45
    3489:	f2 e9 91 fb ff ff    	bnd jmp 3020 <.plt>
    348f:	90                   	nop
    3490:	f3 0f 1e fa          	endbr64 
    3494:	68 46 00 00 00       	push   0x46
    3499:	f2 e9 81 fb ff ff    	bnd jmp 3020 <.plt>
    349f:	90                   	nop
    34a0:	f3 0f 1e fa          	endbr64 
    34a4:	68 47 00 00 00       	push   0x47
    34a9:	f2 e9 71 fb ff ff    	bnd jmp 3020 <.plt>
    34af:	90                   	nop
    34b0:	f3 0f 1e fa          	endbr64 
    34b4:	68 48 00 00 00       	push   0x48
    34b9:	f2 e9 61 fb ff ff    	bnd jmp 3020 <.plt>
    34bf:	90                   	nop
    34c0:	f3 0f 1e fa          	endbr64 
    34c4:	68 49 00 00 00       	push   0x49
    34c9:	f2 e9 51 fb ff ff    	bnd jmp 3020 <.plt>
    34cf:	90                   	nop
    34d0:	f3 0f 1e fa          	endbr64 
    34d4:	68 4a 00 00 00       	push   0x4a
    34d9:	f2 e9 41 fb ff ff    	bnd jmp 3020 <.plt>
    34df:	90                   	nop
    34e0:	f3 0f 1e fa          	endbr64 
    34e4:	68 4b 00 00 00       	push   0x4b
    34e9:	f2 e9 31 fb ff ff    	bnd jmp 3020 <.plt>
    34ef:	90                   	nop
    34f0:	f3 0f 1e fa          	endbr64 
    34f4:	68 4c 00 00 00       	push   0x4c
    34f9:	f2 e9 21 fb ff ff    	bnd jmp 3020 <.plt>
    34ff:	90                   	nop
    3500:	f3 0f 1e fa          	endbr64 
    3504:	68 4d 00 00 00       	push   0x4d
    3509:	f2 e9 11 fb ff ff    	bnd jmp 3020 <.plt>
    350f:	90                   	nop
    3510:	f3 0f 1e fa          	endbr64 
    3514:	68 4e 00 00 00       	push   0x4e
    3519:	f2 e9 01 fb ff ff    	bnd jmp 3020 <.plt>
    351f:	90                   	nop
    3520:	f3 0f 1e fa          	endbr64 
    3524:	68 4f 00 00 00       	push   0x4f
    3529:	f2 e9 f1 fa ff ff    	bnd jmp 3020 <.plt>
    352f:	90                   	nop
    3530:	f3 0f 1e fa          	endbr64 
    3534:	68 50 00 00 00       	push   0x50
    3539:	f2 e9 e1 fa ff ff    	bnd jmp 3020 <.plt>
    353f:	90                   	nop
    3540:	f3 0f 1e fa          	endbr64 
    3544:	68 51 00 00 00       	push   0x51
    3549:	f2 e9 d1 fa ff ff    	bnd jmp 3020 <.plt>
    354f:	90                   	nop
    3550:	f3 0f 1e fa          	endbr64 
    3554:	68 52 00 00 00       	push   0x52
    3559:	f2 e9 c1 fa ff ff    	bnd jmp 3020 <.plt>
    355f:	90                   	nop
    3560:	f3 0f 1e fa          	endbr64 
    3564:	68 53 00 00 00       	push   0x53
    3569:	f2 e9 b1 fa ff ff    	bnd jmp 3020 <.plt>
    356f:	90                   	nop
    3570:	f3 0f 1e fa          	endbr64 
    3574:	68 54 00 00 00       	push   0x54
    3579:	f2 e9 a1 fa ff ff    	bnd jmp 3020 <.plt>
    357f:	90                   	nop
    3580:	f3 0f 1e fa          	endbr64 
    3584:	68 55 00 00 00       	push   0x55
    3589:	f2 e9 91 fa ff ff    	bnd jmp 3020 <.plt>
    358f:	90                   	nop
    3590:	f3 0f 1e fa          	endbr64 
    3594:	68 56 00 00 00       	push   0x56
    3599:	f2 e9 81 fa ff ff    	bnd jmp 3020 <.plt>
    359f:	90                   	nop
    35a0:	f3 0f 1e fa          	endbr64 
    35a4:	68 57 00 00 00       	push   0x57
    35a9:	f2 e9 71 fa ff ff    	bnd jmp 3020 <.plt>
    35af:	90                   	nop
    35b0:	f3 0f 1e fa          	endbr64 
    35b4:	68 58 00 00 00       	push   0x58
    35b9:	f2 e9 61 fa ff ff    	bnd jmp 3020 <.plt>
    35bf:	90                   	nop
    35c0:	f3 0f 1e fa          	endbr64 
    35c4:	68 59 00 00 00       	push   0x59
    35c9:	f2 e9 51 fa ff ff    	bnd jmp 3020 <.plt>
    35cf:	90                   	nop
    35d0:	f3 0f 1e fa          	endbr64 
    35d4:	68 5a 00 00 00       	push   0x5a
    35d9:	f2 e9 41 fa ff ff    	bnd jmp 3020 <.plt>
    35df:	90                   	nop

Disassembly of section .plt.got:

00000000000035e0 <__cxa_finalize@plt>:
    35e0:	f3 0f 1e fa          	endbr64 
    35e4:	f2 ff 25 dd 99 1e 00 	bnd jmp QWORD PTR [rip+0x1e99dd]        # 1ecfc8 <__cxa_finalize@GLIBC_2.2.5>
    35eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000035f0 <__printf_chk@plt>:
    35f0:	f3 0f 1e fa          	endbr64 
    35f4:	f2 ff 25 f5 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96f5]        # 1eccf0 <__printf_chk@GLIBC_2.3.4>
    35fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003600 <__errno_location@plt>:
    3600:	f3 0f 1e fa          	endbr64 
    3604:	f2 ff 25 ed 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96ed]        # 1eccf8 <__errno_location@GLIBC_2.2.5>
    360b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003610 <printf@plt>:
    3610:	f3 0f 1e fa          	endbr64 
    3614:	f2 ff 25 e5 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96e5]        # 1ecd00 <printf@GLIBC_2.2.5>
    361b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003620 <strcspn@plt>:
    3620:	f3 0f 1e fa          	endbr64 
    3624:	f2 ff 25 dd 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96dd]        # 1ecd08 <strcspn@GLIBC_2.2.5>
    362b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003630 <sprintf@plt>:
    3630:	f3 0f 1e fa          	endbr64 
    3634:	f2 ff 25 d5 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96d5]        # 1ecd10 <sprintf@GLIBC_2.2.5>
    363b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003640 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>:
    3640:	f3 0f 1e fa          	endbr64 
    3644:	f2 ff 25 cd 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96cd]        # 1ecd18 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@GLIBCXX_3.4.21>
    364b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003650 <sin@plt>:
    3650:	f3 0f 1e fa          	endbr64 
    3654:	f2 ff 25 c5 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96c5]        # 1ecd20 <sin@GLIBC_2.2.5>
    365b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003660 <strstr@plt>:
    3660:	f3 0f 1e fa          	endbr64 
    3664:	f2 ff 25 bd 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96bd]        # 1ecd28 <strstr@GLIBC_2.2.5>
    366b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003670 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>:
    3670:	f3 0f 1e fa          	endbr64 
    3674:	f2 ff 25 b5 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96b5]        # 1ecd30 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@GLIBCXX_3.4.21>
    367b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003680 <rand@plt>:
    3680:	f3 0f 1e fa          	endbr64 
    3684:	f2 ff 25 ad 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96ad]        # 1ecd38 <rand@GLIBC_2.2.5>
    368b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
    3690:	f3 0f 1e fa          	endbr64 
    3694:	f2 ff 25 a5 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e96a5]        # 1ecd40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
    369b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036a0 <getc@plt>:
    36a0:	f3 0f 1e fa          	endbr64 
    36a4:	f2 ff 25 9d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e969d]        # 1ecd48 <getc@GLIBC_2.2.5>
    36ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
    36b0:	f3 0f 1e fa          	endbr64 
    36b4:	f2 ff 25 95 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9695]        # 1ecd50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
    36bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036c0 <strerror@plt>:
    36c0:	f3 0f 1e fa          	endbr64 
    36c4:	f2 ff 25 8d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e968d]        # 1ecd58 <strerror@GLIBC_2.2.5>
    36cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036d0 <std::__throw_bad_alloc()@plt>:
    36d0:	f3 0f 1e fa          	endbr64 
    36d4:	f2 ff 25 85 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9685]        # 1ecd60 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    36db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036e0 <strchr@plt>:
    36e0:	f3 0f 1e fa          	endbr64 
    36e4:	f2 ff 25 7d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e967d]        # 1ecd68 <strchr@GLIBC_2.2.5>
    36eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036f0 <ctime@plt>:
    36f0:	f3 0f 1e fa          	endbr64 
    36f4:	f2 ff 25 75 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9675]        # 1ecd70 <ctime@GLIBC_2.2.5>
    36fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003700 <__cxa_begin_catch@plt>:
    3700:	f3 0f 1e fa          	endbr64 
    3704:	f2 ff 25 6d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e966d]        # 1ecd78 <__cxa_begin_catch@CXXABI_1.3>
    370b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003710 <strspn@plt>:
    3710:	f3 0f 1e fa          	endbr64 
    3714:	f2 ff 25 65 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9665]        # 1ecd80 <strspn@GLIBC_2.2.5>
    371b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003720 <strlen@plt>:
    3720:	f3 0f 1e fa          	endbr64 
    3724:	f2 ff 25 5d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e965d]        # 1ecd88 <strlen@GLIBC_2.2.5>
    372b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003730 <memcmp@plt>:
    3730:	f3 0f 1e fa          	endbr64 
    3734:	f2 ff 25 55 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9655]        # 1ecd90 <memcmp@GLIBC_2.2.5>
    373b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003740 <mkdir@plt>:
    3740:	f3 0f 1e fa          	endbr64 
    3744:	f2 ff 25 4d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e964d]        # 1ecd98 <mkdir@GLIBC_2.2.5>
    374b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003750 <strncmp@plt>:
    3750:	f3 0f 1e fa          	endbr64 
    3754:	f2 ff 25 45 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9645]        # 1ecda0 <strncmp@GLIBC_2.2.5>
    375b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
    3760:	f3 0f 1e fa          	endbr64 
    3764:	f2 ff 25 3d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e963d]        # 1ecda8 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    376b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003770 <strncpy@plt>:
    3770:	f3 0f 1e fa          	endbr64 
    3774:	f2 ff 25 35 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9635]        # 1ecdb0 <strncpy@GLIBC_2.2.5>
    377b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003780 <std::__throw_length_error(char const*)@plt>:
    3780:	f3 0f 1e fa          	endbr64 
    3784:	f2 ff 25 2d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e962d]        # 1ecdb8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    378b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    3790:	f3 0f 1e fa          	endbr64 
    3794:	f2 ff 25 25 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9625]        # 1ecdc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    379b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037a0 <memset@plt>:
    37a0:	f3 0f 1e fa          	endbr64 
    37a4:	f2 ff 25 1d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e961d]        # 1ecdc8 <memset@GLIBC_2.2.5>
    37ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037b0 <abort@plt>:
    37b0:	f3 0f 1e fa          	endbr64 
    37b4:	f2 ff 25 15 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9615]        # 1ecdd0 <abort@GLIBC_2.2.5>
    37bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037c0 <vsnprintf@plt>:
    37c0:	f3 0f 1e fa          	endbr64 
    37c4:	f2 ff 25 0d 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e960d]        # 1ecdd8 <vsnprintf@GLIBC_2.2.5>
    37cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037d0 <__assert_fail@plt>:
    37d0:	f3 0f 1e fa          	endbr64 
    37d4:	f2 ff 25 05 96 1e 00 	bnd jmp QWORD PTR [rip+0x1e9605]        # 1ecde0 <__assert_fail@GLIBC_2.2.5>
    37db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037e0 <calloc@plt>:
    37e0:	f3 0f 1e fa          	endbr64 
    37e4:	f2 ff 25 fd 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95fd]        # 1ecde8 <calloc@GLIBC_2.2.5>
    37eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037f0 <clock@plt>:
    37f0:	f3 0f 1e fa          	endbr64 
    37f4:	f2 ff 25 f5 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95f5]        # 1ecdf0 <clock@GLIBC_2.2.5>
    37fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
    3800:	f3 0f 1e fa          	endbr64 
    3804:	f2 ff 25 ed 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95ed]        # 1ecdf8 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@GLIBCXX_3.4.9>
    380b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003810 <std::__throw_logic_error(char const*)@plt>:
    3810:	f3 0f 1e fa          	endbr64 
    3814:	f2 ff 25 e5 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95e5]        # 1ece00 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    381b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003820 <log@plt>:
    3820:	f3 0f 1e fa          	endbr64 
    3824:	f2 ff 25 dd 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95dd]        # 1ece08 <log@GLIBC_2.29>
    382b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003830 <memcpy@plt>:
    3830:	f3 0f 1e fa          	endbr64 
    3834:	f2 ff 25 d5 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95d5]        # 1ece10 <memcpy@GLIBC_2.14>
    383b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003840 <__cxa_atexit@plt>:
    3840:	f3 0f 1e fa          	endbr64 
    3844:	f2 ff 25 cd 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95cd]        # 1ece18 <__cxa_atexit@GLIBC_2.2.5>
    384b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003850 <time@plt>:
    3850:	f3 0f 1e fa          	endbr64 
    3854:	f2 ff 25 c5 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95c5]        # 1ece20 <time@GLIBC_2.2.5>
    385b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003860 <strcpy@plt>:
    3860:	f3 0f 1e fa          	endbr64 
    3864:	f2 ff 25 bd 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95bd]        # 1ece28 <strcpy@GLIBC_2.2.5>
    386b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003870 <operator delete(void*)@plt>:
    3870:	f3 0f 1e fa          	endbr64 
    3874:	f2 ff 25 b5 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95b5]        # 1ece30 <operator delete(void*)@GLIBCXX_3.4>
    387b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003880 <srand@plt>:
    3880:	f3 0f 1e fa          	endbr64 
    3884:	f2 ff 25 ad 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95ad]        # 1ece38 <srand@GLIBC_2.2.5>
    388b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003890 <__isoc99_sscanf@plt>:
    3890:	f3 0f 1e fa          	endbr64 
    3894:	f2 ff 25 a5 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e95a5]        # 1ece40 <__isoc99_sscanf@GLIBC_2.7>
    389b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038a0 <fclose@plt>:
    38a0:	f3 0f 1e fa          	endbr64 
    38a4:	f2 ff 25 9d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e959d]        # 1ece48 <fclose@GLIBC_2.2.5>
    38ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038b0 <operator new(unsigned long)@plt>:
    38b0:	f3 0f 1e fa          	endbr64 
    38b4:	f2 ff 25 95 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9595]        # 1ece50 <operator new(unsigned long)@GLIBCXX_3.4>
    38bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038c0 <__xstat@plt>:
    38c0:	f3 0f 1e fa          	endbr64 
    38c4:	f2 ff 25 8d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e958d]        # 1ece58 <__xstat@GLIBC_2.2.5>
    38cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038d0 <fileno@plt>:
    38d0:	f3 0f 1e fa          	endbr64 
    38d4:	f2 ff 25 85 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9585]        # 1ece60 <fileno@GLIBC_2.2.5>
    38db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038e0 <strrchr@plt>:
    38e0:	f3 0f 1e fa          	endbr64 
    38e4:	f2 ff 25 7d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e957d]        # 1ece68 <strrchr@GLIBC_2.2.5>
    38eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038f0 <__stack_chk_fail@plt>:
    38f0:	f3 0f 1e fa          	endbr64 
    38f4:	f2 ff 25 75 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9575]        # 1ece70 <__stack_chk_fail@GLIBC_2.4>
    38fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    3900:	f3 0f 1e fa          	endbr64 
    3904:	f2 ff 25 6d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e956d]        # 1ece78 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    390b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003910 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
    3910:	f3 0f 1e fa          	endbr64 
    3914:	f2 ff 25 65 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9565]        # 1ece80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
    391b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003920 <fflush@plt>:
    3920:	f3 0f 1e fa          	endbr64 
    3924:	f2 ff 25 5d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e955d]        # 1ece88 <fflush@GLIBC_2.2.5>
    392b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003930 <fopen@plt>:
    3930:	f3 0f 1e fa          	endbr64 
    3934:	f2 ff 25 55 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9555]        # 1ece90 <fopen@GLIBC_2.2.5>
    393b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003940 <free@plt>:
    3940:	f3 0f 1e fa          	endbr64 
    3944:	f2 ff 25 4d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e954d]        # 1ece98 <free@GLIBC_2.2.5>
    394b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003950 <exit@plt>:
    3950:	f3 0f 1e fa          	endbr64 
    3954:	f2 ff 25 45 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9545]        # 1ecea0 <exit@GLIBC_2.2.5>
    395b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003960 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
    3960:	f3 0f 1e fa          	endbr64 
    3964:	f2 ff 25 3d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e953d]        # 1ecea8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
    396b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003970 <fputc@plt>:
    3970:	f3 0f 1e fa          	endbr64 
    3974:	f2 ff 25 35 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9535]        # 1eceb0 <fputc@GLIBC_2.2.5>
    397b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003980 <malloc@plt>:
    3980:	f3 0f 1e fa          	endbr64 
    3984:	f2 ff 25 2d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e952d]        # 1eceb8 <malloc@GLIBC_2.2.5>
    398b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003990 <vfprintf@plt>:
    3990:	f3 0f 1e fa          	endbr64 
    3994:	f2 ff 25 25 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9525]        # 1ecec0 <vfprintf@GLIBC_2.2.5>
    399b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()@plt>:
    39a0:	f3 0f 1e fa          	endbr64 
    39a4:	f2 ff 25 1d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e951d]        # 1ecec8 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()@GLIBCXX_3.4.26>
    39ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039b0 <putchar@plt>:
    39b0:	f3 0f 1e fa          	endbr64 
    39b4:	f2 ff 25 15 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9515]        # 1eced0 <putchar@GLIBC_2.2.5>
    39bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039c0 <strcmp@plt>:
    39c0:	f3 0f 1e fa          	endbr64 
    39c4:	f2 ff 25 0d 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e950d]        # 1eced8 <strcmp@GLIBC_2.2.5>
    39cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039d0 <strtol@plt>:
    39d0:	f3 0f 1e fa          	endbr64 
    39d4:	f2 ff 25 05 95 1e 00 	bnd jmp QWORD PTR [rip+0x1e9505]        # 1ecee0 <strtol@GLIBC_2.2.5>
    39db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039e0 <fprintf@plt>:
    39e0:	f3 0f 1e fa          	endbr64 
    39e4:	f2 ff 25 fd 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94fd]        # 1ecee8 <fprintf@GLIBC_2.2.5>
    39eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039f0 <__cxa_rethrow@plt>:
    39f0:	f3 0f 1e fa          	endbr64 
    39f4:	f2 ff 25 f5 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94f5]        # 1ecef0 <__cxa_rethrow@CXXABI_1.3>
    39fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a00 <getpid@plt>:
    3a00:	f3 0f 1e fa          	endbr64 
    3a04:	f2 ff 25 ed 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94ed]        # 1ecef8 <getpid@GLIBC_2.2.5>
    3a0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a10 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
    3a10:	f3 0f 1e fa          	endbr64 
    3a14:	f2 ff 25 e5 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94e5]        # 1ecf00 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
    3a1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a20 <std::ios_base::Init::Init()@plt>:
    3a20:	f3 0f 1e fa          	endbr64 
    3a24:	f2 ff 25 dd 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94dd]        # 1ecf08 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    3a2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a30 <puts@plt>:
    3a30:	f3 0f 1e fa          	endbr64 
    3a34:	f2 ff 25 d5 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94d5]        # 1ecf10 <puts@GLIBC_2.2.5>
    3a3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
    3a40:	f3 0f 1e fa          	endbr64 
    3a44:	f2 ff 25 cd 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94cd]        # 1ecf18 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
    3a4b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a50 <fgets@plt>:
    3a50:	f3 0f 1e fa          	endbr64 
    3a54:	f2 ff 25 c5 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94c5]        # 1ecf20 <fgets@GLIBC_2.2.5>
    3a5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a60 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>:
    3a60:	f3 0f 1e fa          	endbr64 
    3a64:	f2 ff 25 bd 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94bd]        # 1ecf28 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@GLIBCXX_3.4.21>
    3a6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a70 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    3a70:	f3 0f 1e fa          	endbr64 
    3a74:	f2 ff 25 b5 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94b5]        # 1ecf30 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    3a7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a80 <memmove@plt>:
    3a80:	f3 0f 1e fa          	endbr64 
    3a84:	f2 ff 25 ad 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94ad]        # 1ecf38 <memmove@GLIBC_2.2.5>
    3a8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a90 <__cxa_end_catch@plt>:
    3a90:	f3 0f 1e fa          	endbr64 
    3a94:	f2 ff 25 a5 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e94a5]        # 1ecf40 <__cxa_end_catch@CXXABI_1.3>
    3a9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003aa0 <realloc@plt>:
    3aa0:	f3 0f 1e fa          	endbr64 
    3aa4:	f2 ff 25 9d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e949d]        # 1ecf48 <realloc@GLIBC_2.2.5>
    3aab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ab0 <__fprintf_chk@plt>:
    3ab0:	f3 0f 1e fa          	endbr64 
    3ab4:	f2 ff 25 95 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9495]        # 1ecf50 <__fprintf_chk@GLIBC_2.3.4>
    3abb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ac0 <getopt_long@plt>:
    3ac0:	f3 0f 1e fa          	endbr64 
    3ac4:	f2 ff 25 8d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e948d]        # 1ecf58 <getopt_long@GLIBC_2.2.5>
    3acb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ad0 <std::ostream::operator<<(int)@plt>:
    3ad0:	f3 0f 1e fa          	endbr64 
    3ad4:	f2 ff 25 85 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9485]        # 1ecf60 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    3adb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ae0 <isatty@plt>:
    3ae0:	f3 0f 1e fa          	endbr64 
    3ae4:	f2 ff 25 7d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e947d]        # 1ecf68 <isatty@GLIBC_2.2.5>
    3aeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003af0 <pow@plt>:
    3af0:	f3 0f 1e fa          	endbr64 
    3af4:	f2 ff 25 75 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9475]        # 1ecf70 <pow@GLIBC_2.29>
    3afb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b00 <strpbrk@plt>:
    3b00:	f3 0f 1e fa          	endbr64 
    3b04:	f2 ff 25 6d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e946d]        # 1ecf78 <strpbrk@GLIBC_2.2.5>
    3b0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b10 <_Unwind_Resume@plt>:
    3b10:	f3 0f 1e fa          	endbr64 
    3b14:	f2 ff 25 65 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9465]        # 1ecf80 <_Unwind_Resume@GCC_3.0>
    3b1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b20 <strcat@plt>:
    3b20:	f3 0f 1e fa          	endbr64 
    3b24:	f2 ff 25 5d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e945d]        # 1ecf88 <strcat@GLIBC_2.2.5>
    3b2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b30 <exp@plt>:
    3b30:	f3 0f 1e fa          	endbr64 
    3b34:	f2 ff 25 55 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9455]        # 1ecf90 <exp@GLIBC_2.29>
    3b3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    3b40:	f3 0f 1e fa          	endbr64 
    3b44:	f2 ff 25 4d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e944d]        # 1ecf98 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    3b4b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b50 <strtok_r@plt>:
    3b50:	f3 0f 1e fa          	endbr64 
    3b54:	f2 ff 25 45 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9445]        # 1ecfa0 <strtok_r@GLIBC_2.2.5>
    3b5b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b60 <toupper@plt>:
    3b60:	f3 0f 1e fa          	endbr64 
    3b64:	f2 ff 25 3d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e943d]        # 1ecfa8 <toupper@GLIBC_2.2.5>
    3b6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)@plt>:
    3b70:	f3 0f 1e fa          	endbr64 
    3b74:	f2 ff 25 35 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9435]        # 1ecfb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)@GLIBCXX_3.4.21>
    3b7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b80 <putc@plt>:
    3b80:	f3 0f 1e fa          	endbr64 
    3b84:	f2 ff 25 2d 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e942d]        # 1ecfb8 <putc@GLIBC_2.2.5>
    3b8b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b90 <fwrite@plt>:
    3b90:	f3 0f 1e fa          	endbr64 
    3b94:	f2 ff 25 25 94 1e 00 	bnd jmp QWORD PTR [rip+0x1e9425]        # 1ecfc0 <fwrite@GLIBC_2.2.5>
    3b9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000003ba0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0] [clone .cold]>:
    3ba0:	48 8b 0d f9 e6 24 00 	mov    rcx,QWORD PTR [rip+0x24e6f9]        # 2522a0 <package_name>
    3ba7:	48 8b 3d 72 e5 24 00 	mov    rdi,QWORD PTR [rip+0x24e572]        # 252120 <stderr@@GLIBC_2.2.5>
    3bae:	31 c0                	xor    eax,eax
    3bb0:	4c 8d 0d 39 0b 03 00 	lea    r9,[rip+0x30b39]        # 346f0 <_IO_stdin_used+0x16f0>
    3bb7:	48 8d 15 ad f4 02 00 	lea    rdx,[rip+0x2f4ad]        # 3306b <_IO_stdin_used+0x6b>
    3bbe:	be 01 00 00 00       	mov    esi,0x1
    3bc3:	e8 e8 fe ff ff       	call   3ab0 <__fprintf_chk@plt>
    3bc8:	e8 e3 fb ff ff       	call   37b0 <abort@plt>

0000000000003bcd <main.cold>:
    3bcd:	48 8b bd 90 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x370]
    3bd4:	48 8d 85 a0 fc ff ff 	lea    rax,[rbp-0x360]
    3bdb:	48 39 c7             	cmp    rdi,rax
    3bde:	74 05                	je     3be5 <main.cold+0x18>
    3be0:	e8 8b fc ff ff       	call   3870 <operator delete(void*)@plt>
    3be5:	4c 89 ff             	mov    rdi,r15
    3be8:	e8 83 fa ff ff       	call   3670 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    3bed:	48 8b bd 70 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x390]
    3bf4:	48 39 df             	cmp    rdi,rbx
    3bf7:	74 05                	je     3bfe <main.cold+0x31>
    3bf9:	e8 72 fc ff ff       	call   3870 <operator delete(void*)@plt>
    3bfe:	4c 89 e3             	mov    rbx,r12
    3c01:	4c 89 f7             	mov    rdi,r14
    3c04:	e8 77 18 00 00       	call   5480 <SparseMFEFold::~SparseMFEFold()>
    3c09:	48 8b bd 50 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3b0]
    3c10:	48 3b bd 48 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x4b8]
    3c17:	74 05                	je     3c1e <main.cold+0x51>
    3c19:	e8 52 fc ff ff       	call   3870 <operator delete(void*)@plt>
    3c1e:	48 8b bd 30 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3d0]
    3c25:	48 3b bd 70 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x490]
    3c2c:	74 05                	je     3c33 <main.cold+0x66>
    3c2e:	e8 3d fc ff ff       	call   3870 <operator delete(void*)@plt>
    3c33:	49 89 dc             	mov    r12,rbx
    3c36:	48 8b bd 10 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3f0]
    3c3d:	48 3b bd 60 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x4a0]
    3c44:	74 05                	je     3c4b <main.cold+0x7e>
    3c46:	e8 25 fc ff ff       	call   3870 <operator delete(void*)@plt>
    3c4b:	4c 89 e7             	mov    rdi,r12
    3c4e:	e8 bd fe ff ff       	call   3b10 <_Unwind_Resume@plt>
    3c53:	48 8b bd b0 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x350]
    3c5a:	48 3b bd 80 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x480]
    3c61:	74 a6                	je     3c09 <main.cold+0x3c>
    3c63:	e8 08 fc ff ff       	call   3870 <operator delete(void*)@plt>
    3c68:	eb 9f                	jmp    3c09 <main.cold+0x3c>
    3c6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000003c70 <_GLOBAL__sub_I_args_info_purpose>:
    3c70:	f3 0f 1e fa          	endbr64 
    3c74:	55                   	push   rbp
    3c75:	48 8b 2d 54 93 1e 00 	mov    rbp,QWORD PTR [rip+0x1e9354]        # 1ecfd0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    3c7c:	48 8d 05 0d e6 24 00 	lea    rax,[rip+0x24e60d]        # 252290 <input_structure[abi:cxx11]+0x10>
    3c83:	48 8d 15 7e 93 1e 00 	lea    rdx,[rip+0x1e937e]        # 1ed008 <__dso_handle>
    3c8a:	48 8d 70 f0          	lea    rsi,[rax-0x10]
    3c8e:	48 89 05 eb e5 24 00 	mov    QWORD PTR [rip+0x24e5eb],rax        # 252280 <input_structure[abi:cxx11]>
    3c95:	48 89 ef             	mov    rdi,rbp
    3c98:	c6 05 f1 e5 24 00 00 	mov    BYTE PTR [rip+0x24e5f1],0x0        # 252290 <input_structure[abi:cxx11]+0x10>
    3c9f:	48 c7 05 de e5 24 00 00 00 00 00 	mov    QWORD PTR [rip+0x24e5de],0x0        # 252288 <input_structure[abi:cxx11]+0x8>
    3caa:	e8 91 fb ff ff       	call   3840 <__cxa_atexit@plt>
    3caf:	48 8d 05 ba e5 24 00 	lea    rax,[rip+0x24e5ba]        # 252270 <parameter_file[abi:cxx11]+0x10>
    3cb6:	48 89 ef             	mov    rdi,rbp
    3cb9:	5d                   	pop    rbp
    3cba:	48 8d 15 47 93 1e 00 	lea    rdx,[rip+0x1e9347]        # 1ed008 <__dso_handle>
    3cc1:	48 8d 70 f0          	lea    rsi,[rax-0x10]
    3cc5:	48 89 05 94 e5 24 00 	mov    QWORD PTR [rip+0x24e594],rax        # 252260 <parameter_file[abi:cxx11]>
    3ccc:	48 c7 05 91 e5 24 00 00 00 00 00 	mov    QWORD PTR [rip+0x24e591],0x0        # 252268 <parameter_file[abi:cxx11]+0x8>
    3cd7:	c6 05 92 e5 24 00 00 	mov    BYTE PTR [rip+0x24e592],0x0        # 252270 <parameter_file[abi:cxx11]+0x10>
    3cde:	e9 5d fb ff ff       	jmp    3840 <__cxa_atexit@plt>
    3ce3:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    3ced:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000003cf0 <main>:
    3cf0:	f3 0f 1e fa          	endbr64 
    3cf4:	55                   	push   rbp
    3cf5:	48 89 e5             	mov    rbp,rsp
    3cf8:	41 57                	push   r15
    3cfa:	41 56                	push   r14
    3cfc:	41 55                	push   r13
    3cfe:	41 54                	push   r12
    3d00:	53                   	push   rbx
    3d01:	48 81 ec c8 04 00 00 	sub    rsp,0x4c8
    3d08:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    3d11:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    3d15:	31 c0                	xor    eax,eax
    3d17:	48 8d 85 a0 fb ff ff 	lea    rax,[rbp-0x460]
    3d1e:	48 89 c2             	mov    rdx,rax
    3d21:	48 89 85 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rax
    3d28:	e8 c3 16 00 00       	call   53f0 <cmdline_parser(int, char**, args_info*)>
    3d2d:	89 85 7c fb ff ff    	mov    DWORD PTR [rbp-0x484],eax
    3d33:	85 c0                	test   eax,eax
    3d35:	0f 85 37 0d 00 00    	jne    4a72 <main+0xd82>
    3d3b:	44 8b ad 08 fc ff ff 	mov    r13d,DWORD PTR [rbp-0x3f8]
    3d42:	48 8d 85 20 fc ff ff 	lea    rax,[rbp-0x3e0]
    3d49:	48 c7 85 18 fc ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x3e8],0x0
    3d54:	4c 8d a5 10 fc ff ff 	lea    r12,[rbp-0x3f0]
    3d5b:	48 89 85 60 fb ff ff 	mov    QWORD PTR [rbp-0x4a0],rax
    3d62:	48 89 85 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rax
    3d69:	c6 85 20 fc ff ff 00 	mov    BYTE PTR [rbp-0x3e0],0x0
    3d70:	45 85 ed             	test   r13d,r13d
    3d73:	0f 85 b6 00 00 00    	jne    3e2f <main+0x13f>
    3d79:	4c 89 e6             	mov    rsi,r12
    3d7c:	48 8d 3d bd e3 24 00 	lea    rdi,[rip+0x24e3bd]        # 252140 <std::cin@@GLIBCXX_3.4>
    3d83:	e8 b8 f8 ff ff       	call   3640 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
    3d88:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
    3d8f:	8b 9d f0 fb ff ff    	mov    ebx,DWORD PTR [rbp-0x410]
    3d95:	48 c7 85 38 fc ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x3c8],0x0
    3da0:	4c 8d ad 30 fc ff ff 	lea    r13,[rbp-0x3d0]
    3da7:	c6 85 40 fc ff ff 00 	mov    BYTE PTR [rbp-0x3c0],0x0
    3dae:	48 89 85 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rax
    3db5:	48 8d 85 40 fc ff ff 	lea    rax,[rbp-0x3c0]
    3dbc:	48 89 85 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rax
    3dc3:	48 89 85 30 fc ff ff 	mov    QWORD PTR [rbp-0x3d0],rax
    3dca:	85 db                	test   ebx,ebx
    3dcc:	0f 84 d7 01 00 00    	je     3fa9 <main+0x2b9>
    3dd2:	48 8d 35 a7 e4 24 00 	lea    rsi,[rip+0x24e4a7]        # 252280 <input_structure[abi:cxx11]>
    3dd9:	4c 89 ef             	mov    rdi,r13
    3ddc:	e8 af f9 ff ff       	call   3790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    3de1:	48 8d 35 08 09 03 00 	lea    rsi,[rip+0x30908]        # 346f0 <_IO_stdin_used+0x16f0>
    3de8:	4c 89 ef             	mov    rdi,r13
    3deb:	e8 a0 f8 ff ff       	call   3690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
    3df0:	85 c0                	test   eax,eax
    3df2:	74 5c                	je     3e50 <main+0x160>
    3df4:	48 63 85 88 fb ff ff 	movsxd rax,DWORD PTR [rbp-0x478]
    3dfb:	48 3b 85 38 fc ff ff 	cmp    rax,QWORD PTR [rbp-0x3c8]
    3e02:	74 4c                	je     3e50 <main+0x160>
    3e04:	ba 32 00 00 00       	mov    edx,0x32
    3e09:	48 8d 35 10 09 03 00 	lea    rsi,[rip+0x30910]        # 34720 <_IO_stdin_used+0x1720>
    3e10:	48 8d 3d e9 e1 24 00 	lea    rdi,[rip+0x24e1e9]        # 252000 <std::cout@@GLIBCXX_3.4>
    3e17:	e8 e4 fa ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    3e1c:	48 8d 3d dd e1 24 00 	lea    rdi,[rip+0x24e1dd]        # 252000 <std::cout@@GLIBCXX_3.4>
    3e23:	e8 38 f9 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    3e28:	31 ff                	xor    edi,edi
    3e2a:	e8 21 fb ff ff       	call   3950 <exit@plt>
    3e2f:	48 8b 85 00 fc ff ff 	mov    rax,QWORD PTR [rbp-0x400]
    3e36:	4c 89 e7             	mov    rdi,r12
    3e39:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    3e3c:	e8 2f fd ff ff       	call   3b70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)@plt>
    3e41:	e9 42 ff ff ff       	jmp    3d88 <main+0x98>
    3e46:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    3e50:	44 8b 9d f8 fb ff ff 	mov    r11d,DWORD PTR [rbp-0x408]
    3e57:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
    3e5e:	48 c7 85 58 fc ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x3a8],0x0
    3e69:	4c 8d bd 50 fc ff ff 	lea    r15,[rbp-0x3b0]
    3e70:	48 89 85 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],rax
    3e77:	48 89 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rax
    3e7e:	c6 85 60 fc ff ff 00 	mov    BYTE PTR [rbp-0x3a0],0x0
    3e85:	45 85 db             	test   r11d,r11d
    3e88:	0f 84 69 01 00 00    	je     3ff7 <main+0x307>
    3e8e:	48 8d 35 cb e3 24 00 	lea    rsi,[rip+0x24e3cb]        # 252260 <parameter_file[abi:cxx11]>
    3e95:	4c 89 ff             	mov    rdi,r15
    3e98:	e8 f3 f8 ff ff       	call   3790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    3e9d:	48 8d 35 4c 08 03 00 	lea    rsi,[rip+0x3084c]        # 346f0 <_IO_stdin_used+0x16f0>
    3ea4:	4c 89 ff             	mov    rdi,r15
    3ea7:	e8 e4 f7 ff ff       	call   3690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
    3eac:	85 c0                	test   eax,eax
    3eae:	74 0e                	je     3ebe <main+0x1ce>
    3eb0:	48 8b bd 50 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3b0]
    3eb7:	31 f6                	xor    esi,esi
    3eb9:	e8 d3 25 02 00       	call   26491 <vrna_params_load>
    3ebe:	44 8b 95 ec fb ff ff 	mov    r10d,DWORD PTR [rbp-0x414]
    3ec5:	48 8b b5 30 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3d0]
    3ecc:	4c 8d bd b0 fc ff ff 	lea    r15,[rbp-0x350]
    3ed3:	48 8d 9d c0 fc ff ff 	lea    rbx,[rbp-0x340]
    3eda:	48 8b 95 38 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3c8]
    3ee1:	8b 85 e8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x418]
    3ee7:	4c 89 ff             	mov    rdi,r15
    3eea:	48 89 9d 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rbx
    3ef1:	45 85 d2             	test   r10d,r10d
    3ef4:	48 89 9d b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rbx
    3efb:	0f 95 85 97 fb ff ff 	setne  BYTE PTR [rbp-0x469]
    3f02:	48 01 f2             	add    rdx,rsi
    3f05:	89 85 78 fb ff ff    	mov    DWORD PTR [rbp-0x488],eax
    3f0b:	e8 40 4b 00 00       	call   8a50 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    3f10:	44 8b 8d fc fb ff ff 	mov    r9d,DWORD PTR [rbp-0x404]
    3f17:	31 d2                	xor    edx,edx
    3f19:	4c 89 f9             	mov    rcx,r15
    3f1c:	4c 89 e6             	mov    rsi,r12
    3f1f:	4c 8d b5 30 fe ff ff 	lea    r14,[rbp-0x1d0]
    3f26:	45 85 c9             	test   r9d,r9d
    3f29:	4c 89 f7             	mov    rdi,r14
    3f2c:	0f 94 c2             	sete   dl
    3f2f:	e8 ec 1e 00 00       	call   5e20 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
    3f34:	48 8b bd b0 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x350]
    3f3b:	48 39 df             	cmp    rdi,rbx
    3f3e:	74 05                	je     3f45 <main+0x255>
    3f40:	e8 2b f9 ff ff       	call   3870 <operator delete(void*)@plt>
    3f45:	44 8b 85 f4 fb ff ff 	mov    r8d,DWORD PTR [rbp-0x40c]
    3f4c:	45 85 c0             	test   r8d,r8d
    3f4f:	74 13                	je     3f64 <main+0x274>
    3f51:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
    3f58:	8b 15 32 d7 24 00    	mov    edx,DWORD PTR [rip+0x24d732]        # 251690 <dangles>
    3f5e:	89 90 ac 35 03 00    	mov    DWORD PTR [rax+0x335ac],edx
    3f64:	8b 85 88 fb ff ff    	mov    eax,DWORD PTR [rbp-0x478]
    3f6a:	48 89 e3             	mov    rbx,rsp
    3f6d:	8d 48 01             	lea    ecx,[rax+0x1]
    3f70:	48 63 c1             	movsxd rax,ecx
    3f73:	4c 8d 24 85 0f 00 00 00 	lea    r12,[rax*4+0xf]
    3f7b:	4c 89 e6             	mov    rsi,r12
    3f7e:	4c 89 e2             	mov    rdx,r12
    3f81:	48 81 e6 00 f0 ff ff 	and    rsi,0xfffffffffffff000
    3f88:	48 83 e2 f0          	and    rdx,0xfffffffffffffff0
    3f8c:	48 29 f3             	sub    rbx,rsi
    3f8f:	48 89 de             	mov    rsi,rbx
    3f92:	48 39 f4             	cmp    rsp,rsi
    3f95:	74 74                	je     400b <main+0x31b>
    3f97:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    3f9e:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    3fa7:	eb e9                	jmp    3f92 <main+0x2a2>
    3fa9:	4c 8d b5 30 fe ff ff 	lea    r14,[rbp-0x1d0]
    3fb0:	48 63 b5 88 fb ff ff 	movsxd rsi,DWORD PTR [rbp-0x478]
    3fb7:	ba 2e 00 00 00       	mov    edx,0x2e
    3fbc:	48 8d 9d 40 fe ff ff 	lea    rbx,[rbp-0x1c0]
    3fc3:	4c 89 f7             	mov    rdi,r14
    3fc6:	48 89 9d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rbx
    3fcd:	e8 3e f9 ff ff       	call   3910 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    3fd2:	4c 89 ef             	mov    rdi,r13
    3fd5:	4c 89 f6             	mov    rsi,r14
    3fd8:	e8 83 f9 ff ff       	call   3960 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    3fdd:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
    3fe4:	48 39 df             	cmp    rdi,rbx
    3fe7:	0f 84 f4 fd ff ff    	je     3de1 <main+0xf1>
    3fed:	e8 7e f8 ff ff       	call   3870 <operator delete(void*)@plt>
    3ff2:	e9 ea fd ff ff       	jmp    3de1 <main+0xf1>
    3ff7:	48 8d 35 f2 06 03 00 	lea    rsi,[rip+0x306f2]        # 346f0 <_IO_stdin_used+0x16f0>
    3ffe:	4c 89 ff             	mov    rdi,r15
    4001:	e8 6a fb ff ff       	call   3b70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)@plt>
    4006:	e9 92 fe ff ff       	jmp    3e9d <main+0x1ad>
    400b:	81 e2 ff 0f 00 00    	and    edx,0xfff
    4011:	48 29 d4             	sub    rsp,rdx
    4014:	48 85 d2             	test   rdx,rdx
    4017:	75 79                	jne    4092 <main+0x3a2>
    4019:	48 8d 54 24 03       	lea    rdx,[rsp+0x3]
    401e:	48 89 d6             	mov    rsi,rdx
    4021:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    4025:	48 c1 ee 02          	shr    rsi,0x2
    4029:	83 e9 01             	sub    ecx,0x1
    402c:	48 89 95 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rdx
    4033:	48 8d 7a 04          	lea    rdi,[rdx+0x4]
    4037:	c7 04 b5 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rsi*4+0x0],0x0
    4042:	7e 59                	jle    409d <main+0x3ad>
    4044:	48 8d 14 85 fc ff ff ff 	lea    rdx,[rax*4-0x4]
    404c:	31 f6                	xor    esi,esi
    404e:	48 89 e3             	mov    rbx,rsp
    4051:	48 89 95 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rdx
    4058:	e8 43 f7 ff ff       	call   37a0 <memset@plt>
    405d:	4c 89 e1             	mov    rcx,r12
    4060:	4c 89 e0             	mov    rax,r12
    4063:	48 8b 95 50 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4b0]
    406a:	48 81 e1 00 f0 ff ff 	and    rcx,0xfffffffffffff000
    4071:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    4075:	48 29 cb             	sub    rbx,rcx
    4078:	48 89 d9             	mov    rcx,rbx
    407b:	48 39 cc             	cmp    rsp,rcx
    407e:	74 52                	je     40d2 <main+0x3e2>
    4080:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    4087:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    4090:	eb e9                	jmp    407b <main+0x38b>
    4092:	48 83 4c 14 f8 00    	or     QWORD PTR [rsp+rdx*1-0x8],0x0
    4098:	e9 7c ff ff ff       	jmp    4019 <main+0x329>
    409d:	4c 89 e2             	mov    rdx,r12
    40a0:	48 89 e3             	mov    rbx,rsp
    40a3:	4c 89 e0             	mov    rax,r12
    40a6:	48 81 e2 00 f0 ff ff 	and    rdx,0xfffffffffffff000
    40ad:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    40b1:	48 29 d3             	sub    rbx,rdx
    40b4:	48 89 da             	mov    rdx,rbx
    40b7:	48 39 d4             	cmp    rsp,rdx
    40ba:	0f 84 c0 08 00 00    	je     4980 <main+0xc90>
    40c0:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    40c7:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    40d0:	eb e5                	jmp    40b7 <main+0x3c7>
    40d2:	25 ff 0f 00 00       	and    eax,0xfff
    40d7:	48 29 c4             	sub    rsp,rax
    40da:	48 85 c0             	test   rax,rax
    40dd:	74 06                	je     40e5 <main+0x3f5>
    40df:	48 83 4c 04 f8 00    	or     QWORD PTR [rsp+rax*1-0x8],0x0
    40e5:	48 8d 4c 24 03       	lea    rcx,[rsp+0x3]
    40ea:	31 f6                	xor    esi,esi
    40ec:	48 89 95 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],rdx
    40f3:	48 89 e3             	mov    rbx,rsp
    40f6:	48 89 c8             	mov    rax,rcx
    40f9:	48 83 e1 fc          	and    rcx,0xfffffffffffffffc
    40fd:	48 c1 e8 02          	shr    rax,0x2
    4101:	48 8d 79 04          	lea    rdi,[rcx+0x4]
    4105:	48 89 8d 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rcx
    410c:	c7 04 85 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rax*4+0x0],0x0
    4117:	e8 84 f6 ff ff       	call   37a0 <memset@plt>
    411c:	4c 89 e1             	mov    rcx,r12
    411f:	4c 89 e0             	mov    rax,r12
    4122:	48 8b 95 40 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4c0]
    4129:	48 81 e1 00 f0 ff ff 	and    rcx,0xfffffffffffff000
    4130:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    4134:	48 29 cb             	sub    rbx,rcx
    4137:	48 89 d9             	mov    rcx,rbx
    413a:	48 39 cc             	cmp    rsp,rcx
    413d:	74 12                	je     4151 <main+0x461>
    413f:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    4146:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    414f:	eb e9                	jmp    413a <main+0x44a>
    4151:	25 ff 0f 00 00       	and    eax,0xfff
    4156:	48 29 c4             	sub    rsp,rax
    4159:	48 85 c0             	test   rax,rax
    415c:	75 5f                	jne    41bd <main+0x4cd>
    415e:	48 8d 5c 24 03       	lea    rbx,[rsp+0x3]
    4163:	31 f6                	xor    esi,esi
    4165:	48 89 95 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],rdx
    416c:	48 89 d8             	mov    rax,rbx
    416f:	48 83 e3 fc          	and    rbx,0xfffffffffffffffc
    4173:	48 c1 e8 02          	shr    rax,0x2
    4177:	48 8d 7b 04          	lea    rdi,[rbx+0x4]
    417b:	c7 04 85 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rax*4+0x0],0x0
    4186:	e8 15 f6 ff ff       	call   37a0 <memset@plt>
    418b:	4c 89 e0             	mov    rax,r12
    418e:	48 89 e1             	mov    rcx,rsp
    4191:	49 81 e4 00 f0 ff ff 	and    r12,0xfffffffffffff000
    4198:	48 8b 95 40 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4c0]
    419f:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    41a3:	4c 29 e1             	sub    rcx,r12
    41a6:	48 39 cc             	cmp    rsp,rcx
    41a9:	74 1a                	je     41c5 <main+0x4d5>
    41ab:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    41b2:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    41bb:	eb e9                	jmp    41a6 <main+0x4b6>
    41bd:	48 83 4c 04 f8 00    	or     QWORD PTR [rsp+rax*1-0x8],0x0
    41c3:	eb 99                	jmp    415e <main+0x46e>
    41c5:	25 ff 0f 00 00       	and    eax,0xfff
    41ca:	48 29 c4             	sub    rsp,rax
    41cd:	48 85 c0             	test   rax,rax
    41d0:	74 06                	je     41d8 <main+0x4e8>
    41d2:	48 83 4c 04 f8 00    	or     QWORD PTR [rsp+rax*1-0x8],0x0
    41d8:	4c 8d 64 24 03       	lea    r12,[rsp+0x3]
    41dd:	31 f6                	xor    esi,esi
    41df:	4c 89 e0             	mov    rax,r12
    41e2:	49 83 e4 fc          	and    r12,0xfffffffffffffffc
    41e6:	48 c1 e8 02          	shr    rax,0x2
    41ea:	49 8d 7c 24 04       	lea    rdi,[r12+0x4]
    41ef:	c7 04 85 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rax*4+0x0],0x0
    41fa:	e8 a1 f5 ff ff       	call   37a0 <memset@plt>
    41ff:	48 8b bd 68 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x498]
    4206:	e8 85 11 00 00       	call   5390 <cmdline_parser_free(args_info*)>
    420b:	48 8b 95 18 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e8]
    4212:	48 8b b5 10 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3f0]
    4219:	48 8d 3d e0 dd 24 00 	lea    rdi,[rip+0x24dde0]        # 252000 <std::cout@@GLIBCXX_3.4>
    4220:	e8 db f6 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    4225:	48 89 c7             	mov    rdi,rax
    4228:	e8 33 f5 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    422d:	48 8b 8d 50 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4b0]
    4234:	48 8b 95 58 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4a8]
    423b:	48 89 de             	mov    rsi,rbx
    423e:	4c 89 ef             	mov    rdi,r13
    4241:	e8 0a 40 00 00       	call   8250 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)>
    4246:	8b bd 88 fb ff ff    	mov    edi,DWORD PTR [rbp-0x478]
    424c:	85 ff                	test   edi,edi
    424e:	7e 50                	jle    42a0 <main+0x5b0>
    4250:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
    4257:	31 d2                	xor    edx,edx
    4259:	8d 48 ff             	lea    ecx,[rax-0x1]
    425c:	b8 01 00 00 00       	mov    eax,0x1
    4261:	48 83 c1 02          	add    rcx,0x2
    4265:	8b 34 83             	mov    esi,DWORD PTR [rbx+rax*4]
    4268:	85 f6                	test   esi,esi
    426a:	7e 1d                	jle    4289 <main+0x599>
    426c:	41 c7 04 84 00 00 00 00 	mov    DWORD PTR [r12+rax*4],0x0
    4274:	48 83 c0 01          	add    rax,0x1
    4278:	48 39 c8             	cmp    rax,rcx
    427b:	74 23                	je     42a0 <main+0x5b0>
    427d:	8b 34 83             	mov    esi,DWORD PTR [rbx+rax*4]
    4280:	ba 01 00 00 00       	mov    edx,0x1
    4285:	85 f6                	test   esi,esi
    4287:	7f e3                	jg     426c <main+0x57c>
    4289:	41 89 14 84          	mov    DWORD PTR [r12+rax*4],edx
    428d:	48 83 c0 01          	add    rax,0x1
    4291:	8d 72 01             	lea    esi,[rdx+0x1]
    4294:	48 39 c8             	cmp    rax,rcx
    4297:	74 07                	je     42a0 <main+0x5b0>
    4299:	89 f2                	mov    edx,esi
    429b:	eb c8                	jmp    4265 <main+0x575>
    429d:	0f 1f 00             	nop    DWORD PTR [rax]
    42a0:	48 83 ec 08          	sub    rsp,0x8
    42a4:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
    42ab:	4c 8d ad 60 ff ff ff 	lea    r13,[rbp-0xa0]
    42b2:	4c 89 f7             	mov    rdi,r14
    42b5:	41 54                	push   r12
    42b7:	4c 8d 8d 60 fe ff ff 	lea    r9,[rbp-0x1a0]
    42be:	4c 8d 85 58 fe ff ff 	lea    r8,[rbp-0x1a8]
    42c5:	ff b5 50 fb ff ff    	push   QWORD PTR [rbp-0x4b0]
    42cb:	48 8d 4d a0          	lea    rcx,[rbp-0x60]
    42cf:	48 8d 55 b8          	lea    rdx,[rbp-0x48]
    42d3:	ff b5 58 fb ff ff    	push   QWORD PTR [rbp-0x4a8]
    42d9:	48 8d b5 b8 fe ff ff 	lea    rsi,[rbp-0x148]
    42e0:	53                   	push   rbx
    42e1:	50                   	push   rax
    42e2:	48 8d 85 50 fe ff ff 	lea    rax,[rbp-0x1b0]
    42e9:	50                   	push   rax
    42ea:	48 89 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],rax
    42f1:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
    42f8:	50                   	push   rax
    42f9:	48 8d 85 28 ff ff ff 	lea    rax,[rbp-0xd8]
    4300:	50                   	push   rax
    4301:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
    4308:	50                   	push   rax
    4309:	48 89 85 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rax
    4310:	48 8d 85 f8 fe ff ff 	lea    rax,[rbp-0x108]
    4317:	50                   	push   rax
    4318:	48 89 85 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rax
    431f:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
    4326:	50                   	push   rax
    4327:	48 89 85 18 fb ff ff 	mov    QWORD PTR [rbp-0x4e8],rax
    432e:	48 8d 85 68 fe ff ff 	lea    rax,[rbp-0x198]
    4335:	41 55                	push   r13
    4337:	50                   	push   rax
    4338:	4c 89 8d 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],r9
    433f:	4c 89 85 38 fb ff ff 	mov    QWORD PTR [rbp-0x4c8],r8
    4346:	48 89 8d 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],rcx
    434d:	48 89 95 30 fb ff ff 	mov    QWORD PTR [rbp-0x4d0],rdx
    4354:	48 89 85 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rax
    435b:	e8 d0 4a 00 00       	call   8e30 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)>
    4360:	89 85 14 fb ff ff    	mov    DWORD PTR [rbp-0x4ec],eax
    4366:	8b 85 50 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1b0]
    436c:	48 83 c4 70          	add    rsp,0x70
    4370:	ba 2e 00 00 00       	mov    edx,0x2e
    4375:	8d 70 01             	lea    esi,[rax+0x1]
    4378:	48 8d 85 70 fe ff ff 	lea    rax,[rbp-0x190]
    437f:	48 63 f6             	movsxd rsi,esi
    4382:	48 89 c7             	mov    rdi,rax
    4385:	48 89 85 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rax
    438c:	e8 1f f3 ff ff       	call   36b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
    4391:	8b 85 50 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1b0]
    4397:	48 83 ec 08          	sub    rsp,0x8
    439b:	4c 8b 8d 38 fb ff ff 	mov    r9,QWORD PTR [rbp-0x4c8]
    43a2:	4c 89 f7             	mov    rdi,r14
    43a5:	4c 8b 85 50 fb ff ff 	mov    r8,QWORD PTR [rbp-0x4b0]
    43ac:	48 8b 8d 20 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4e0]
    43b3:	41 54                	push   r12
    43b5:	48 8b 95 30 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x4d0]
    43bc:	48 8b b5 40 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x4c0]
    43c3:	53                   	push   rbx
    43c4:	50                   	push   rax
    43c5:	48 8d 85 97 fb ff ff 	lea    rax,[rbp-0x469]
    43cc:	6a 01                	push   0x1
    43ce:	50                   	push   rax
    43cf:	ff b5 58 fb ff ff    	push   QWORD PTR [rbp-0x4a8]
    43d5:	ff b5 68 fb ff ff    	push   QWORD PTR [rbp-0x498]
    43db:	ff b5 88 fb ff ff    	push   QWORD PTR [rbp-0x478]
    43e1:	ff b5 18 fb ff ff    	push   QWORD PTR [rbp-0x4e8]
    43e7:	41 55                	push   r13
    43e9:	ff b5 28 fb ff ff    	push   QWORD PTR [rbp-0x4d8]
    43ef:	e8 2c 7d 00 00       	call   c120 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)>
    43f4:	4c 8b a5 78 fe ff ff 	mov    r12,QWORD PTR [rbp-0x188]
    43fb:	48 63 85 50 fe ff ff 	movsxd rax,DWORD PTR [rbp-0x1b0]
    4402:	48 83 c4 60          	add    rsp,0x60
    4406:	4d 85 e4             	test   r12,r12
    4409:	0f 84 6d 06 00 00    	je     4a7c <main+0xd8c>
    440f:	49 83 ec 01          	sub    r12,0x1
    4413:	48 8b 9d 80 fb ff ff 	mov    rbx,QWORD PTR [rbp-0x480]
    441a:	49 39 c4             	cmp    r12,rax
    441d:	4c 0f 47 e0          	cmova  r12,rax
    4421:	48 89 9d b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rbx
    4428:	48 8b 9d 70 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x190]
    442f:	4c 89 a5 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],r12
    4436:	49 83 fc 0f          	cmp    r12,0xf
    443a:	0f 87 91 04 00 00    	ja     48d1 <main+0xbe1>
    4440:	49 83 fc 01          	cmp    r12,0x1
    4444:	0f 85 66 04 00 00    	jne    48b0 <main+0xbc0>
    444a:	0f b6 43 01          	movzx  eax,BYTE PTR [rbx+0x1]
    444e:	88 85 c0 fc ff ff    	mov    BYTE PTR [rbp-0x340],al
    4454:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
    445b:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
    4462:	48 89 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rax
    4469:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
    446d:	48 8b bd 70 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x190]
    4474:	48 8b 95 b0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x350]
    447b:	48 3b 95 80 fb ff ff 	cmp    rdx,QWORD PTR [rbp-0x480]
    4482:	0f 84 74 04 00 00    	je     48fc <main+0xc0c>
    4488:	48 8d b5 80 fe ff ff 	lea    rsi,[rbp-0x180]
    448f:	48 8b 85 b8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x348]
    4496:	48 8b 8d c0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x340]
    449d:	48 39 f7             	cmp    rdi,rsi
    44a0:	0f 84 92 04 00 00    	je     4938 <main+0xc48>
    44a6:	66 48 0f 6e c0       	movq   xmm0,rax
    44ab:	66 48 0f 6e c9       	movq   xmm1,rcx
    44b0:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
    44b7:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
    44be:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    44c2:	0f 11 85 78 fe ff ff 	movups XMMWORD PTR [rbp-0x188],xmm0
    44c9:	48 85 ff             	test   rdi,rdi
    44cc:	0f 84 82 04 00 00    	je     4954 <main+0xc64>
    44d2:	48 89 bd b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rdi
    44d9:	48 89 b5 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rsi
    44e0:	48 8b 85 b0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x350]
    44e7:	48 c7 85 b8 fc ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x348],0x0
    44f2:	c6 00 00             	mov    BYTE PTR [rax],0x0
    44f5:	48 8b bd b0 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x350]
    44fc:	48 3b bd 80 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x480]
    4503:	74 05                	je     450a <main+0x81a>
    4505:	e8 66 f3 ff ff       	call   3870 <operator delete(void*)@plt>
    450a:	48 8b b5 70 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x190]
    4511:	48 8b 95 78 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x188]
    4518:	48 8d 9d 80 fc ff ff 	lea    rbx,[rbp-0x380]
    451f:	48 8d bd 70 fc ff ff 	lea    rdi,[rbp-0x390]
    4526:	48 89 9d 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rbx
    452d:	48 01 f2             	add    rdx,rsi
    4530:	e8 1b 45 00 00       	call   8a50 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>
    4535:	4c 89 ff             	mov    rdi,r15
    4538:	e8 63 f4 ff ff       	call   39a0 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()@plt>
    453d:	48 8b 85 b0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x350]
    4544:	66 0f ef c0          	pxor   xmm0,xmm0
    4548:	4c 89 ff             	mov    rdi,r15
    454b:	f2 0f 2a 85 14 fb ff ff 	cvtsi2sd xmm0,DWORD PTR [rbp-0x4ec]
    4553:	f2 0f 5e 05 c5 03 03 00 	divsd  xmm0,QWORD PTR [rip+0x303c5]        # 34920 <Law_and_Order+0x80>
    455b:	48 8b 48 e8          	mov    rcx,QWORD PTR [rax-0x18]
    455f:	4c 01 f9             	add    rcx,r15
    4562:	83 49 18 04          	or     DWORD PTR [rcx+0x18],0x4
    4566:	48 c7 41 08 02 00 00 00 	mov    QWORD PTR [rcx+0x8],0x2
    456e:	e8 fd f4 ff ff       	call   3a70 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    4573:	48 8b 95 78 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x388]
    457a:	48 8b b5 70 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x390]
    4581:	48 8d 3d 78 da 24 00 	lea    rdi,[rip+0x24da78]        # 252000 <std::cout@@GLIBCXX_3.4>
    4588:	e8 73 f3 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    458d:	ba 02 00 00 00       	mov    edx,0x2
    4592:	48 8d 35 33 01 03 00 	lea    rsi,[rip+0x30133]        # 346cc <_IO_stdin_used+0x16cc>
    4599:	48 89 c7             	mov    rdi,rax
    459c:	49 89 c4             	mov    r12,rax
    459f:	e8 5c f3 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    45a4:	48 8d bd 90 fc ff ff 	lea    rdi,[rbp-0x370]
    45ab:	48 8d b5 b8 fc ff ff 	lea    rsi,[rbp-0x348]
    45b2:	e8 a9 f4 ff ff       	call   3a60 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    45b7:	48 8b 95 98 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x368]
    45be:	48 8b b5 90 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x370]
    45c5:	4c 89 e7             	mov    rdi,r12
    45c8:	e8 33 f3 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    45cd:	ba 01 00 00 00       	mov    edx,0x1
    45d2:	48 8d 35 04 08 03 00 	lea    rsi,[rip+0x30804]        # 34ddd <Law_and_Order+0x53d>
    45d9:	48 89 c7             	mov    rdi,rax
    45dc:	49 89 c4             	mov    r12,rax
    45df:	e8 1c f3 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    45e4:	4c 89 e7             	mov    rdi,r12
    45e7:	e8 74 f1 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    45ec:	48 8b bd 90 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x370]
    45f3:	48 8d 85 a0 fc ff ff 	lea    rax,[rbp-0x360]
    45fa:	48 39 c7             	cmp    rdi,rax
    45fd:	74 05                	je     4604 <main+0x914>
    45ff:	e8 6c f2 ff ff       	call   3870 <operator delete(void*)@plt>
    4604:	8b 85 78 fb ff ff    	mov    eax,DWORD PTR [rbp-0x488]
    460a:	85 c0                	test   eax,eax
    460c:	0f 84 1a 02 00 00    	je     482c <main+0xb3c>
    4612:	48 8d 3d e7 d9 24 00 	lea    rdi,[rip+0x24d9e7]        # 252000 <std::cout@@GLIBCXX_3.4>
    4619:	e8 42 f1 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    461e:	ba 08 00 00 00       	mov    edx,0x8
    4623:	48 8d 35 a5 00 03 00 	lea    rsi,[rip+0x300a5]        # 346cf <_IO_stdin_used+0x16cf>
    462a:	48 8d 3d cf d9 24 00 	lea    rdi,[rip+0x24d9cf]        # 252000 <std::cout@@GLIBCXX_3.4>
    4631:	e8 ca f2 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    4636:	4c 89 ef             	mov    rdi,r13
    4639:	e8 82 8a 00 00       	call   d0c0 <sizeT(TraceArrows&)>
    463e:	48 89 c6             	mov    rsi,rax
    4641:	48 8d 3d b8 d9 24 00 	lea    rdi,[rip+0x24d9b8]        # 252000 <std::cout@@GLIBCXX_3.4>
    4648:	e8 b3 f1 ff ff       	call   3800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    464d:	48 89 c7             	mov    rdi,rax
    4650:	e8 0b f1 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    4655:	ba 08 00 00 00       	mov    edx,0x8
    465a:	48 8d 35 77 00 03 00 	lea    rsi,[rip+0x30077]        # 346d8 <_IO_stdin_used+0x16d8>
    4661:	48 8d 3d 98 d9 24 00 	lea    rdi,[rip+0x24d998]        # 252000 <std::cout@@GLIBCXX_3.4>
    4668:	e8 93 f2 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    466d:	4c 89 ef             	mov    rdi,r13
    4670:	e8 6b 8a 00 00       	call   d0e0 <maxT(TraceArrows&)>
    4675:	48 89 c6             	mov    rsi,rax
    4678:	48 8d 3d 81 d9 24 00 	lea    rdi,[rip+0x24d981]        # 252000 <std::cout@@GLIBCXX_3.4>
    467f:	e8 7c f1 ff ff       	call   3800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    4684:	48 89 c7             	mov    rdi,rax
    4687:	e8 d4 f0 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    468c:	ba 07 00 00 00       	mov    edx,0x7
    4691:	48 8d 35 49 00 03 00 	lea    rsi,[rip+0x30049]        # 346e1 <_IO_stdin_used+0x16e1>
    4698:	48 8d 3d 61 d9 24 00 	lea    rdi,[rip+0x24d961]        # 252000 <std::cout@@GLIBCXX_3.4>
    469f:	e8 5c f2 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    46a4:	4c 89 ef             	mov    rdi,r13
    46a7:	e8 24 8a 00 00       	call   d0d0 <avoidedT(TraceArrows&)>
    46ac:	48 89 c6             	mov    rsi,rax
    46af:	48 8d 3d 4a d9 24 00 	lea    rdi,[rip+0x24d94a]        # 252000 <std::cout@@GLIBCXX_3.4>
    46b6:	e8 45 f1 ff ff       	call   3800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    46bb:	48 89 c7             	mov    rdi,rax
    46be:	e8 9d f0 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    46c3:	ba 07 00 00 00       	mov    edx,0x7
    46c8:	48 8d 35 1a 00 03 00 	lea    rsi,[rip+0x3001a]        # 346e9 <_IO_stdin_used+0x16e9>
    46cf:	48 8d 3d 2a d9 24 00 	lea    rdi,[rip+0x24d92a]        # 252000 <std::cout@@GLIBCXX_3.4>
    46d6:	e8 25 f2 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    46db:	4c 89 ef             	mov    rdi,r13
    46de:	e8 cd 89 00 00       	call   d0b0 <erasedT(TraceArrows&)>
    46e3:	48 89 c6             	mov    rsi,rax
    46e6:	48 8d 3d 13 d9 24 00 	lea    rdi,[rip+0x24d913]        # 252000 <std::cout@@GLIBCXX_3.4>
    46ed:	e8 0e f1 ff ff       	call   3800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    46f2:	48 89 c7             	mov    rdi,rax
    46f5:	e8 66 f0 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    46fa:	48 8d 3d ff d8 24 00 	lea    rdi,[rip+0x24d8ff]        # 252000 <std::cout@@GLIBCXX_3.4>
    4701:	e8 5a f0 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    4706:	ba 09 00 00 00       	mov    edx,0x9
    470b:	48 8d 35 df ff 02 00 	lea    rsi,[rip+0x2ffdf]        # 346f1 <_IO_stdin_used+0x16f1>
    4712:	48 8d 3d e7 d8 24 00 	lea    rdi,[rip+0x24d8e7]        # 252000 <std::cout@@GLIBCXX_3.4>
    4719:	e8 e2 f1 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    471e:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
    4722:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
    4726:	31 f6                	xor    esi,esi
    4728:	48 39 ca             	cmp    rdx,rcx
    472b:	74 19                	je     4746 <main+0xa56>
    472d:	0f 1f 00             	nop    DWORD PTR [rax]
    4730:	48 8b 42 08          	mov    rax,QWORD PTR [rdx+0x8]
    4734:	48 2b 02             	sub    rax,QWORD PTR [rdx]
    4737:	48 83 c2 18          	add    rdx,0x18
    473b:	48 c1 f8 04          	sar    rax,0x4
    473f:	01 c6                	add    esi,eax
    4741:	48 39 d1             	cmp    rcx,rdx
    4744:	75 ea                	jne    4730 <main+0xa40>
    4746:	48 8d 3d b3 d8 24 00 	lea    rdi,[rip+0x24d8b3]        # 252000 <std::cout@@GLIBCXX_3.4>
    474d:	e8 7e f3 ff ff       	call   3ad0 <std::ostream::operator<<(int)@plt>
    4752:	48 89 c7             	mov    rdi,rax
    4755:	e8 06 f0 ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    475a:	ba 09 00 00 00       	mov    edx,0x9
    475f:	48 8d 35 95 ff 02 00 	lea    rsi,[rip+0x2ff95]        # 346fb <_IO_stdin_used+0x16fb>
    4766:	48 8d 3d 93 d8 24 00 	lea    rdi,[rip+0x24d893]        # 252000 <std::cout@@GLIBCXX_3.4>
    476d:	e8 8e f1 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    4772:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
    4776:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
    477a:	48 39 ca             	cmp    rdx,rcx
    477d:	74 25                	je     47a4 <main+0xab4>
    477f:	8b b5 7c fb ff ff    	mov    esi,DWORD PTR [rbp-0x484]
    4785:	0f 1f 00             	nop    DWORD PTR [rax]
    4788:	48 8b 42 10          	mov    rax,QWORD PTR [rdx+0x10]
    478c:	48 2b 02             	sub    rax,QWORD PTR [rdx]
    478f:	48 83 c2 18          	add    rdx,0x18
    4793:	48 c1 f8 04          	sar    rax,0x4
    4797:	01 c6                	add    esi,eax
    4799:	48 39 d1             	cmp    rcx,rdx
    479c:	75 ea                	jne    4788 <main+0xa98>
    479e:	89 b5 7c fb ff ff    	mov    DWORD PTR [rbp-0x484],esi
    47a4:	8b b5 7c fb ff ff    	mov    esi,DWORD PTR [rbp-0x484]
    47aa:	48 8d 3d 4f d8 24 00 	lea    rdi,[rip+0x24d84f]        # 252000 <std::cout@@GLIBCXX_3.4>
    47b1:	e8 1a f3 ff ff       	call   3ad0 <std::ostream::operator<<(int)@plt>
    47b6:	48 89 c7             	mov    rdi,rax
    47b9:	e8 a2 ef ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    47be:	ba 09 00 00 00       	mov    edx,0x9
    47c3:	48 8d 35 3b ff 02 00 	lea    rsi,[rip+0x2ff3b]        # 34705 <_IO_stdin_used+0x1705>
    47ca:	48 8d 3d 2f d8 24 00 	lea    rdi,[rip+0x24d82f]        # 252000 <std::cout@@GLIBCXX_3.4>
    47d1:	e8 2a f1 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    47d6:	4c 89 ef             	mov    rdi,r13
    47d9:	e8 e2 88 00 00       	call   d0c0 <sizeT(TraceArrows&)>
    47de:	48 89 c6             	mov    rsi,rax
    47e1:	48 8d 3d 18 d8 24 00 	lea    rdi,[rip+0x24d818]        # 252000 <std::cout@@GLIBCXX_3.4>
    47e8:	e8 13 f0 ff ff       	call   3800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    47ed:	48 89 c7             	mov    rdi,rax
    47f0:	e8 6b ef ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    47f5:	ba 09 00 00 00       	mov    edx,0x9
    47fa:	48 8d 35 0e ff 02 00 	lea    rsi,[rip+0x2ff0e]        # 3470f <_IO_stdin_used+0x170f>
    4801:	48 8d 3d f8 d7 24 00 	lea    rdi,[rip+0x24d7f8]        # 252000 <std::cout@@GLIBCXX_3.4>
    4808:	e8 f3 f0 ff ff       	call   3900 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    480d:	4c 89 ef             	mov    rdi,r13
    4810:	e8 5b 88 00 00       	call   d070 <capacityT(TraceArrows&)>
    4815:	48 89 c6             	mov    rsi,rax
    4818:	48 8d 3d e1 d7 24 00 	lea    rdi,[rip+0x24d7e1]        # 252000 <std::cout@@GLIBCXX_3.4>
    481f:	e8 dc ef ff ff       	call   3800 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    4824:	48 89 c7             	mov    rdi,rax
    4827:	e8 34 ef ff ff       	call   3760 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    482c:	4c 89 ff             	mov    rdi,r15
    482f:	e8 3c ee ff ff       	call   3670 <std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@plt>
    4834:	48 8b bd 70 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x390]
    483b:	48 39 df             	cmp    rdi,rbx
    483e:	74 05                	je     4845 <main+0xb55>
    4840:	e8 2b f0 ff ff       	call   3870 <operator delete(void*)@plt>
    4845:	4c 89 f7             	mov    rdi,r14
    4848:	e8 33 0c 00 00       	call   5480 <SparseMFEFold::~SparseMFEFold()>
    484d:	48 8b bd 50 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3b0]
    4854:	48 3b bd 48 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x4b8]
    485b:	74 05                	je     4862 <main+0xb72>
    485d:	e8 0e f0 ff ff       	call   3870 <operator delete(void*)@plt>
    4862:	48 8b bd 30 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3d0]
    4869:	48 3b bd 70 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x490]
    4870:	74 05                	je     4877 <main+0xb87>
    4872:	e8 f9 ef ff ff       	call   3870 <operator delete(void*)@plt>
    4877:	48 8b bd 10 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3f0]
    487e:	48 3b bd 60 fb ff ff 	cmp    rdi,QWORD PTR [rbp-0x4a0]
    4885:	74 05                	je     488c <main+0xb9c>
    4887:	e8 e4 ef ff ff       	call   3870 <operator delete(void*)@plt>
    488c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    4890:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    4899:	0f 85 f9 01 00 00    	jne    4a98 <main+0xda8>
    489f:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
    48a3:	31 c0                	xor    eax,eax
    48a5:	5b                   	pop    rbx
    48a6:	41 5c                	pop    r12
    48a8:	41 5d                	pop    r13
    48aa:	41 5e                	pop    r14
    48ac:	41 5f                	pop    r15
    48ae:	5d                   	pop    rbp
    48af:	c3                   	ret    
    48b0:	4d 85 e4             	test   r12,r12
    48b3:	0f 84 9b fb ff ff    	je     4454 <main+0x764>
    48b9:	48 8b bd 80 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x480]
    48c0:	48 8d 73 01          	lea    rsi,[rbx+0x1]
    48c4:	4c 89 e2             	mov    rdx,r12
    48c7:	e8 64 ef ff ff       	call   3830 <memcpy@plt>
    48cc:	e9 83 fb ff ff       	jmp    4454 <main+0x764>
    48d1:	48 8d b5 98 fb ff ff 	lea    rsi,[rbp-0x468]
    48d8:	31 d2                	xor    edx,edx
    48da:	4c 89 ff             	mov    rdi,r15
    48dd:	e8 5e f2 ff ff       	call   3b40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    48e2:	48 89 85 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rax
    48e9:	48 89 c7             	mov    rdi,rax
    48ec:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
    48f3:	48 89 85 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rax
    48fa:	eb c4                	jmp    48c0 <main+0xbd0>
    48fc:	48 8b 95 b8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x348]
    4903:	48 85 d2             	test   rdx,rdx
    4906:	74 20                	je     4928 <main+0xc38>
    4908:	48 83 fa 01          	cmp    rdx,0x1
    490c:	74 59                	je     4967 <main+0xc77>
    490e:	48 8b b5 80 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x480]
    4915:	e8 16 ef ff ff       	call   3830 <memcpy@plt>
    491a:	48 8b bd 70 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x190]
    4921:	48 8b 95 b8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x348]
    4928:	48 89 95 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rdx
    492f:	c6 04 17 00          	mov    BYTE PTR [rdi+rdx*1],0x0
    4933:	e9 a8 fb ff ff       	jmp    44e0 <main+0x7f0>
    4938:	66 48 0f 6e c0       	movq   xmm0,rax
    493d:	66 48 0f 6e d1       	movq   xmm2,rcx
    4942:	48 89 95 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rdx
    4949:	66 0f 6c c2          	punpcklqdq xmm0,xmm2
    494d:	0f 11 85 78 fe ff ff 	movups XMMWORD PTR [rbp-0x188],xmm0
    4954:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
    495b:	48 89 85 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rax
    4962:	e9 79 fb ff ff       	jmp    44e0 <main+0x7f0>
    4967:	0f b6 85 c0 fc ff ff 	movzx  eax,BYTE PTR [rbp-0x340]
    496e:	88 07                	mov    BYTE PTR [rdi],al
    4970:	48 8b bd 70 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x190]
    4977:	48 8b 95 b8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x348]
    497e:	eb a8                	jmp    4928 <main+0xc38>
    4980:	25 ff 0f 00 00       	and    eax,0xfff
    4985:	48 29 c4             	sub    rsp,rax
    4988:	48 85 c0             	test   rax,rax
    498b:	74 06                	je     4993 <main+0xca3>
    498d:	48 83 4c 04 f8 00    	or     QWORD PTR [rsp+rax*1-0x8],0x0
    4993:	48 8d 54 24 03       	lea    rdx,[rsp+0x3]
    4998:	48 89 e3             	mov    rbx,rsp
    499b:	48 89 d0             	mov    rax,rdx
    499e:	48 83 e2 fc          	and    rdx,0xfffffffffffffffc
    49a2:	48 89 95 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],rdx
    49a9:	4c 89 e2             	mov    rdx,r12
    49ac:	48 c1 e8 02          	shr    rax,0x2
    49b0:	48 81 e2 00 f0 ff ff 	and    rdx,0xfffffffffffff000
    49b7:	c7 04 85 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rax*4+0x0],0x0
    49c2:	4c 89 e0             	mov    rax,r12
    49c5:	48 29 d3             	sub    rbx,rdx
    49c8:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    49cc:	48 89 da             	mov    rdx,rbx
    49cf:	48 39 d4             	cmp    rsp,rdx
    49d2:	74 12                	je     49e6 <main+0xcf6>
    49d4:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    49db:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    49e4:	eb e9                	jmp    49cf <main+0xcdf>
    49e6:	25 ff 0f 00 00       	and    eax,0xfff
    49eb:	48 29 c4             	sub    rsp,rax
    49ee:	48 85 c0             	test   rax,rax
    49f1:	74 06                	je     49f9 <main+0xd09>
    49f3:	48 83 4c 04 f8 00    	or     QWORD PTR [rsp+rax*1-0x8],0x0
    49f9:	48 8d 5c 24 03       	lea    rbx,[rsp+0x3]
    49fe:	48 89 e2             	mov    rdx,rsp
    4a01:	48 89 d8             	mov    rax,rbx
    4a04:	48 83 e3 fc          	and    rbx,0xfffffffffffffffc
    4a08:	48 c1 e8 02          	shr    rax,0x2
    4a0c:	c7 04 85 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rax*4+0x0],0x0
    4a17:	4c 89 e0             	mov    rax,r12
    4a1a:	49 81 e4 00 f0 ff ff 	and    r12,0xfffffffffffff000
    4a21:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    4a25:	4c 29 e2             	sub    rdx,r12
    4a28:	48 39 d4             	cmp    rsp,rdx
    4a2b:	74 12                	je     4a3f <main+0xd4f>
    4a2d:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
    4a34:	48 83 8c 24 f8 0f 00 00 00 	or     QWORD PTR [rsp+0xff8],0x0
    4a3d:	eb e9                	jmp    4a28 <main+0xd38>
    4a3f:	25 ff 0f 00 00       	and    eax,0xfff
    4a44:	48 29 c4             	sub    rsp,rax
    4a47:	48 85 c0             	test   rax,rax
    4a4a:	74 06                	je     4a52 <main+0xd62>
    4a4c:	48 83 4c 04 f8 00    	or     QWORD PTR [rsp+rax*1-0x8],0x0
    4a52:	4c 8d 64 24 03       	lea    r12,[rsp+0x3]
    4a57:	4c 89 e0             	mov    rax,r12
    4a5a:	49 83 e4 fc          	and    r12,0xfffffffffffffffc
    4a5e:	48 c1 e8 02          	shr    rax,0x2
    4a62:	c7 04 85 00 00 00 00 00 00 00 00 	mov    DWORD PTR [rax*4+0x0],0x0
    4a6d:	e9 8d f7 ff ff       	jmp    41ff <main+0x50f>
    4a72:	bf 01 00 00 00       	mov    edi,0x1
    4a77:	e8 d4 ee ff ff       	call   3950 <exit@plt>
    4a7c:	31 c9                	xor    ecx,ecx
    4a7e:	ba 01 00 00 00       	mov    edx,0x1
    4a83:	48 8d 35 2d fc 02 00 	lea    rsi,[rip+0x2fc2d]        # 346b7 <_IO_stdin_used+0x16b7>
    4a8a:	31 c0                	xor    eax,eax
    4a8c:	48 8d 3d c5 fc 02 00 	lea    rdi,[rip+0x2fcc5]        # 34758 <_IO_stdin_used+0x1758>
    4a93:	e8 78 ef ff ff       	call   3a10 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
    4a98:	e8 53 ee ff ff       	call   38f0 <__stack_chk_fail@plt>
    4a9d:	f3 0f 1e fa          	endbr64 
    4aa1:	48 89 c3             	mov    rbx,rax
    4aa4:	e9 58 f1 ff ff       	jmp    3c01 <main.cold+0x34>
    4aa9:	f3 0f 1e fa          	endbr64 
    4aad:	49 89 c4             	mov    r12,rax
    4ab0:	e9 38 f1 ff ff       	jmp    3bed <main.cold+0x20>
    4ab5:	f3 0f 1e fa          	endbr64 
    4ab9:	48 89 c3             	mov    rbx,rax
    4abc:	e9 5d f1 ff ff       	jmp    3c1e <main.cold+0x51>
    4ac1:	f3 0f 1e fa          	endbr64 
    4ac5:	48 89 c3             	mov    rbx,rax
    4ac8:	e9 86 f1 ff ff       	jmp    3c53 <main.cold+0x86>
    4acd:	f3 0f 1e fa          	endbr64 
    4ad1:	49 89 c4             	mov    r12,rax
    4ad4:	e9 f4 f0 ff ff       	jmp    3bcd <main.cold>
    4ad9:	f3 0f 1e fa          	endbr64 
    4add:	48 89 c3             	mov    rbx,rax
    4ae0:	e9 24 f1 ff ff       	jmp    3c09 <main.cold+0x3c>
    4ae5:	f3 0f 1e fa          	endbr64 
    4ae9:	49 89 c4             	mov    r12,rax
    4aec:	e9 f4 f0 ff ff       	jmp    3be5 <main.cold+0x18>
    4af1:	f3 0f 1e fa          	endbr64 
    4af5:	49 89 c4             	mov    r12,rax
    4af8:	e9 39 f1 ff ff       	jmp    3c36 <main.cold+0x69>
    4afd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000004b00 <_GLOBAL__sub_I__Z20evaluate_restrictioniiPKiS0_>:
    4b00:	f3 0f 1e fa          	endbr64 
    4b04:	48 83 ec 08          	sub    rsp,0x8
    4b08:	48 8d 3d db de 24 00 	lea    rdi,[rip+0x24dedb]        # 2529ea <std::__ioinit>
    4b0f:	e8 0c ef ff ff       	call   3a20 <std::ios_base::Init::Init()@plt>
    4b14:	48 8b 3d dd 84 1e 00 	mov    rdi,QWORD PTR [rip+0x1e84dd]        # 1ecff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    4b1b:	48 83 c4 08          	add    rsp,0x8
    4b1f:	48 8d 15 e2 84 1e 00 	lea    rdx,[rip+0x1e84e2]        # 1ed008 <__dso_handle>
    4b26:	48 8d 35 bd de 24 00 	lea    rsi,[rip+0x24debd]        # 2529ea <std::__ioinit>
    4b2d:	e9 0e ed ff ff       	jmp    3840 <__cxa_atexit@plt>
    4b32:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    4b3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004b40 <_GLOBAL__sub_I__ZN11TraceArrowsC2Em>:
    4b40:	f3 0f 1e fa          	endbr64 
    4b44:	48 83 ec 08          	sub    rsp,0x8
    4b48:	48 8d 3d 9c de 24 00 	lea    rdi,[rip+0x24de9c]        # 2529eb <std::__ioinit>
    4b4f:	e8 cc ee ff ff       	call   3a20 <std::ios_base::Init::Init()@plt>
    4b54:	48 8b 3d 9d 84 1e 00 	mov    rdi,QWORD PTR [rip+0x1e849d]        # 1ecff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    4b5b:	48 83 c4 08          	add    rsp,0x8
    4b5f:	48 8d 15 a2 84 1e 00 	lea    rdx,[rip+0x1e84a2]        # 1ed008 <__dso_handle>
    4b66:	48 8d 35 7e de 24 00 	lea    rsi,[rip+0x24de7e]        # 2529eb <std::__ioinit>
    4b6d:	e9 ce ec ff ff       	jmp    3840 <__cxa_atexit@plt>
    4b72:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    4b7c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004b80 <_start>:
    4b80:	f3 0f 1e fa          	endbr64 
    4b84:	31 ed                	xor    ebp,ebp
    4b86:	49 89 d1             	mov    r9,rdx
    4b89:	5e                   	pop    rsi
    4b8a:	48 89 e2             	mov    rdx,rsp
    4b8d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    4b91:	50                   	push   rax
    4b92:	54                   	push   rsp
    4b93:	4c 8d 05 a6 e3 02 00 	lea    r8,[rip+0x2e3a6]        # 32f40 <__libc_csu_fini>
    4b9a:	48 8d 0d 2f e3 02 00 	lea    rcx,[rip+0x2e32f]        # 32ed0 <__libc_csu_init>
    4ba1:	48 8d 3d 48 f1 ff ff 	lea    rdi,[rip+0xfffffffffffff148]        # 3cf0 <main>
    4ba8:	ff 15 32 84 1e 00    	call   QWORD PTR [rip+0x1e8432]        # 1ecfe0 <__libc_start_main@GLIBC_2.2.5>
    4bae:	f4                   	hlt    
    4baf:	90                   	nop

0000000000004bb0 <deregister_tm_clones>:
    4bb0:	48 8d 3d f1 d3 24 00 	lea    rdi,[rip+0x24d3f1]        # 251fa8 <__TMC_END__>
    4bb7:	48 8d 05 ea d3 24 00 	lea    rax,[rip+0x24d3ea]        # 251fa8 <__TMC_END__>
    4bbe:	48 39 f8             	cmp    rax,rdi
    4bc1:	74 15                	je     4bd8 <deregister_tm_clones+0x28>
    4bc3:	48 8b 05 0e 84 1e 00 	mov    rax,QWORD PTR [rip+0x1e840e]        # 1ecfd8 <_ITM_deregisterTMCloneTable>
    4bca:	48 85 c0             	test   rax,rax
    4bcd:	74 09                	je     4bd8 <deregister_tm_clones+0x28>
    4bcf:	ff e0                	jmp    rax
    4bd1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    4bd8:	c3                   	ret    
    4bd9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004be0 <register_tm_clones>:
    4be0:	48 8d 3d c1 d3 24 00 	lea    rdi,[rip+0x24d3c1]        # 251fa8 <__TMC_END__>
    4be7:	48 8d 35 ba d3 24 00 	lea    rsi,[rip+0x24d3ba]        # 251fa8 <__TMC_END__>
    4bee:	48 29 fe             	sub    rsi,rdi
    4bf1:	48 89 f0             	mov    rax,rsi
    4bf4:	48 c1 ee 3f          	shr    rsi,0x3f
    4bf8:	48 c1 f8 03          	sar    rax,0x3
    4bfc:	48 01 c6             	add    rsi,rax
    4bff:	48 d1 fe             	sar    rsi,1
    4c02:	74 14                	je     4c18 <register_tm_clones+0x38>
    4c04:	48 8b 05 e5 83 1e 00 	mov    rax,QWORD PTR [rip+0x1e83e5]        # 1ecff0 <_ITM_registerTMCloneTable>
    4c0b:	48 85 c0             	test   rax,rax
    4c0e:	74 08                	je     4c18 <register_tm_clones+0x38>
    4c10:	ff e0                	jmp    rax
    4c12:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4c18:	c3                   	ret    
    4c19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004c20 <__do_global_dtors_aux>:
    4c20:	f3 0f 1e fa          	endbr64 
    4c24:	80 3d 2d d6 24 00 00 	cmp    BYTE PTR [rip+0x24d62d],0x0        # 252258 <completed.8061>
    4c2b:	75 2b                	jne    4c58 <__do_global_dtors_aux+0x38>
    4c2d:	55                   	push   rbp
    4c2e:	48 83 3d 92 83 1e 00 00 	cmp    QWORD PTR [rip+0x1e8392],0x0        # 1ecfc8 <__cxa_finalize@GLIBC_2.2.5>
    4c36:	48 89 e5             	mov    rbp,rsp
    4c39:	74 0c                	je     4c47 <__do_global_dtors_aux+0x27>
    4c3b:	48 8b 3d c6 83 1e 00 	mov    rdi,QWORD PTR [rip+0x1e83c6]        # 1ed008 <__dso_handle>
    4c42:	e8 99 e9 ff ff       	call   35e0 <__cxa_finalize@plt>
    4c47:	e8 64 ff ff ff       	call   4bb0 <deregister_tm_clones>
    4c4c:	c6 05 05 d6 24 00 01 	mov    BYTE PTR [rip+0x24d605],0x1        # 252258 <completed.8061>
    4c53:	5d                   	pop    rbp
    4c54:	c3                   	ret    
    4c55:	0f 1f 00             	nop    DWORD PTR [rax]
    4c58:	c3                   	ret    
    4c59:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004c60 <frame_dummy>:
    4c60:	f3 0f 1e fa          	endbr64 
    4c64:	e9 77 ff ff ff       	jmp    4be0 <register_tm_clones>
    4c69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004c70 <cmdline_parser_release(args_info*)>:
    4c70:	55                   	push   rbp
    4c71:	48 89 fd             	mov    rbp,rdi
    4c74:	53                   	push   rbx
    4c75:	48 83 ec 08          	sub    rsp,0x8
    4c79:	8b 47 68             	mov    eax,DWORD PTR [rdi+0x68]
    4c7c:	85 c0                	test   eax,eax
    4c7e:	74 2e                	je     4cae <cmdline_parser_release(args_info*)+0x3e>
    4c80:	31 db                	xor    ebx,ebx
    4c82:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4c88:	48 8b 45 60          	mov    rax,QWORD PTR [rbp+0x60]
    4c8c:	89 da                	mov    edx,ebx
    4c8e:	83 c3 01             	add    ebx,0x1
    4c91:	48 8b 3c d0          	mov    rdi,QWORD PTR [rax+rdx*8]
    4c95:	e8 a6 ec ff ff       	call   3940 <free@plt>
    4c9a:	8b 45 68             	mov    eax,DWORD PTR [rbp+0x68]
    4c9d:	39 d8                	cmp    eax,ebx
    4c9f:	77 e7                	ja     4c88 <cmdline_parser_release(args_info*)+0x18>
    4ca1:	85 c0                	test   eax,eax
    4ca3:	74 09                	je     4cae <cmdline_parser_release(args_info*)+0x3e>
    4ca5:	48 8b 7d 60          	mov    rdi,QWORD PTR [rbp+0x60]
    4ca9:	e8 92 ec ff ff       	call   3940 <free@plt>
    4cae:	66 0f ef c0          	pxor   xmm0,xmm0
    4cb2:	0f 11 45 40          	movups XMMWORD PTR [rbp+0x40],xmm0
    4cb6:	0f 11 45 50          	movups XMMWORD PTR [rbp+0x50],xmm0
    4cba:	48 83 c4 08          	add    rsp,0x8
    4cbe:	5b                   	pop    rbx
    4cbf:	5d                   	pop    rbp
    4cc0:	c3                   	ret    
    4cc1:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4ccc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004cd0 <cmdline_parser_print_version()>:
    4cd0:	f3 0f 1e fa          	endbr64 
    4cd4:	48 83 ec 08          	sub    rsp,0x8
    4cd8:	48 8b 15 c1 d5 24 00 	mov    rdx,QWORD PTR [rip+0x24d5c1]        # 2522a0 <package_name>
    4cdf:	bf 01 00 00 00       	mov    edi,0x1
    4ce4:	48 8d 05 19 e3 02 00 	lea    rax,[rip+0x2e319]        # 33004 <_IO_stdin_used+0x4>
    4ceb:	48 8d 35 20 e3 02 00 	lea    rsi,[rip+0x2e320]        # 33012 <_IO_stdin_used+0x12>
    4cf2:	80 3a 00             	cmp    BYTE PTR [rdx],0x0
    4cf5:	48 0f 44 d0          	cmove  rdx,rax
    4cf9:	31 c0                	xor    eax,eax
    4cfb:	e8 f0 e8 ff ff       	call   35f0 <__printf_chk@plt>
    4d00:	48 8b 15 89 84 1e 00 	mov    rdx,QWORD PTR [rip+0x1e8489]        # 1ed190 <args_info_versiontext>
    4d07:	80 3a 00             	cmp    BYTE PTR [rdx],0x0
    4d0a:	75 0c                	jne    4d18 <cmdline_parser_print_version()+0x48>
    4d0c:	48 83 c4 08          	add    rsp,0x8
    4d10:	c3                   	ret    
    4d11:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    4d18:	48 8d 35 f8 e2 02 00 	lea    rsi,[rip+0x2e2f8]        # 33017 <_IO_stdin_used+0x17>
    4d1f:	bf 01 00 00 00       	mov    edi,0x1
    4d24:	31 c0                	xor    eax,eax
    4d26:	48 83 c4 08          	add    rsp,0x8
    4d2a:	e9 c1 e8 ff ff       	jmp    35f0 <__printf_chk@plt>
    4d2f:	90                   	nop

0000000000004d30 <cmdline_parser_print_help()>:
    4d30:	f3 0f 1e fa          	endbr64 
    4d34:	41 54                	push   r12
    4d36:	55                   	push   rbp
    4d37:	48 8b 2d 62 84 1e 00 	mov    rbp,QWORD PTR [rip+0x1e8462]        # 1ed1a0 <args_info_purpose>
    4d3e:	53                   	push   rbx
    4d3f:	48 89 ef             	mov    rdi,rbp
    4d42:	e8 d9 e9 ff ff       	call   3720 <strlen@plt>
    4d47:	4c 8b 25 4a 84 1e 00 	mov    r12,QWORD PTR [rip+0x1e844a]        # 1ed198 <args_info_usage>
    4d4e:	48 89 c3             	mov    rbx,rax
    4d51:	4c 89 e7             	mov    rdi,r12
    4d54:	e8 c7 e9 ff ff       	call   3720 <strlen@plt>
    4d59:	48 85 c0             	test   rax,rax
    4d5c:	75 42                	jne    4da0 <cmdline_parser_print_help()+0x70>
    4d5e:	48 85 db             	test   rbx,rbx
    4d61:	75 51                	jne    4db4 <cmdline_parser_print_help()+0x84>
    4d63:	48 8b 15 1e 84 1e 00 	mov    rdx,QWORD PTR [rip+0x1e841e]        # 1ed188 <args_info_description>
    4d6a:	80 3a 00             	cmp    BYTE PTR [rdx],0x0
    4d6d:	75 63                	jne    4dd2 <cmdline_parser_print_help()+0xa2>
    4d6f:	48 8b 3d ca 83 1e 00 	mov    rdi,QWORD PTR [rip+0x1e83ca]        # 1ed140 <args_info_help>
    4d76:	48 85 ff             	test   rdi,rdi
    4d79:	74 1e                	je     4d99 <cmdline_parser_print_help()+0x69>
    4d7b:	48 8d 1d c6 83 1e 00 	lea    rbx,[rip+0x1e83c6]        # 1ed148 <args_info_help+0x8>
    4d82:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    4d88:	e8 a3 ec ff ff       	call   3a30 <puts@plt>
    4d8d:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    4d90:	48 83 c3 08          	add    rbx,0x8
    4d94:	48 85 ff             	test   rdi,rdi
    4d97:	75 ef                	jne    4d88 <cmdline_parser_print_help()+0x58>
    4d99:	5b                   	pop    rbx
    4d9a:	5d                   	pop    rbp
    4d9b:	41 5c                	pop    r12
    4d9d:	c3                   	ret    
    4d9e:	66 90                	xchg   ax,ax
    4da0:	4c 89 e7             	mov    rdi,r12
    4da3:	e8 88 ec ff ff       	call   3a30 <puts@plt>
    4da8:	48 85 db             	test   rbx,rbx
    4dab:	74 0f                	je     4dbc <cmdline_parser_print_help()+0x8c>
    4dad:	48 8b 2d ec 83 1e 00 	mov    rbp,QWORD PTR [rip+0x1e83ec]        # 1ed1a0 <args_info_purpose>
    4db4:	48 89 ef             	mov    rdi,rbp
    4db7:	e8 74 ec ff ff       	call   3a30 <puts@plt>
    4dbc:	bf 0a 00 00 00       	mov    edi,0xa
    4dc1:	e8 ea eb ff ff       	call   39b0 <putchar@plt>
    4dc6:	48 8b 15 bb 83 1e 00 	mov    rdx,QWORD PTR [rip+0x1e83bb]        # 1ed188 <args_info_description>
    4dcd:	80 3a 00             	cmp    BYTE PTR [rdx],0x0
    4dd0:	74 9d                	je     4d6f <cmdline_parser_print_help()+0x3f>
    4dd2:	48 8d 35 43 e2 02 00 	lea    rsi,[rip+0x2e243]        # 3301c <_IO_stdin_used+0x1c>
    4dd9:	bf 01 00 00 00       	mov    edi,0x1
    4dde:	31 c0                	xor    eax,eax
    4de0:	e8 0b e8 ff ff       	call   35f0 <__printf_chk@plt>
    4de5:	eb 88                	jmp    4d6f <cmdline_parser_print_help()+0x3f>
    4de7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]

0000000000004df0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]>:
    4df0:	41 57                	push   r15
    4df2:	66 0f ef c0          	pxor   xmm0,xmm0
    4df6:	49 89 f7             	mov    r15,rsi
    4df9:	41 56                	push   r14
    4dfb:	45 31 f6             	xor    r14d,r14d
    4dfe:	41 55                	push   r13
    4e00:	49 89 d5             	mov    r13,rdx
    4e03:	41 54                	push   r12
    4e05:	55                   	push   rbp
    4e06:	48 8d 2d 77 e7 02 00 	lea    rbp,[rip+0x2e777]        # 33584 <_IO_stdin_used+0x584>
    4e0d:	53                   	push   rbx
    4e0e:	89 fb                	mov    ebx,edi
    4e10:	48 83 ec 38          	sub    rsp,0x38
    4e14:	66 0f 6f 1d 24 83 1e 00 	movdqa xmm3,XMMWORD PTR [rip+0x1e8324]        # 1ed140 <args_info_help>
    4e1c:	66 0f 6f 0d 3c 83 1e 00 	movdqa xmm1,XMMWORD PTR [rip+0x1e833c]        # 1ed160 <args_info_help+0x20>
    4e24:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    4e2d:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    4e32:	31 c0                	xor    eax,eax
    4e34:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    4e37:	0f 11 42 40          	movups XMMWORD PTR [rdx+0x40],xmm0
    4e3b:	66 0f 6f 15 0d 83 1e 00 	movdqa xmm2,XMMWORD PTR [rip+0x1e830d]        # 1ed150 <args_info_help+0x10>
    4e43:	0f 11 42 50          	movups XMMWORD PTR [rdx+0x50],xmm0
    4e47:	66 0f 6f 05 21 83 1e 00 	movdqa xmm0,XMMWORD PTR [rip+0x1e8321]        # 1ed170 <args_info_help+0x30>
    4e4f:	4c 8d 64 24 24       	lea    r12,[rsp+0x24]
    4e54:	0f 11 1a             	movups XMMWORD PTR [rdx],xmm3
    4e57:	48 89 05 42 d4 24 00 	mov    QWORD PTR [rip+0x24d442],rax        # 2522a0 <package_name>
    4e5e:	48 c7 42 60 00 00 00 00 	mov    QWORD PTR [rdx+0x60],0x0
    4e66:	c7 42 68 00 00 00 00 	mov    DWORD PTR [rdx+0x68],0x0
    4e6d:	48 c7 05 50 d1 24 00 00 00 00 00 	mov    QWORD PTR [rip+0x24d150],0x0        # 251fc8 <optarg@@GLIBC_2.2.5>
    4e78:	c7 05 a6 d2 24 00 00 00 00 00 	mov    DWORD PTR [rip+0x24d2a6],0x0        # 252128 <optind@@GLIBC_2.2.5>
    4e82:	c7 05 4c d1 24 00 3f 00 00 00 	mov    DWORD PTR [rip+0x24d14c],0x3f        # 251fd8 <optopt@@GLIBC_2.2.5>
    4e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [rsp+0x14],0x0
    4e94:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [rsp+0x10],0x0
    4e9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [rsp+0xc],0x0
    4ea4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [rsp+0x4],0x0
    4eac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [rsp+0x8],0x0
    4eb4:	0f 11 52 10          	movups XMMWORD PTR [rdx+0x10],xmm2
    4eb8:	0f 11 4a 20          	movups XMMWORD PTR [rdx+0x20],xmm1
    4ebc:	0f 11 42 30          	movups XMMWORD PTR [rdx+0x30],xmm0
    4ec0:	4d 89 e0             	mov    r8,r12
    4ec3:	48 8d 0d 56 81 1e 00 	lea    rcx,[rip+0x1e8156]        # 1ed020 <cmdline_parser_internal(int, char**, args_info*, char const*)::long_options>
    4eca:	4c 89 fe             	mov    rsi,r15
    4ecd:	89 df                	mov    edi,ebx
    4ecf:	48 8d 15 4b e1 02 00 	lea    rdx,[rip+0x2e14b]        # 33021 <_IO_stdin_used+0x21>
    4ed6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [rsp+0x24],0x0
    4ede:	e8 dd eb ff ff       	call   3ac0 <getopt_long@plt>
    4ee3:	41 89 c0             	mov    r8d,eax
    4ee6:	83 f8 ff             	cmp    eax,0xffffffff
    4ee9:	0f 84 11 03 00 00    	je     5200 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x410>
    4eef:	85 c0                	test   eax,eax
    4ef1:	0f 84 d9 01 00 00    	je     50d0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x2e0>
    4ef7:	8d 40 c1             	lea    eax,[rax-0x3f]
    4efa:	83 f8 37             	cmp    eax,0x37
    4efd:	0f 87 9d ec ff ff    	ja     3ba0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0] [clone .cold]>
    4f03:	48 63 44 85 00       	movsxd rax,DWORD PTR [rbp+rax*4+0x0]
    4f08:	48 01 e8             	add    rax,rbp
    4f0b:	3e ff e0             	notrack jmp rax
    4f0e:	44 8b 5c 24 0c       	mov    r11d,DWORD PTR [rsp+0xc]
    4f13:	45 85 db             	test   r11d,r11d
    4f16:	0f 84 14 02 00 00    	je     5130 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x340>
    4f1c:	48 83 ec 08          	sub    rsp,0x8
    4f20:	48 8d 05 c9 f7 02 00 	lea    rax,[rip+0x2f7c9]        # 346f0 <_IO_stdin_used+0x16f0>
    4f27:	41 b9 72 00 00 00    	mov    r9d,0x72
    4f2d:	50                   	push   rax
    4f2e:	4c 8d 05 0f e1 02 00 	lea    r8,[rip+0x2e10f]        # 33044 <_IO_stdin_used+0x44>
    4f35:	48 8b 3d e4 d1 24 00 	mov    rdi,QWORD PTR [rip+0x24d1e4]        # 252120 <stderr@@GLIBC_2.2.5>
    4f3c:	48 8b 0d 5d d3 24 00 	mov    rcx,QWORD PTR [rip+0x24d35d]        # 2522a0 <package_name>
    4f43:	be 01 00 00 00       	mov    esi,0x1
    4f48:	31 c0                	xor    eax,eax
    4f4a:	48 8d 15 47 e1 02 00 	lea    rdx,[rip+0x2e147]        # 33098 <_IO_stdin_used+0x98>
    4f51:	e8 5a eb ff ff       	call   3ab0 <__fprintf_chk@plt>
    4f56:	5e                   	pop    rsi
    4f57:	5f                   	pop    rdi
    4f58:	b8 01 00 00 00       	mov    eax,0x1
    4f5d:	48 8b 5c 24 28       	mov    rbx,QWORD PTR [rsp+0x28]
    4f62:	64 48 33 1c 25 28 00 00 00 	xor    rbx,QWORD PTR fs:0x28
    4f6b:	0f 85 bf 03 00 00    	jne    5330 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x540>
    4f71:	48 83 c4 38          	add    rsp,0x38
    4f75:	5b                   	pop    rbx
    4f76:	5d                   	pop    rbp
    4f77:	41 5c                	pop    r12
    4f79:	41 5d                	pop    r13
    4f7b:	41 5e                	pop    r14
    4f7d:	41 5f                	pop    r15
    4f7f:	c3                   	ret    
    4f80:	8b 44 24 08          	mov    eax,DWORD PTR [rsp+0x8]
    4f84:	85 c0                	test   eax,eax
    4f86:	0f 85 54 02 00 00    	jne    51e0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x3f0>
    4f8c:	41 8b 45 48          	mov    eax,DWORD PTR [r13+0x48]
    4f90:	85 c0                	test   eax,eax
    4f92:	0f 85 28 ff ff ff    	jne    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    4f98:	41 c7 45 48 01 00 00 00 	mov    DWORD PTR [r13+0x48],0x1
    4fa0:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [rsp+0x8],0x1
    4fa8:	e9 13 ff ff ff       	jmp    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    4fad:	8b 44 24 04          	mov    eax,DWORD PTR [rsp+0x4]
    4fb1:	85 c0                	test   eax,eax
    4fb3:	0f 85 e7 01 00 00    	jne    51a0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x3b0>
    4fb9:	41 8b 45 4c          	mov    eax,DWORD PTR [r13+0x4c]
    4fbd:	85 c0                	test   eax,eax
    4fbf:	0f 85 fb fe ff ff    	jne    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    4fc5:	41 c7 45 4c 01 00 00 00 	mov    DWORD PTR [r13+0x4c],0x1
    4fcd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [rsp+0x4],0x1
    4fd5:	e9 e6 fe ff ff       	jmp    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    4fda:	e8 51 fd ff ff       	call   4d30 <cmdline_parser_print_help()>
    4fdf:	31 ff                	xor    edi,edi
    4fe1:	e8 6a e9 ff ff       	call   3950 <exit@plt>
    4fe6:	45 85 f6             	test   r14d,r14d
    4fe9:	0f 85 d1 01 00 00    	jne    51c0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x3d0>
    4fef:	45 8b 4d 54          	mov    r9d,DWORD PTR [r13+0x54]
    4ff3:	45 85 c9             	test   r9d,r9d
    4ff6:	75 0e                	jne    5006 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x216>
    4ff8:	41 c7 45 54 01 00 00 00 	mov    DWORD PTR [r13+0x54],0x1
    5000:	41 be 01 00 00 00    	mov    r14d,0x1
    5006:	48 8b 3d bb cf 24 00 	mov    rdi,QWORD PTR [rip+0x24cfbb]        # 251fc8 <optarg@@GLIBC_2.2.5>
    500d:	ba 0a 00 00 00       	mov    edx,0xa
    5012:	31 f6                	xor    esi,esi
    5014:	e8 b7 e9 ff ff       	call   39d0 <strtol@plt>
    5019:	89 05 71 c6 24 00    	mov    DWORD PTR [rip+0x24c671],eax        # 251690 <dangles>
    501f:	e9 9c fe ff ff       	jmp    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    5024:	48 8b 15 75 d2 24 00 	mov    rdx,QWORD PTR [rip+0x24d275]        # 2522a0 <package_name>
    502b:	48 8d 05 d2 df 02 00 	lea    rax,[rip+0x2dfd2]        # 33004 <_IO_stdin_used+0x4>
    5032:	bf 01 00 00 00       	mov    edi,0x1
    5037:	48 8d 35 d4 df 02 00 	lea    rsi,[rip+0x2dfd4]        # 33012 <_IO_stdin_used+0x12>
    503e:	80 3a 00             	cmp    BYTE PTR [rdx],0x0
    5041:	48 0f 44 d0          	cmove  rdx,rax
    5045:	31 c0                	xor    eax,eax
    5047:	e8 a4 e5 ff ff       	call   35f0 <__printf_chk@plt>
    504c:	48 8b 15 3d 81 1e 00 	mov    rdx,QWORD PTR [rip+0x1e813d]        # 1ed190 <args_info_versiontext>
    5053:	80 3a 00             	cmp    BYTE PTR [rdx],0x0
    5056:	74 87                	je     4fdf <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x1ef>
    5058:	48 8d 35 b8 df 02 00 	lea    rsi,[rip+0x2dfb8]        # 33017 <_IO_stdin_used+0x17>
    505f:	bf 01 00 00 00       	mov    edi,0x1
    5064:	31 c0                	xor    eax,eax
    5066:	e8 85 e5 ff ff       	call   35f0 <__printf_chk@plt>
    506b:	e9 6f ff ff ff       	jmp    4fdf <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x1ef>
    5070:	44 8b 44 24 10       	mov    r8d,DWORD PTR [rsp+0x10]
    5075:	45 85 c0             	test   r8d,r8d
    5078:	0f 85 02 01 00 00    	jne    5180 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x390>
    507e:	41 8b 4d 58          	mov    ecx,DWORD PTR [r13+0x58]
    5082:	85 c9                	test   ecx,ecx
    5084:	75 10                	jne    5096 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x2a6>
    5086:	41 c7 45 58 01 00 00 00 	mov    DWORD PTR [r13+0x58],0x1
    508e:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [rsp+0x10],0x1
    5096:	48 8b 0d 2b cf 24 00 	mov    rcx,QWORD PTR [rip+0x24cf2b]        # 251fc8 <optarg@@GLIBC_2.2.5>
    509d:	48 89 cf             	mov    rdi,rcx
    50a0:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
    50a5:	e8 76 e6 ff ff       	call   3720 <strlen@plt>
    50aa:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    50af:	31 f6                	xor    esi,esi
    50b1:	48 8b 15 b0 d1 24 00 	mov    rdx,QWORD PTR [rip+0x24d1b0]        # 252268 <parameter_file[abi:cxx11]+0x8>
    50b8:	49 89 c0             	mov    r8,rax
    50bb:	48 8d 3d 9e d1 24 00 	lea    rdi,[rip+0x24d19e]        # 252260 <parameter_file[abi:cxx11]>
    50c2:	e8 79 e9 ff ff       	call   3a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    50c7:	e9 f4 fd ff ff       	jmp    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    50cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    50d0:	48 63 44 24 24       	movsxd rax,DWORD PTR [rsp+0x24]
    50d5:	48 8d 15 44 7f 1e 00 	lea    rdx,[rip+0x1e7f44]        # 1ed020 <cmdline_parser_internal(int, char**, args_info*, char const*)::long_options>
    50dc:	b9 05 00 00 00       	mov    ecx,0x5
    50e1:	48 8d 3d 7e df 02 00 	lea    rdi,[rip+0x2df7e]        # 33066 <_IO_stdin_used+0x66>
    50e8:	48 c1 e0 05          	shl    rax,0x5
    50ec:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
    50f0:	f3 a6                	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    50f2:	0f 97 c0             	seta   al
    50f5:	1c 00                	sbb    al,0x0
    50f7:	84 c0                	test   al,al
    50f9:	0f 85 c1 fd ff ff    	jne    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    50ff:	8b 54 24 14          	mov    edx,DWORD PTR [rsp+0x14]
    5103:	85 d2                	test   edx,edx
    5105:	0f 85 e5 01 00 00    	jne    52f0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x500>
    510b:	41 8b 45 5c          	mov    eax,DWORD PTR [r13+0x5c]
    510f:	85 c0                	test   eax,eax
    5111:	0f 85 a9 fd ff ff    	jne    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    5117:	41 c7 45 5c 01 00 00 00 	mov    DWORD PTR [r13+0x5c],0x1
    511f:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [rsp+0x14],0x1
    5127:	e9 94 fd ff ff       	jmp    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    512c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5130:	45 8b 55 50          	mov    r10d,DWORD PTR [r13+0x50]
    5134:	45 85 d2             	test   r10d,r10d
    5137:	75 10                	jne    5149 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x359>
    5139:	41 c7 45 50 01 00 00 00 	mov    DWORD PTR [r13+0x50],0x1
    5141:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [rsp+0xc],0x1
    5149:	48 8b 0d 78 ce 24 00 	mov    rcx,QWORD PTR [rip+0x24ce78]        # 251fc8 <optarg@@GLIBC_2.2.5>
    5150:	48 89 cf             	mov    rdi,rcx
    5153:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
    5158:	e8 c3 e5 ff ff       	call   3720 <strlen@plt>
    515d:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
    5162:	31 f6                	xor    esi,esi
    5164:	48 8b 15 1d d1 24 00 	mov    rdx,QWORD PTR [rip+0x24d11d]        # 252288 <input_structure[abi:cxx11]+0x8>
    516b:	49 89 c0             	mov    r8,rax
    516e:	48 8d 3d 0b d1 24 00 	lea    rdi,[rip+0x24d10b]        # 252280 <input_structure[abi:cxx11]>
    5175:	e8 c6 e8 ff ff       	call   3a40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
    517a:	e9 41 fd ff ff       	jmp    4ec0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0xd0>
    517f:	90                   	nop
    5180:	48 83 ec 08          	sub    rsp,0x8
    5184:	48 8d 05 65 f5 02 00 	lea    rax,[rip+0x2f565]        # 346f0 <_IO_stdin_used+0x16f0>
    518b:	41 b9 50 00 00 00    	mov    r9d,0x50
    5191:	50                   	push   rax
    5192:	4c 8d 05 c3 de 02 00 	lea    r8,[rip+0x2dec3]        # 3305c <_IO_stdin_used+0x5c>
    5199:	e9 97 fd ff ff       	jmp    4f35 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x145>
    519e:	66 90                	xchg   ax,ax
    51a0:	48 83 ec 08          	sub    rsp,0x8
    51a4:	48 8d 05 45 f5 02 00 	lea    rax,[rip+0x2f545]        # 346f0 <_IO_stdin_used+0x16f0>
    51ab:	41 b9 6d 00 00 00    	mov    r9d,0x6d
    51b1:	50                   	push   rax
    51b2:	4c 8d 05 7b de 02 00 	lea    r8,[rip+0x2de7b]        # 33034 <_IO_stdin_used+0x34>
    51b9:	e9 77 fd ff ff       	jmp    4f35 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x145>
    51be:	66 90                	xchg   ax,ax
    51c0:	48 83 ec 08          	sub    rsp,0x8
    51c4:	48 8d 05 25 f5 02 00 	lea    rax,[rip+0x2f525]        # 346f0 <_IO_stdin_used+0x16f0>
    51cb:	41 b9 64 00 00 00    	mov    r9d,0x64
    51d1:	50                   	push   rax
    51d2:	4c 8d 05 7b de 02 00 	lea    r8,[rip+0x2de7b]        # 33054 <_IO_stdin_used+0x54>
    51d9:	e9 57 fd ff ff       	jmp    4f35 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x145>
    51de:	66 90                	xchg   ax,ax
    51e0:	48 83 ec 08          	sub    rsp,0x8
    51e4:	48 8d 05 05 f5 02 00 	lea    rax,[rip+0x2f505]        # 346f0 <_IO_stdin_used+0x16f0>
    51eb:	41 b9 76 00 00 00    	mov    r9d,0x76
    51f1:	50                   	push   rax
    51f2:	4c 8d 05 33 de 02 00 	lea    r8,[rip+0x2de33]        # 3302c <_IO_stdin_used+0x2c>
    51f9:	e9 37 fd ff ff       	jmp    4f35 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x145>
    51fe:	66 90                	xchg   ax,ax
    5200:	8b 0d 22 cf 24 00    	mov    ecx,DWORD PTR [rip+0x24cf22]        # 252128 <optind@@GLIBC_2.2.5>
    5206:	39 cb                	cmp    ebx,ecx
    5208:	0f 8e 83 00 00 00    	jle    5291 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x4a1>
    520e:	89 ca                	mov    edx,ecx
    5210:	48 63 f1             	movsxd rsi,ecx
    5213:	49 8b 2f             	mov    rbp,QWORD PTR [r15]
    5216:	f7 d2                	not    edx
    5218:	49 8d 04 f7          	lea    rax,[r15+rsi*8]
    521c:	01 da                	add    edx,ebx
    521e:	48 01 f2             	add    rdx,rsi
    5221:	49 8d 54 d7 08       	lea    rdx,[r15+rdx*8+0x8]
    5226:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    5230:	48 39 28             	cmp    QWORD PTR [rax],rbp
    5233:	0f 84 e9 00 00 00    	je     5322 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x532>
    5239:	48 83 c0 08          	add    rax,0x8
    523d:	48 39 c2             	cmp    rdx,rax
    5240:	75 ee                	jne    5230 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x440>
    5242:	31 d2                	xor    edx,edx
    5244:	89 d8                	mov    eax,ebx
    5246:	29 c8                	sub    eax,ecx
    5248:	29 d0                	sub    eax,edx
    524a:	41 89 45 68          	mov    DWORD PTR [r13+0x68],eax
    524e:	48 98                	cdqe   
    5250:	48 8d 3c c5 00 00 00 00 	lea    rdi,[rax*8+0x0]
    5258:	e8 23 e7 ff ff       	call   3980 <malloc@plt>
    525d:	49 89 45 60          	mov    QWORD PTR [r13+0x60],rax
    5261:	49 89 c4             	mov    r12,rax
    5264:	48 63 05 bd ce 24 00 	movsxd rax,DWORD PTR [rip+0x24cebd]        # 252128 <optind@@GLIBC_2.2.5>
    526b:	31 c9                	xor    ecx,ecx
    526d:	eb 14                	jmp    5283 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x493>
    526f:	90                   	nop
    5270:	8d 50 01             	lea    edx,[rax+0x1]
    5273:	48 83 c0 01          	add    rax,0x1
    5277:	b9 01 00 00 00       	mov    ecx,0x1
    527c:	49 3b 6c c7 f8       	cmp    rbp,QWORD PTR [r15+rax*8-0x8]
    5281:	75 15                	jne    5298 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x4a8>
    5283:	39 c3                	cmp    ebx,eax
    5285:	7f e9                	jg     5270 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x480>
    5287:	84 c9                	test   cl,cl
    5289:	74 06                	je     5291 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x4a1>
    528b:	89 05 97 ce 24 00    	mov    DWORD PTR [rip+0x24ce97],eax        # 252128 <optind@@GLIBC_2.2.5>
    5291:	31 c0                	xor    eax,eax
    5293:	e9 c5 fc ff ff       	jmp    4f5d <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x16d>
    5298:	48 63 c2             	movsxd rax,edx
    529b:	89 15 87 ce 24 00    	mov    DWORD PTR [rip+0x24ce87],edx        # 252128 <optind@@GLIBC_2.2.5>
    52a1:	4d 8b 74 c7 f8       	mov    r14,QWORD PTR [r15+rax*8-0x8]
    52a6:	4d 85 f6             	test   r14,r14
    52a9:	0f 84 7d 00 00 00    	je     532c <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x53c>
    52af:	4c 89 f7             	mov    rdi,r14
    52b2:	e8 69 e4 ff ff       	call   3720 <strlen@plt>
    52b7:	4c 8d 68 01          	lea    r13,[rax+0x1]
    52bb:	4c 89 ef             	mov    rdi,r13
    52be:	e8 bd e6 ff ff       	call   3980 <malloc@plt>
    52c3:	48 89 c1             	mov    rcx,rax
    52c6:	48 85 c0             	test   rax,rax
    52c9:	74 11                	je     52dc <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x4ec>
    52cb:	4c 89 ea             	mov    rdx,r13
    52ce:	4c 89 f6             	mov    rsi,r14
    52d1:	48 89 c7             	mov    rdi,rax
    52d4:	e8 57 e5 ff ff       	call   3830 <memcpy@plt>
    52d9:	48 89 c1             	mov    rcx,rax
    52dc:	48 63 05 45 ce 24 00 	movsxd rax,DWORD PTR [rip+0x24ce45]        # 252128 <optind@@GLIBC_2.2.5>
    52e3:	49 89 0c 24          	mov    QWORD PTR [r12],rcx
    52e7:	49 83 c4 08          	add    r12,0x8
    52eb:	e9 7b ff ff ff       	jmp    526b <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x47b>
    52f0:	48 8b 0d a9 cf 24 00 	mov    rcx,QWORD PTR [rip+0x24cfa9]        # 2522a0 <package_name>
    52f7:	48 8b 3d 22 ce 24 00 	mov    rdi,QWORD PTR [rip+0x24ce22]        # 252120 <stderr@@GLIBC_2.2.5>
    52fe:	4c 8d 0d eb f3 02 00 	lea    r9,[rip+0x2f3eb]        # 346f0 <_IO_stdin_used+0x16f0>
    5305:	4c 8d 05 5a dd 02 00 	lea    r8,[rip+0x2dd5a]        # 33066 <_IO_stdin_used+0x66>
    530c:	48 8d 15 bd dd 02 00 	lea    rdx,[rip+0x2ddbd]        # 330d0 <_IO_stdin_used+0xd0>
    5313:	be 01 00 00 00       	mov    esi,0x1
    5318:	e8 93 e7 ff ff       	call   3ab0 <__fprintf_chk@plt>
    531d:	e9 36 fc ff ff       	jmp    4f58 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x168>
    5322:	ba 01 00 00 00       	mov    edx,0x1
    5327:	e9 18 ff ff ff       	jmp    5244 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x454>
    532c:	31 c9                	xor    ecx,ecx
    532e:	eb b3                	jmp    52e3 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]+0x4f3>
    5330:	e8 bb e5 ff ff       	call   38f0 <__stack_chk_fail@plt>
    5335:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000005340 <cmdline_parser_init(args_info*)>:
    5340:	f3 0f 1e fa          	endbr64 
    5344:	66 0f ef c0          	pxor   xmm0,xmm0
    5348:	66 0f 6f 0d 10 7e 1e 00 	movdqa xmm1,XMMWORD PTR [rip+0x1e7e10]        # 1ed160 <args_info_help+0x20>
    5350:	66 0f 6f 15 f8 7d 1e 00 	movdqa xmm2,XMMWORD PTR [rip+0x1e7df8]        # 1ed150 <args_info_help+0x10>
    5358:	48 c7 47 60 00 00 00 00 	mov    QWORD PTR [rdi+0x60],0x0
    5360:	66 0f 6f 1d d8 7d 1e 00 	movdqa xmm3,XMMWORD PTR [rip+0x1e7dd8]        # 1ed140 <args_info_help>
    5368:	0f 11 47 40          	movups XMMWORD PTR [rdi+0x40],xmm0
    536c:	0f 11 47 50          	movups XMMWORD PTR [rdi+0x50],xmm0
    5370:	66 0f 6f 05 f8 7d 1e 00 	movdqa xmm0,XMMWORD PTR [rip+0x1e7df8]        # 1ed170 <args_info_help+0x30>
    5378:	c7 47 68 00 00 00 00 	mov    DWORD PTR [rdi+0x68],0x0
    537f:	0f 11 1f             	movups XMMWORD PTR [rdi],xmm3
    5382:	0f 11 57 10          	movups XMMWORD PTR [rdi+0x10],xmm2
    5386:	0f 11 4f 20          	movups XMMWORD PTR [rdi+0x20],xmm1
    538a:	0f 11 47 30          	movups XMMWORD PTR [rdi+0x30],xmm0
    538e:	c3                   	ret    
    538f:	90                   	nop

0000000000005390 <cmdline_parser_free(args_info*)>:
    5390:	f3 0f 1e fa          	endbr64 
    5394:	55                   	push   rbp
    5395:	53                   	push   rbx
    5396:	48 89 fb             	mov    rbx,rdi
    5399:	48 83 ec 08          	sub    rsp,0x8
    539d:	8b 47 68             	mov    eax,DWORD PTR [rdi+0x68]
    53a0:	85 c0                	test   eax,eax
    53a2:	74 32                	je     53d6 <cmdline_parser_free(args_info*)+0x46>
    53a4:	31 ed                	xor    ebp,ebp
    53a6:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    53b0:	48 8b 43 60          	mov    rax,QWORD PTR [rbx+0x60]
    53b4:	89 ea                	mov    edx,ebp
    53b6:	83 c5 01             	add    ebp,0x1
    53b9:	48 8b 3c d0          	mov    rdi,QWORD PTR [rax+rdx*8]
    53bd:	e8 7e e5 ff ff       	call   3940 <free@plt>
    53c2:	8b 43 68             	mov    eax,DWORD PTR [rbx+0x68]
    53c5:	39 e8                	cmp    eax,ebp
    53c7:	77 e7                	ja     53b0 <cmdline_parser_free(args_info*)+0x20>
    53c9:	85 c0                	test   eax,eax
    53cb:	74 09                	je     53d6 <cmdline_parser_free(args_info*)+0x46>
    53cd:	48 8b 7b 60          	mov    rdi,QWORD PTR [rbx+0x60]
    53d1:	e8 6a e5 ff ff       	call   3940 <free@plt>
    53d6:	66 0f ef c0          	pxor   xmm0,xmm0
    53da:	0f 11 43 40          	movups XMMWORD PTR [rbx+0x40],xmm0
    53de:	0f 11 43 50          	movups XMMWORD PTR [rbx+0x50],xmm0
    53e2:	48 83 c4 08          	add    rsp,0x8
    53e6:	5b                   	pop    rbx
    53e7:	5d                   	pop    rbp
    53e8:	c3                   	ret    
    53e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000053f0 <cmdline_parser(int, char**, args_info*)>:
    53f0:	f3 0f 1e fa          	endbr64 
    53f4:	55                   	push   rbp
    53f5:	48 89 d5             	mov    rbp,rdx
    53f8:	e8 f3 f9 ff ff       	call   4df0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]>
    53fd:	83 f8 01             	cmp    eax,0x1
    5400:	74 02                	je     5404 <cmdline_parser(int, char**, args_info*)+0x14>
    5402:	5d                   	pop    rbp
    5403:	c3                   	ret    
    5404:	48 89 ef             	mov    rdi,rbp
    5407:	e8 64 f8 ff ff       	call   4c70 <cmdline_parser_release(args_info*)>
    540c:	bf 01 00 00 00       	mov    edi,0x1
    5411:	e8 3a e5 ff ff       	call   3950 <exit@plt>
    5416:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000005420 <cmdline_parser2(int, char**, args_info*)>:
    5420:	f3 0f 1e fa          	endbr64 
    5424:	55                   	push   rbp
    5425:	48 89 d5             	mov    rbp,rdx
    5428:	e8 c3 f9 ff ff       	call   4df0 <cmdline_parser_internal(int, char**, args_info*, char const*) [clone .constprop.0]>
    542d:	83 f8 01             	cmp    eax,0x1
    5430:	74 02                	je     5434 <cmdline_parser2(int, char**, args_info*)+0x14>
    5432:	5d                   	pop    rbp
    5433:	c3                   	ret    
    5434:	48 89 ef             	mov    rdi,rbp
    5437:	e8 34 f8 ff ff       	call   4c70 <cmdline_parser_release(args_info*)>
    543c:	bf 01 00 00 00       	mov    edi,0x1
    5441:	e8 0a e5 ff ff       	call   3950 <exit@plt>
    5446:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000005450 <evaluate_restriction(int, int, int const*, int const*)>:
    5450:	f3 0f 1e fa          	endbr64 
    5454:	4c 63 c6             	movsxd r8,esi
    5457:	48 63 ff             	movsxd rdi,edi
    545a:	31 c0                	xor    eax,eax
    545c:	46 8b 0c 81          	mov    r9d,DWORD PTR [rcx+r8*4]
    5460:	44 39 0c b9          	cmp    DWORD PTR [rcx+rdi*4],r9d
    5464:	7f 02                	jg     5468 <evaluate_restriction(int, int, int const*, int const*)+0x18>
    5466:	7d 01                	jge    5469 <evaluate_restriction(int, int, int const*, int const*)+0x19>
    5468:	c3                   	ret    
    5469:	75 07                	jne    5472 <evaluate_restriction(int, int, int const*, int const*)+0x22>
    546b:	39 34 ba             	cmp    DWORD PTR [rdx+rdi*4],esi
    546e:	0f 9d c0             	setge  al
    5471:	c3                   	ret    
    5472:	b8 01 00 00 00       	mov    eax,0x1
    5477:	c3                   	ret    
    5478:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005480 <SparseMFEFold::~SparseMFEFold()>:
    5480:	f3 0f 1e fa          	endbr64 
    5484:	41 54                	push   r12
    5486:	55                   	push   rbp
    5487:	53                   	push   rbx
    5488:	48 89 fb             	mov    rbx,rdi
    548b:	48 8b 7f 38          	mov    rdi,QWORD PTR [rdi+0x38]
    548f:	e8 ac e4 ff ff       	call   3940 <free@plt>
    5494:	48 8b 7b 28          	mov    rdi,QWORD PTR [rbx+0x28]
    5498:	e8 a3 e4 ff ff       	call   3940 <free@plt>
    549d:	48 8b 7b 30          	mov    rdi,QWORD PTR [rbx+0x30]
    54a1:	e8 9a e4 ff ff       	call   3940 <free@plt>
    54a6:	4c 8b a3 78 01 00 00 	mov    r12,QWORD PTR [rbx+0x178]
    54ad:	48 8b ab 70 01 00 00 	mov    rbp,QWORD PTR [rbx+0x170]
    54b4:	49 39 ec             	cmp    r12,rbp
    54b7:	74 29                	je     54e2 <SparseMFEFold::~SparseMFEFold()+0x62>
    54b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    54c0:	48 8b 7d 00          	mov    rdi,QWORD PTR [rbp+0x0]
    54c4:	48 85 ff             	test   rdi,rdi
    54c7:	0f 84 2b 01 00 00    	je     55f8 <SparseMFEFold::~SparseMFEFold()+0x178>
    54cd:	e8 9e e3 ff ff       	call   3870 <operator delete(void*)@plt>
    54d2:	48 83 c5 18          	add    rbp,0x18
    54d6:	49 39 ec             	cmp    r12,rbp
    54d9:	75 e5                	jne    54c0 <SparseMFEFold::~SparseMFEFold()+0x40>
    54db:	48 8b ab 70 01 00 00 	mov    rbp,QWORD PTR [rbx+0x170]
    54e2:	48 85 ed             	test   rbp,rbp
    54e5:	74 08                	je     54ef <SparseMFEFold::~SparseMFEFold()+0x6f>
    54e7:	48 89 ef             	mov    rdi,rbp
    54ea:	e8 81 e3 ff ff       	call   3870 <operator delete(void*)@plt>
    54ef:	4c 8b a3 38 01 00 00 	mov    r12,QWORD PTR [rbx+0x138]
    54f6:	48 8b ab 30 01 00 00 	mov    rbp,QWORD PTR [rbx+0x130]
    54fd:	49 39 ec             	cmp    r12,rbp
    5500:	74 28                	je     552a <SparseMFEFold::~SparseMFEFold()+0xaa>
    5502:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5508:	48 8b 7d 00          	mov    rdi,QWORD PTR [rbp+0x0]
    550c:	48 85 ff             	test   rdi,rdi
    550f:	0f 84 cb 00 00 00    	je     55e0 <SparseMFEFold::~SparseMFEFold()+0x160>
    5515:	e8 56 e3 ff ff       	call   3870 <operator delete(void*)@plt>
    551a:	48 83 c5 20          	add    rbp,0x20
    551e:	49 39 ec             	cmp    r12,rbp
    5521:	75 e5                	jne    5508 <SparseMFEFold::~SparseMFEFold()+0x88>
    5523:	48 8b ab 30 01 00 00 	mov    rbp,QWORD PTR [rbx+0x130]
    552a:	48 85 ed             	test   rbp,rbp
    552d:	74 08                	je     5537 <SparseMFEFold::~SparseMFEFold()+0xb7>
    552f:	48 89 ef             	mov    rdi,rbp
    5532:	e8 39 e3 ff ff       	call   3870 <operator delete(void*)@plt>
    5537:	48 8b bb 10 01 00 00 	mov    rdi,QWORD PTR [rbx+0x110]
    553e:	48 85 ff             	test   rdi,rdi
    5541:	74 05                	je     5548 <SparseMFEFold::~SparseMFEFold()+0xc8>
    5543:	e8 28 e3 ff ff       	call   3870 <operator delete(void*)@plt>
    5548:	48 8b bb f8 00 00 00 	mov    rdi,QWORD PTR [rbx+0xf8]
    554f:	48 85 ff             	test   rdi,rdi
    5552:	74 05                	je     5559 <SparseMFEFold::~SparseMFEFold()+0xd9>
    5554:	e8 17 e3 ff ff       	call   3870 <operator delete(void*)@plt>
    5559:	48 8b bb e0 00 00 00 	mov    rdi,QWORD PTR [rbx+0xe0]
    5560:	48 85 ff             	test   rdi,rdi
    5563:	74 05                	je     556a <SparseMFEFold::~SparseMFEFold()+0xea>
    5565:	e8 06 e3 ff ff       	call   3870 <operator delete(void*)@plt>
    556a:	48 8b bb c8 00 00 00 	mov    rdi,QWORD PTR [rbx+0xc8]
    5571:	48 85 ff             	test   rdi,rdi
    5574:	74 05                	je     557b <SparseMFEFold::~SparseMFEFold()+0xfb>
    5576:	e8 f5 e2 ff ff       	call   3870 <operator delete(void*)@plt>
    557b:	48 8b bb b0 00 00 00 	mov    rdi,QWORD PTR [rbx+0xb0]
    5582:	48 85 ff             	test   rdi,rdi
    5585:	74 05                	je     558c <SparseMFEFold::~SparseMFEFold()+0x10c>
    5587:	e8 e4 e2 ff ff       	call   3870 <operator delete(void*)@plt>
    558c:	48 8b bb 88 00 00 00 	mov    rdi,QWORD PTR [rbx+0x88]
    5593:	48 85 ff             	test   rdi,rdi
    5596:	74 05                	je     559d <SparseMFEFold::~SparseMFEFold()+0x11d>
    5598:	e8 d3 e2 ff ff       	call   3870 <operator delete(void*)@plt>
    559d:	48 8b 7b 60          	mov    rdi,QWORD PTR [rbx+0x60]
    55a1:	48 8d 43 70          	lea    rax,[rbx+0x70]
    55a5:	48 39 c7             	cmp    rdi,rax
    55a8:	74 05                	je     55af <SparseMFEFold::~SparseMFEFold()+0x12f>
    55aa:	e8 c1 e2 ff ff       	call   3870 <operator delete(void*)@plt>
    55af:	48 8b 7b 40          	mov    rdi,QWORD PTR [rbx+0x40]
    55b3:	48 8d 43 50          	lea    rax,[rbx+0x50]
    55b7:	48 39 c7             	cmp    rdi,rax
    55ba:	74 05                	je     55c1 <SparseMFEFold::~SparseMFEFold()+0x141>
    55bc:	e8 af e2 ff ff       	call   3870 <operator delete(void*)@plt>
    55c1:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    55c4:	48 83 c3 10          	add    rbx,0x10
    55c8:	48 39 df             	cmp    rdi,rbx
    55cb:	74 43                	je     5610 <SparseMFEFold::~SparseMFEFold()+0x190>
    55cd:	5b                   	pop    rbx
    55ce:	5d                   	pop    rbp
    55cf:	41 5c                	pop    r12
    55d1:	e9 9a e2 ff ff       	jmp    3870 <operator delete(void*)@plt>
    55d6:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    55e0:	48 83 c5 20          	add    rbp,0x20
    55e4:	49 39 ec             	cmp    r12,rbp
    55e7:	0f 85 1b ff ff ff    	jne    5508 <SparseMFEFold::~SparseMFEFold()+0x88>
    55ed:	e9 31 ff ff ff       	jmp    5523 <SparseMFEFold::~SparseMFEFold()+0xa3>
    55f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    55f8:	48 83 c5 18          	add    rbp,0x18
    55fc:	49 39 ec             	cmp    r12,rbp
    55ff:	0f 85 bb fe ff ff    	jne    54c0 <SparseMFEFold::~SparseMFEFold()+0x40>
    5605:	e9 d1 fe ff ff       	jmp    54db <SparseMFEFold::~SparseMFEFold()+0x5b>
    560a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5610:	5b                   	pop    rbx
    5611:	5d                   	pop    rbp
    5612:	41 5c                	pop    r12
    5614:	c3                   	ret    
    5615:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    561f:	90                   	nop

0000000000005620 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()>:
    5620:	f3 0f 1e fa          	endbr64 
    5624:	41 54                	push   r12
    5626:	49 89 fc             	mov    r12,rdi
    5629:	55                   	push   rbp
    562a:	53                   	push   rbx
    562b:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
    562f:	48 8b 2f             	mov    rbp,QWORD PTR [rdi]
    5632:	48 39 eb             	cmp    rbx,rbp
    5635:	74 24                	je     565b <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()+0x3b>
    5637:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    5640:	48 8b 7d 00          	mov    rdi,QWORD PTR [rbp+0x0]
    5644:	48 85 ff             	test   rdi,rdi
    5647:	74 27                	je     5670 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()+0x50>
    5649:	e8 22 e2 ff ff       	call   3870 <operator delete(void*)@plt>
    564e:	48 83 c5 18          	add    rbp,0x18
    5652:	48 39 eb             	cmp    rbx,rbp
    5655:	75 e9                	jne    5640 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()+0x20>
    5657:	49 8b 2c 24          	mov    rbp,QWORD PTR [r12]
    565b:	48 85 ed             	test   rbp,rbp
    565e:	74 20                	je     5680 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()+0x60>
    5660:	5b                   	pop    rbx
    5661:	48 89 ef             	mov    rdi,rbp
    5664:	5d                   	pop    rbp
    5665:	41 5c                	pop    r12
    5667:	e9 04 e2 ff ff       	jmp    3870 <operator delete(void*)@plt>
    566c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5670:	48 83 c5 18          	add    rbp,0x18
    5674:	48 39 eb             	cmp    rbx,rbp
    5677:	75 c7                	jne    5640 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()+0x20>
    5679:	eb dc                	jmp    5657 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()+0x37>
    567b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    5680:	5b                   	pop    rbx
    5681:	5d                   	pop    rbp
    5682:	41 5c                	pop    r12
    5684:	c3                   	ret    
    5685:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    568f:	90                   	nop

0000000000005690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>:
    5690:	f3 0f 1e fa          	endbr64 
    5694:	48 85 d2             	test   rdx,rdx
    5697:	0f 84 33 01 00 00    	je     57d0 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x140>
    569d:	41 57                	push   r15
    569f:	49 89 cf             	mov    r15,rcx
    56a2:	41 56                	push   r14
    56a4:	49 89 f6             	mov    r14,rsi
    56a7:	41 55                	push   r13
    56a9:	49 89 fd             	mov    r13,rdi
    56ac:	41 54                	push   r12
    56ae:	55                   	push   rbp
    56af:	48 89 f5             	mov    rbp,rsi
    56b2:	53                   	push   rbx
    56b3:	48 89 d3             	mov    rbx,rdx
    56b6:	48 83 ec 18          	sub    rsp,0x18
    56ba:	4c 8b 67 08          	mov    r12,QWORD PTR [rdi+0x8]
    56be:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
    56c2:	4c 29 e0             	sub    rax,r12
    56c5:	48 c1 f8 02          	sar    rax,0x2
    56c9:	48 39 d0             	cmp    rax,rdx
    56cc:	0f 82 2e 02 00 00    	jb     5900 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x270>
    56d2:	4c 89 e2             	mov    rdx,r12
    56d5:	44 8b 39             	mov    r15d,DWORD PTR [rcx]
    56d8:	48 29 f2             	sub    rdx,rsi
    56db:	48 89 d0             	mov    rax,rdx
    56de:	48 c1 f8 02          	sar    rax,0x2
    56e2:	48 39 c3             	cmp    rbx,rax
    56e5:	0f 83 ed 00 00 00    	jae    57d8 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x148>
    56eb:	48 c1 e3 02          	shl    rbx,0x2
    56ef:	4c 89 e1             	mov    rcx,r12
    56f2:	4c 89 e0             	mov    rax,r12
    56f5:	48 29 d9             	sub    rcx,rbx
    56f8:	49 39 cc             	cmp    r12,rcx
    56fb:	74 1c                	je     5719 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x89>
    56fd:	48 89 ce             	mov    rsi,rcx
    5700:	48 89 da             	mov    rdx,rbx
    5703:	4c 89 e7             	mov    rdi,r12
    5706:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    570b:	e8 70 e3 ff ff       	call   3a80 <memmove@plt>
    5710:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
    5714:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    5719:	48 01 d8             	add    rax,rbx
    571c:	49 89 45 08          	mov    QWORD PTR [r13+0x8],rax
    5720:	48 39 cd             	cmp    rbp,rcx
    5723:	74 14                	je     5739 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0xa9>
    5725:	48 29 e9             	sub    rcx,rbp
    5728:	4c 89 e7             	mov    rdi,r12
    572b:	48 89 ee             	mov    rsi,rbp
    572e:	48 89 ca             	mov    rdx,rcx
    5731:	48 29 cf             	sub    rdi,rcx
    5734:	e8 47 e3 ff ff       	call   3a80 <memmove@plt>
    5739:	48 01 eb             	add    rbx,rbp
    573c:	48 39 dd             	cmp    rbp,rbx
    573f:	0f 84 a5 01 00 00    	je     58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    5745:	48 89 da             	mov    rdx,rbx
    5748:	48 89 e8             	mov    rax,rbp
    574b:	48 29 ea             	sub    rdx,rbp
    574e:	48 8d 4a fc          	lea    rcx,[rdx-0x4]
    5752:	48 89 ca             	mov    rdx,rcx
    5755:	48 c1 ea 02          	shr    rdx,0x2
    5759:	48 83 c2 01          	add    rdx,0x1
    575d:	48 83 f9 08          	cmp    rcx,0x8
    5761:	76 3e                	jbe    57a1 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x111>
    5763:	48 89 d1             	mov    rcx,rdx
    5766:	66 41 0f 6e df       	movd   xmm3,r15d
    576b:	48 c1 e9 02          	shr    rcx,0x2
    576f:	66 0f 70 c3 00       	pshufd xmm0,xmm3,0x0
    5774:	48 c1 e1 04          	shl    rcx,0x4
    5778:	48 01 e9             	add    rcx,rbp
    577b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    5780:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    5783:	48 83 c0 10          	add    rax,0x10
    5787:	48 39 c8             	cmp    rax,rcx
    578a:	75 f4                	jne    5780 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0xf0>
    578c:	48 89 d0             	mov    rax,rdx
    578f:	48 83 e0 fc          	and    rax,0xfffffffffffffffc
    5793:	4c 8d 74 85 00       	lea    r14,[rbp+rax*4+0x0]
    5798:	48 39 c2             	cmp    rdx,rax
    579b:	0f 84 49 01 00 00    	je     58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    57a1:	49 8d 46 04          	lea    rax,[r14+0x4]
    57a5:	45 89 3e             	mov    DWORD PTR [r14],r15d
    57a8:	48 39 c3             	cmp    rbx,rax
    57ab:	0f 84 39 01 00 00    	je     58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    57b1:	49 8d 46 08          	lea    rax,[r14+0x8]
    57b5:	45 89 7e 04          	mov    DWORD PTR [r14+0x4],r15d
    57b9:	48 39 c3             	cmp    rbx,rax
    57bc:	0f 85 24 01 00 00    	jne    58e6 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x256>
    57c2:	e9 23 01 00 00       	jmp    58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    57c7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    57d0:	c3                   	ret    
    57d1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    57d8:	48 29 c3             	sub    rbx,rax
    57db:	0f 84 cf 02 00 00    	je     5ab0 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x420>
    57e1:	48 8d 43 ff          	lea    rax,[rbx-0x1]
    57e5:	48 83 f8 02          	cmp    rax,0x2
    57e9:	0f 86 e9 02 00 00    	jbe    5ad8 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x448>
    57ef:	48 89 de             	mov    rsi,rbx
    57f2:	66 41 0f 6e e7       	movd   xmm4,r15d
    57f7:	31 c0                	xor    eax,eax
    57f9:	48 c1 ee 02          	shr    rsi,0x2
    57fd:	66 0f 70 c4 00       	pshufd xmm0,xmm4,0x0
    5802:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5808:	48 89 c1             	mov    rcx,rax
    580b:	48 83 c0 01          	add    rax,0x1
    580f:	48 c1 e1 04          	shl    rcx,0x4
    5813:	41 0f 11 04 0c       	movups XMMWORD PTR [r12+rcx*1],xmm0
    5818:	48 39 c6             	cmp    rsi,rax
    581b:	75 eb                	jne    5808 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x178>
    581d:	48 89 d9             	mov    rcx,rbx
    5820:	48 89 de             	mov    rsi,rbx
    5823:	48 83 e1 fc          	and    rcx,0xfffffffffffffffc
    5827:	83 e6 03             	and    esi,0x3
    582a:	49 8d 04 8c          	lea    rax,[r12+rcx*4]
    582e:	48 39 cb             	cmp    rbx,rcx
    5831:	74 17                	je     584a <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x1ba>
    5833:	44 89 38             	mov    DWORD PTR [rax],r15d
    5836:	48 83 fe 01          	cmp    rsi,0x1
    583a:	74 0e                	je     584a <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x1ba>
    583c:	44 89 78 04          	mov    DWORD PTR [rax+0x4],r15d
    5840:	48 83 fe 02          	cmp    rsi,0x2
    5844:	74 04                	je     584a <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x1ba>
    5846:	44 89 78 08          	mov    DWORD PTR [rax+0x8],r15d
    584a:	49 8d 3c 9c          	lea    rdi,[r12+rbx*4]
    584e:	49 89 7d 08          	mov    QWORD PTR [r13+0x8],rdi
    5852:	49 39 ec             	cmp    r12,rbp
    5855:	0f 84 65 02 00 00    	je     5ac0 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x430>
    585b:	48 89 ee             	mov    rsi,rbp
    585e:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    5863:	e8 18 e2 ff ff       	call   3a80 <memmove@plt>
    5868:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    586d:	49 01 55 08          	add    QWORD PTR [r13+0x8],rdx
    5871:	4c 89 e2             	mov    rdx,r12
    5874:	48 29 ea             	sub    rdx,rbp
    5877:	48 89 e8             	mov    rax,rbp
    587a:	48 83 ea 04          	sub    rdx,0x4
    587e:	48 89 d1             	mov    rcx,rdx
    5881:	48 c1 e9 02          	shr    rcx,0x2
    5885:	48 83 c1 01          	add    rcx,0x1
    5889:	48 83 fa 08          	cmp    rdx,0x8
    588d:	76 3e                	jbe    58cd <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x23d>
    588f:	48 89 ca             	mov    rdx,rcx
    5892:	66 41 0f 6e ef       	movd   xmm5,r15d
    5897:	48 c1 ea 02          	shr    rdx,0x2
    589b:	66 0f 70 c5 00       	pshufd xmm0,xmm5,0x0
    58a0:	48 c1 e2 04          	shl    rdx,0x4
    58a4:	48 01 ea             	add    rdx,rbp
    58a7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    58b0:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    58b3:	48 83 c0 10          	add    rax,0x10
    58b7:	48 39 d0             	cmp    rax,rdx
    58ba:	75 f4                	jne    58b0 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x220>
    58bc:	48 89 c8             	mov    rax,rcx
    58bf:	48 83 e0 fc          	and    rax,0xfffffffffffffffc
    58c3:	4c 8d 74 85 00       	lea    r14,[rbp+rax*4+0x0]
    58c8:	48 39 c1             	cmp    rcx,rax
    58cb:	74 1d                	je     58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    58cd:	49 8d 46 04          	lea    rax,[r14+0x4]
    58d1:	45 89 3e             	mov    DWORD PTR [r14],r15d
    58d4:	49 39 c4             	cmp    r12,rax
    58d7:	74 11                	je     58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    58d9:	49 8d 46 08          	lea    rax,[r14+0x8]
    58dd:	45 89 7e 04          	mov    DWORD PTR [r14+0x4],r15d
    58e1:	49 39 c4             	cmp    r12,rax
    58e4:	74 04                	je     58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    58e6:	45 89 7e 08          	mov    DWORD PTR [r14+0x8],r15d
    58ea:	48 83 c4 18          	add    rsp,0x18
    58ee:	5b                   	pop    rbx
    58ef:	5d                   	pop    rbp
    58f0:	41 5c                	pop    r12
    58f2:	41 5d                	pop    r13
    58f4:	41 5e                	pop    r14
    58f6:	41 5f                	pop    r15
    58f8:	c3                   	ret    
    58f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5900:	48 ba ff ff ff ff ff ff ff 1f 	movabs rdx,0x1fffffffffffffff
    590a:	4c 8b 37             	mov    r14,QWORD PTR [rdi]
    590d:	48 89 d0             	mov    rax,rdx
    5910:	4d 29 f4             	sub    r12,r14
    5913:	49 c1 fc 02          	sar    r12,0x2
    5917:	4c 29 e0             	sub    rax,r12
    591a:	48 39 c3             	cmp    rbx,rax
    591d:	0f 87 c0 01 00 00    	ja     5ae3 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x453>
    5923:	4c 39 e3             	cmp    rbx,r12
    5926:	4c 89 e0             	mov    rax,r12
    5929:	48 0f 43 c3          	cmovae rax,rbx
    592d:	49 01 c4             	add    r12,rax
    5930:	0f 92 c0             	setb   al
    5933:	4c 29 f6             	sub    rsi,r14
    5936:	0f b6 c0             	movzx  eax,al
    5939:	48 85 c0             	test   rax,rax
    593c:	0f 85 26 01 00 00    	jne    5a68 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x3d8>
    5942:	4d 85 e4             	test   r12,r12
    5945:	0f 85 55 01 00 00    	jne    5aa0 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x410>
    594b:	49 89 f0             	mov    r8,rsi
    594e:	31 c9                	xor    ecx,ecx
    5950:	48 8d 43 ff          	lea    rax,[rbx-0x1]
    5954:	45 8b 0f             	mov    r9d,DWORD PTR [r15]
    5957:	48 01 ce             	add    rsi,rcx
    595a:	48 83 f8 02          	cmp    rax,0x2
    595e:	0f 86 6c 01 00 00    	jbe    5ad0 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x440>
    5964:	48 8d 53 fc          	lea    rdx,[rbx-0x4]
    5968:	66 41 0f 6e d1       	movd   xmm2,r9d
    596d:	31 c0                	xor    eax,eax
    596f:	48 c1 ea 02          	shr    rdx,0x2
    5973:	66 0f 70 c2 00       	pshufd xmm0,xmm2,0x0
    5978:	48 83 c2 01          	add    rdx,0x1
    597c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5980:	48 89 c7             	mov    rdi,rax
    5983:	48 83 c0 01          	add    rax,0x1
    5987:	48 c1 e7 04          	shl    rdi,0x4
    598b:	0f 11 04 3e          	movups XMMWORD PTR [rsi+rdi*1],xmm0
    598f:	48 39 c2             	cmp    rdx,rax
    5992:	77 ec                	ja     5980 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x2f0>
    5994:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
    599c:	48 89 df             	mov    rdi,rbx
    599f:	48 c1 e2 04          	shl    rdx,0x4
    59a3:	48 29 c7             	sub    rdi,rax
    59a6:	48 01 d6             	add    rsi,rdx
    59a9:	48 39 c3             	cmp    rbx,rax
    59ac:	74 17                	je     59c5 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x335>
    59ae:	44 89 0e             	mov    DWORD PTR [rsi],r9d
    59b1:	48 83 ff 01          	cmp    rdi,0x1
    59b5:	74 0e                	je     59c5 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x335>
    59b7:	44 89 4e 04          	mov    DWORD PTR [rsi+0x4],r9d
    59bb:	48 83 ff 02          	cmp    rdi,0x2
    59bf:	74 04                	je     59c5 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x335>
    59c1:	44 89 4e 08          	mov    DWORD PTR [rsi+0x8],r9d
    59c5:	4d 8d 3c 98          	lea    r15,[r8+rbx*4]
    59c9:	49 01 cf             	add    r15,rcx
    59cc:	4c 39 f5             	cmp    rbp,r14
    59cf:	74 7f                	je     5a50 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x3c0>
    59d1:	4c 89 c2             	mov    rdx,r8
    59d4:	48 89 cf             	mov    rdi,rcx
    59d7:	4c 89 f6             	mov    rsi,r14
    59da:	e8 a1 e0 ff ff       	call   3a80 <memmove@plt>
    59df:	48 89 c1             	mov    rcx,rax
    59e2:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
    59e6:	48 89 c2             	mov    rdx,rax
    59e9:	48 29 ea             	sub    rdx,rbp
    59ec:	49 8d 1c 17          	lea    rbx,[r15+rdx*1]
    59f0:	48 39 c5             	cmp    rbp,rax
    59f3:	74 43                	je     5a38 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x3a8>
    59f5:	48 89 ee             	mov    rsi,rbp
    59f8:	4c 89 ff             	mov    rdi,r15
    59fb:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    5a00:	e8 2b de ff ff       	call   3830 <memcpy@plt>
    5a05:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    5a0a:	4d 85 f6             	test   r14,r14
    5a0d:	75 29                	jne    5a38 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x3a8>
    5a0f:	66 48 0f 6e cb       	movq   xmm1,rbx
    5a14:	66 48 0f 6e c1       	movq   xmm0,rcx
    5a19:	4d 89 65 10          	mov    QWORD PTR [r13+0x10],r12
    5a1d:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    5a21:	41 0f 11 45 00       	movups XMMWORD PTR [r13+0x0],xmm0
    5a26:	48 83 c4 18          	add    rsp,0x18
    5a2a:	5b                   	pop    rbx
    5a2b:	5d                   	pop    rbp
    5a2c:	41 5c                	pop    r12
    5a2e:	41 5d                	pop    r13
    5a30:	41 5e                	pop    r14
    5a32:	41 5f                	pop    r15
    5a34:	c3                   	ret    
    5a35:	0f 1f 00             	nop    DWORD PTR [rax]
    5a38:	4c 89 f7             	mov    rdi,r14
    5a3b:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    5a40:	e8 2b de ff ff       	call   3870 <operator delete(void*)@plt>
    5a45:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    5a4a:	eb c3                	jmp    5a0f <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x37f>
    5a4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5a50:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
    5a54:	48 89 c2             	mov    rdx,rax
    5a57:	48 29 ea             	sub    rdx,rbp
    5a5a:	49 8d 1c 17          	lea    rbx,[r15+rdx*1]
    5a5e:	48 39 e8             	cmp    rax,rbp
    5a61:	75 92                	jne    59f5 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x365>
    5a63:	eb a5                	jmp    5a0a <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x37a>
    5a65:	0f 1f 00             	nop    DWORD PTR [rax]
    5a68:	49 bc fc ff ff ff ff ff ff 7f 	movabs r12,0x7ffffffffffffffc
    5a72:	4c 89 e7             	mov    rdi,r12
    5a75:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
    5a7a:	e8 31 de ff ff       	call   38b0 <operator new(unsigned long)@plt>
    5a7f:	4d 8b 75 00          	mov    r14,QWORD PTR [r13+0x0]
    5a83:	49 89 e8             	mov    r8,rbp
    5a86:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    5a8b:	48 89 c1             	mov    rcx,rax
    5a8e:	49 01 c4             	add    r12,rax
    5a91:	4d 29 f0             	sub    r8,r14
    5a94:	e9 b7 fe ff ff       	jmp    5950 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x2c0>
    5a99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5aa0:	49 39 d4             	cmp    r12,rdx
    5aa3:	4c 0f 47 e2          	cmova  r12,rdx
    5aa7:	49 c1 e4 02          	shl    r12,0x2
    5aab:	eb c5                	jmp    5a72 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x3e2>
    5aad:	0f 1f 00             	nop    DWORD PTR [rax]
    5ab0:	4c 89 e7             	mov    rdi,r12
    5ab3:	e9 96 fd ff ff       	jmp    584e <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x1be>
    5ab8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5ac0:	48 01 fa             	add    rdx,rdi
    5ac3:	49 89 55 08          	mov    QWORD PTR [r13+0x8],rdx
    5ac7:	e9 1e fe ff ff       	jmp    58ea <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x25a>
    5acc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5ad0:	48 89 df             	mov    rdi,rbx
    5ad3:	e9 d6 fe ff ff       	jmp    59ae <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x31e>
    5ad8:	4c 89 e0             	mov    rax,r12
    5adb:	48 89 de             	mov    rsi,rbx
    5ade:	e9 50 fd ff ff       	jmp    5833 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)+0x1a3>
    5ae3:	48 8d 3d 7a db 02 00 	lea    rdi,[rip+0x2db7a]        # 33664 <_IO_stdin_used+0x664>
    5aea:	e8 91 dc ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    5aef:	90                   	nop

0000000000005af0 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)>:
    5af0:	f3 0f 1e fa          	endbr64 
    5af4:	48 85 f6             	test   rsi,rsi
    5af7:	0f 84 03 01 00 00    	je     5c00 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x110>
    5afd:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
    5b07:	41 57                	push   r15
    5b09:	48 b9 55 55 55 55 55 55 55 05 	movabs rcx,0x555555555555555
    5b13:	41 56                	push   r14
    5b15:	41 55                	push   r13
    5b17:	41 54                	push   r12
    5b19:	55                   	push   rbp
    5b1a:	48 89 fd             	mov    rbp,rdi
    5b1d:	53                   	push   rbx
    5b1e:	48 89 f3             	mov    rbx,rsi
    5b21:	48 83 ec 08          	sub    rsp,0x8
    5b25:	48 8b 77 08          	mov    rsi,QWORD PTR [rdi+0x8]
    5b29:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    5b2d:	49 89 f5             	mov    r13,rsi
    5b30:	4c 2b 2f             	sub    r13,QWORD PTR [rdi]
    5b33:	48 29 f0             	sub    rax,rsi
    5b36:	48 89 cf             	mov    rdi,rcx
    5b39:	4d 89 ec             	mov    r12,r13
    5b3c:	48 c1 f8 03          	sar    rax,0x3
    5b40:	49 c1 fc 03          	sar    r12,0x3
    5b44:	48 0f af c2          	imul   rax,rdx
    5b48:	4c 0f af e2          	imul   r12,rdx
    5b4c:	4c 29 e7             	sub    rdi,r12
    5b4f:	48 39 c3             	cmp    rbx,rax
    5b52:	0f 87 b0 00 00 00    	ja     5c08 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x118>
    5b58:	48 8d 43 ff          	lea    rax,[rbx-0x1]
    5b5c:	48 83 f8 02          	cmp    rax,0x2
    5b60:	0f 86 62 02 00 00    	jbe    5dc8 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2d8>
    5b66:	48 8d 4b fe          	lea    rcx,[rbx-0x2]
    5b6a:	48 89 f0             	mov    rax,rsi
    5b6d:	66 0f ef c0          	pxor   xmm0,xmm0
    5b71:	31 d2                	xor    edx,edx
    5b73:	48 d1 e9             	shr    rcx,1
    5b76:	48 83 c1 01          	add    rcx,0x1
    5b7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    5b80:	48 83 c2 01          	add    rdx,0x1
    5b84:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    5b87:	48 83 c0 30          	add    rax,0x30
    5b8b:	0f 11 40 e0          	movups XMMWORD PTR [rax-0x20],xmm0
    5b8f:	0f 11 40 f0          	movups XMMWORD PTR [rax-0x10],xmm0
    5b93:	48 39 d1             	cmp    rcx,rdx
    5b96:	77 e8                	ja     5b80 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x90>
    5b98:	48 8d 14 09          	lea    rdx,[rcx+rcx*1]
    5b9c:	48 89 df             	mov    rdi,rbx
    5b9f:	48 8d 04 8a          	lea    rax,[rdx+rcx*4]
    5ba3:	48 29 d7             	sub    rdi,rdx
    5ba6:	48 8d 04 c6          	lea    rax,[rsi+rax*8]
    5baa:	48 39 d3             	cmp    rbx,rdx
    5bad:	74 33                	je     5be2 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0xf2>
    5baf:	66 0f ef c0          	pxor   xmm0,xmm0
    5bb3:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    5bbb:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    5bbe:	48 83 ff 01          	cmp    rdi,0x1
    5bc2:	74 1e                	je     5be2 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0xf2>
    5bc4:	48 c7 40 28 00 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
    5bcc:	0f 11 40 18          	movups XMMWORD PTR [rax+0x18],xmm0
    5bd0:	48 83 ff 02          	cmp    rdi,0x2
    5bd4:	74 0c                	je     5be2 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0xf2>
    5bd6:	48 c7 40 40 00 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
    5bde:	0f 11 40 30          	movups XMMWORD PTR [rax+0x30],xmm0
    5be2:	48 8d 04 5b          	lea    rax,[rbx+rbx*2]
    5be6:	48 8d 04 c6          	lea    rax,[rsi+rax*8]
    5bea:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
    5bee:	48 83 c4 08          	add    rsp,0x8
    5bf2:	5b                   	pop    rbx
    5bf3:	5d                   	pop    rbp
    5bf4:	41 5c                	pop    r12
    5bf6:	41 5d                	pop    r13
    5bf8:	41 5e                	pop    r14
    5bfa:	41 5f                	pop    r15
    5bfc:	c3                   	ret    
    5bfd:	0f 1f 00             	nop    DWORD PTR [rax]
    5c00:	c3                   	ret    
    5c01:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5c08:	48 39 df             	cmp    rdi,rbx
    5c0b:	0f 82 f6 01 00 00    	jb     5e07 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x317>
    5c11:	4c 39 e3             	cmp    rbx,r12
    5c14:	4c 89 e0             	mov    rax,r12
    5c17:	48 0f 43 c3          	cmovae rax,rbx
    5c1b:	4c 01 e0             	add    rax,r12
    5c1e:	48 39 c8             	cmp    rax,rcx
    5c21:	48 0f 46 c8          	cmovbe rcx,rax
    5c25:	4c 8d 34 49          	lea    r14,[rcx+rcx*2]
    5c29:	49 c1 e6 03          	shl    r14,0x3
    5c2d:	4c 89 f7             	mov    rdi,r14
    5c30:	e8 7b dc ff ff       	call   38b0 <operator new(unsigned long)@plt>
    5c35:	49 89 c7             	mov    r15,rax
    5c38:	4a 8d 34 28          	lea    rsi,[rax+r13*1]
    5c3c:	48 8d 43 ff          	lea    rax,[rbx-0x1]
    5c40:	48 83 f8 02          	cmp    rax,0x2
    5c44:	0f 86 b5 01 00 00    	jbe    5dff <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x30f>
    5c4a:	48 8d 43 fe          	lea    rax,[rbx-0x2]
    5c4e:	48 89 f2             	mov    rdx,rsi
    5c51:	66 0f ef c0          	pxor   xmm0,xmm0
    5c55:	31 c9                	xor    ecx,ecx
    5c57:	48 d1 e8             	shr    rax,1
    5c5a:	48 83 c0 01          	add    rax,0x1
    5c5e:	66 90                	xchg   ax,ax
    5c60:	48 83 c1 01          	add    rcx,0x1
    5c64:	0f 11 02             	movups XMMWORD PTR [rdx],xmm0
    5c67:	48 83 c2 30          	add    rdx,0x30
    5c6b:	0f 11 42 e0          	movups XMMWORD PTR [rdx-0x20],xmm0
    5c6f:	0f 11 42 f0          	movups XMMWORD PTR [rdx-0x10],xmm0
    5c73:	48 39 c8             	cmp    rax,rcx
    5c76:	77 e8                	ja     5c60 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x170>
    5c78:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    5c7c:	48 89 d9             	mov    rcx,rbx
    5c7f:	48 8d 04 82          	lea    rax,[rdx+rax*4]
    5c83:	48 29 d1             	sub    rcx,rdx
    5c86:	48 8d 34 c6          	lea    rsi,[rsi+rax*8]
    5c8a:	48 39 d3             	cmp    rbx,rdx
    5c8d:	74 33                	je     5cc2 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x1d2>
    5c8f:	66 0f ef c0          	pxor   xmm0,xmm0
    5c93:	48 c7 46 10 00 00 00 00 	mov    QWORD PTR [rsi+0x10],0x0
    5c9b:	0f 11 06             	movups XMMWORD PTR [rsi],xmm0
    5c9e:	48 83 f9 01          	cmp    rcx,0x1
    5ca2:	74 1e                	je     5cc2 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x1d2>
    5ca4:	48 c7 46 28 00 00 00 00 	mov    QWORD PTR [rsi+0x28],0x0
    5cac:	0f 11 46 18          	movups XMMWORD PTR [rsi+0x18],xmm0
    5cb0:	48 83 f9 02          	cmp    rcx,0x2
    5cb4:	74 0c                	je     5cc2 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x1d2>
    5cb6:	48 c7 46 40 00 00 00 00 	mov    QWORD PTR [rsi+0x40],0x0
    5cbe:	0f 11 46 30          	movups XMMWORD PTR [rsi+0x30],xmm0
    5cc2:	48 8b 4d 08          	mov    rcx,QWORD PTR [rbp+0x8]
    5cc6:	48 8b 7d 00          	mov    rdi,QWORD PTR [rbp+0x0]
    5cca:	48 39 f9             	cmp    rcx,rdi
    5ccd:	0f 84 be 00 00 00    	je     5d91 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2a1>
    5cd3:	48 8d 41 e8          	lea    rax,[rcx-0x18]
    5cd7:	48 89 fa             	mov    rdx,rdi
    5cda:	48 be ab aa aa aa aa aa aa 0a 	movabs rsi,0xaaaaaaaaaaaaaab
    5ce4:	48 29 f8             	sub    rax,rdi
    5ce7:	48 c1 e8 03          	shr    rax,0x3
    5ceb:	48 0f af c6          	imul   rax,rsi
    5cef:	48 8d 77 2f          	lea    rsi,[rdi+0x2f]
    5cf3:	4c 29 fe             	sub    rsi,r15
    5cf6:	48 83 fe 5e          	cmp    rsi,0x5e
    5cfa:	0f 86 d3 00 00 00    	jbe    5dd3 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2e3>
    5d00:	48 be fe ff ff ff ff ff ff 1f 	movabs rsi,0x1ffffffffffffffe
    5d0a:	48 85 f0             	test   rax,rsi
    5d0d:	0f 84 c0 00 00 00    	je     5dd3 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2e3>
    5d13:	48 b9 ff ff ff ff ff ff ff 1f 	movabs rcx,0x1fffffffffffffff
    5d1d:	48 21 c8             	and    rax,rcx
    5d20:	4c 89 f9             	mov    rcx,r15
    5d23:	48 83 c0 01          	add    rax,0x1
    5d27:	48 89 c6             	mov    rsi,rax
    5d2a:	48 d1 ee             	shr    rsi,1
    5d2d:	48 8d 34 76          	lea    rsi,[rsi+rsi*2]
    5d31:	48 c1 e6 04          	shl    rsi,0x4
    5d35:	48 01 fe             	add    rsi,rdi
    5d38:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    5d40:	f3 0f 6f 4a 10       	movdqu xmm1,XMMWORD PTR [rdx+0x10]
    5d45:	f3 0f 6f 1a          	movdqu xmm3,XMMWORD PTR [rdx]
    5d49:	48 83 c2 30          	add    rdx,0x30
    5d4d:	48 83 c1 30          	add    rcx,0x30
    5d51:	f3 0f 6f 42 f0       	movdqu xmm0,XMMWORD PTR [rdx-0x10]
    5d56:	0f 11 59 d0          	movups XMMWORD PTR [rcx-0x30],xmm3
    5d5a:	0f 11 49 e0          	movups XMMWORD PTR [rcx-0x20],xmm1
    5d5e:	0f 11 41 f0          	movups XMMWORD PTR [rcx-0x10],xmm0
    5d62:	48 39 f2             	cmp    rdx,rsi
    5d65:	75 d9                	jne    5d40 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x250>
    5d67:	48 89 c6             	mov    rsi,rax
    5d6a:	48 83 e6 fe          	and    rsi,0xfffffffffffffffe
    5d6e:	48 8d 14 76          	lea    rdx,[rsi+rsi*2]
    5d72:	48 c1 e2 03          	shl    rdx,0x3
    5d76:	48 8d 0c 17          	lea    rcx,[rdi+rdx*1]
    5d7a:	4c 01 fa             	add    rdx,r15
    5d7d:	48 39 f0             	cmp    rax,rsi
    5d80:	74 0f                	je     5d91 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2a1>
    5d82:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
    5d86:	f3 0f 6f 11          	movdqu xmm2,XMMWORD PTR [rcx]
    5d8a:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
    5d8e:	0f 11 12             	movups XMMWORD PTR [rdx],xmm2
    5d91:	48 85 ff             	test   rdi,rdi
    5d94:	74 05                	je     5d9b <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2ab>
    5d96:	e8 d5 da ff ff       	call   3870 <operator delete(void*)@plt>
    5d9b:	4c 01 e3             	add    rbx,r12
    5d9e:	4d 01 fe             	add    r14,r15
    5da1:	4c 89 7d 00          	mov    QWORD PTR [rbp+0x0],r15
    5da5:	48 8d 04 5b          	lea    rax,[rbx+rbx*2]
    5da9:	4c 89 75 10          	mov    QWORD PTR [rbp+0x10],r14
    5dad:	49 8d 04 c7          	lea    rax,[r15+rax*8]
    5db1:	48 89 45 08          	mov    QWORD PTR [rbp+0x8],rax
    5db5:	48 83 c4 08          	add    rsp,0x8
    5db9:	5b                   	pop    rbx
    5dba:	5d                   	pop    rbp
    5dbb:	41 5c                	pop    r12
    5dbd:	41 5d                	pop    r13
    5dbf:	41 5e                	pop    r14
    5dc1:	41 5f                	pop    r15
    5dc3:	c3                   	ret    
    5dc4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    5dc8:	48 89 f0             	mov    rax,rsi
    5dcb:	48 89 df             	mov    rdi,rbx
    5dce:	e9 dc fd ff ff       	jmp    5baf <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0xbf>
    5dd3:	4c 89 fa             	mov    rdx,r15
    5dd6:	48 89 f8             	mov    rax,rdi
    5dd9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    5de0:	f3 0f 6f 20          	movdqu xmm4,XMMWORD PTR [rax]
    5de4:	48 83 c0 18          	add    rax,0x18
    5de8:	48 83 c2 18          	add    rdx,0x18
    5dec:	0f 11 62 e8          	movups XMMWORD PTR [rdx-0x18],xmm4
    5df0:	48 8b 70 f8          	mov    rsi,QWORD PTR [rax-0x8]
    5df4:	48 89 72 f8          	mov    QWORD PTR [rdx-0x8],rsi
    5df8:	48 39 c1             	cmp    rcx,rax
    5dfb:	75 e3                	jne    5de0 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2f0>
    5dfd:	eb 92                	jmp    5d91 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x2a1>
    5dff:	48 89 d9             	mov    rcx,rbx
    5e02:	e9 88 fe ff ff       	jmp    5c8f <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)+0x19f>
    5e07:	48 8d 3d 6d d8 02 00 	lea    rdi,[rip+0x2d86d]        # 3367b <_IO_stdin_used+0x67b>
    5e0e:	e8 6d d9 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    5e13:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    5e1d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000005e20 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
    5e20:	f3 0f 1e fa          	endbr64 
    5e24:	41 57                	push   r15
    5e26:	41 56                	push   r14
    5e28:	41 55                	push   r13
    5e2a:	41 54                	push   r12
    5e2c:	55                   	push   rbp
    5e2d:	89 d5                	mov    ebp,edx
    5e2f:	53                   	push   rbx
    5e30:	48 89 fb             	mov    rbx,rdi
    5e33:	48 83 ec 68          	sub    rsp,0x68
    5e37:	4c 8b 66 08          	mov    r12,QWORD PTR [rsi+0x8]
    5e3b:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
    5e40:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    5e45:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5e4e:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    5e53:	31 c0                	xor    eax,eax
    5e55:	48 8d 47 10          	lea    rax,[rdi+0x10]
    5e59:	48 89 07             	mov    QWORD PTR [rdi],rax
    5e5c:	4c 8b 2e             	mov    r13,QWORD PTR [rsi]
    5e5f:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    5e64:	4c 89 e8             	mov    rax,r13
    5e67:	4c 01 e0             	add    rax,r12
    5e6a:	74 09                	je     5e75 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x55>
    5e6c:	4d 85 ed             	test   r13,r13
    5e6f:	0f 84 ef 0f 00 00    	je     6e64 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1044>
    5e75:	4c 89 64 24 50       	mov    QWORD PTR [rsp+0x50],r12
    5e7a:	49 83 fc 0f          	cmp    r12,0xf
    5e7e:	0f 87 24 0c 00 00    	ja     6aa8 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc88>
    5e84:	49 83 fc 01          	cmp    r12,0x1
    5e88:	0f 85 92 09 00 00    	jne    6820 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa00>
    5e8e:	41 0f b6 45 00       	movzx  eax,BYTE PTR [r13+0x0]
    5e93:	88 43 10             	mov    BYTE PTR [rbx+0x10],al
    5e96:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    5e9b:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
    5e9f:	42 c6 04 20 00       	mov    BYTE PTR [rax+r12*1],0x0
    5ea4:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    5ea9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    5ead:	89 43 20             	mov    DWORD PTR [rbx+0x20],eax
    5eb0:	e8 71 01 02 00       	call   26026 <scale_parameters>
    5eb5:	48 89 43 38          	mov    QWORD PTR [rbx+0x38],rax
    5eb9:	48 8d 43 50          	lea    rax,[rbx+0x50]
    5ebd:	66 0f ef c0          	pxor   xmm0,xmm0
    5ec1:	48 63 73 20          	movsxd rsi,DWORD PTR [rbx+0x20]
    5ec5:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    5eca:	48 89 43 40          	mov    QWORD PTR [rbx+0x40],rax
    5ece:	48 8d 43 60          	lea    rax,[rbx+0x60]
    5ed2:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    5ed7:	48 8d 43 70          	lea    rax,[rbx+0x70]
    5edb:	48 89 43 60          	mov    QWORD PTR [rbx+0x60],rax
    5edf:	48 c7 43 48 00 00 00 00 	mov    QWORD PTR [rbx+0x48],0x0
    5ee7:	c6 43 50 00          	mov    BYTE PTR [rbx+0x50],0x0
    5eeb:	48 c7 43 68 00 00 00 00 	mov    QWORD PTR [rbx+0x68],0x0
    5ef3:	c6 43 70 00          	mov    BYTE PTR [rbx+0x70],0x0
    5ef7:	40 88 ab 80 00 00 00 	mov    BYTE PTR [rbx+0x80],bpl
    5efe:	48 c7 83 98 00 00 00 00 00 00 00 	mov    QWORD PTR [rbx+0x98],0x0
    5f09:	48 c7 83 20 01 00 00 00 00 00 00 	mov    QWORD PTR [rbx+0x120],0x0
    5f14:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    5f19:	48 8d 83 30 01 00 00 	lea    rax,[rbx+0x130]
    5f20:	0f 11 83 88 00 00 00 	movups XMMWORD PTR [rbx+0x88],xmm0
    5f27:	48 89 c7             	mov    rdi,rax
    5f2a:	0f 11 83 a0 00 00 00 	movups XMMWORD PTR [rbx+0xa0],xmm0
    5f31:	0f 11 83 b0 00 00 00 	movups XMMWORD PTR [rbx+0xb0],xmm0
    5f38:	0f 11 83 c0 00 00 00 	movups XMMWORD PTR [rbx+0xc0],xmm0
    5f3f:	0f 11 83 d0 00 00 00 	movups XMMWORD PTR [rbx+0xd0],xmm0
    5f46:	0f 11 83 e0 00 00 00 	movups XMMWORD PTR [rbx+0xe0],xmm0
    5f4d:	0f 11 83 f0 00 00 00 	movups XMMWORD PTR [rbx+0xf0],xmm0
    5f54:	0f 11 83 00 01 00 00 	movups XMMWORD PTR [rbx+0x100],xmm0
    5f5b:	0f 11 83 10 01 00 00 	movups XMMWORD PTR [rbx+0x110],xmm0
    5f62:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    5f67:	e8 c4 66 00 00       	call   c630 <TraceArrows::TraceArrows(unsigned long)>
    5f6c:	8b 15 a6 70 2e 00    	mov    edx,DWORD PTR [rip+0x2e70a6]        # 2ed018 <energy_set>
    5f72:	66 0f ef c0          	pxor   xmm0,xmm0
    5f76:	48 8d 83 70 01 00 00 	lea    rax,[rbx+0x170]
    5f7d:	48 c7 83 80 01 00 00 00 00 00 00 	mov    QWORD PTR [rbx+0x180],0x0
    5f88:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
    5f8d:	0f 11 83 70 01 00 00 	movups XMMWORD PTR [rbx+0x170],xmm0
    5f94:	85 d2                	test   edx,edx
    5f96:	0f 85 9c 08 00 00    	jne    6838 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa18>
    5f9c:	66 0f 6f 0d fc e7 02 00 	movdqa xmm1,XMMWORD PTR [rip+0x2e7fc]        # 347a0 <BP_pair>
    5fa4:	66 0f 6f 15 04 e8 02 00 	movdqa xmm2,XMMWORD PTR [rip+0x2e804]        # 347b0 <BP_pair+0x10>
    5fac:	66 0f 6f 1d 0c e8 02 00 	movdqa xmm3,XMMWORD PTR [rip+0x2e80c]        # 347c0 <BP_pair+0x20>
    5fb4:	66 0f 6f 25 14 e8 02 00 	movdqa xmm4,XMMWORD PTR [rip+0x2e814]        # 347d0 <BP_pair+0x30>
    5fbc:	66 0f 6f 2d 1c e8 02 00 	movdqa xmm5,XMMWORD PTR [rip+0x2e81c]        # 347e0 <BP_pair+0x40>
    5fc4:	66 0f 6f 35 24 e8 02 00 	movdqa xmm6,XMMWORD PTR [rip+0x2e824]        # 347f0 <BP_pair+0x50>
    5fcc:	0f 29 0d ed c2 24 00 	movaps XMMWORD PTR [rip+0x24c2ed],xmm1        # 2522c0 <pair>
    5fd3:	66 0f 6f 3d 25 e8 02 00 	movdqa xmm7,XMMWORD PTR [rip+0x2e825]        # 34800 <BP_pair+0x60>
    5fdb:	66 0f 6f 0d 2d e8 02 00 	movdqa xmm1,XMMWORD PTR [rip+0x2e82d]        # 34810 <BP_pair+0x70>
    5fe3:	0f 29 15 e6 c2 24 00 	movaps XMMWORD PTR [rip+0x24c2e6],xmm2        # 2522d0 <pair+0x10>
    5fea:	66 0f 6f 05 be e8 02 00 	movdqa xmm0,XMMWORD PTR [rip+0x2e8be]        # 348b0 <Law_and_Order+0x10>
    5ff2:	66 0f 6f 15 26 e8 02 00 	movdqa xmm2,XMMWORD PTR [rip+0x2e826]        # 34820 <BP_pair+0x80>
    5ffa:	0f 11 1d 13 c3 24 00 	movups XMMWORD PTR [rip+0x24c313],xmm3        # 252314 <pair+0x54>
    6001:	0f 11 25 1c c3 24 00 	movups XMMWORD PTR [rip+0x24c31c],xmm4        # 252324 <pair+0x64>
    6008:	66 0f 6f 1d 20 e8 02 00 	movdqa xmm3,XMMWORD PTR [rip+0x2e820]        # 34830 <BP_pair+0x90>
    6010:	66 0f 6f 25 28 e8 02 00 	movdqa xmm4,XMMWORD PTR [rip+0x2e828]        # 34840 <BP_pair+0xa0>
    6018:	0f 11 2d 49 c3 24 00 	movups XMMWORD PTR [rip+0x24c349],xmm5        # 252368 <pair+0xa8>
    601f:	66 0f 6f 2d 29 e8 02 00 	movdqa xmm5,XMMWORD PTR [rip+0x2e829]        # 34850 <BP_pair+0xb0>
    6027:	0f 11 35 4a c3 24 00 	movups XMMWORD PTR [rip+0x24c34a],xmm6        # 252378 <pair+0xb8>
    602e:	66 0f 6f 35 2a e8 02 00 	movdqa xmm6,XMMWORD PTR [rip+0x2e82a]        # 34860 <BP_pair+0xc0>
    6036:	0f 11 3d 7f c3 24 00 	movups XMMWORD PTR [rip+0x24c37f],xmm7        # 2523bc <pair+0xfc>
    603d:	66 0f 6f 3d 2b e8 02 00 	movdqa xmm7,XMMWORD PTR [rip+0x2e82b]        # 34870 <BP_pair+0xd0>
    6045:	0f 11 0d 80 c3 24 00 	movups XMMWORD PTR [rip+0x24c380],xmm1        # 2523cc <pair+0x10c>
    604c:	66 0f 6f 0d 2c e8 02 00 	movdqa xmm1,XMMWORD PTR [rip+0x2e82c]        # 34880 <BP_pair+0xe0>
    6054:	0f 29 05 65 c9 24 00 	movaps XMMWORD PTR [rip+0x24c965],xmm0        # 2529c0 <alias>
    605b:	0f 29 15 ae c3 24 00 	movaps XMMWORD PTR [rip+0x24c3ae],xmm2        # 252410 <pair+0x150>
    6062:	0f 29 1d b7 c3 24 00 	movaps XMMWORD PTR [rip+0x24c3b7],xmm3        # 252420 <pair+0x160>
    6069:	0f 11 25 f4 c3 24 00 	movups XMMWORD PTR [rip+0x24c3f4],xmm4        # 252464 <pair+0x1a4>
    6070:	0f 11 2d fd c3 24 00 	movups XMMWORD PTR [rip+0x24c3fd],xmm5        # 252474 <pair+0x1b4>
    6077:	0f 11 35 3a c4 24 00 	movups XMMWORD PTR [rip+0x24c43a],xmm6        # 2524b8 <pair+0x1f8>
    607e:	0f 11 3d 43 c4 24 00 	movups XMMWORD PTR [rip+0x24c443],xmm7        # 2524c8 <pair+0x208>
    6085:	0f 11 0d 80 c4 24 00 	movups XMMWORD PTR [rip+0x24c480],xmm1        # 25250c <pair+0x24c>
    608c:	66 0f 6f 15 fc e7 02 00 	movdqa xmm2,XMMWORD PTR [rip+0x2e7fc]        # 34890 <BP_pair+0xf0>
    6094:	8b 0d 6a 6f 2e 00    	mov    ecx,DWORD PTR [rip+0x2e6f6a]        # 2ed004 <noGU>
    609a:	0f 11 15 7b c4 24 00 	movups XMMWORD PTR [rip+0x24c47b],xmm2        # 25251c <pair+0x25c>
    60a1:	85 c9                	test   ecx,ecx
    60a3:	74 14                	je     60b9 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x299>
    60a5:	c7 05 6d c3 24 00 00 00 00 00 	mov    DWORD PTR [rip+0x24c36d],0x0        # 25241c <pair+0x15c>
    60af:	c7 05 13 c3 24 00 00 00 00 00 	mov    DWORD PTR [rip+0x24c313],0x0        # 2523cc <pair+0x10c>
    60b9:	4c 8b 25 60 6f 2e 00 	mov    r12,QWORD PTR [rip+0x2e6f60]        # 2ed020 <nonstandards>
    60c0:	4d 85 e4             	test   r12,r12
    60c3:	0f 84 c1 00 00 00    	je     618a <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x36a>
    60c9:	4c 89 e7             	mov    rdi,r12
    60cc:	31 ed                	xor    ebp,ebp
    60ce:	4c 8d 2d cb e7 02 00 	lea    r13,[rip+0x2e7cb]        # 348a0 <Law_and_Order>
    60d5:	4c 8d 35 e4 c1 24 00 	lea    r14,[rip+0x24c1e4]        # 2522c0 <pair>
    60dc:	e8 3f d6 ff ff       	call   3720 <strlen@plt>
    60e1:	39 e8                	cmp    eax,ebp
    60e3:	0f 8e a1 00 00 00    	jle    618a <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x36a>
    60e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    60f0:	41 0f be 3c 2c       	movsx  edi,BYTE PTR [r12+rbp*1]
    60f5:	45 31 ff             	xor    r15d,r15d
    60f8:	e8 63 da ff ff       	call   3b60 <toupper@plt>
    60fd:	4c 89 ef             	mov    rdi,r13
    6100:	0f be f0             	movsx  esi,al
    6103:	e8 d8 d5 ff ff       	call   36e0 <strchr@plt>
    6108:	48 85 c0             	test   rax,rax
    610b:	74 1b                	je     6128 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x308>
    610d:	4c 29 e8             	sub    rax,r13
    6110:	41 89 c7             	mov    r15d,eax
    6113:	83 f8 05             	cmp    eax,0x5
    6116:	0f 8f a4 08 00 00    	jg     69c0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xba0>
    611c:	b8 04 00 00 00       	mov    eax,0x4
    6121:	44 0f 44 f8          	cmove  r15d,eax
    6125:	0f 1f 00             	nop    DWORD PTR [rax]
    6128:	41 0f be 7c 2c 01    	movsx  edi,BYTE PTR [r12+rbp*1+0x1]
    612e:	e8 2d da ff ff       	call   3b60 <toupper@plt>
    6133:	4c 89 ef             	mov    rdi,r13
    6136:	0f be f0             	movsx  esi,al
    6139:	e8 a2 d5 ff ff       	call   36e0 <strchr@plt>
    613e:	31 d2                	xor    edx,edx
    6140:	48 85 c0             	test   rax,rax
    6143:	74 1b                	je     6160 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x340>
    6145:	4c 29 e8             	sub    rax,r13
    6148:	48 63 d0             	movsxd rdx,eax
    614b:	83 f8 05             	cmp    eax,0x5
    614e:	0f 8f 64 08 00 00    	jg     69b8 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb98>
    6154:	b8 04 00 00 00       	mov    eax,0x4
    6159:	48 0f 44 d0          	cmove  rdx,rax
    615d:	0f 1f 00             	nop    DWORD PTR [rax]
    6160:	49 63 c7             	movsxd rax,r15d
    6163:	4c 89 e7             	mov    rdi,r12
    6166:	48 83 c5 02          	add    rbp,0x2
    616a:	48 8d 0c 80          	lea    rcx,[rax+rax*4]
    616e:	48 8d 04 88          	lea    rax,[rax+rcx*4]
    6172:	48 01 c2             	add    rdx,rax
    6175:	41 c7 04 96 07 00 00 00 	mov    DWORD PTR [r14+rdx*4],0x7
    617d:	e8 9e d5 ff ff       	call   3720 <strlen@plt>
    6182:	39 e8                	cmp    eax,ebp
    6184:	0f 8f 66 ff ff ff    	jg     60f0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2d0>
    618a:	48 63 0d 2f c1 24 00 	movsxd rcx,DWORD PTR [rip+0x24c12f]        # 2522c0 <pair>
    6191:	48 8d 05 28 70 1e 00 	lea    rax,[rip+0x1e7028]        # 1ed1c0 <rtype>
    6198:	48 63 15 75 c1 24 00 	movsxd rdx,DWORD PTR [rip+0x24c175]        # 252314 <pair+0x54>
    619f:	48 63 3d 22 c1 24 00 	movsxd rdi,DWORD PTR [rip+0x24c122]        # 2522c8 <pair+0x8>
    61a6:	44 8b 25 0f c2 24 00 	mov    r12d,DWORD PTR [rip+0x24c20f]        # 2523bc <pair+0xfc>
    61ad:	89 0c 88             	mov    DWORD PTR [rax+rcx*4],ecx
    61b0:	48 63 0d 0d c1 24 00 	movsxd rcx,DWORD PTR [rip+0x24c10d]        # 2522c4 <pair+0x4>
    61b7:	49 89 f8             	mov    r8,rdi
    61ba:	44 8b 1d 4f c2 24 00 	mov    r11d,DWORD PTR [rip+0x24c24f]        # 252410 <pair+0x150>
    61c1:	44 8b 15 f0 c2 24 00 	mov    r10d,DWORD PTR [rip+0x24c2f0]        # 2524b8 <pair+0x1f8>
    61c8:	89 14 88             	mov    DWORD PTR [rax+rcx*4],edx
    61cb:	48 89 ce             	mov    rsi,rcx
    61ce:	48 63 0d 93 c1 24 00 	movsxd rcx,DWORD PTR [rip+0x24c193]        # 252368 <pair+0xa8>
    61d5:	4c 63 0d 44 c1 24 00 	movsxd r9,DWORD PTR [rip+0x24c144]        # 252320 <pair+0x60>
    61dc:	89 0c b8             	mov    DWORD PTR [rax+rdi*4],ecx
    61df:	48 63 3d e6 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c0e6]        # 2522cc <pair+0xc>
    61e6:	44 89 24 b8          	mov    DWORD PTR [rax+rdi*4],r12d
    61ea:	49 89 fd             	mov    r13,rdi
    61ed:	48 63 3d dc c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c0dc]        # 2522d0 <pair+0x10>
    61f4:	44 89 1c b8          	mov    DWORD PTR [rax+rdi*4],r11d
    61f8:	48 63 3d d5 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c0d5]        # 2522d4 <pair+0x14>
    61ff:	44 8b 1d 5e c2 24 00 	mov    r11d,DWORD PTR [rip+0x24c25e]        # 252464 <pair+0x1a4>
    6206:	44 89 1c b8          	mov    DWORD PTR [rax+rdi*4],r11d
    620a:	48 63 3d c7 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c0c7]        # 2522d8 <pair+0x18>
    6211:	44 8b 1d f4 c2 24 00 	mov    r11d,DWORD PTR [rip+0x24c2f4]        # 25250c <pair+0x24c>
    6218:	44 89 14 b8          	mov    DWORD PTR [rax+rdi*4],r10d
    621c:	48 63 3d b9 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c0b9]        # 2522dc <pair+0x1c>
    6223:	4d 89 ca             	mov    r10,r9
    6226:	44 89 1c b8          	mov    DWORD PTR [rax+rdi*4],r11d
    622a:	89 34 90             	mov    DWORD PTR [rax+rdx*4],esi
    622d:	48 63 35 e4 c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c0e4]        # 252318 <pair+0x58>
    6234:	48 63 15 31 c1 24 00 	movsxd rdx,DWORD PTR [rip+0x24c131]        # 25236c <pair+0xac>
    623b:	89 34 b0             	mov    DWORD PTR [rax+rsi*4],esi
    623e:	48 63 35 d7 c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c0d7]        # 25231c <pair+0x5c>
    6245:	89 14 b0             	mov    DWORD PTR [rax+rsi*4],edx
    6248:	48 89 f7             	mov    rdi,rsi
    624b:	48 63 35 6e c1 24 00 	movsxd rsi,DWORD PTR [rip+0x24c16e]        # 2523c0 <pair+0x100>
    6252:	42 89 34 88          	mov    DWORD PTR [rax+r9*4],esi
    6256:	4c 63 0d c7 c0 24 00 	movsxd r9,DWORD PTR [rip+0x24c0c7]        # 252324 <pair+0x64>
    625d:	44 8b 1d b0 c1 24 00 	mov    r11d,DWORD PTR [rip+0x24c1b0]        # 252414 <pair+0x154>
    6264:	44 8b 35 fd c1 24 00 	mov    r14d,DWORD PTR [rip+0x24c1fd]        # 252468 <pair+0x1a8>
    626b:	4c 89 cd             	mov    rbp,r9
    626e:	46 89 1c 88          	mov    DWORD PTR [rax+r9*4],r11d
    6272:	4c 63 0d af c0 24 00 	movsxd r9,DWORD PTR [rip+0x24c0af]        # 252328 <pair+0x68>
    6279:	46 89 34 88          	mov    DWORD PTR [rax+r9*4],r14d
    627d:	4c 63 0d a8 c0 24 00 	movsxd r9,DWORD PTR [rip+0x24c0a8]        # 25232c <pair+0x6c>
    6284:	44 8b 35 31 c2 24 00 	mov    r14d,DWORD PTR [rip+0x24c231]        # 2524bc <pair+0x1fc>
    628b:	46 89 34 88          	mov    DWORD PTR [rax+r9*4],r14d
    628f:	4c 63 0d 9a c0 24 00 	movsxd r9,DWORD PTR [rip+0x24c09a]        # 252330 <pair+0x70>
    6296:	44 8b 35 73 c2 24 00 	mov    r14d,DWORD PTR [rip+0x24c273]        # 252510 <pair+0x250>
    629d:	46 89 34 88          	mov    DWORD PTR [rax+r9*4],r14d
    62a1:	44 8b 35 c4 c1 24 00 	mov    r14d,DWORD PTR [rip+0x24c1c4]        # 25246c <pair+0x1ac>
    62a8:	44 89 04 88          	mov    DWORD PTR [rax+rcx*4],r8d
    62ac:	48 63 0d bd c0 24 00 	movsxd rcx,DWORD PTR [rip+0x24c0bd]        # 252370 <pair+0xb0>
    62b3:	89 3c 90             	mov    DWORD PTR [rax+rdx*4],edi
    62b6:	48 63 15 07 c1 24 00 	movsxd rdx,DWORD PTR [rip+0x24c107]        # 2523c4 <pair+0x104>
    62bd:	89 0c 88             	mov    DWORD PTR [rax+rcx*4],ecx
    62c0:	48 63 0d ad c0 24 00 	movsxd rcx,DWORD PTR [rip+0x24c0ad]        # 252374 <pair+0xb4>
    62c7:	48 63 3d aa c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c0aa]        # 252378 <pair+0xb8>
    62ce:	89 14 88             	mov    DWORD PTR [rax+rcx*4],edx
    62d1:	49 89 c8             	mov    r8,rcx
    62d4:	48 63 0d 3d c1 24 00 	movsxd rcx,DWORD PTR [rip+0x24c13d]        # 252418 <pair+0x158>
    62db:	49 89 f9             	mov    r9,rdi
    62de:	89 0c b8             	mov    DWORD PTR [rax+rdi*4],ecx
    62e1:	48 63 3d 94 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c094]        # 25237c <pair+0xbc>
    62e8:	44 89 34 b8          	mov    DWORD PTR [rax+rdi*4],r14d
    62ec:	49 89 ff             	mov    r15,rdi
    62ef:	44 8b 35 ca c1 24 00 	mov    r14d,DWORD PTR [rip+0x24c1ca]        # 2524c0 <pair+0x200>
    62f6:	48 63 3d 83 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c083]        # 252380 <pair+0xc0>
    62fd:	44 89 34 b8          	mov    DWORD PTR [rax+rdi*4],r14d
    6301:	48 63 3d 7c c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c07c]        # 252384 <pair+0xc4>
    6308:	44 8b 35 05 c2 24 00 	mov    r14d,DWORD PTR [rip+0x24c205]        # 252514 <pair+0x254>
    630f:	44 89 34 b8          	mov    DWORD PTR [rax+rdi*4],r14d
    6313:	49 63 fc             	movsxd rdi,r12d
    6316:	44 89 2c b8          	mov    DWORD PTR [rax+rdi*4],r13d
    631a:	44 89 14 b0          	mov    DWORD PTR [rax+rsi*4],r10d
    631e:	48 63 35 a3 c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c0a3]        # 2523c8 <pair+0x108>
    6325:	44 89 04 90          	mov    DWORD PTR [rax+rdx*4],r8d
    6329:	48 63 15 ec c0 24 00 	movsxd rdx,DWORD PTR [rip+0x24c0ec]        # 25241c <pair+0x15c>
    6330:	89 34 b0             	mov    DWORD PTR [rax+rsi*4],esi
    6333:	48 63 35 92 c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c092]        # 2523cc <pair+0x10c>
    633a:	48 63 3d 8f c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c08f]        # 2523d0 <pair+0x110>
    6341:	44 8b 25 7c c1 24 00 	mov    r12d,DWORD PTR [rip+0x24c17c]        # 2524c4 <pair+0x204>
    6348:	89 14 b0             	mov    DWORD PTR [rax+rsi*4],edx
    634b:	49 89 f0             	mov    r8,rsi
    634e:	48 63 35 1b c1 24 00 	movsxd rsi,DWORD PTR [rip+0x24c11b]        # 252470 <pair+0x1b0>
    6355:	49 89 fa             	mov    r10,rdi
    6358:	44 8b 35 b9 c1 24 00 	mov    r14d,DWORD PTR [rip+0x24c1b9]        # 252518 <pair+0x258>
    635f:	89 34 b8             	mov    DWORD PTR [rax+rdi*4],esi
    6362:	48 63 3d 6b c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c06b]        # 2523d4 <pair+0x114>
    6369:	44 89 24 b8          	mov    DWORD PTR [rax+rdi*4],r12d
    636d:	49 89 fd             	mov    r13,rdi
    6370:	48 63 3d 61 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c061]        # 2523d8 <pair+0x118>
    6377:	44 89 34 b8          	mov    DWORD PTR [rax+rdi*4],r14d
    637b:	48 63 3d 8e c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c08e]        # 252410 <pair+0x150>
    6382:	44 8b 35 47 bf 24 00 	mov    r14d,DWORD PTR [rip+0x24bf47]        # 2522d0 <pair+0x10>
    6389:	44 89 34 b8          	mov    DWORD PTR [rax+rdi*4],r14d
    638d:	49 63 fb             	movsxd rdi,r11d
    6390:	89 2c b8             	mov    DWORD PTR [rax+rdi*4],ebp
    6393:	48 63 3d 2e c1 24 00 	movsxd rdi,DWORD PTR [rip+0x24c12e]        # 2524c8 <pair+0x208>
    639a:	44 89 0c 88          	mov    DWORD PTR [rax+rcx*4],r9d
    639e:	48 63 0d 7b c0 24 00 	movsxd rcx,DWORD PTR [rip+0x24c07b]        # 252420 <pair+0x160>
    63a5:	44 89 04 90          	mov    DWORD PTR [rax+rdx*4],r8d
    63a9:	48 63 15 c4 c0 24 00 	movsxd rdx,DWORD PTR [rip+0x24c0c4]        # 252474 <pair+0x1b4>
    63b0:	89 0c 88             	mov    DWORD PTR [rax+rcx*4],ecx
    63b3:	48 63 0d 6a c0 24 00 	movsxd rcx,DWORD PTR [rip+0x24c06a]        # 252424 <pair+0x164>
    63ba:	4c 63 05 6b c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c06b]        # 25242c <pair+0x16c>
    63c1:	89 14 88             	mov    DWORD PTR [rax+rcx*4],edx
    63c4:	49 89 c9             	mov    r9,rcx
    63c7:	48 63 0d 5a c0 24 00 	movsxd rcx,DWORD PTR [rip+0x24c05a]        # 252428 <pair+0x168>
    63ce:	4c 89 c5             	mov    rbp,r8
    63d1:	89 3c 88             	mov    DWORD PTR [rax+rcx*4],edi
    63d4:	49 89 cb             	mov    r11,rcx
    63d7:	48 63 0d 3e c1 24 00 	movsxd rcx,DWORD PTR [rip+0x24c13e]        # 25251c <pair+0x25c>
    63de:	42 89 0c 80          	mov    DWORD PTR [rax+r8*4],ecx
    63e2:	4c 63 05 7b c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c07b]        # 252464 <pair+0x1a4>
    63e9:	44 8b 35 e4 be 24 00 	mov    r14d,DWORD PTR [rip+0x24bee4]        # 2522d4 <pair+0x14>
    63f0:	46 89 34 80          	mov    DWORD PTR [rax+r8*4],r14d
    63f4:	4c 63 05 6d c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c06d]        # 252468 <pair+0x1a8>
    63fb:	44 8b 35 26 bf 24 00 	mov    r14d,DWORD PTR [rip+0x24bf26]        # 252328 <pair+0x68>
    6402:	46 89 34 80          	mov    DWORD PTR [rax+r8*4],r14d
    6406:	4c 63 05 5f c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c05f]        # 25246c <pair+0x1ac>
    640d:	44 8b 35 18 bf 24 00 	mov    r14d,DWORD PTR [rip+0x24bf18]        # 25232c <pair+0x6c>
    6414:	46 89 3c 80          	mov    DWORD PTR [rax+r8*4],r15d
    6418:	4c 63 05 61 c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c061]        # 252480 <pair+0x1c0>
    641f:	44 89 14 b0          	mov    DWORD PTR [rax+rsi*4],r10d
    6423:	48 63 35 4e c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c04e]        # 252478 <pair+0x1b8>
    642a:	44 89 0c 90          	mov    DWORD PTR [rax+rdx*4],r9d
    642e:	48 63 15 47 c0 24 00 	movsxd rdx,DWORD PTR [rip+0x24c047]        # 25247c <pair+0x1bc>
    6435:	4d 89 c1             	mov    r9,r8
    6438:	89 34 b0             	mov    DWORD PTR [rax+rsi*4],esi
    643b:	48 63 35 8a c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c08a]        # 2524cc <pair+0x20c>
    6442:	49 89 d2             	mov    r10,rdx
    6445:	44 8b 3d 8c be 24 00 	mov    r15d,DWORD PTR [rip+0x24be8c]        # 2522d8 <pair+0x18>
    644c:	89 34 90             	mov    DWORD PTR [rax+rdx*4],esi
    644f:	48 63 15 ca c0 24 00 	movsxd rdx,DWORD PTR [rip+0x24c0ca]        # 252520 <pair+0x260>
    6456:	42 89 14 80          	mov    DWORD PTR [rax+r8*4],edx
    645a:	4c 63 05 57 c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c057]        # 2524b8 <pair+0x1f8>
    6461:	46 89 3c 80          	mov    DWORD PTR [rax+r8*4],r15d
    6465:	4c 63 05 50 c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c050]        # 2524bc <pair+0x1fc>
    646c:	44 8b 3d 0d bf 24 00 	mov    r15d,DWORD PTR [rip+0x24bf0d]        # 252380 <pair+0xc0>
    6473:	46 89 34 80          	mov    DWORD PTR [rax+r8*4],r14d
    6477:	4c 63 05 42 c0 24 00 	movsxd r8,DWORD PTR [rip+0x24c042]        # 2524c0 <pair+0x200>
    647e:	46 89 3c 80          	mov    DWORD PTR [rax+r8*4],r15d
    6482:	4d 63 c4             	movsxd r8,r12d
    6485:	46 89 2c 80          	mov    DWORD PTR [rax+r8*4],r13d
    6489:	44 89 1c b8          	mov    DWORD PTR [rax+rdi*4],r11d
    648d:	48 63 3d 3c c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c03c]        # 2524d0 <pair+0x210>
    6494:	44 89 14 b0          	mov    DWORD PTR [rax+rsi*4],r10d
    6498:	89 3c b8             	mov    DWORD PTR [rax+rdi*4],edi
    649b:	48 63 3d 32 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c032]        # 2524d4 <pair+0x214>
    64a2:	48 63 35 7b c0 24 00 	movsxd rsi,DWORD PTR [rip+0x24c07b]        # 252524 <pair+0x264>
    64a9:	44 8b 15 2c be 24 00 	mov    r10d,DWORD PTR [rip+0x24be2c]        # 2522dc <pair+0x1c>
    64b0:	49 89 f8             	mov    r8,rdi
    64b3:	44 8b 1d 76 be 24 00 	mov    r11d,DWORD PTR [rip+0x24be76]        # 252330 <pair+0x70>
    64ba:	89 34 b8             	mov    DWORD PTR [rax+rdi*4],esi
    64bd:	48 63 3d 48 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c048]        # 25250c <pair+0x24c>
    64c4:	44 89 14 b8          	mov    DWORD PTR [rax+rdi*4],r10d
    64c8:	48 63 3d 41 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c041]        # 252510 <pair+0x250>
    64cf:	44 8b 15 ae be 24 00 	mov    r10d,DWORD PTR [rip+0x24beae]        # 252384 <pair+0xc4>
    64d6:	44 89 1c b8          	mov    DWORD PTR [rax+rdi*4],r11d
    64da:	48 63 3d 33 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c033]        # 252514 <pair+0x254>
    64e1:	44 8b 1d f0 be 24 00 	mov    r11d,DWORD PTR [rip+0x24bef0]        # 2523d8 <pair+0x118>
    64e8:	44 89 14 b8          	mov    DWORD PTR [rax+rdi*4],r10d
    64ec:	48 63 3d 25 c0 24 00 	movsxd rdi,DWORD PTR [rip+0x24c025]        # 252518 <pair+0x258>
    64f3:	44 89 1c b8          	mov    DWORD PTR [rax+rdi*4],r11d
    64f7:	89 2c 88             	mov    DWORD PTR [rax+rcx*4],ebp
    64fa:	48 63 0d 27 c0 24 00 	movsxd rcx,DWORD PTR [rip+0x24c027]        # 252528 <pair+0x268>
    6501:	44 89 0c 90          	mov    DWORD PTR [rax+rdx*4],r9d
    6505:	44 89 04 b0          	mov    DWORD PTR [rax+rsi*4],r8d
    6509:	89 0c 88             	mov    DWORD PTR [rax+rcx*4],ecx
    650c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    6511:	4c 8b 20             	mov    r12,QWORD PTR [rax]
    6514:	4c 89 e7             	mov    rdi,r12
    6517:	e8 04 d2 ff ff       	call   3720 <strlen@plt>
    651c:	8d 7c 00 04          	lea    edi,[rax+rax*1+0x4]
    6520:	48 89 c5             	mov    rbp,rax
    6523:	41 89 c5             	mov    r13d,eax
    6526:	e8 e6 87 02 00       	call   2ed11 <vrna_alloc>
    652b:	49 89 c7             	mov    r15,rax
    652e:	85 ed                	test   ebp,ebp
    6530:	74 43                	je     6575 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x755>
    6532:	8b 15 e0 6a 2e 00    	mov    edx,DWORD PTR [rip+0x2e6ae0]        # 2ed018 <energy_set>
    6538:	41 be 01 00 00 00    	mov    r14d,0x1
    653e:	85 d2                	test   edx,edx
    6540:	0f 8e fa 04 00 00    	jle    6a40 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc20>
    6546:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    6550:	41 8d 46 ff          	lea    eax,[r14-0x1]
    6554:	41 0f be 3c 04       	movsx  edi,BYTE PTR [r12+rax*1]
    6559:	e8 02 d6 ff ff       	call   3b60 <toupper@plt>
    655e:	44 89 f2             	mov    edx,r14d
    6561:	41 83 c6 01          	add    r14d,0x1
    6565:	0f be c0             	movsx  eax,al
    6568:	83 e8 40             	sub    eax,0x40
    656b:	66 41 89 04 57       	mov    WORD PTR [r15+rdx*2],ax
    6570:	45 39 f5             	cmp    r13d,r14d
    6573:	73 db                	jae    6550 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x730>
    6575:	41 0f b7 4f 02       	movzx  ecx,WORD PTR [r15+0x2]
    657a:	8d 45 01             	lea    eax,[rbp+0x1]
    657d:	66 41 89 0c 47       	mov    WORD PTR [r15+rax*2],cx
    6582:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    6587:	66 41 89 2f          	mov    WORD PTR [r15],bp
    658b:	4c 8b 20             	mov    r12,QWORD PTR [rax]
    658e:	4c 89 7b 28          	mov    QWORD PTR [rbx+0x28],r15
    6592:	4c 89 e7             	mov    rdi,r12
    6595:	e8 86 d1 ff ff       	call   3720 <strlen@plt>
    659a:	8d 7c 00 04          	lea    edi,[rax+rax*1+0x4]
    659e:	89 44 24 08          	mov    DWORD PTR [rsp+0x8],eax
    65a2:	48 89 c5             	mov    rbp,rax
    65a5:	e8 67 87 02 00       	call   2ed11 <vrna_alloc>
    65aa:	49 89 c5             	mov    r13,rax
    65ad:	85 ed                	test   ebp,ebp
    65af:	74 58                	je     6609 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7e9>
    65b1:	8b 05 61 6a 2e 00    	mov    eax,DWORD PTR [rip+0x2e6a61]        # 2ed018 <energy_set>
    65b7:	41 bf 01 00 00 00    	mov    r15d,0x1
    65bd:	4c 8d 35 fc c3 24 00 	lea    r14,[rip+0x24c3fc]        # 2529c0 <alias>
    65c4:	85 c0                	test   eax,eax
    65c6:	0f 8e 04 04 00 00    	jle    69d0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xbb0>
    65cc:	44 89 f8             	mov    eax,r15d
    65cf:	4d 89 ef             	mov    r15,r13
    65d2:	41 89 c5             	mov    r13d,eax
    65d5:	0f 1f 00             	nop    DWORD PTR [rax]
    65d8:	41 8d 45 ff          	lea    eax,[r13-0x1]
    65dc:	41 0f be 3c 04       	movsx  edi,BYTE PTR [r12+rax*1]
    65e1:	e8 7a d5 ff ff       	call   3b60 <toupper@plt>
    65e6:	0f be c0             	movsx  eax,al
    65e9:	83 e8 40             	sub    eax,0x40
    65ec:	48 98                	cdqe   
    65ee:	41 0f b7 14 46       	movzx  edx,WORD PTR [r14+rax*2]
    65f3:	44 89 e8             	mov    eax,r13d
    65f6:	41 83 c5 01          	add    r13d,0x1
    65fa:	66 41 89 14 47       	mov    WORD PTR [r15+rax*2],dx
    65ff:	44 39 6c 24 08       	cmp    DWORD PTR [rsp+0x8],r13d
    6604:	73 d2                	jae    65d8 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7b8>
    6606:	4d 89 fd             	mov    r13,r15
    6609:	41 0f b7 4d 02       	movzx  ecx,WORD PTR [r13+0x2]
    660e:	8d 45 01             	lea    eax,[rbp+0x1]
    6611:	89 ed                	mov    ebp,ebp
    6613:	4c 8b 83 90 00 00 00 	mov    r8,QWORD PTR [rbx+0x90]
    661a:	66 41 89 4c 45 00    	mov    WORD PTR [r13+rax*2+0x0],cx
    6620:	41 0f b7 44 6d 00    	movzx  eax,WORD PTR [r13+rbp*2+0x0]
    6626:	48 8b 8b 88 00 00 00 	mov    rcx,QWORD PTR [rbx+0x88]
    662d:	66 41 89 45 00       	mov    WORD PTR [r13+0x0],ax
    6632:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6635:	4c 89 6b 30          	mov    QWORD PTR [rbx+0x30],r13
    6639:	8d 70 01             	lea    esi,[rax+0x1]
    663c:	4c 89 c0             	mov    rax,r8
    663f:	c7 44 24 50 80 96 98 00 	mov    DWORD PTR [rsp+0x50],0x989680
    6647:	48 63 f6             	movsxd rsi,esi
    664a:	48 29 c8             	sub    rax,rcx
    664d:	48 c7 83 a0 00 00 00 1f 00 00 00 	mov    QWORD PTR [rbx+0xa0],0x1f
    6658:	48 89 f2             	mov    rdx,rsi
    665b:	48 c1 f8 02          	sar    rax,0x2
    665f:	48 89 b3 a8 00 00 00 	mov    QWORD PTR [rbx+0xa8],rsi
    6666:	48 c1 e2 05          	shl    rdx,0x5
    666a:	48 29 f2             	sub    rdx,rsi
    666d:	48 39 c2             	cmp    rdx,rax
    6670:	0f 87 ba 04 00 00    	ja     6b30 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd10>
    6676:	73 10                	jae    6688 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x868>
    6678:	48 8d 04 91          	lea    rax,[rcx+rdx*4]
    667c:	49 39 c0             	cmp    r8,rax
    667f:	74 07                	je     6688 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x868>
    6681:	48 89 83 90 00 00 00 	mov    QWORD PTR [rbx+0x90],rax
    6688:	4c 8b 83 b8 00 00 00 	mov    r8,QWORD PTR [rbx+0xb8]
    668f:	48 8b 93 b0 00 00 00 	mov    rdx,QWORD PTR [rbx+0xb0]
    6696:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [rsp+0x50],0x0
    669e:	4c 89 c0             	mov    rax,r8
    66a1:	48 29 d0             	sub    rax,rdx
    66a4:	48 c1 f8 02          	sar    rax,0x2
    66a8:	48 39 c6             	cmp    rsi,rax
    66ab:	0f 87 4f 04 00 00    	ja     6b00 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xce0>
    66b1:	73 10                	jae    66c3 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8a3>
    66b3:	48 8d 04 b2          	lea    rax,[rdx+rsi*4]
    66b7:	49 39 c0             	cmp    r8,rax
    66ba:	74 07                	je     66c3 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8a3>
    66bc:	48 89 83 b8 00 00 00 	mov    QWORD PTR [rbx+0xb8],rax
    66c3:	4c 8b 83 d0 00 00 00 	mov    r8,QWORD PTR [rbx+0xd0]
    66ca:	48 8b 93 c8 00 00 00 	mov    rdx,QWORD PTR [rbx+0xc8]
    66d1:	c7 44 24 50 80 96 98 00 	mov    DWORD PTR [rsp+0x50],0x989680
    66d9:	4c 89 c0             	mov    rax,r8
    66dc:	48 29 d0             	sub    rax,rdx
    66df:	48 c1 f8 02          	sar    rax,0x2
    66e3:	48 39 c6             	cmp    rsi,rax
    66e6:	0f 87 f4 04 00 00    	ja     6be0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdc0>
    66ec:	73 10                	jae    66fe <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8de>
    66ee:	48 8d 04 b2          	lea    rax,[rdx+rsi*4]
    66f2:	49 39 c0             	cmp    r8,rax
    66f5:	74 07                	je     66fe <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8de>
    66f7:	48 89 83 d0 00 00 00 	mov    QWORD PTR [rbx+0xd0],rax
    66fe:	4c 8b 83 e8 00 00 00 	mov    r8,QWORD PTR [rbx+0xe8]
    6705:	48 8b 93 e0 00 00 00 	mov    rdx,QWORD PTR [rbx+0xe0]
    670c:	c7 44 24 50 80 96 98 00 	mov    DWORD PTR [rsp+0x50],0x989680
    6714:	4c 89 c0             	mov    rax,r8
    6717:	48 29 d0             	sub    rax,rdx
    671a:	48 c1 f8 02          	sar    rax,0x2
    671e:	48 39 f0             	cmp    rax,rsi
    6721:	0f 82 89 04 00 00    	jb     6bb0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd90>
    6727:	76 10                	jbe    6739 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x919>
    6729:	48 8d 04 b2          	lea    rax,[rdx+rsi*4]
    672d:	49 39 c0             	cmp    r8,rax
    6730:	74 07                	je     6739 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x919>
    6732:	48 89 83 e8 00 00 00 	mov    QWORD PTR [rbx+0xe8],rax
    6739:	4c 8b 83 00 01 00 00 	mov    r8,QWORD PTR [rbx+0x100]
    6740:	48 8b 93 f8 00 00 00 	mov    rdx,QWORD PTR [rbx+0xf8]
    6747:	c7 44 24 50 80 96 98 00 	mov    DWORD PTR [rsp+0x50],0x989680
    674f:	4c 89 c0             	mov    rax,r8
    6752:	48 29 d0             	sub    rax,rdx
    6755:	48 c1 f8 02          	sar    rax,0x2
    6759:	48 39 f0             	cmp    rax,rsi
    675c:	0f 82 1e 04 00 00    	jb     6b80 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd60>
    6762:	76 10                	jbe    6774 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x954>
    6764:	48 8d 04 b2          	lea    rax,[rdx+rsi*4]
    6768:	49 39 c0             	cmp    r8,rax
    676b:	74 07                	je     6774 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x954>
    676d:	48 89 83 00 01 00 00 	mov    QWORD PTR [rbx+0x100],rax
    6774:	4c 8b 83 18 01 00 00 	mov    r8,QWORD PTR [rbx+0x118]
    677b:	48 8b 93 10 01 00 00 	mov    rdx,QWORD PTR [rbx+0x110]
    6782:	c7 44 24 50 80 96 98 00 	mov    DWORD PTR [rsp+0x50],0x989680
    678a:	4c 89 c0             	mov    rax,r8
    678d:	48 29 d0             	sub    rax,rdx
    6790:	48 c1 f8 02          	sar    rax,0x2
    6794:	48 39 f0             	cmp    rax,rsi
    6797:	0f 82 bb 03 00 00    	jb     6b58 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd38>
    679d:	76 10                	jbe    67af <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x98f>
    679f:	48 8d 04 b2          	lea    rax,[rdx+rsi*4]
    67a3:	49 39 c0             	cmp    r8,rax
    67a6:	74 07                	je     67af <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x98f>
    67a8:	48 89 83 18 01 00 00 	mov    QWORD PTR [rbx+0x118],rax
    67af:	4c 8b ab 78 01 00 00 	mov    r13,QWORD PTR [rbx+0x178]
    67b6:	48 8b 93 70 01 00 00 	mov    rdx,QWORD PTR [rbx+0x170]
    67bd:	48 b9 ab aa aa aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaab
    67c7:	4c 89 e8             	mov    rax,r13
    67ca:	48 29 d0             	sub    rax,rdx
    67cd:	48 c1 f8 03          	sar    rax,0x3
    67d1:	48 0f af c1          	imul   rax,rcx
    67d5:	48 39 f0             	cmp    rax,rsi
    67d8:	0f 82 02 03 00 00    	jb     6ae0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xcc0>
    67de:	0f 87 2c 04 00 00    	ja     6c10 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdf0>
    67e4:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    67e9:	e8 02 69 00 00       	call   d0f0 <resize(TraceArrows&, unsigned long)>
    67ee:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    67f3:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
    67f8:	e8 93 cf ff ff       	call   3790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    67fd:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    6802:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    680b:	0f 85 5f 06 00 00    	jne    6e70 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1050>
    6811:	48 83 c4 68          	add    rsp,0x68
    6815:	5b                   	pop    rbx
    6816:	5d                   	pop    rbp
    6817:	41 5c                	pop    r12
    6819:	41 5d                	pop    r13
    681b:	41 5e                	pop    r14
    681d:	41 5f                	pop    r15
    681f:	c3                   	ret    
    6820:	4d 85 e4             	test   r12,r12
    6823:	0f 85 4c 06 00 00    	jne    6e75 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1055>
    6829:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    682e:	e9 68 f6 ff ff       	jmp    5e9b <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7b>
    6833:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    6838:	48 8d 35 81 ba 24 00 	lea    rsi,[rip+0x24ba81]        # 2522c0 <pair>
    683f:	b9 dc 00 00 00       	mov    ecx,0xdc
    6844:	31 c0                	xor    eax,eax
    6846:	48 89 f7             	mov    rdi,rsi
    6849:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
    684c:	c7 07 00 00 00 00    	mov    DWORD PTR [rdi],0x0
    6852:	83 fa 01             	cmp    edx,0x1
    6855:	0f 84 1d 04 00 00    	je     6c78 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe58>
    685b:	83 fa 02             	cmp    edx,0x2
    685e:	0f 84 0c 05 00 00    	je     6d70 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf50>
    6864:	83 fa 03             	cmp    edx,0x3
    6867:	0f 85 e3 03 00 00    	jne    6c50 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe30>
    686d:	48 b8 03 00 02 00 01 00 04 00 	movabs rax,0x4000100020003
    6877:	66 0f 6f 05 61 e0 02 00 	movdqa xmm0,XMMWORD PTR [rip+0x2e061]        # 348e0 <Law_and_Order+0x40>
    687f:	c7 05 93 ba 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24ba93],0x2        # 25231c <pair+0x5c>
    6889:	48 89 05 52 c1 24 00 	mov    QWORD PTR [rip+0x24c152],rax        # 2529e2 <alias+0x22>
    6890:	c7 05 d2 ba 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bad2],0x1        # 25236c <pair+0xac>
    689a:	c7 05 28 bb 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24bb28],0x5        # 2523cc <pair+0x10c>
    68a4:	c7 05 6e bb 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24bb6e],0x6        # 25241c <pair+0x15c>
    68ae:	c7 05 c4 bb 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24bbc4],0x2        # 25247c <pair+0x1bc>
    68b8:	c7 05 0a bc 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bc0a],0x1        # 2524cc <pair+0x20c>
    68c2:	c7 05 60 bc 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24bc60],0x5        # 25252c <pair+0x26c>
    68cc:	c7 05 a6 bc 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24bca6],0x6        # 25257c <pair+0x2bc>
    68d6:	c7 05 fc bc 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24bcfc],0x2        # 2525dc <pair+0x31c>
    68e0:	c7 05 42 bd 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bd42],0x1        # 25262c <pair+0x36c>
    68ea:	c7 05 98 bd 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24bd98],0x5        # 25268c <pair+0x3cc>
    68f4:	c7 05 de bd 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24bdde],0x6        # 2526dc <pair+0x41c>
    68fe:	c7 05 34 be 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24be34],0x2        # 25273c <pair+0x47c>
    6908:	c7 05 7a be 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24be7a],0x1        # 25278c <pair+0x4cc>
    6912:	c7 05 d0 be 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24bed0],0x5        # 2527ec <pair+0x52c>
    691c:	c7 05 16 bf 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24bf16],0x6        # 25283c <pair+0x57c>
    6926:	c7 05 6c bf 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24bf6c],0x2        # 25289c <pair+0x5dc>
    6930:	c7 05 b2 bf 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bfb2],0x1        # 2528ec <pair+0x62c>
    693a:	c7 05 08 c0 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24c008],0x5        # 25294c <pair+0x68c>
    6944:	c7 05 4e c0 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24c04e],0x6        # 25299c <pair+0x6dc>
    694e:	0f 11 05 6d c0 24 00 	movups XMMWORD PTR [rip+0x24c06d],xmm0        # 2529c2 <alias+0x2>
    6955:	0f 11 05 76 c0 24 00 	movups XMMWORD PTR [rip+0x24c076],xmm0        # 2529d2 <alias+0x12>
    695c:	48 8d 35 5d b9 24 00 	lea    rsi,[rip+0x24b95d]        # 2522c0 <pair>
    6963:	4c 8d 15 56 68 1e 00 	lea    r10,[rip+0x1e6856]        # 1ed1c0 <rtype>
    696a:	4c 8d 5e 54          	lea    r11,[rsi+0x54]
    696e:	48 89 f0             	mov    rax,rsi
    6971:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    6978:	48 89 c2             	mov    rdx,rax
    697b:	48 89 f1             	mov    rcx,rsi
    697e:	48 8d b8 e4 06 00 00 	lea    rdi,[rax+0x6e4]
    6985:	0f 1f 00             	nop    DWORD PTR [rax]
    6988:	4c 63 01             	movsxd r8,DWORD PTR [rcx]
    698b:	44 8b 0a             	mov    r9d,DWORD PTR [rdx]
    698e:	48 83 c2 54          	add    rdx,0x54
    6992:	48 83 c1 04          	add    rcx,0x4
    6996:	47 89 0c 82          	mov    DWORD PTR [r10+r8*4],r9d
    699a:	48 39 d7             	cmp    rdi,rdx
    699d:	75 e9                	jne    6988 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb68>
    699f:	48 83 c0 04          	add    rax,0x4
    69a3:	48 83 c6 54          	add    rsi,0x54
    69a7:	49 39 c3             	cmp    r11,rax
    69aa:	75 cc                	jne    6978 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb58>
    69ac:	e9 5b fb ff ff       	jmp    650c <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6ec>
    69b1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    69b8:	31 d2                	xor    edx,edx
    69ba:	e9 a1 f7 ff ff       	jmp    6160 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x340>
    69bf:	90                   	nop
    69c0:	45 31 ff             	xor    r15d,r15d
    69c3:	e9 60 f7 ff ff       	jmp    6128 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x308>
    69c8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    69d0:	b9 01 00 00 00       	mov    ecx,0x1
    69d5:	48 89 5c 24 48       	mov    QWORD PTR [rsp+0x48],rbx
    69da:	4c 8d 3d bf de 02 00 	lea    r15,[rip+0x2debf]        # 348a0 <Law_and_Order>
    69e1:	89 cb                	mov    ebx,ecx
    69e3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    69e8:	8d 43 ff             	lea    eax,[rbx-0x1]
    69eb:	41 0f be 3c 04       	movsx  edi,BYTE PTR [r12+rax*1]
    69f0:	e8 6b d1 ff ff       	call   3b60 <toupper@plt>
    69f5:	4c 89 ff             	mov    rdi,r15
    69f8:	0f be f0             	movsx  esi,al
    69fb:	e8 e0 cc ff ff       	call   36e0 <strchr@plt>
    6a00:	31 d2                	xor    edx,edx
    6a02:	48 85 c0             	test   rax,rax
    6a05:	74 11                	je     6a18 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xbf8>
    6a07:	4c 29 f8             	sub    rax,r15
    6a0a:	83 f8 05             	cmp    eax,0x5
    6a0d:	7f 09                	jg     6a18 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xbf8>
    6a0f:	98                   	cwde   
    6a10:	ba 04 00 00 00       	mov    edx,0x4
    6a15:	0f 45 d0             	cmovne edx,eax
    6a18:	48 63 c2             	movsxd rax,edx
    6a1b:	41 0f b7 14 46       	movzx  edx,WORD PTR [r14+rax*2]
    6a20:	89 d8                	mov    eax,ebx
    6a22:	83 c3 01             	add    ebx,0x1
    6a25:	66 41 89 54 45 00    	mov    WORD PTR [r13+rax*2+0x0],dx
    6a2b:	39 5c 24 08          	cmp    DWORD PTR [rsp+0x8],ebx
    6a2f:	73 b7                	jae    69e8 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xbc8>
    6a31:	48 8b 5c 24 48       	mov    rbx,QWORD PTR [rsp+0x48]
    6a36:	e9 ce fb ff ff       	jmp    6609 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7e9>
    6a3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    6a40:	41 b8 01 00 00 00    	mov    r8d,0x1
    6a46:	48 89 5c 24 48       	mov    QWORD PTR [rsp+0x48],rbx
    6a4b:	4c 8d 35 4e de 02 00 	lea    r14,[rip+0x2de4e]        # 348a0 <Law_and_Order>
    6a52:	44 89 c3             	mov    ebx,r8d
    6a55:	0f 1f 00             	nop    DWORD PTR [rax]
    6a58:	8d 43 ff             	lea    eax,[rbx-0x1]
    6a5b:	41 0f be 3c 04       	movsx  edi,BYTE PTR [r12+rax*1]
    6a60:	e8 fb d0 ff ff       	call   3b60 <toupper@plt>
    6a65:	4c 89 f7             	mov    rdi,r14
    6a68:	0f be f0             	movsx  esi,al
    6a6b:	e8 70 cc ff ff       	call   36e0 <strchr@plt>
    6a70:	31 d2                	xor    edx,edx
    6a72:	48 85 c0             	test   rax,rax
    6a75:	74 14                	je     6a8b <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc6b>
    6a77:	4c 29 f0             	sub    rax,r14
    6a7a:	b9 04 00 00 00       	mov    ecx,0x4
    6a7f:	83 f8 05             	cmp    eax,0x5
    6a82:	0f 45 c8             	cmovne ecx,eax
    6a85:	83 f8 06             	cmp    eax,0x6
    6a88:	0f 4c d1             	cmovl  edx,ecx
    6a8b:	89 d8                	mov    eax,ebx
    6a8d:	83 c3 01             	add    ebx,0x1
    6a90:	66 41 89 14 47       	mov    WORD PTR [r15+rax*2],dx
    6a95:	41 39 dd             	cmp    r13d,ebx
    6a98:	73 be                	jae    6a58 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc38>
    6a9a:	48 8b 5c 24 48       	mov    rbx,QWORD PTR [rsp+0x48]
    6a9f:	e9 d1 fa ff ff       	jmp    6575 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x755>
    6aa4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6aa8:	48 89 df             	mov    rdi,rbx
    6aab:	48 8d 74 24 50       	lea    rsi,[rsp+0x50]
    6ab0:	31 d2                	xor    edx,edx
    6ab2:	e8 89 d0 ff ff       	call   3b40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    6ab7:	48 89 03             	mov    QWORD PTR [rbx],rax
    6aba:	48 89 c7             	mov    rdi,rax
    6abd:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    6ac2:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
    6ac6:	4c 89 e2             	mov    rdx,r12
    6ac9:	4c 89 ee             	mov    rsi,r13
    6acc:	e8 5f cd ff ff       	call   3830 <memcpy@plt>
    6ad1:	4c 8b 64 24 50       	mov    r12,QWORD PTR [rsp+0x50]
    6ad6:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    6ad9:	e9 bd f3 ff ff       	jmp    5e9b <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7b>
    6ade:	66 90                	xchg   ax,ax
    6ae0:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    6ae5:	48 29 c6             	sub    rsi,rax
    6ae8:	e8 03 f0 ff ff       	call   5af0 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::_M_default_append(unsigned long)>
    6aed:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6af0:	8d 70 01             	lea    esi,[rax+0x1]
    6af3:	48 63 f6             	movsxd rsi,esi
    6af6:	e9 e9 fc ff ff       	jmp    67e4 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x9c4>
    6afb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    6b00:	48 29 c6             	sub    rsi,rax
    6b03:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    6b08:	48 8d bb b0 00 00 00 	lea    rdi,[rbx+0xb0]
    6b0f:	48 89 f2             	mov    rdx,rsi
    6b12:	4c 89 c6             	mov    rsi,r8
    6b15:	e8 76 eb ff ff       	call   5690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>
    6b1a:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6b1d:	8d 70 01             	lea    esi,[rax+0x1]
    6b20:	48 63 f6             	movsxd rsi,esi
    6b23:	e9 9b fb ff ff       	jmp    66c3 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8a3>
    6b28:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6b30:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    6b35:	48 29 c2             	sub    rdx,rax
    6b38:	48 8d bb 88 00 00 00 	lea    rdi,[rbx+0x88]
    6b3f:	4c 89 c6             	mov    rsi,r8
    6b42:	e8 49 eb ff ff       	call   5690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>
    6b47:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6b4a:	8d 70 01             	lea    esi,[rax+0x1]
    6b4d:	48 63 f6             	movsxd rsi,esi
    6b50:	e9 33 fb ff ff       	jmp    6688 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x868>
    6b55:	0f 1f 00             	nop    DWORD PTR [rax]
    6b58:	48 29 c6             	sub    rsi,rax
    6b5b:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    6b60:	48 8d bb 10 01 00 00 	lea    rdi,[rbx+0x110]
    6b67:	48 89 f2             	mov    rdx,rsi
    6b6a:	4c 89 c6             	mov    rsi,r8
    6b6d:	e8 1e eb ff ff       	call   5690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>
    6b72:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6b75:	8d 70 01             	lea    esi,[rax+0x1]
    6b78:	48 63 f6             	movsxd rsi,esi
    6b7b:	e9 2f fc ff ff       	jmp    67af <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x98f>
    6b80:	48 29 c6             	sub    rsi,rax
    6b83:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    6b88:	48 8d bb f8 00 00 00 	lea    rdi,[rbx+0xf8]
    6b8f:	48 89 f2             	mov    rdx,rsi
    6b92:	4c 89 c6             	mov    rsi,r8
    6b95:	e8 f6 ea ff ff       	call   5690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>
    6b9a:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6b9d:	8d 70 01             	lea    esi,[rax+0x1]
    6ba0:	48 63 f6             	movsxd rsi,esi
    6ba3:	e9 cc fb ff ff       	jmp    6774 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x954>
    6ba8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6bb0:	48 29 c6             	sub    rsi,rax
    6bb3:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    6bb8:	48 8d bb e0 00 00 00 	lea    rdi,[rbx+0xe0]
    6bbf:	48 89 f2             	mov    rdx,rsi
    6bc2:	4c 89 c6             	mov    rsi,r8
    6bc5:	e8 c6 ea ff ff       	call   5690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>
    6bca:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6bcd:	8d 70 01             	lea    esi,[rax+0x1]
    6bd0:	48 63 f6             	movsxd rsi,esi
    6bd3:	e9 61 fb ff ff       	jmp    6739 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x919>
    6bd8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6be0:	48 29 c6             	sub    rsi,rax
    6be3:	48 8d 4c 24 50       	lea    rcx,[rsp+0x50]
    6be8:	48 8d bb c8 00 00 00 	lea    rdi,[rbx+0xc8]
    6bef:	48 89 f2             	mov    rdx,rsi
    6bf2:	4c 89 c6             	mov    rsi,r8
    6bf5:	e8 96 ea ff ff       	call   5690 <std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)>
    6bfa:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
    6bfd:	8d 70 01             	lea    esi,[rax+0x1]
    6c00:	48 63 f6             	movsxd rsi,esi
    6c03:	e9 f6 fa ff ff       	jmp    66fe <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8de>
    6c08:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    6c10:	48 8d 04 76          	lea    rax,[rsi+rsi*2]
    6c14:	48 8d 2c c2          	lea    rbp,[rdx+rax*8]
    6c18:	49 39 ed             	cmp    r13,rbp
    6c1b:	0f 84 c3 fb ff ff    	je     67e4 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x9c4>
    6c21:	49 89 ec             	mov    r12,rbp
    6c24:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6c28:	49 8b 3c 24          	mov    rdi,QWORD PTR [r12]
    6c2c:	48 85 ff             	test   rdi,rdi
    6c2f:	74 37                	je     6c68 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe48>
    6c31:	e8 3a cc ff ff       	call   3870 <operator delete(void*)@plt>
    6c36:	49 83 c4 18          	add    r12,0x18
    6c3a:	4d 39 e5             	cmp    r13,r12
    6c3d:	75 e9                	jne    6c28 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe08>
    6c3f:	48 89 ab 78 01 00 00 	mov    QWORD PTR [rbx+0x178],rbp
    6c46:	e9 a2 fe ff ff       	jmp    6aed <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xccd>
    6c4b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    6c50:	48 8d 3d 71 ca 02 00 	lea    rdi,[rip+0x2ca71]        # 336c8 <_IO_stdin_used+0x6c8>
    6c57:	31 c0                	xor    eax,eax
    6c59:	e8 dc 81 02 00       	call   2ee3a <vrna_message_error>
    6c5e:	e9 f9 fc ff ff       	jmp    695c <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb3c>
    6c63:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    6c68:	49 83 c4 18          	add    r12,0x18
    6c6c:	4d 39 e5             	cmp    r13,r12
    6c6f:	75 b7                	jne    6c28 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe08>
    6c71:	eb cc                	jmp    6c3f <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe1f>
    6c73:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    6c78:	66 0f 6f 05 40 dc 02 00 	movdqa xmm0,XMMWORD PTR [rip+0x2dc40]        # 348c0 <Law_and_Order+0x20>
    6c80:	48 b8 03 00 02 00 03 00 02 00 	movabs rax,0x2000300020003
    6c8a:	c7 05 88 b6 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24b688],0x2        # 25231c <pair+0x5c>
    6c94:	48 89 05 47 bd 24 00 	mov    QWORD PTR [rip+0x24bd47],rax        # 2529e2 <alias+0x22>
    6c9b:	c7 05 c7 b6 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24b6c7],0x1        # 25236c <pair+0xac>
    6ca5:	c7 05 1d b7 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24b71d],0x2        # 2523cc <pair+0x10c>
    6caf:	c7 05 63 b7 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24b763],0x1        # 25241c <pair+0x15c>
    6cb9:	c7 05 b9 b7 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24b7b9],0x2        # 25247c <pair+0x1bc>
    6cc3:	c7 05 ff b7 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24b7ff],0x1        # 2524cc <pair+0x20c>
    6ccd:	c7 05 55 b8 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24b855],0x2        # 25252c <pair+0x26c>
    6cd7:	c7 05 9b b8 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24b89b],0x1        # 25257c <pair+0x2bc>
    6ce1:	c7 05 f1 b8 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24b8f1],0x2        # 2525dc <pair+0x31c>
    6ceb:	c7 05 37 b9 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24b937],0x1        # 25262c <pair+0x36c>
    6cf5:	c7 05 8d b9 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24b98d],0x2        # 25268c <pair+0x3cc>
    6cff:	c7 05 d3 b9 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24b9d3],0x1        # 2526dc <pair+0x41c>
    6d09:	c7 05 29 ba 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24ba29],0x2        # 25273c <pair+0x47c>
    6d13:	c7 05 6f ba 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24ba6f],0x1        # 25278c <pair+0x4cc>
    6d1d:	c7 05 c5 ba 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24bac5],0x2        # 2527ec <pair+0x52c>
    6d27:	c7 05 0b bb 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bb0b],0x1        # 25283c <pair+0x57c>
    6d31:	c7 05 61 bb 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24bb61],0x2        # 25289c <pair+0x5dc>
    6d3b:	c7 05 a7 bb 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bba7],0x1        # 2528ec <pair+0x62c>
    6d45:	c7 05 fd bb 24 00 02 00 00 00 	mov    DWORD PTR [rip+0x24bbfd],0x2        # 25294c <pair+0x68c>
    6d4f:	c7 05 43 bc 24 00 01 00 00 00 	mov    DWORD PTR [rip+0x24bc43],0x1        # 25299c <pair+0x6dc>
    6d59:	0f 11 05 62 bc 24 00 	movups XMMWORD PTR [rip+0x24bc62],xmm0        # 2529c2 <alias+0x2>
    6d60:	0f 11 05 6b bc 24 00 	movups XMMWORD PTR [rip+0x24bc6b],xmm0        # 2529d2 <alias+0x12>
    6d67:	e9 f0 fb ff ff       	jmp    695c <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb3c>
    6d6c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    6d70:	66 0f 6f 05 58 db 02 00 	movdqa xmm0,XMMWORD PTR [rip+0x2db58]        # 348d0 <Law_and_Order+0x30>
    6d78:	48 b8 01 00 04 00 01 00 04 00 	movabs rax,0x4000100040001
    6d82:	c7 05 90 b5 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b590],0x5        # 25231c <pair+0x5c>
    6d8c:	48 89 05 4f bc 24 00 	mov    QWORD PTR [rip+0x24bc4f],rax        # 2529e2 <alias+0x22>
    6d93:	c7 05 cf b5 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b5cf],0x6        # 25236c <pair+0xac>
    6d9d:	c7 05 25 b6 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b625],0x5        # 2523cc <pair+0x10c>
    6da7:	c7 05 6b b6 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b66b],0x6        # 25241c <pair+0x15c>
    6db1:	c7 05 c1 b6 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b6c1],0x5        # 25247c <pair+0x1bc>
    6dbb:	c7 05 07 b7 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b707],0x6        # 2524cc <pair+0x20c>
    6dc5:	c7 05 5d b7 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b75d],0x5        # 25252c <pair+0x26c>
    6dcf:	c7 05 a3 b7 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b7a3],0x6        # 25257c <pair+0x2bc>
    6dd9:	c7 05 f9 b7 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b7f9],0x5        # 2525dc <pair+0x31c>
    6de3:	c7 05 3f b8 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b83f],0x6        # 25262c <pair+0x36c>
    6ded:	c7 05 95 b8 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b895],0x5        # 25268c <pair+0x3cc>
    6df7:	c7 05 db b8 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b8db],0x6        # 2526dc <pair+0x41c>
    6e01:	c7 05 31 b9 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b931],0x5        # 25273c <pair+0x47c>
    6e0b:	c7 05 77 b9 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24b977],0x6        # 25278c <pair+0x4cc>
    6e15:	c7 05 cd b9 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24b9cd],0x5        # 2527ec <pair+0x52c>
    6e1f:	c7 05 13 ba 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24ba13],0x6        # 25283c <pair+0x57c>
    6e29:	c7 05 69 ba 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24ba69],0x5        # 25289c <pair+0x5dc>
    6e33:	c7 05 af ba 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24baaf],0x6        # 2528ec <pair+0x62c>
    6e3d:	c7 05 05 bb 24 00 05 00 00 00 	mov    DWORD PTR [rip+0x24bb05],0x5        # 25294c <pair+0x68c>
    6e47:	c7 05 4b bb 24 00 06 00 00 00 	mov    DWORD PTR [rip+0x24bb4b],0x6        # 25299c <pair+0x6dc>
    6e51:	0f 11 05 6a bb 24 00 	movups XMMWORD PTR [rip+0x24bb6a],xmm0        # 2529c2 <alias+0x2>
    6e58:	0f 11 05 73 bb 24 00 	movups XMMWORD PTR [rip+0x24bb73],xmm0        # 2529d2 <alias+0x12>
    6e5f:	e9 f8 fa ff ff       	jmp    695c <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb3c>
    6e64:	48 8d 3d 2d c8 02 00 	lea    rdi,[rip+0x2c82d]        # 33698 <_IO_stdin_used+0x698>
    6e6b:	e8 a0 c9 ff ff       	call   3810 <std::__throw_logic_error(char const*)@plt>
    6e70:	e8 7b ca ff ff       	call   38f0 <__stack_chk_fail@plt>
    6e75:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
    6e7a:	e9 47 fc ff ff       	jmp    6ac6 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xca6>
    6e7f:	f3 0f 1e fa          	endbr64 
    6e83:	48 89 c5             	mov    rbp,rax
    6e86:	e9 c3 00 00 00       	jmp    6f4e <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x112e>
    6e8b:	f3 0f 1e fa          	endbr64 
    6e8f:	48 89 c5             	mov    rbp,rax
    6e92:	eb 34                	jmp    6ec8 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10a8>
    6e94:	f3 0f 1e fa          	endbr64 
    6e98:	48 89 c5             	mov    rbp,rax
    6e9b:	e9 c5 00 00 00       	jmp    6f65 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1145>
    6ea0:	49 8b 7d 00          	mov    rdi,QWORD PTR [r13+0x0]
    6ea4:	48 85 ff             	test   rdi,rdi
    6ea7:	74 05                	je     6eae <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x108e>
    6ea9:	e8 c2 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6eae:	49 83 c5 20          	add    r13,0x20
    6eb2:	4d 39 ec             	cmp    r12,r13
    6eb5:	75 e9                	jne    6ea0 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1080>
    6eb7:	48 8b bb 30 01 00 00 	mov    rdi,QWORD PTR [rbx+0x130]
    6ebe:	48 85 ff             	test   rdi,rdi
    6ec1:	74 05                	je     6ec8 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10a8>
    6ec3:	e8 a8 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6ec8:	48 8b bb 10 01 00 00 	mov    rdi,QWORD PTR [rbx+0x110]
    6ecf:	48 85 ff             	test   rdi,rdi
    6ed2:	74 05                	je     6ed9 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10b9>
    6ed4:	e8 97 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6ed9:	48 8b bb f8 00 00 00 	mov    rdi,QWORD PTR [rbx+0xf8]
    6ee0:	48 85 ff             	test   rdi,rdi
    6ee3:	74 05                	je     6eea <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10ca>
    6ee5:	e8 86 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6eea:	48 8b bb e0 00 00 00 	mov    rdi,QWORD PTR [rbx+0xe0]
    6ef1:	48 85 ff             	test   rdi,rdi
    6ef4:	74 05                	je     6efb <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10db>
    6ef6:	e8 75 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6efb:	48 8b bb c8 00 00 00 	mov    rdi,QWORD PTR [rbx+0xc8]
    6f02:	48 85 ff             	test   rdi,rdi
    6f05:	74 05                	je     6f0c <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10ec>
    6f07:	e8 64 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6f0c:	48 8b bb b0 00 00 00 	mov    rdi,QWORD PTR [rbx+0xb0]
    6f13:	48 85 ff             	test   rdi,rdi
    6f16:	74 05                	je     6f1d <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10fd>
    6f18:	e8 53 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6f1d:	48 8b bb 88 00 00 00 	mov    rdi,QWORD PTR [rbx+0x88]
    6f24:	48 85 ff             	test   rdi,rdi
    6f27:	74 05                	je     6f2e <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x110e>
    6f29:	e8 42 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6f2e:	48 8b 7b 60          	mov    rdi,QWORD PTR [rbx+0x60]
    6f32:	48 39 7c 24 38       	cmp    QWORD PTR [rsp+0x38],rdi
    6f37:	74 05                	je     6f3e <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x111e>
    6f39:	e8 32 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6f3e:	48 8b 7b 40          	mov    rdi,QWORD PTR [rbx+0x40]
    6f42:	48 39 7c 24 40       	cmp    QWORD PTR [rsp+0x40],rdi
    6f47:	74 05                	je     6f4e <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x112e>
    6f49:	e8 22 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6f4e:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    6f51:	48 39 7c 24 28       	cmp    QWORD PTR [rsp+0x28],rdi
    6f56:	74 05                	je     6f5d <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x113d>
    6f58:	e8 13 c9 ff ff       	call   3870 <operator delete(void*)@plt>
    6f5d:	48 89 ef             	mov    rdi,rbp
    6f60:	e8 ab cb ff ff       	call   3b10 <_Unwind_Resume@plt>
    6f65:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    6f6a:	e8 b1 e6 ff ff       	call   5620 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()>
    6f6f:	4c 8b a3 38 01 00 00 	mov    r12,QWORD PTR [rbx+0x138]
    6f76:	4c 8b ab 30 01 00 00 	mov    r13,QWORD PTR [rbx+0x130]
    6f7d:	e9 30 ff ff ff       	jmp    6eb2 <SparseMFEFold::SparseMFEFold(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1092>
    6f82:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    6f8c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000006f90 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)>:
    6f90:	f3 0f 1e fa          	endbr64 
    6f94:	41 57                	push   r15
    6f96:	41 56                	push   r14
    6f98:	41 55                	push   r13
    6f9a:	4d 63 e8             	movsxd r13,r8d
    6f9d:	41 54                	push   r12
    6f9f:	41 bc 80 96 98 00    	mov    r12d,0x989680
    6fa5:	55                   	push   rbp
    6fa6:	53                   	push   rbx
    6fa7:	48 83 ec 48          	sub    rsp,0x48
    6fab:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
    6fae:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    6fb7:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    6fbc:	31 c0                	xor    eax,eax
    6fbe:	49 63 c1             	movsxd rax,r9d
    6fc1:	48 0f bf 1c 46       	movsx  rbx,WORD PTR [rsi+rax*2]
    6fc6:	4a 0f bf 34 6e       	movsx  rsi,WORD PTR [rsi+r13*2]
    6fcb:	4c 8d 1c 00          	lea    r11,[rax+rax*1]
    6fcf:	48 8d 04 b6          	lea    rax,[rsi+rsi*4]
    6fd3:	48 8d 04 86          	lea    rax,[rsi+rax*4]
    6fd7:	48 8d 35 e2 b2 24 00 	lea    rsi,[rip+0x24b2e2]        # 2522c0 <pair>
    6fde:	48 01 d8             	add    rax,rbx
    6fe1:	8b 2c 86             	mov    ebp,DWORD PTR [rsi+rax*4]
    6fe4:	40 84 ed             	test   bpl,bpl
    6fe7:	0f 84 98 00 00 00    	je     7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    6fed:	4c 8b 31             	mov    r14,QWORD PTR [rcx]
    6ff0:	45 29 c1             	sub    r9d,r8d
    6ff3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    6ff6:	4f 8d 54 2d 00       	lea    r10,[r13+r13*1+0x0]
    6ffb:	41 8d 59 ff          	lea    ebx,[r9-0x1]
    6fff:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    7002:	42 0f b7 54 19 fe    	movzx  edx,WORD PTR [rcx+r11*1-0x2]
    7008:	46 0f b7 7c 11 02    	movzx  r15d,WORD PTR [rcx+r10*1+0x2]
    700e:	83 fb 1e             	cmp    ebx,0x1e
    7011:	0f 8f 99 00 00 00    	jg     70b0 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x120>
    7017:	48 63 cb             	movsxd rcx,ebx
    701a:	45 8b a4 8e 04 01 00 00 	mov    r12d,DWORD PTR [r14+rcx*4+0x104]
    7022:	83 fb 02             	cmp    ebx,0x2
    7025:	7e 5e                	jle    7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    7027:	4a 8d 44 28 ff       	lea    rax,[rax+r13*1-0x1]
    702c:	48 0f be ed          	movsx  rbp,bpl
    7030:	48 85 c0             	test   rax,rax
    7033:	74 2b                	je     7060 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xd0>
    7035:	41 8b 8e b0 35 03 00 	mov    ecx,DWORD PTR [r14+0x335b0]
    703c:	85 c9                	test   ecx,ecx
    703e:	74 20                	je     7060 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xd0>
    7040:	83 fb 04             	cmp    ebx,0x4
    7043:	0f 84 77 01 00 00    	je     71c0 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x230>
    7049:	83 fb 06             	cmp    ebx,0x6
    704c:	0f 84 0e 01 00 00    	je     7160 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x1d0>
    7052:	83 fb 03             	cmp    ebx,0x3
    7055:	0f 84 a5 00 00 00    	je     7100 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x170>
    705b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    7060:	49 0f bf c7          	movsx  rax,r15w
    7064:	48 8d 4c ad 00       	lea    rcx,[rbp+rbp*4+0x0]
    7069:	48 0f bf d2          	movsx  rdx,dx
    706d:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    7071:	48 8d 04 80          	lea    rax,[rax+rax*4]
    7075:	48 01 c8             	add    rax,rcx
    7078:	48 8d 84 02 bc 03 00 00 	lea    rax,[rdx+rax*1+0x3bc]
    7080:	45 03 64 86 08       	add    r12d,DWORD PTR [r14+rax*4+0x8]
    7085:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    708a:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    7093:	0f 85 a2 01 00 00    	jne    723b <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x2ab>
    7099:	48 83 c4 48          	add    rsp,0x48
    709d:	44 89 e0             	mov    eax,r12d
    70a0:	5b                   	pop    rbx
    70a1:	5d                   	pop    rbp
    70a2:	41 5c                	pop    r12
    70a4:	41 5d                	pop    r13
    70a6:	41 5e                	pop    r14
    70a8:	41 5f                	pop    r15
    70aa:	c3                   	ret    
    70ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    70b0:	66 0f ef c0          	pxor   xmm0,xmm0
    70b4:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    70b9:	f2 41 0f 10 8e 90 1d 03 00 	movsd  xmm1,QWORD PTR [r14+0x31d90]
    70c2:	89 54 24 14          	mov    DWORD PTR [rsp+0x14],edx
    70c6:	45 8b a6 7c 01 00 00 	mov    r12d,DWORD PTR [r14+0x17c]
    70cd:	f2 0f 2a c3          	cvtsi2sd xmm0,ebx
    70d1:	f2 0f 5e 05 37 d8 02 00 	divsd  xmm0,QWORD PTR [rip+0x2d837]        # 34910 <Law_and_Order+0x70>
    70d9:	f2 0f 11 4c 24 08    	movsd  QWORD PTR [rsp+0x8],xmm1
    70df:	e8 3c c7 ff ff       	call   3820 <log@plt>
    70e4:	f2 0f 59 44 24 08    	mulsd  xmm0,QWORD PTR [rsp+0x8]
    70ea:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    70ef:	8b 54 24 14          	mov    edx,DWORD PTR [rsp+0x14]
    70f3:	f2 0f 2c c8          	cvttsd2si ecx,xmm0
    70f7:	41 01 cc             	add    r12d,ecx
    70fa:	e9 28 ff ff ff       	jmp    7027 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x97>
    70ff:	90                   	nop
    7100:	8b 10                	mov    edx,DWORD PTR [rax]
    7102:	49 8d 9e 18 27 03 00 	lea    rbx,[r14+0x32718]
    7109:	0f b6 40 04          	movzx  eax,BYTE PTR [rax+0x4]
    710d:	48 8d 74 24 2f       	lea    rsi,[rsp+0x2f]
    7112:	48 89 df             	mov    rdi,rbx
    7115:	c6 44 24 34 00       	mov    BYTE PTR [rsp+0x34],0x0
    711a:	89 54 24 2f          	mov    DWORD PTR [rsp+0x2f],edx
    711e:	88 44 24 33          	mov    BYTE PTR [rsp+0x33],al
    7122:	e8 39 c5 ff ff       	call   3660 <strstr@plt>
    7127:	48 85 c0             	test   rax,rax
    712a:	0f 84 f6 00 00 00    	je     7226 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0x296>
    7130:	48 ba ab aa aa aa aa aa aa 2a 	movabs rdx,0x2aaaaaaaaaaaaaab
    713a:	48 29 d8             	sub    rax,rbx
    713d:	48 89 c1             	mov    rcx,rax
    7140:	48 f7 ea             	imul   rdx
    7143:	48 89 c8             	mov    rax,rcx
    7146:	48 c1 f8 3f          	sar    rax,0x3f
    714a:	48 29 c2             	sub    rdx,rax
    714d:	45 8b a4 96 78 26 03 00 	mov    r12d,DWORD PTR [r14+rdx*4+0x32678]
    7155:	e9 2b ff ff ff       	jmp    7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    715a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    7160:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7163:	49 8d 9e ac 28 03 00 	lea    rbx,[r14+0x328ac]
    716a:	48 8d 74 24 2f       	lea    rsi,[rsp+0x2f]
    716f:	89 54 24 08          	mov    DWORD PTR [rsp+0x8],edx
    7173:	48 89 df             	mov    rdi,rbx
    7176:	c6 44 24 37 00       	mov    BYTE PTR [rsp+0x37],0x0
    717b:	48 89 44 24 2f       	mov    QWORD PTR [rsp+0x2f],rax
    7180:	e8 db c4 ff ff       	call   3660 <strstr@plt>
    7185:	8b 54 24 08          	mov    edx,DWORD PTR [rsp+0x8]
    7189:	48 85 c0             	test   rax,rax
    718c:	0f 84 ce fe ff ff    	je     7060 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xd0>
    7192:	48 ba 72 1c c7 71 1c c7 71 1c 	movabs rdx,0x1c71c71c71c71c72
    719c:	48 29 d8             	sub    rax,rbx
    719f:	48 89 c1             	mov    rcx,rax
    71a2:	48 f7 ea             	imul   rdx
    71a5:	48 89 c8             	mov    rax,rcx
    71a8:	48 c1 f8 3f          	sar    rax,0x3f
    71ac:	48 29 c2             	sub    rdx,rax
    71af:	45 8b a4 96 0c 28 03 00 	mov    r12d,DWORD PTR [r14+rdx*4+0x3280c]
    71b7:	e9 c9 fe ff ff       	jmp    7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    71bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    71c0:	8b 08                	mov    ecx,DWORD PTR [rax]
    71c2:	49 8d 9e fc 20 03 00 	lea    rbx,[r14+0x320fc]
    71c9:	0f b7 40 04          	movzx  eax,WORD PTR [rax+0x4]
    71cd:	89 54 24 08          	mov    DWORD PTR [rsp+0x8],edx
    71d1:	48 8d 74 24 2f       	lea    rsi,[rsp+0x2f]
    71d6:	48 89 df             	mov    rdi,rbx
    71d9:	c6 44 24 35 00       	mov    BYTE PTR [rsp+0x35],0x0
    71de:	89 4c 24 2f          	mov    DWORD PTR [rsp+0x2f],ecx
    71e2:	66 89 44 24 33       	mov    WORD PTR [rsp+0x33],ax
    71e7:	e8 74 c4 ff ff       	call   3660 <strstr@plt>
    71ec:	8b 54 24 08          	mov    edx,DWORD PTR [rsp+0x8]
    71f0:	48 85 c0             	test   rax,rax
    71f3:	0f 84 67 fe ff ff    	je     7060 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xd0>
    71f9:	48 ba 25 49 92 24 49 92 24 49 	movabs rdx,0x4924924924924925
    7203:	48 29 d8             	sub    rax,rbx
    7206:	48 89 c1             	mov    rcx,rax
    7209:	48 f7 ea             	imul   rdx
    720c:	48 89 c8             	mov    rax,rcx
    720f:	48 c1 f8 3f          	sar    rax,0x3f
    7213:	48 d1 fa             	sar    rdx,1
    7216:	48 29 c2             	sub    rdx,rax
    7219:	45 8b a4 96 dc 1d 03 00 	mov    r12d,DWORD PTR [r14+rdx*4+0x31ddc]
    7221:	e9 5f fe ff ff       	jmp    7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    7226:	83 fd 02             	cmp    ebp,0x2
    7229:	0f 8e 56 fe ff ff    	jle    7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    722f:	45 03 a6 d4 1d 03 00 	add    r12d,DWORD PTR [r14+0x31dd4]
    7236:	e9 4a fe ff ff       	jmp    7085 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)+0xf5>
    723b:	e8 b0 c6 ff ff       	call   38f0 <__stack_chk_fail@plt>

0000000000007240 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)>:
    7240:	f3 0f 1e fa          	endbr64 
    7244:	41 57                	push   r15
    7246:	4d 63 c0             	movsxd r8,r8d
    7249:	41 56                	push   r14
    724b:	4e 8d 1c 85 00 00 00 00 	lea    r11,[r8*4+0x0]
    7253:	41 55                	push   r13
    7255:	4d 63 e9             	movsxd r13,r9d
    7258:	41 54                	push   r12
    725a:	55                   	push   rbp
    725b:	53                   	push   rbx
    725c:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    7261:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
    7264:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    7267:	44 8b a1 ac 35 03 00 	mov    r12d,DWORD PTR [rcx+0x335ac]
    726e:	43 8b 04 82          	mov    eax,DWORD PTR [r10+r8*4]
    7272:	83 f8 ff             	cmp    eax,0xffffffff
    7275:	7c 19                	jl     7290 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x50>
    7277:	44 39 c8             	cmp    eax,r9d
    727a:	74 1b                	je     7297 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x57>
    727c:	b8 80 96 98 00       	mov    eax,0x989680
    7281:	5b                   	pop    rbx
    7282:	5d                   	pop    rbp
    7283:	41 5c                	pop    r12
    7285:	41 5d                	pop    r13
    7287:	41 5e                	pop    r14
    7289:	41 5f                	pop    r15
    728b:	c3                   	ret    
    728c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    7290:	43 83 3c aa ff       	cmp    DWORD PTR [r10+r13*4],0xffffffff
    7295:	7d e0                	jge    7277 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x37>
    7297:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
    729a:	4b 8d 2c 00          	lea    rbp,[r8+r8*1]
    729e:	4b 8d 5c 2d 00       	lea    rbx,[r13+r13*1+0x0]
    72a3:	4e 0f bf 34 42       	movsx  r14,WORD PTR [rdx+r8*2]
    72a8:	4e 0f bf 04 6a       	movsx  r8,WORD PTR [rdx+r13*2]
    72ad:	4b 8d 04 80          	lea    rax,[r8+r8*4]
    72b1:	49 8d 04 80          	lea    rax,[r8+rax*4]
    72b5:	4c 8d 05 04 b0 24 00 	lea    r8,[rip+0x24b004]        # 2522c0 <pair>
    72bc:	4c 01 f0             	add    rax,r14
    72bf:	45 8b 04 80          	mov    r8d,DWORD PTR [r8+rax*4]
    72c3:	41 83 fc 01          	cmp    r12d,0x1
    72c7:	0f 84 d3 00 00 00    	je     73a0 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x160>
    72cd:	41 83 fc 02          	cmp    r12d,0x2
    72d1:	74 4d                	je     7320 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0xe0>
    72d3:	45 85 e4             	test   r12d,r12d
    72d6:	75 a4                	jne    727c <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3c>
    72d8:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    72db:	41 83 e9 01          	sub    r9d,0x1
    72df:	4d 63 c9             	movsxd r9,r9d
    72e2:	42 8b 04 88          	mov    eax,DWORD PTR [rax+r9*4]
    72e6:	3d 80 96 98 00       	cmp    eax,0x989680
    72eb:	74 94                	je     7281 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x41>
    72ed:	49 0f be d0          	movsx  rdx,r8b
    72f1:	41 80 f8 02          	cmp    r8b,0x2
    72f5:	7e 07                	jle    72fe <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0xbe>
    72f7:	44 8b a1 d4 1d 03 00 	mov    r12d,DWORD PTR [rcx+0x31dd4]
    72fe:	44 03 a4 91 9c 1d 03 00 	add    r12d,DWORD PTR [rcx+rdx*4+0x31d9c]
    7306:	44 03 a1 bc 1d 03 00 	add    r12d,DWORD PTR [rcx+0x31dbc]
    730d:	5b                   	pop    rbx
    730e:	44 01 e0             	add    eax,r12d
    7311:	5d                   	pop    rbp
    7312:	41 5c                	pop    r12
    7314:	41 5d                	pop    r13
    7316:	41 5e                	pop    r14
    7318:	41 5f                	pop    r15
    731a:	c3                   	ret    
    731b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    7320:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    7323:	41 83 e9 01          	sub    r9d,0x1
    7327:	4d 63 c9             	movsxd r9,r9d
    732a:	42 8b 04 88          	mov    eax,DWORD PTR [rax+r9*4]
    732e:	3d 80 96 98 00       	cmp    eax,0x989680
    7333:	0f 84 48 ff ff ff    	je     7281 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x41>
    7339:	48 0f be 74 2a 02    	movsx  rsi,BYTE PTR [rdx+rbp*1+0x2]
    733f:	45 0f be c0          	movsx  r8d,r8b
    7343:	48 0f be 54 1a fe    	movsx  rdx,BYTE PTR [rdx+rbx*1-0x2]
    7349:	85 f6                	test   esi,esi
    734b:	0f 88 4f 02 00 00    	js     75a0 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x360>
    7351:	85 d2                	test   edx,edx
    7353:	0f 88 67 02 00 00    	js     75c0 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x380>
    7359:	49 63 f8             	movsxd rdi,r8d
    735c:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    7360:	4c 8d 0c bf          	lea    r9,[rdi+rdi*4]
    7364:	4f 8d 0c 89          	lea    r9,[r9+r9*4]
    7368:	4c 01 ca             	add    rdx,r9
    736b:	48 8d 94 16 84 04 00 00 	lea    rdx,[rsi+rdx*1+0x484]
    7373:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    7377:	41 83 f8 02          	cmp    r8d,0x2
    737b:	7e 06                	jle    7383 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x143>
    737d:	03 91 d4 1d 03 00    	add    edx,DWORD PTR [rcx+0x31dd4]
    7383:	03 94 b9 9c 1d 03 00 	add    edx,DWORD PTR [rcx+rdi*4+0x31d9c]
    738a:	03 91 bc 1d 03 00    	add    edx,DWORD PTR [rcx+0x31dbc]
    7390:	5b                   	pop    rbx
    7391:	01 d0                	add    eax,edx
    7393:	5d                   	pop    rbp
    7394:	41 5c                	pop    r12
    7396:	41 5d                	pop    r13
    7398:	41 5e                	pop    r14
    739a:	41 5f                	pop    r15
    739c:	c3                   	ret    
    739d:	0f 1f 00             	nop    DWORD PTR [rax]
    73a0:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
    73a3:	41 8d 79 ff          	lea    edi,[r9-0x1]
    73a7:	48 63 ff             	movsxd rdi,edi
    73aa:	41 8b 44 bd 00       	mov    eax,DWORD PTR [r13+rdi*4+0x0]
    73af:	3d 80 96 98 00       	cmp    eax,0x989680
    73b4:	74 23                	je     73d9 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x199>
    73b6:	4d 0f be f0          	movsx  r14,r8b
    73ba:	45 31 e4             	xor    r12d,r12d
    73bd:	41 80 f8 02          	cmp    r8b,0x2
    73c1:	0f 8f 41 01 00 00    	jg     7508 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x2c8>
    73c7:	46 03 a4 b1 9c 1d 03 00 	add    r12d,DWORD PTR [rcx+r14*4+0x31d9c]
    73cf:	44 03 a1 bc 1d 03 00 	add    r12d,DWORD PTR [rcx+0x31dbc]
    73d6:	44 01 e0             	add    eax,r12d
    73d9:	47 8b 64 1a 04       	mov    r12d,DWORD PTR [r10+r11*1+0x4]
    73de:	41 bb 80 96 98 00    	mov    r11d,0x989680
    73e4:	45 85 e4             	test   r12d,r12d
    73e7:	78 27                	js     7410 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x1d0>
    73e9:	41 8b 3c ba          	mov    edi,DWORD PTR [r10+rdi*4]
    73ed:	41 39 c3             	cmp    r11d,eax
    73f0:	41 0f 4e c3          	cmovle eax,r11d
    73f4:	85 ff                	test   edi,edi
    73f6:	0f 88 94 00 00 00    	js     7490 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x250>
    73fc:	41 39 c3             	cmp    r11d,eax
    73ff:	41 0f 4e c3          	cmovle eax,r11d
    7403:	e9 79 fe ff ff       	jmp    7281 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x41>
    7408:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    7410:	4c 8b 1e             	mov    r11,QWORD PTR [rsi]
    7413:	45 8b 1c bb          	mov    r11d,DWORD PTR [r11+rdi*4]
    7417:	41 81 fb 80 96 98 00 	cmp    r11d,0x989680
    741e:	74 c9                	je     73e9 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x1a9>
    7420:	4c 0f be 74 2a 02    	movsx  r14,BYTE PTR [rdx+rbp*1+0x2]
    7426:	4d 0f be f8          	movsx  r15,r8b
    742a:	44 89 7c 24 f4       	mov    DWORD PTR [rsp-0xc],r15d
    742f:	45 85 f6             	test   r14d,r14d
    7432:	0f 88 a8 01 00 00    	js     75e0 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3a0>
    7438:	4c 89 74 24 f8       	mov    QWORD PTR [rsp-0x8],r14
    743d:	4f 8d 34 bf          	lea    r14,[r15+r15*4]
    7441:	4c 89 7c 24 e8       	mov    QWORD PTR [rsp-0x18],r15
    7446:	4c 8b 7c 24 f8       	mov    r15,QWORD PTR [rsp-0x8]
    744b:	4f 8d b4 37 74 05 00 00 	lea    r14,[r15+r14*1+0x574]
    7453:	46 8b 74 b1 08       	mov    r14d,DWORD PTR [rcx+r14*4+0x8]
    7458:	83 7c 24 f4 02       	cmp    DWORD PTR [rsp-0xc],0x2
    745d:	7e 07                	jle    7466 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x226>
    745f:	44 03 b1 d4 1d 03 00 	add    r14d,DWORD PTR [rcx+0x31dd4]
    7466:	4c 8b 7c 24 e8       	mov    r15,QWORD PTR [rsp-0x18]
    746b:	46 03 b4 b9 9c 1d 03 00 	add    r14d,DWORD PTR [rcx+r15*4+0x31d9c]
    7473:	44 03 b1 bc 1d 03 00 	add    r14d,DWORD PTR [rcx+0x31dbc]
    747a:	44 03 b1 98 1d 03 00 	add    r14d,DWORD PTR [rcx+0x31d98]
    7481:	45 01 f3             	add    r11d,r14d
    7484:	e9 60 ff ff ff       	jmp    73e9 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x1a9>
    7489:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    7490:	41 83 e9 02          	sub    r9d,0x2
    7494:	4d 63 c9             	movsxd r9,r9d
    7497:	43 8b 7c 8d 00       	mov    edi,DWORD PTR [r13+r9*4+0x0]
    749c:	81 ff 80 96 98 00    	cmp    edi,0x989680
    74a2:	74 4d                	je     74f1 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x2b1>
    74a4:	4c 0f be 54 1a fe    	movsx  r10,BYTE PTR [rdx+rbx*1-0x2]
    74aa:	45 0f be e8          	movsx  r13d,r8b
    74ae:	45 85 d2             	test   r10d,r10d
    74b1:	0f 88 41 01 00 00    	js     75f8 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3b8>
    74b7:	4d 63 dd             	movsxd r11,r13d
    74ba:	4f 8d 34 9b          	lea    r14,[r11+r11*4]
    74be:	4f 8d 94 32 4c 05 00 00 	lea    r10,[r10+r14*1+0x54c]
    74c6:	46 8b 54 91 08       	mov    r10d,DWORD PTR [rcx+r10*4+0x8]
    74cb:	41 83 fd 02          	cmp    r13d,0x2
    74cf:	7e 07                	jle    74d8 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x298>
    74d1:	44 03 91 d4 1d 03 00 	add    r10d,DWORD PTR [rcx+0x31dd4]
    74d8:	46 03 94 99 9c 1d 03 00 	add    r10d,DWORD PTR [rcx+r11*4+0x31d9c]
    74e0:	44 03 91 bc 1d 03 00 	add    r10d,DWORD PTR [rcx+0x31dbc]
    74e7:	44 03 91 98 1d 03 00 	add    r10d,DWORD PTR [rcx+0x31d98]
    74ee:	44 01 d7             	add    edi,r10d
    74f1:	39 c7                	cmp    edi,eax
    74f3:	0f 4e c7             	cmovle eax,edi
    74f6:	45 85 e4             	test   r12d,r12d
    74f9:	78 1d                	js     7518 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x2d8>
    74fb:	39 f8                	cmp    eax,edi
    74fd:	0f 4f c7             	cmovg  eax,edi
    7500:	e9 7c fd ff ff       	jmp    7281 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x41>
    7505:	0f 1f 00             	nop    DWORD PTR [rax]
    7508:	44 8b a1 d4 1d 03 00 	mov    r12d,DWORD PTR [rcx+0x31dd4]
    750f:	e9 b3 fe ff ff       	jmp    73c7 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x187>
    7514:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    7518:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
    751b:	42 8b 34 8e          	mov    esi,DWORD PTR [rsi+r9*4]
    751f:	81 fe 80 96 98 00    	cmp    esi,0x989680
    7525:	0f 84 e2 00 00 00    	je     760d <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3cd>
    752b:	0f be 7c 2a 02       	movsx  edi,BYTE PTR [rdx+rbp*1+0x2]
    7530:	48 0f be 54 1a fe    	movsx  rdx,BYTE PTR [rdx+rbx*1-0x2]
    7536:	45 0f be c0          	movsx  r8d,r8b
    753a:	85 d2                	test   edx,edx
    753c:	0f 88 f4 00 00 00    	js     7636 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3f6>
    7542:	85 ff                	test   edi,edi
    7544:	0f 88 d0 00 00 00    	js     761a <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3da>
    754a:	4c 63 cf             	movsxd r9,edi
    754d:	49 63 f8             	movsxd rdi,r8d
    7550:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    7554:	4c 8d 14 bf          	lea    r10,[rdi+rdi*4]
    7558:	4f 8d 14 92          	lea    r10,[r10+r10*4]
    755c:	4c 01 d2             	add    rdx,r10
    755f:	49 8d 94 11 84 04 00 00 	lea    rdx,[r9+rdx*1+0x484]
    7567:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    756b:	41 83 f8 02          	cmp    r8d,0x2
    756f:	7e 06                	jle    7577 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x337>
    7571:	03 91 d4 1d 03 00    	add    edx,DWORD PTR [rcx+0x31dd4]
    7577:	03 94 b9 9c 1d 03 00 	add    edx,DWORD PTR [rcx+rdi*4+0x31d9c]
    757e:	03 91 bc 1d 03 00    	add    edx,DWORD PTR [rcx+0x31dbc]
    7584:	8b 89 98 1d 03 00    	mov    ecx,DWORD PTR [rcx+0x31d98]
    758a:	44 8d 1c 4a          	lea    r11d,[rdx+rcx*2]
    758e:	41 01 f3             	add    r11d,esi
    7591:	41 39 c3             	cmp    r11d,eax
    7594:	41 0f 4e c3          	cmovle eax,r11d
    7598:	e9 e4 fc ff ff       	jmp    7281 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x41>
    759d:	0f 1f 00             	nop    DWORD PTR [rax]
    75a0:	85 d2                	test   edx,edx
    75a2:	78 1c                	js     75c0 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x380>
    75a4:	49 63 f8             	movsxd rdi,r8d
    75a7:	48 8d 34 bf          	lea    rsi,[rdi+rdi*4]
    75ab:	48 8d 94 32 4c 05 00 00 	lea    rdx,[rdx+rsi*1+0x54c]
    75b3:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    75b7:	e9 bb fd ff ff       	jmp    7377 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x137>
    75bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    75c0:	85 f6                	test   esi,esi
    75c2:	78 3f                	js     7603 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3c3>
    75c4:	49 63 f8             	movsxd rdi,r8d
    75c7:	48 8d 14 bf          	lea    rdx,[rdi+rdi*4]
    75cb:	48 8d 94 16 74 05 00 00 	lea    rdx,[rsi+rdx*1+0x574]
    75d3:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    75d7:	e9 9b fd ff ff       	jmp    7377 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x137>
    75dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    75e0:	4c 63 7c 24 f4       	movsxd r15,DWORD PTR [rsp-0xc]
    75e5:	45 31 f6             	xor    r14d,r14d
    75e8:	4c 89 7c 24 e8       	mov    QWORD PTR [rsp-0x18],r15
    75ed:	e9 66 fe ff ff       	jmp    7458 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x218>
    75f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    75f8:	45 31 d2             	xor    r10d,r10d
    75fb:	4d 63 dd             	movsxd r11,r13d
    75fe:	e9 c8 fe ff ff       	jmp    74cb <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x28b>
    7603:	31 d2                	xor    edx,edx
    7605:	49 63 f8             	movsxd rdi,r8d
    7608:	e9 6a fd ff ff       	jmp    7377 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x137>
    760d:	3d 80 96 98 00       	cmp    eax,0x989680
    7612:	0f 4f c6             	cmovg  eax,esi
    7615:	e9 67 fc ff ff       	jmp    7281 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x41>
    761a:	85 d2                	test   edx,edx
    761c:	78 18                	js     7636 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x3f6>
    761e:	49 63 f8             	movsxd rdi,r8d
    7621:	4c 8d 0c bf          	lea    r9,[rdi+rdi*4]
    7625:	4a 8d 94 0a 4c 05 00 00 	lea    rdx,[rdx+r9*1+0x54c]
    762d:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    7631:	e9 35 ff ff ff       	jmp    756b <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x32b>
    7636:	85 ff                	test   edi,edi
    7638:	78 1b                	js     7655 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x415>
    763a:	48 63 d7             	movsxd rdx,edi
    763d:	49 63 f8             	movsxd rdi,r8d
    7640:	4c 8d 0c bf          	lea    r9,[rdi+rdi*4]
    7644:	4a 8d 94 0a 74 05 00 00 	lea    rdx,[rdx+r9*1+0x574]
    764c:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    7650:	e9 16 ff ff ff       	jmp    756b <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x32b>
    7655:	31 d2                	xor    edx,edx
    7657:	49 63 f8             	movsxd rdi,r8d
    765a:	e9 0c ff ff ff       	jmp    756b <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)+0x32b>
    765f:	90                   	nop

0000000000007660 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)>:
    7660:	f3 0f 1e fa          	endbr64 
    7664:	41 57                	push   r15
    7666:	41 56                	push   r14
    7668:	41 55                	push   r13
    766a:	4d 89 c5             	mov    r13,r8
    766d:	41 54                	push   r12
    766f:	55                   	push   rbp
    7670:	4c 89 cd             	mov    rbp,r9
    7673:	53                   	push   rbx
    7674:	48 83 ec 38          	sub    rsp,0x38
    7678:	48 63 5c 24 70       	movsxd rbx,DWORD PTR [rsp+0x70]
    767d:	4c 63 7c 24 78       	movsxd r15,DWORD PTR [rsp+0x78]
    7682:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
    7686:	48 8b 84 24 90 00 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    768e:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    7693:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
    7698:	49 8b 09             	mov    rcx,QWORD PTR [r9]
    769b:	4d 89 fc             	mov    r12,r15
    769e:	4c 8d 1c 1b          	lea    r11,[rbx+rbx*1]
    76a2:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    76a5:	4f 8d 04 3f          	lea    r8,[r15+r15*1]
    76a9:	4c 8d 14 9d 00 00 00 00 	lea    r10,[rbx*4+0x0]
    76b1:	8b 81 ac 35 03 00    	mov    eax,DWORD PTR [rcx+0x335ac]
    76b7:	8b 14 9e             	mov    edx,DWORD PTR [rsi+rbx*4]
    76ba:	83 fa ff             	cmp    edx,0xffffffff
    76bd:	7c 31                	jl     76f0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x90>
    76bf:	41 be 80 96 98 00    	mov    r14d,0x989680
    76c5:	44 39 e2             	cmp    edx,r12d
    76c8:	0f 84 d2 02 00 00    	je     79a0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x340>
    76ce:	83 f8 01             	cmp    eax,0x1
    76d1:	0f 84 e1 00 00 00    	je     77b8 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x158>
    76d7:	48 83 c4 38          	add    rsp,0x38
    76db:	44 89 f0             	mov    eax,r14d
    76de:	5b                   	pop    rbx
    76df:	5d                   	pop    rbp
    76e0:	41 5c                	pop    r12
    76e2:	41 5d                	pop    r13
    76e4:	41 5e                	pop    r14
    76e6:	41 5f                	pop    r15
    76e8:	c3                   	ret    
    76e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    76f0:	42 83 3c be ff       	cmp    DWORD PTR [rsi+r15*4],0xffffffff
    76f5:	7d c8                	jge    76bf <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x5f>
    76f7:	83 7c 24 70 01       	cmp    DWORD PTR [rsp+0x70],0x1
    76fc:	49 8b 55 00          	mov    rdx,QWORD PTR [r13+0x0]
    7700:	be ff ff ff ff       	mov    esi,0xffffffff
    7705:	44 8b 37             	mov    r14d,DWORD PTR [rdi]
    7708:	7e 06                	jle    7710 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0xb0>
    770a:	42 0f be 74 1a fe    	movsx  esi,BYTE PTR [rdx+r11*1-0x2]
    7710:	41 b9 ff ff ff ff    	mov    r9d,0xffffffff
    7716:	44 3b a4 24 88 00 00 00 	cmp    r12d,DWORD PTR [rsp+0x88]
    771e:	7d 06                	jge    7726 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0xc6>
    7720:	46 0f b6 4c 02 02    	movzx  r9d,BYTE PTR [rdx+r8*1+0x2]
    7726:	41 81 fe 80 96 98 00 	cmp    r14d,0x989680
    772d:	74 9f                	je     76ce <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x6e>
    772f:	4a 0f bf 3c 7a       	movsx  rdi,WORD PTR [rdx+r15*2]
    7734:	48 0f bf 14 5a       	movsx  rdx,WORD PTR [rdx+rbx*2]
    7739:	4c 89 54 24 28       	mov    QWORD PTR [rsp+0x28],r10
    773e:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
    7743:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
    7748:	48 8d 3c 92          	lea    rdi,[rdx+rdx*4]
    774c:	48 8d 14 ba          	lea    rdx,[rdx+rdi*4]
    7750:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
    7755:	4c 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],r11
    775a:	48 01 d7             	add    rdi,rdx
    775d:	48 8d 15 5c ab 24 00 	lea    rdx,[rip+0x24ab5c]        # 2522c0 <pair>
    7764:	0f be 3c ba          	movsx  edi,BYTE PTR [rdx+rdi*4]
    7768:	83 f8 02             	cmp    eax,0x2
    776b:	0f 84 ff 02 00 00    	je     7a70 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x410>
    7771:	ba ff ff ff ff       	mov    edx,0xffffffff
    7776:	be ff ff ff ff       	mov    esi,0xffffffff
    777b:	e8 bb 98 00 00       	call   1103b <vrna_E_ext_stem>
    7780:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    7785:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
    778a:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
    778f:	41 01 c6             	add    r14d,eax
    7792:	48 8b 4d 00          	mov    rcx,QWORD PTR [rbp+0x0]
    7796:	b8 80 96 98 00       	mov    eax,0x989680
    779b:	41 81 fe 80 96 98 00 	cmp    r14d,0x989680
    77a2:	44 0f 4f f0          	cmovg  r14d,eax
    77a6:	8b 81 ac 35 03 00    	mov    eax,DWORD PTR [rcx+0x335ac]
    77ac:	83 f8 01             	cmp    eax,0x1
    77af:	0f 85 22 ff ff ff    	jne    76d7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x77>
    77b5:	0f 1f 00             	nop    DWORD PTR [rax]
    77b8:	48 8b 84 24 90 00 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    77c0:	49 8b 7d 00          	mov    rdi,QWORD PTR [r13+0x0]
    77c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
    77c7:	42 8b 74 10 04       	mov    esi,DWORD PTR [rax+r10*1+0x4]
    77cc:	8b 14 98             	mov    edx,DWORD PTR [rax+rbx*4]
    77cf:	83 fe ff             	cmp    esi,0xffffffff
    77d2:	0f 8c 90 01 00 00    	jl     7968 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x308>
    77d8:	44 39 e6             	cmp    esi,r12d
    77db:	0f 84 92 01 00 00    	je     7973 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x313>
    77e1:	4a 0f bf 4c 07 fe    	movsx  rcx,WORD PTR [rdi+r8*1-0x2]
    77e7:	4d 8d 48 fe          	lea    r9,[r8-0x2]
    77eb:	83 fa ff             	cmp    edx,0xffffffff
    77ee:	0f 8d 8d 01 00 00    	jge    7981 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x321>
    77f4:	42 83 7c b8 fc ff    	cmp    DWORD PTR [rax+r15*4-0x4],0xffffffff
    77fa:	4a 8d 34 bd 00 00 00 00 	lea    rsi,[r15*4+0x0]
    7802:	0f 8d 79 01 00 00    	jge    7981 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x321>
    7808:	8b 34 30             	mov    esi,DWORD PTR [rax+rsi*1]
    780b:	85 f6                	test   esi,esi
    780d:	0f 89 ad 00 00 00    	jns    78c0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x260>
    7813:	41 8d 44 24 ff       	lea    eax,[r12-0x1]
    7818:	2b 44 24 70          	sub    eax,DWORD PTR [rsp+0x70]
    781c:	41 b8 80 96 98 00    	mov    r8d,0x989680
    7822:	83 f8 03             	cmp    eax,0x3
    7825:	7e 68                	jle    788f <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x22f>
    7827:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    782c:	44 8b 00             	mov    r8d,DWORD PTR [rax]
    782f:	41 81 f8 80 96 98 00 	cmp    r8d,0x989680
    7836:	74 57                	je     788f <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x22f>
    7838:	48 0f bf 04 5f       	movsx  rax,WORD PTR [rdi+rbx*2]
    783d:	42 0f be 14 7f       	movsx  edx,BYTE PTR [rdi+r15*2]
    7842:	44 89 44 24 20       	mov    DWORD PTR [rsp+0x20],r8d
    7847:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
    784c:	48 8d 34 80          	lea    rsi,[rax+rax*4]
    7850:	4c 89 54 24 08       	mov    QWORD PTR [rsp+0x8],r10
    7855:	48 8d 04 b0          	lea    rax,[rax+rsi*4]
    7859:	be ff ff ff ff       	mov    esi,0xffffffff
    785e:	4c 89 1c 24          	mov    QWORD PTR [rsp],r11
    7862:	48 01 c8             	add    rax,rcx
    7865:	48 8d 0d 54 aa 24 00 	lea    rcx,[rip+0x24aa54]        # 2522c0 <pair>
    786c:	0f be 3c 81          	movsx  edi,BYTE PTR [rcx+rax*4]
    7870:	48 8b 4d 00          	mov    rcx,QWORD PTR [rbp+0x0]
    7874:	e8 c2 97 00 00       	call   1103b <vrna_E_ext_stem>
    7879:	44 8b 44 24 20       	mov    r8d,DWORD PTR [rsp+0x20]
    787e:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
    7883:	4c 8b 54 24 08       	mov    r10,QWORD PTR [rsp+0x8]
    7888:	4c 8b 1c 24          	mov    r11,QWORD PTR [rsp]
    788c:	41 01 c0             	add    r8d,eax
    788f:	45 39 f0             	cmp    r8d,r14d
    7892:	44 89 f2             	mov    edx,r14d
    7895:	41 0f 4e d0          	cmovle edx,r8d
    7899:	0f 8e 01 02 00 00    	jle    7aa0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x440>
    789f:	49 8b 7d 00          	mov    rdi,QWORD PTR [r13+0x0]
    78a3:	48 8b 84 24 90 00 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    78ab:	41 89 d6             	mov    r14d,edx
    78ae:	4a 0f bf 0c 0f       	movsx  rcx,WORD PTR [rdi+r9*1]
    78b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    78b6:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    78c0:	42 8b 54 10 04       	mov    edx,DWORD PTR [rax+r10*1+0x4]
    78c5:	83 fa ff             	cmp    edx,0xffffffff
    78c8:	0f 8c ea 00 00 00    	jl     79b8 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x358>
    78ce:	41 8d 74 24 ff       	lea    esi,[r12-0x1]
    78d3:	39 f2                	cmp    edx,esi
    78d5:	0f 85 fc fd ff ff    	jne    76d7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x77>
    78db:	8b 14 98             	mov    edx,DWORD PTR [rax+rbx*4]
    78de:	85 d2                	test   edx,edx
    78e0:	0f 89 f1 fd ff ff    	jns    76d7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x77>
    78e6:	42 8b 04 b8          	mov    eax,DWORD PTR [rax+r15*4]
    78ea:	85 c0                	test   eax,eax
    78ec:	0f 89 e5 fd ff ff    	jns    76d7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x77>
    78f2:	41 83 ec 01          	sub    r12d,0x1
    78f6:	44 2b 64 24 70       	sub    r12d,DWORD PTR [rsp+0x70]
    78fb:	41 bd 80 96 98 00    	mov    r13d,0x989680
    7901:	41 83 fc 04          	cmp    r12d,0x4
    7905:	7e 42                	jle    7949 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x2e9>
    7907:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    790c:	44 8b 28             	mov    r13d,DWORD PTR [rax]
    790f:	41 81 fd 80 96 98 00 	cmp    r13d,0x989680
    7916:	74 31                	je     7949 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x2e9>
    7918:	4a 0f bf 44 1f 02    	movsx  rax,WORD PTR [rdi+r11*1+0x2]
    791e:	42 0f be 14 7f       	movsx  edx,BYTE PTR [rdi+r15*2]
    7923:	0f be 34 5f          	movsx  esi,BYTE PTR [rdi+rbx*2]
    7927:	48 8d 3c 80          	lea    rdi,[rax+rax*4]
    792b:	48 8d 04 b8          	lea    rax,[rax+rdi*4]
    792f:	48 01 c8             	add    rax,rcx
    7932:	48 8d 0d 87 a9 24 00 	lea    rcx,[rip+0x24a987]        # 2522c0 <pair>
    7939:	0f be 3c 81          	movsx  edi,BYTE PTR [rcx+rax*4]
    793d:	48 8b 4d 00          	mov    rcx,QWORD PTR [rbp+0x0]
    7941:	e8 f5 96 00 00       	call   1103b <vrna_E_ext_stem>
    7946:	41 01 c5             	add    r13d,eax
    7949:	45 39 ee             	cmp    r14d,r13d
    794c:	44 89 e8             	mov    eax,r13d
    794f:	41 0f 4e c6          	cmovle eax,r14d
    7953:	0f 8d 57 01 00 00    	jge    7ab0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x450>
    7959:	41 89 c6             	mov    r14d,eax
    795c:	e9 76 fd ff ff       	jmp    76d7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x77>
    7961:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    7968:	42 83 3c b8 ff       	cmp    DWORD PTR [rax+r15*4],0xffffffff
    796d:	0f 8d 65 fe ff ff    	jge    77d8 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x178>
    7973:	85 d2                	test   edx,edx
    7975:	78 59                	js     79d0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x370>
    7977:	4a 0f bf 4c 07 fe    	movsx  rcx,WORD PTR [rdi+r8*1-0x2]
    797d:	4d 8d 48 fe          	lea    r9,[r8-0x2]
    7981:	41 8d 74 24 ff       	lea    esi,[r12-0x1]
    7986:	39 d6                	cmp    esi,edx
    7988:	0f 85 32 ff ff ff    	jne    78c0 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x260>
    798e:	4a 8d 34 bd 00 00 00 00 	lea    rsi,[r15*4+0x0]
    7996:	e9 6d fe ff ff       	jmp    7808 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x1a8>
    799b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    79a0:	8b 54 24 70          	mov    edx,DWORD PTR [rsp+0x70]
    79a4:	42 39 14 be          	cmp    DWORD PTR [rsi+r15*4],edx
    79a8:	0f 85 20 fd ff ff    	jne    76ce <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x6e>
    79ae:	e9 44 fd ff ff       	jmp    76f7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x97>
    79b3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    79b8:	42 83 7c b8 fc ff    	cmp    DWORD PTR [rax+r15*4-0x4],0xffffffff
    79be:	0f 8d 0a ff ff ff    	jge    78ce <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x26e>
    79c4:	e9 12 ff ff ff       	jmp    78db <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x27b>
    79c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    79d0:	44 89 e0             	mov    eax,r12d
    79d3:	2b 44 24 70          	sub    eax,DWORD PTR [rsp+0x70]
    79d7:	41 b9 80 96 98 00    	mov    r9d,0x989680
    79dd:	83 f8 04             	cmp    eax,0x4
    79e0:	7e 68                	jle    7a4a <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x3ea>
    79e2:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    79e6:	44 8b 08             	mov    r9d,DWORD PTR [rax]
    79e9:	41 81 f9 80 96 98 00 	cmp    r9d,0x989680
    79f0:	74 58                	je     7a4a <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x3ea>
    79f2:	4a 0f bf 44 1f 02    	movsx  rax,WORD PTR [rdi+r11*1+0x2]
    79f8:	4a 0f bf 14 7f       	movsx  rdx,WORD PTR [rdi+r15*2]
    79fd:	44 89 4c 24 28       	mov    DWORD PTR [rsp+0x28],r9d
    7a02:	0f be 34 5f          	movsx  esi,BYTE PTR [rdi+rbx*2]
    7a06:	4c 89 54 24 20       	mov    QWORD PTR [rsp+0x20],r10
    7a0b:	48 8d 3c 80          	lea    rdi,[rax+rax*4]
    7a0f:	4c 89 44 24 18       	mov    QWORD PTR [rsp+0x18],r8
    7a14:	48 8d 04 b8          	lea    rax,[rax+rdi*4]
    7a18:	4c 89 1c 24          	mov    QWORD PTR [rsp],r11
    7a1c:	48 01 d0             	add    rax,rdx
    7a1f:	48 8d 15 9a a8 24 00 	lea    rdx,[rip+0x24a89a]        # 2522c0 <pair>
    7a26:	0f be 3c 82          	movsx  edi,BYTE PTR [rdx+rax*4]
    7a2a:	ba ff ff ff ff       	mov    edx,0xffffffff
    7a2f:	e8 07 96 00 00       	call   1103b <vrna_E_ext_stem>
    7a34:	44 8b 4c 24 28       	mov    r9d,DWORD PTR [rsp+0x28]
    7a39:	4c 8b 54 24 20       	mov    r10,QWORD PTR [rsp+0x20]
    7a3e:	4c 8b 44 24 18       	mov    r8,QWORD PTR [rsp+0x18]
    7a43:	4c 8b 1c 24          	mov    r11,QWORD PTR [rsp]
    7a47:	41 01 c1             	add    r9d,eax
    7a4a:	45 39 ce             	cmp    r14d,r9d
    7a4d:	44 89 c9             	mov    ecx,r9d
    7a50:	41 0f 4e ce          	cmovle ecx,r14d
    7a54:	7d 3a                	jge    7a90 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x430>
    7a56:	48 8b 84 24 90 00 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    7a5e:	49 8b 7d 00          	mov    rdi,QWORD PTR [r13+0x0]
    7a62:	41 89 ce             	mov    r14d,ecx
    7a65:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7a68:	8b 14 98             	mov    edx,DWORD PTR [rax+rbx*4]
    7a6b:	e9 71 fd ff ff       	jmp    77e1 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x181>
    7a70:	41 0f be d1          	movsx  edx,r9b
    7a74:	e8 c2 95 00 00       	call   1103b <vrna_E_ext_stem>
    7a79:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
    7a7e:	4c 8b 44 24 20       	mov    r8,QWORD PTR [rsp+0x20]
    7a83:	4c 8b 54 24 28       	mov    r10,QWORD PTR [rsp+0x28]
    7a88:	41 01 c6             	add    r14d,eax
    7a8b:	e9 02 fd ff ff       	jmp    7792 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x132>
    7a90:	48 8b 84 24 80 00 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    7a98:	c6 00 01             	mov    BYTE PTR [rax],0x1
    7a9b:	eb b9                	jmp    7a56 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x3f6>
    7a9d:	0f 1f 00             	nop    DWORD PTR [rax]
    7aa0:	48 8b 84 24 80 00 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    7aa8:	c6 00 02             	mov    BYTE PTR [rax],0x2
    7aab:	e9 ef fd ff ff       	jmp    789f <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x23f>
    7ab0:	48 8b 9c 24 80 00 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
    7ab8:	41 89 c6             	mov    r14d,eax
    7abb:	c6 03 03             	mov    BYTE PTR [rbx],0x3
    7abe:	e9 14 fc ff ff       	jmp    76d7 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)+0x77>
    7ac3:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    7acd:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000007ad0 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)>:
    7ad0:	f3 0f 1e fa          	endbr64 
    7ad4:	41 57                	push   r15
    7ad6:	4d 89 cf             	mov    r15,r9
    7ad9:	41 56                	push   r14
    7adb:	41 55                	push   r13
    7add:	41 54                	push   r12
    7adf:	55                   	push   rbp
    7ae0:	53                   	push   rbx
    7ae1:	4d 8b 08             	mov    r9,QWORD PTR [r8]
    7ae4:	48 89 54 24 c8       	mov    QWORD PTR [rsp-0x38],rdx
    7ae9:	48 63 54 24 38       	movsxd rdx,DWORD PTR [rsp+0x38]
    7aee:	48 89 4c 24 d0       	mov    QWORD PTR [rsp-0x30],rcx
    7af3:	48 63 4c 24 40       	movsxd rcx,DWORD PTR [rsp+0x40]
    7af8:	48 8d 04 12          	lea    rax,[rdx+rdx*1]
    7afc:	48 89 74 24 c0       	mov    QWORD PTR [rsp-0x40],rsi
    7b01:	41 0f b7 1c 51       	movzx  ebx,WORD PTR [r9+rdx*2]
    7b06:	48 89 44 24 d8       	mov    QWORD PTR [rsp-0x28],rax
    7b0b:	48 8d 04 09          	lea    rax,[rcx+rcx*1]
    7b0f:	49 89 ce             	mov    r14,rcx
    7b12:	48 89 44 24 e0       	mov    QWORD PTR [rsp-0x20],rax
    7b17:	41 0f bf 04 49       	movsx  eax,WORD PTR [r9+rcx*2]
    7b1c:	89 44 24 b8          	mov    DWORD PTR [rsp-0x48],eax
    7b20:	41 89 c3             	mov    r11d,eax
    7b23:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    7b28:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    7b2b:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
    7b33:	48 89 44 24 e8       	mov    QWORD PTR [rsp-0x18],rax
    7b38:	41 8b 34 92          	mov    esi,DWORD PTR [r10+rdx*4]
    7b3c:	83 fe ff             	cmp    esi,0xffffffff
    7b3f:	0f 8c 3b 02 00 00    	jl     7d80 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x2b0>
    7b45:	44 39 f6             	cmp    esi,r14d
    7b48:	74 26                	je     7b70 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0xa0>
    7b4a:	49 8b 3f             	mov    rdi,QWORD PTR [r15]
    7b4d:	b8 80 96 98 00       	mov    eax,0x989680
    7b52:	83 bf ac 35 03 00 01 	cmp    DWORD PTR [rdi+0x335ac],0x1
    7b59:	0f 84 c1 00 00 00    	je     7c20 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x150>
    7b5f:	5b                   	pop    rbx
    7b60:	5d                   	pop    rbp
    7b61:	41 5c                	pop    r12
    7b63:	41 5d                	pop    r13
    7b65:	41 5e                	pop    r14
    7b67:	41 5f                	pop    r15
    7b69:	c3                   	ret    
    7b6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    7b70:	8b 07                	mov    eax,DWORD PTR [rdi]
    7b72:	3d 80 96 98 00       	cmp    eax,0x989680
    7b77:	74 e6                	je     7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7b79:	49 8b 3f             	mov    rdi,QWORD PTR [r15]
    7b7c:	8b af ac 35 03 00    	mov    ebp,DWORD PTR [rdi+0x335ac]
    7b82:	89 6c 24 e8          	mov    DWORD PTR [rsp-0x18],ebp
    7b86:	83 7c 24 38 01       	cmp    DWORD PTR [rsp+0x38],0x1
    7b8b:	c6 44 24 f0 ff       	mov    BYTE PTR [rsp-0x10],0xff
    7b90:	7e 0f                	jle    7ba1 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0xd1>
    7b92:	48 8d 2c 12          	lea    rbp,[rdx+rdx*1]
    7b96:	41 0f b6 6c 29 fe    	movzx  ebp,BYTE PTR [r9+rbp*1-0x2]
    7b9c:	40 88 6c 24 f0       	mov    BYTE PTR [rsp-0x10],bpl
    7ba1:	4c 0f bf eb          	movsx  r13,bx
    7ba5:	48 63 6c 24 b8       	movsxd rbp,DWORD PTR [rsp-0x48]
    7baa:	4f 8d 64 ad 00       	lea    r12,[r13+r13*4+0x0]
    7baf:	4f 8d 6c a5 00       	lea    r13,[r13+r12*4+0x0]
    7bb4:	4c 01 ed             	add    rbp,r13
    7bb7:	4c 8d 2d 02 a7 24 00 	lea    r13,[rip+0x24a702]        # 2522c0 <pair>
    7bbe:	49 0f be 6c ad 00    	movsx  rbp,BYTE PTR [r13+rbp*4+0x0]
    7bc4:	4c 8b 6c 24 50       	mov    r13,QWORD PTR [rsp+0x50]
    7bc9:	45 39 75 00          	cmp    DWORD PTR [r13+0x0],r14d
    7bcd:	0f 8e 95 02 00 00    	jle    7e68 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x398>
    7bd3:	83 7c 24 e8 02       	cmp    DWORD PTR [rsp-0x18],0x2
    7bd8:	0f 84 aa 03 00 00    	je     7f88 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x4b8>
    7bde:	45 31 e4             	xor    r12d,r12d
    7be1:	83 fd 02             	cmp    ebp,0x2
    7be4:	7e 07                	jle    7bed <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x11d>
    7be6:	44 8b a7 d4 1d 03 00 	mov    r12d,DWORD PTR [rdi+0x31dd4]
    7bed:	44 03 a4 af 9c 1d 03 00 	add    r12d,DWORD PTR [rdi+rbp*4+0x31d9c]
    7bf5:	44 01 e0             	add    eax,r12d
    7bf8:	3d 80 96 98 00       	cmp    eax,0x989680
    7bfd:	bd 80 96 98 00       	mov    ebp,0x989680
    7c02:	0f 4f c5             	cmovg  eax,ebp
    7c05:	44 39 f6             	cmp    esi,r14d
    7c08:	0f 84 51 ff ff ff    	je     7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7c0e:	83 7c 24 e8 01       	cmp    DWORD PTR [rsp-0x18],0x1
    7c13:	0f 85 46 ff ff ff    	jne    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7c19:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    7c20:	41 8b 2c 8a          	mov    ebp,DWORD PTR [r10+rcx*4]
    7c24:	4c 8d 24 8d 00 00 00 00 	lea    r12,[rcx*4+0x0]
    7c2c:	3b 6c 24 38          	cmp    ebp,DWORD PTR [rsp+0x38]
    7c30:	0f 84 29 ff ff ff    	je     7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7c36:	41 89 dd             	mov    r13d,ebx
    7c39:	44 89 db             	mov    ebx,r11d
    7c3c:	4c 8d 1c 95 00 00 00 00 	lea    r11,[rdx*4+0x0]
    7c44:	47 8b 5c 1a 04       	mov    r11d,DWORD PTR [r10+r11*1+0x4]
    7c49:	83 fd ff             	cmp    ebp,0xffffffff
    7c4c:	7d 0a                	jge    7c58 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x188>
    7c4e:	41 83 fb ff          	cmp    r11d,0xffffffff
    7c52:	0f 8c 50 02 00 00    	jl     7ea8 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x3d8>
    7c58:	45 39 f3             	cmp    r11d,r14d
    7c5b:	0f 84 47 02 00 00    	je     7ea8 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x3d8>
    7c61:	83 fe ff             	cmp    esi,0xffffffff
    7c64:	7d 0c                	jge    7c72 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1a2>
    7c66:	43 83 7c 22 fc ff    	cmp    DWORD PTR [r10+r12*1-0x4],0xffffffff
    7c6c:	0f 8c 3e 01 00 00    	jl     7db0 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x2e0>
    7c72:	41 8d 7e ff          	lea    edi,[r14-0x1]
    7c76:	39 f7                	cmp    edi,esi
    7c78:	0f 84 32 01 00 00    	je     7db0 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x2e0>
    7c7e:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
    7c86:	41 8b 74 32 04       	mov    esi,DWORD PTR [r10+rsi*1+0x4]
    7c8b:	83 fe ff             	cmp    esi,0xffffffff
    7c8e:	0f 8c dc 02 00 00    	jl     7f70 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x4a0>
    7c94:	41 8d 7e ff          	lea    edi,[r14-0x1]
    7c98:	39 fe                	cmp    esi,edi
    7c9a:	0f 85 bf fe ff ff    	jne    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7ca0:	41 8b 34 92          	mov    esi,DWORD PTR [r10+rdx*4]
    7ca4:	85 f6                	test   esi,esi
    7ca6:	0f 89 b3 fe ff ff    	jns    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7cac:	41 8b 14 8a          	mov    edx,DWORD PTR [r10+rcx*4]
    7cb0:	85 d2                	test   edx,edx
    7cb2:	0f 89 a7 fe ff ff    	jns    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7cb8:	41 8d 56 ff          	lea    edx,[r14-0x1]
    7cbc:	2b 54 24 38          	sub    edx,DWORD PTR [rsp+0x38]
    7cc0:	83 fa 04             	cmp    edx,0x4
    7cc3:	0f 8e 96 fe ff ff    	jle    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7cc9:	48 8b 4c 24 d0       	mov    rcx,QWORD PTR [rsp-0x30]
    7cce:	8b 11                	mov    edx,DWORD PTR [rcx]
    7cd0:	81 fa 80 96 98 00    	cmp    edx,0x989680
    7cd6:	0f 84 83 fe ff ff    	je     7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7cdc:	49 8b 0f             	mov    rcx,QWORD PTR [r15]
    7cdf:	4c 8b 7c 24 d8       	mov    r15,QWORD PTR [rsp-0x28]
    7ce4:	4c 0f be db          	movsx  r11,bl
    7ce8:	49 0f be dd          	movsx  rbx,r13b
    7cec:	8b b1 98 1d 03 00    	mov    esi,DWORD PTR [rcx+0x31d98]
    7cf2:	8d 3c 72             	lea    edi,[rdx+rsi*2]
    7cf5:	49 8b 10             	mov    rdx,QWORD PTR [r8]
    7cf8:	48 8b 74 24 e0       	mov    rsi,QWORD PTR [rsp-0x20]
    7cfd:	48 0f bf 74 32 fe    	movsx  rsi,WORD PTR [rdx+rsi*1-0x2]
    7d03:	4a 0f bf 54 3a 02    	movsx  rdx,WORD PTR [rdx+r15*1+0x2]
    7d09:	4c 8d 04 92          	lea    r8,[rdx+rdx*4]
    7d0d:	4a 8d 14 82          	lea    rdx,[rdx+r8*4]
    7d11:	48 01 f2             	add    rdx,rsi
    7d14:	48 8d 35 a5 a5 24 00 	lea    rsi,[rip+0x24a5a5]        # 2522c0 <pair>
    7d1b:	44 0f be 04 96       	movsx  r8d,BYTE PTR [rsi+rdx*4]
    7d20:	85 db                	test   ebx,ebx
    7d22:	0f 88 5d 03 00 00    	js     8085 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x5b5>
    7d28:	45 85 db             	test   r11d,r11d
    7d2b:	0f 88 38 03 00 00    	js     8069 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x599>
    7d31:	49 63 f0             	movsxd rsi,r8d
    7d34:	4c 8d 0c 9b          	lea    r9,[rbx+rbx*4]
    7d38:	48 8d 14 b6          	lea    rdx,[rsi+rsi*4]
    7d3c:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    7d40:	4c 01 ca             	add    rdx,r9
    7d43:	49 8d 94 13 84 04 00 00 	lea    rdx,[r11+rdx*1+0x484]
    7d4b:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    7d4f:	41 83 f8 02          	cmp    r8d,0x2
    7d53:	7e 06                	jle    7d5b <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x28b>
    7d55:	03 91 d4 1d 03 00    	add    edx,DWORD PTR [rcx+0x31dd4]
    7d5b:	03 94 b1 9c 1d 03 00 	add    edx,DWORD PTR [rcx+rsi*4+0x31d9c]
    7d62:	01 fa                	add    edx,edi
    7d64:	39 d0                	cmp    eax,edx
    7d66:	89 d1                	mov    ecx,edx
    7d68:	0f 4e c8             	cmovle ecx,eax
    7d6b:	0f 8d e9 02 00 00    	jge    805a <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x58a>
    7d71:	89 c8                	mov    eax,ecx
    7d73:	e9 e7 fd ff ff       	jmp    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    7d78:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    7d80:	41 83 3c 8a ff       	cmp    DWORD PTR [r10+rcx*4],0xffffffff
    7d85:	0f 8d ba fd ff ff    	jge    7b45 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x75>
    7d8b:	8b 07                	mov    eax,DWORD PTR [rdi]
    7d8d:	49 8b 3f             	mov    rdi,QWORD PTR [r15]
    7d90:	8b af ac 35 03 00    	mov    ebp,DWORD PTR [rdi+0x335ac]
    7d96:	89 6c 24 e8          	mov    DWORD PTR [rsp-0x18],ebp
    7d9a:	3d 80 96 98 00       	cmp    eax,0x989680
    7d9f:	0f 85 e1 fd ff ff    	jne    7b86 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0xb6>
    7da5:	e9 5b fe ff ff       	jmp    7c05 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x135>
    7daa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    7db0:	41 8b 3c 8a          	mov    edi,DWORD PTR [r10+rcx*4]
    7db4:	85 ff                	test   edi,edi
    7db6:	0f 89 c2 fe ff ff    	jns    7c7e <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1ae>
    7dbc:	41 8d 76 ff          	lea    esi,[r14-0x1]
    7dc0:	2b 74 24 38          	sub    esi,DWORD PTR [rsp+0x38]
    7dc4:	83 fe 03             	cmp    esi,0x3
    7dc7:	0f 8e b1 fe ff ff    	jle    7c7e <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1ae>
    7dcd:	48 8b 7c 24 c8       	mov    rdi,QWORD PTR [rsp-0x38]
    7dd2:	8b 37                	mov    esi,DWORD PTR [rdi]
    7dd4:	81 fe 80 96 98 00    	cmp    esi,0x989680
    7dda:	0f 84 9e fe ff ff    	je     7c7e <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1ae>
    7de0:	49 8b 2f             	mov    rbp,QWORD PTR [r15]
    7de3:	48 8d 3c 09          	lea    rdi,[rcx+rcx*1]
    7de7:	4c 0f be db          	movsx  r11,bl
    7deb:	03 b5 98 1d 03 00    	add    esi,DWORD PTR [rbp+0x31d98]
    7df1:	89 74 24 b8          	mov    DWORD PTR [rsp-0x48],esi
    7df5:	49 8b 30             	mov    rsi,QWORD PTR [r8]
    7df8:	48 0f bf 7c 3e fe    	movsx  rdi,WORD PTR [rsi+rdi*1-0x2]
    7dfe:	48 0f bf 34 56       	movsx  rsi,WORD PTR [rsi+rdx*2]
    7e03:	4c 8d 0c b6          	lea    r9,[rsi+rsi*4]
    7e07:	4a 8d 34 8e          	lea    rsi,[rsi+r9*4]
    7e0b:	48 01 f7             	add    rdi,rsi
    7e0e:	48 8d 35 ab a4 24 00 	lea    rsi,[rip+0x24a4ab]        # 2522c0 <pair>
    7e15:	44 0f be 0c be       	movsx  r9d,BYTE PTR [rsi+rdi*4]
    7e1a:	45 85 db             	test   r11d,r11d
    7e1d:	0f 88 fa 01 00 00    	js     801d <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x54d>
    7e23:	49 63 f1             	movsxd rsi,r9d
    7e26:	48 8d 3c b6          	lea    rdi,[rsi+rsi*4]
    7e2a:	49 8d bc 3b 74 05 00 00 	lea    rdi,[r11+rdi*1+0x574]
    7e32:	8b 7c bd 08          	mov    edi,DWORD PTR [rbp+rdi*4+0x8]
    7e36:	41 83 f9 02          	cmp    r9d,0x2
    7e3a:	7e 06                	jle    7e42 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x372>
    7e3c:	03 bd d4 1d 03 00    	add    edi,DWORD PTR [rbp+0x31dd4]
    7e42:	03 bc b5 9c 1d 03 00 	add    edi,DWORD PTR [rbp+rsi*4+0x31d9c]
    7e49:	8b 74 24 b8          	mov    esi,DWORD PTR [rsp-0x48]
    7e4d:	01 fe                	add    esi,edi
    7e4f:	89 c7                	mov    edi,eax
    7e51:	39 c6                	cmp    esi,eax
    7e53:	0f 4e fe             	cmovle edi,esi
    7e56:	0f 8e cb 01 00 00    	jle    8027 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x557>
    7e5c:	89 f8                	mov    eax,edi
    7e5e:	e9 1b fe ff ff       	jmp    7c7e <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1ae>
    7e63:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    7e68:	83 7c 24 e8 02       	cmp    DWORD PTR [rsp-0x18],0x2
    7e6d:	0f 85 6b fd ff ff    	jne    7bde <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x10e>
    7e73:	4c 0f be 64 24 f0    	movsx  r12,BYTE PTR [rsp-0x10]
    7e79:	45 85 e4             	test   r12d,r12d
    7e7c:	0f 88 7e 01 00 00    	js     8000 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x530>
    7e82:	4c 63 ed             	movsxd r13,ebp
    7e85:	4c 89 6c 24 f0       	mov    QWORD PTR [rsp-0x10],r13
    7e8a:	4f 8d 6c ad 00       	lea    r13,[r13+r13*4+0x0]
    7e8f:	4f 8d a4 2c 4c 05 00 00 	lea    r12,[r12+r13*1+0x54c]
    7e97:	46 8b 64 a7 08       	mov    r12d,DWORD PTR [rdi+r12*4+0x8]
    7e9c:	e9 39 01 00 00       	jmp    7fda <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x50a>
    7ea1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    7ea8:	85 f6                	test   esi,esi
    7eaa:	0f 89 c2 fd ff ff    	jns    7c72 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1a2>
    7eb0:	45 89 f3             	mov    r11d,r14d
    7eb3:	44 2b 5c 24 38       	sub    r11d,DWORD PTR [rsp+0x38]
    7eb8:	41 83 fb 04          	cmp    r11d,0x4
    7ebc:	0f 8e 9f fd ff ff    	jle    7c61 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x191>
    7ec2:	4c 8b 5c 24 c0       	mov    r11,QWORD PTR [rsp-0x40]
    7ec7:	45 8b 1b             	mov    r11d,DWORD PTR [r11]
    7eca:	41 81 fb 80 96 98 00 	cmp    r11d,0x989680
    7ed1:	0f 84 8a fd ff ff    	je     7c61 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x191>
    7ed7:	44 03 9f 98 1d 03 00 	add    r11d,DWORD PTR [rdi+0x31d98]
    7ede:	49 0f be ed          	movsx  rbp,r13b
    7ee2:	44 89 5c 24 c0       	mov    DWORD PTR [rsp-0x40],r11d
    7ee7:	4c 63 5c 24 b8       	movsxd r11,DWORD PTR [rsp-0x48]
    7eec:	4c 89 5c 24 b8       	mov    QWORD PTR [rsp-0x48],r11
    7ef1:	4c 8d 1c 12          	lea    r11,[rdx+rdx*1]
    7ef5:	4f 0f bf 4c 19 02    	movsx  r9,WORD PTR [r9+r11*1+0x2]
    7efb:	4f 8d 1c 89          	lea    r11,[r9+r9*4]
    7eff:	4f 8d 0c 99          	lea    r9,[r9+r11*4]
    7f03:	4c 8d 1d b6 a3 24 00 	lea    r11,[rip+0x24a3b6]        # 2522c0 <pair>
    7f0a:	4c 03 4c 24 b8       	add    r9,QWORD PTR [rsp-0x48]
    7f0f:	47 0f be 1c 8b       	movsx  r11d,BYTE PTR [r11+r9*4]
    7f14:	85 ed                	test   ebp,ebp
    7f16:	0f 88 f1 00 00 00    	js     800d <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x53d>
    7f1c:	4d 63 cb             	movsxd r9,r11d
    7f1f:	4c 89 4c 24 b8       	mov    QWORD PTR [rsp-0x48],r9
    7f24:	4f 8d 0c 89          	lea    r9,[r9+r9*4]
    7f28:	4e 8d 8c 0d 4c 05 00 00 	lea    r9,[rbp+r9*1+0x54c]
    7f30:	46 8b 4c 8f 08       	mov    r9d,DWORD PTR [rdi+r9*4+0x8]
    7f35:	41 83 fb 02          	cmp    r11d,0x2
    7f39:	7e 07                	jle    7f42 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x472>
    7f3b:	44 03 8f d4 1d 03 00 	add    r9d,DWORD PTR [rdi+0x31dd4]
    7f42:	4c 8b 5c 24 b8       	mov    r11,QWORD PTR [rsp-0x48]
    7f47:	46 03 8c 9f 9c 1d 03 00 	add    r9d,DWORD PTR [rdi+r11*4+0x31d9c]
    7f4f:	8b 7c 24 c0          	mov    edi,DWORD PTR [rsp-0x40]
    7f53:	44 01 cf             	add    edi,r9d
    7f56:	41 89 c1             	mov    r9d,eax
    7f59:	39 c7                	cmp    edi,eax
    7f5b:	44 0f 4e cf          	cmovle r9d,edi
    7f5f:	0f 8e d9 00 00 00    	jle    803e <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x56e>
    7f65:	44 89 c8             	mov    eax,r9d
    7f68:	e9 f4 fc ff ff       	jmp    7c61 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x191>
    7f6d:	0f 1f 00             	nop    DWORD PTR [rax]
    7f70:	43 83 7c 22 fc ff    	cmp    DWORD PTR [r10+r12*1-0x4],0xffffffff
    7f76:	0f 8d 18 fd ff ff    	jge    7c94 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1c4>
    7f7c:	e9 1f fd ff ff       	jmp    7ca0 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1d0>
    7f81:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    7f88:	4c 8d 24 09          	lea    r12,[rcx+rcx*1]
    7f8c:	4f 0f be 6c 21 02    	movsx  r13,BYTE PTR [r9+r12*1+0x2]
    7f92:	4c 0f be 64 24 f0    	movsx  r12,BYTE PTR [rsp-0x10]
    7f98:	45 85 ed             	test   r13d,r13d
    7f9b:	0f 88 0b 01 00 00    	js     80ac <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x5dc>
    7fa1:	45 85 e4             	test   r12d,r12d
    7fa4:	0f 88 0b 01 00 00    	js     80b5 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x5e5>
    7faa:	4c 89 6c 24 f8       	mov    QWORD PTR [rsp-0x8],r13
    7faf:	4c 63 ed             	movsxd r13,ebp
    7fb2:	4f 8d 24 a4          	lea    r12,[r12+r12*4]
    7fb6:	4c 89 6c 24 f0       	mov    QWORD PTR [rsp-0x10],r13
    7fbb:	4f 8d 6c ad 00       	lea    r13,[r13+r13*4+0x0]
    7fc0:	4f 8d 6c ad 00       	lea    r13,[r13+r13*4+0x0]
    7fc5:	4d 01 ec             	add    r12,r13
    7fc8:	4c 8b 6c 24 f8       	mov    r13,QWORD PTR [rsp-0x8]
    7fcd:	4f 8d a4 25 84 04 00 00 	lea    r12,[r13+r12*1+0x484]
    7fd5:	46 8b 64 a7 08       	mov    r12d,DWORD PTR [rdi+r12*4+0x8]
    7fda:	83 fd 02             	cmp    ebp,0x2
    7fdd:	7e 07                	jle    7fe6 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x516>
    7fdf:	44 03 a7 d4 1d 03 00 	add    r12d,DWORD PTR [rdi+0x31dd4]
    7fe6:	48 8b 6c 24 f0       	mov    rbp,QWORD PTR [rsp-0x10]
    7feb:	44 03 a4 af 9c 1d 03 00 	add    r12d,DWORD PTR [rdi+rbp*4+0x31d9c]
    7ff3:	44 01 e0             	add    eax,r12d
    7ff6:	e9 fd fb ff ff       	jmp    7bf8 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x128>
    7ffb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    8000:	4c 63 ed             	movsxd r13,ebp
    8003:	45 31 e4             	xor    r12d,r12d
    8006:	4c 89 6c 24 f0       	mov    QWORD PTR [rsp-0x10],r13
    800b:	eb cd                	jmp    7fda <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x50a>
    800d:	49 63 eb             	movsxd rbp,r11d
    8010:	45 31 c9             	xor    r9d,r9d
    8013:	48 89 6c 24 b8       	mov    QWORD PTR [rsp-0x48],rbp
    8018:	e9 18 ff ff ff       	jmp    7f35 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x465>
    801d:	31 ff                	xor    edi,edi
    801f:	49 63 f1             	movsxd rsi,r9d
    8022:	e9 0f fe ff ff       	jmp    7e36 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x366>
    8027:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    802c:	c6 00 02             	mov    BYTE PTR [rax],0x2
    802f:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    8034:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    8037:	89 f8                	mov    eax,edi
    8039:	e9 40 fc ff ff       	jmp    7c7e <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x1ae>
    803e:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    8043:	c6 00 01             	mov    BYTE PTR [rax],0x1
    8046:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    804b:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    804e:	44 89 c8             	mov    eax,r9d
    8051:	41 8b 34 92          	mov    esi,DWORD PTR [r10+rdx*4]
    8055:	e9 07 fc ff ff       	jmp    7c61 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x191>
    805a:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    805f:	c6 00 03             	mov    BYTE PTR [rax],0x3
    8062:	89 c8                	mov    eax,ecx
    8064:	e9 f6 fa ff ff       	jmp    7b5f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x8f>
    8069:	85 db                	test   ebx,ebx
    806b:	78 18                	js     8085 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x5b5>
    806d:	49 63 f0             	movsxd rsi,r8d
    8070:	48 8d 14 b6          	lea    rdx,[rsi+rsi*4]
    8074:	48 8d 94 13 4c 05 00 00 	lea    rdx,[rbx+rdx*1+0x54c]
    807c:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    8080:	e9 ca fc ff ff       	jmp    7d4f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x27f>
    8085:	45 85 db             	test   r11d,r11d
    8088:	78 18                	js     80a2 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x5d2>
    808a:	49 63 f0             	movsxd rsi,r8d
    808d:	48 8d 14 b6          	lea    rdx,[rsi+rsi*4]
    8091:	49 8d 94 13 74 05 00 00 	lea    rdx,[r11+rdx*1+0x574]
    8099:	8b 54 91 08          	mov    edx,DWORD PTR [rcx+rdx*4+0x8]
    809d:	e9 ad fc ff ff       	jmp    7d4f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x27f>
    80a2:	31 d2                	xor    edx,edx
    80a4:	49 63 f0             	movsxd rsi,r8d
    80a7:	e9 a3 fc ff ff       	jmp    7d4f <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x27f>
    80ac:	45 85 e4             	test   r12d,r12d
    80af:	0f 89 cd fd ff ff    	jns    7e82 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x3b2>
    80b5:	45 85 ed             	test   r13d,r13d
    80b8:	0f 88 42 ff ff ff    	js     8000 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x530>
    80be:	4d 63 e5             	movsxd r12,r13d
    80c1:	4d 89 e5             	mov    r13,r12
    80c4:	4c 63 e5             	movsxd r12,ebp
    80c7:	4c 89 64 24 f0       	mov    QWORD PTR [rsp-0x10],r12
    80cc:	4f 8d 24 a4          	lea    r12,[r12+r12*4]
    80d0:	4f 8d a4 25 74 05 00 00 	lea    r12,[r13+r12*1+0x574]
    80d8:	46 8b 64 a7 08       	mov    r12d,DWORD PTR [rdi+r12*4+0x8]
    80dd:	e9 f8 fe ff ff       	jmp    7fda <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)+0x50a>
    80e2:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    80ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000080f0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>:
    80f0:	f3 0f 1e fa          	endbr64 
    80f4:	48 b9 ff ff ff ff ff ff ff 1f 	movabs rcx,0x1fffffffffffffff
    80fe:	41 57                	push   r15
    8100:	41 56                	push   r14
    8102:	41 55                	push   r13
    8104:	41 54                	push   r12
    8106:	55                   	push   rbp
    8107:	53                   	push   rbx
    8108:	48 83 ec 18          	sub    rsp,0x18
    810c:	4c 8b 67 08          	mov    r12,QWORD PTR [rdi+0x8]
    8110:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
    8113:	4c 89 e0             	mov    rax,r12
    8116:	4c 29 c0             	sub    rax,r8
    8119:	48 c1 f8 02          	sar    rax,0x2
    811d:	48 39 c8             	cmp    rax,rcx
    8120:	0f 84 05 01 00 00    	je     822b <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x13b>
    8126:	49 89 d7             	mov    r15,rdx
    8129:	48 89 f2             	mov    rdx,rsi
    812c:	48 89 fd             	mov    rbp,rdi
    812f:	49 89 f5             	mov    r13,rsi
    8132:	4c 29 c2             	sub    rdx,r8
    8135:	48 85 c0             	test   rax,rax
    8138:	0f 84 e2 00 00 00    	je     8220 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x130>
    813e:	49 be fc ff ff ff ff ff ff 7f 	movabs r14,0x7ffffffffffffffc
    8148:	48 8d 34 00          	lea    rsi,[rax+rax*1]
    814c:	48 39 f0             	cmp    rax,rsi
    814f:	0f 86 93 00 00 00    	jbe    81e8 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xf8>
    8155:	4c 89 f7             	mov    rdi,r14
    8158:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    815d:	4c 89 04 24          	mov    QWORD PTR [rsp],r8
    8161:	e8 4a b7 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    8166:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
    816a:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    816f:	48 89 c3             	mov    rbx,rax
    8172:	49 01 c6             	add    r14,rax
    8175:	41 8b 07             	mov    eax,DWORD PTR [r15]
    8178:	4d 29 ec             	sub    r12,r13
    817b:	4c 8d 7c 13 04       	lea    r15,[rbx+rdx*1+0x4]
    8180:	89 04 13             	mov    DWORD PTR [rbx+rdx*1],eax
    8183:	4b 8d 04 27          	lea    rax,[r15+r12*1]
    8187:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    818b:	48 85 d2             	test   rdx,rdx
    818e:	7f 30                	jg     81c0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xd0>
    8190:	4d 85 e4             	test   r12,r12
    8193:	7f 63                	jg     81f8 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x108>
    8195:	4d 85 c0             	test   r8,r8
    8198:	75 40                	jne    81da <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xea>
    819a:	66 48 0f 6e c3       	movq   xmm0,rbx
    819f:	4c 89 75 10          	mov    QWORD PTR [rbp+0x10],r14
    81a3:	0f 16 04 24          	movhps xmm0,QWORD PTR [rsp]
    81a7:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    81ab:	48 83 c4 18          	add    rsp,0x18
    81af:	5b                   	pop    rbx
    81b0:	5d                   	pop    rbp
    81b1:	41 5c                	pop    r12
    81b3:	41 5d                	pop    r13
    81b5:	41 5e                	pop    r14
    81b7:	41 5f                	pop    r15
    81b9:	c3                   	ret    
    81ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    81c0:	4c 89 c6             	mov    rsi,r8
    81c3:	48 89 df             	mov    rdi,rbx
    81c6:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
    81cb:	e8 b0 b8 ff ff       	call   3a80 <memmove@plt>
    81d0:	4d 85 e4             	test   r12,r12
    81d3:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
    81d8:	7f 1e                	jg     81f8 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x108>
    81da:	4c 89 c7             	mov    rdi,r8
    81dd:	e8 8e b6 ff ff       	call   3870 <operator delete(void*)@plt>
    81e2:	eb b6                	jmp    819a <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xaa>
    81e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    81e8:	48 85 f6             	test   rsi,rsi
    81eb:	75 4a                	jne    8237 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x147>
    81ed:	45 31 f6             	xor    r14d,r14d
    81f0:	31 db                	xor    ebx,ebx
    81f2:	eb 81                	jmp    8175 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x85>
    81f4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    81f8:	4c 89 e2             	mov    rdx,r12
    81fb:	4c 89 ee             	mov    rsi,r13
    81fe:	4c 89 ff             	mov    rdi,r15
    8201:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
    8206:	e8 25 b6 ff ff       	call   3830 <memcpy@plt>
    820b:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
    8210:	4d 85 c0             	test   r8,r8
    8213:	74 85                	je     819a <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xaa>
    8215:	eb c3                	jmp    81da <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xea>
    8217:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8220:	41 be 04 00 00 00    	mov    r14d,0x4
    8226:	e9 2a ff ff ff       	jmp    8155 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x65>
    822b:	48 8d 3d b6 b4 02 00 	lea    rdi,[rip+0x2b4b6]        # 336e8 <_IO_stdin_used+0x6e8>
    8232:	e8 49 b5 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    8237:	48 39 ce             	cmp    rsi,rcx
    823a:	48 0f 46 ce          	cmovbe rcx,rsi
    823e:	49 89 ce             	mov    r14,rcx
    8241:	49 c1 e6 02          	shl    r14,0x2
    8245:	e9 0b ff ff ff       	jmp    8155 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x65>
    824a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000008250 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)>:
    8250:	f3 0f 1e fa          	endbr64 
    8254:	41 57                	push   r15
    8256:	66 0f ef c0          	pxor   xmm0,xmm0
    825a:	41 56                	push   r14
    825c:	49 89 fe             	mov    r14,rdi
    825f:	41 55                	push   r13
    8261:	49 89 cd             	mov    r13,rcx
    8264:	41 54                	push   r12
    8266:	49 89 d4             	mov    r12,rdx
    8269:	55                   	push   rbp
    826a:	48 89 f5             	mov    rbp,rsi
    826d:	31 f6                	xor    esi,esi
    826f:	53                   	push   rbx
    8270:	48 83 ec 48          	sub    rsp,0x48
    8274:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    827d:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    8282:	31 c0                	xor    eax,eax
    8284:	48 8b 47 08          	mov    rax,QWORD PTR [rdi+0x8]
    8288:	48 8d 54 24 1c       	lea    rdx,[rsp+0x1c]
    828d:	0f 29 44 24 20       	movaps XMMWORD PTR [rsp+0x20],xmm0
    8292:	48 c7 44 24 30 00 00 00 00 	mov    QWORD PTR [rsp+0x30],0x0
    829b:	89 44 24 1c          	mov    DWORD PTR [rsp+0x1c],eax
    829f:	48 8d 44 24 20       	lea    rax,[rsp+0x20]
    82a4:	48 89 c7             	mov    rdi,rax
    82a7:	48 89 04 24          	mov    QWORD PTR [rsp],rax
    82ab:	e8 40 fe ff ff       	call   80f0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>
    82b0:	8b 44 24 1c          	mov    eax,DWORD PTR [rsp+0x1c]
    82b4:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
    82b9:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
    82bd:	85 c0                	test   eax,eax
    82bf:	0f 8e 93 01 00 00    	jle    8458 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x208>
    82c5:	48 8d 4c 24 18       	lea    rcx,[rsp+0x18]
    82ca:	4d 8b 0e             	mov    r9,QWORD PTR [r14]
    82cd:	31 db                	xor    ebx,ebx
    82cf:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    82d4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    82d8:	8d 50 ff             	lea    edx,[rax-0x1]
    82db:	48 63 d2             	movsxd rdx,edx
    82de:	4c 01 ca             	add    rdx,r9
    82e1:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    82e4:	89 cf                	mov    edi,ecx
    82e6:	83 e7 df             	and    edi,0xffffffdf
    82e9:	40 80 ff 58          	cmp    dil,0x58
    82ed:	0f 85 f5 00 00 00    	jne    83e8 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x198>
    82f3:	48 63 c8             	movsxd rcx,eax
    82f6:	c7 44 8d 00 ff ff ff ff 	mov    DWORD PTR [rbp+rcx*4+0x0],0xffffffff
    82fe:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    8301:	89 cf                	mov    edi,ecx
    8303:	83 e7 df             	and    edi,0xffffffdf
    8306:	40 80 ff 5d          	cmp    dil,0x5d
    830a:	40 0f 94 c7          	sete   dil
    830e:	80 f9 29             	cmp    cl,0x29
    8311:	0f 94 c2             	sete   dl
    8314:	40 08 d7             	or     dil,dl
    8317:	75 09                	jne    8322 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0xd2>
    8319:	80 f9 3e             	cmp    cl,0x3e
    831c:	0f 85 ee 00 00 00    	jne    8410 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x1c0>
    8322:	48 39 74 24 30       	cmp    QWORD PTR [rsp+0x30],rsi
    8327:	0f 84 0b 01 00 00    	je     8438 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x1e8>
    832d:	89 06                	mov    DWORD PTR [rsi],eax
    832f:	48 83 c6 04          	add    rsi,0x4
    8333:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
    8338:	8b 7c 24 18          	mov    edi,DWORD PTR [rsp+0x18]
    833c:	83 c3 01             	add    ebx,0x1
    833f:	8b 46 fc             	mov    eax,DWORD PTR [rsi-0x4]
    8342:	48 63 cf             	movsxd rcx,edi
    8345:	4c 8d 46 fc          	lea    r8,[rsi-0x4]
    8349:	4c 8b 7c 24 20       	mov    r15,QWORD PTR [rsp+0x20]
    834e:	41 89 04 8c          	mov    DWORD PTR [r12+rcx*4],eax
    8352:	8d 47 ff             	lea    eax,[rdi-0x1]
    8355:	48 63 d0             	movsxd rdx,eax
    8358:	41 89 5c 8d 00       	mov    DWORD PTR [r13+rcx*4+0x0],ebx
    835d:	41 0f b6 14 11       	movzx  edx,BYTE PTR [r9+rdx*1]
    8362:	80 fa 3c             	cmp    dl,0x3c
    8365:	41 0f 94 c3          	sete   r11b
    8369:	80 fa 28             	cmp    dl,0x28
    836c:	41 0f 94 c2          	sete   r10b
    8370:	45 08 d3             	or     r11b,r10b
    8373:	75 0c                	jne    8381 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x131>
    8375:	83 e2 df             	and    edx,0xffffffdf
    8378:	80 fa 5b             	cmp    dl,0x5b
    837b:	0f 85 9f 00 00 00    	jne    8420 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x1d0>
    8381:	49 63 10             	movsxd rdx,DWORD PTR [r8]
    8384:	48 83 ee 04          	sub    rsi,0x4
    8388:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
    838c:	83 eb 01             	sub    ebx,0x1
    838f:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
    8394:	89 54 8d 00          	mov    DWORD PTR [rbp+rcx*4+0x0],edx
    8398:	89 7c 95 00          	mov    DWORD PTR [rbp+rdx*4+0x0],edi
    839c:	85 c0                	test   eax,eax
    839e:	0f 8f 34 ff ff ff    	jg     82d8 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x88>
    83a4:	48 83 ee 04          	sub    rsi,0x4
    83a8:	48 89 74 24 28       	mov    QWORD PTR [rsp+0x28],rsi
    83ad:	4c 39 fe             	cmp    rsi,r15
    83b0:	0f 85 ac 00 00 00    	jne    8462 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x212>
    83b6:	4c 89 ff             	mov    rdi,r15
    83b9:	e8 b2 b4 ff ff       	call   3870 <operator delete(void*)@plt>
    83be:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    83c3:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    83cc:	0f 85 b7 00 00 00    	jne    8489 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x239>
    83d2:	48 83 c4 48          	add    rsp,0x48
    83d6:	5b                   	pop    rbx
    83d7:	5d                   	pop    rbp
    83d8:	41 5c                	pop    r12
    83da:	41 5d                	pop    r13
    83dc:	41 5e                	pop    r14
    83de:	41 5f                	pop    r15
    83e0:	c3                   	ret    
    83e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    83e8:	80 f9 2e             	cmp    cl,0x2e
    83eb:	0f 85 15 ff ff ff    	jne    8306 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0xb6>
    83f1:	48 63 c8             	movsxd rcx,eax
    83f4:	c7 44 8d 00 fe ff ff ff 	mov    DWORD PTR [rbp+rcx*4+0x0],0xfffffffe
    83fc:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
    83ff:	89 cf                	mov    edi,ecx
    8401:	83 e7 df             	and    edi,0xffffffdf
    8404:	e9 fd fe ff ff       	jmp    8306 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0xb6>
    8409:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    8410:	89 c7                	mov    edi,eax
    8412:	e9 28 ff ff ff       	jmp    833f <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0xef>
    8417:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8420:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
    8424:	85 c0                	test   eax,eax
    8426:	0f 8f ac fe ff ff    	jg     82d8 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x88>
    842c:	e9 73 ff ff ff       	jmp    83a4 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x154>
    8431:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    8438:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    843d:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
    8441:	e8 aa fc ff ff       	call   80f0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>
    8446:	48 8b 74 24 28       	mov    rsi,QWORD PTR [rsp+0x28]
    844b:	4d 8b 0e             	mov    r9,QWORD PTR [r14]
    844e:	e9 e5 fe ff ff       	jmp    8338 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0xe8>
    8453:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    8458:	4c 8b 7c 24 20       	mov    r15,QWORD PTR [rsp+0x20]
    845d:	e9 42 ff ff ff       	jmp    83a4 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x154>
    8462:	48 8b 0d b7 9c 24 00 	mov    rcx,QWORD PTR [rip+0x249cb7]        # 252120 <stderr@@GLIBC_2.2.5>
    8469:	ba 51 00 00 00       	mov    edx,0x51
    846e:	be 01 00 00 00       	mov    esi,0x1
    8473:	48 8d 3d 8e b2 02 00 	lea    rdi,[rip+0x2b28e]        # 33708 <_IO_stdin_used+0x708>
    847a:	e8 11 b7 ff ff       	call   3b90 <fwrite@plt>
    847f:	bf 01 00 00 00       	mov    edi,0x1
    8484:	e8 c7 b4 ff ff       	call   3950 <exit@plt>
    8489:	e8 62 b4 ff ff       	call   38f0 <__stack_chk_fail@plt>
    848e:	f3 0f 1e fa          	endbr64 
    8492:	48 89 c5             	mov    rbp,rax
    8495:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    849a:	48 85 ff             	test   rdi,rdi
    849d:	74 05                	je     84a4 <void detect_restricted_pairs<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*, int*, int*)+0x254>
    849f:	e8 cc b3 ff ff       	call   3870 <operator delete(void*)@plt>
    84a4:	48 89 ef             	mov    rdi,rbp
    84a7:	e8 64 b6 ff ff       	call   3b10 <_Unwind_Resume@plt>
    84ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000084b0 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)>:
    84b0:	f3 0f 1e fa          	endbr64 
    84b4:	41 57                	push   r15
    84b6:	41 56                	push   r14
    84b8:	41 55                	push   r13
    84ba:	41 54                	push   r12
    84bc:	55                   	push   rbp
    84bd:	53                   	push   rbx
    84be:	48 83 ec 28          	sub    rsp,0x28
    84c2:	8b 5c 24 60          	mov    ebx,DWORD PTR [rsp+0x60]
    84c6:	44 8b 7c 24 68       	mov    r15d,DWORD PTR [rsp+0x68]
    84cb:	48 89 7c 24 10       	mov    QWORD PTR [rsp+0x10],rdi
    84d0:	48 8b 6c 24 70       	mov    rbp,QWORD PTR [rsp+0x70]
    84d5:	4c 8b 6c 24 78       	mov    r13,QWORD PTR [rsp+0x78]
    84da:	85 db                	test   ebx,ebx
    84dc:	0f 8e bb 02 00 00    	jle    879d <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x2ed>
    84e2:	45 39 39             	cmp    DWORD PTR [r9],r15d
    84e5:	0f 8c 93 02 00 00    	jl     877e <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x2ce>
    84eb:	49 89 d6             	mov    r14,rdx
    84ee:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
    84f2:	48 2b 16             	sub    rdx,QWORD PTR [rsi]
    84f5:	66 0f ef c0          	pxor   xmm0,xmm0
    84f9:	48 89 d0             	mov    rax,rdx
    84fc:	48 c7 47 10 00 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
    8504:	4d 89 c4             	mov    r12,r8
    8507:	48 c1 f8 02          	sar    rax,0x2
    850b:	0f 11 07             	movups XMMWORD PTR [rdi],xmm0
    850e:	0f 84 5d 02 00 00    	je     8771 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x2c1>
    8514:	48 b9 ff ff ff ff ff ff ff 1f 	movabs rcx,0x1fffffffffffffff
    851e:	48 39 c8             	cmp    rax,rcx
    8521:	0f 87 52 02 00 00    	ja     8779 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x2c9>
    8527:	48 89 d7             	mov    rdi,rdx
    852a:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
    852f:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    8534:	e8 77 b3 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    8539:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
    853e:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    8543:	49 89 c0             	mov    r8,rax
    8546:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    854b:	66 49 0f 6e c0       	movq   xmm0,r8
    8550:	4c 01 c2             	add    rdx,r8
    8553:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    8557:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    855b:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    855e:	48 8b 46 08          	mov    rax,QWORD PTR [rsi+0x8]
    8562:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
    8565:	48 89 c2             	mov    rdx,rax
    8568:	48 29 f2             	sub    rdx,rsi
    856b:	48 39 f0             	cmp    rax,rsi
    856e:	74 15                	je     8585 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0xd5>
    8570:	4c 89 c7             	mov    rdi,r8
    8573:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    8578:	e8 03 b5 ff ff       	call   3a80 <memmove@plt>
    857d:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
    8582:	49 89 c0             	mov    r8,rax
    8585:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    858a:	4c 01 c2             	add    rdx,r8
    858d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    8591:	8d 43 03             	lea    eax,[rbx+0x3]
    8594:	8d 53 ff             	lea    edx,[rbx-0x1]
    8597:	44 39 f8             	cmp    eax,r15d
    859a:	48 63 d2             	movsxd rdx,edx
    859d:	41 0f 4f c7          	cmovg  eax,r15d
    85a1:	48 63 c8             	movsxd rcx,eax
    85a4:	48 39 ca             	cmp    rdx,rcx
    85a7:	0f 87 81 00 00 00    	ja     862e <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x17e>
    85ad:	48 89 cf             	mov    rdi,rcx
    85b0:	48 29 d7             	sub    rdi,rdx
    85b3:	48 83 f9 ff          	cmp    rcx,0xffffffffffffffff
    85b7:	0f 84 73 01 00 00    	je     8730 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x280>
    85bd:	48 83 ff 06          	cmp    rdi,0x6
    85c1:	0f 86 69 01 00 00    	jbe    8730 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x280>
    85c7:	48 83 c7 01          	add    rdi,0x1
    85cb:	66 0f 6f 05 1d c3 02 00 	movdqa xmm0,XMMWORD PTR [rip+0x2c31d]        # 348f0 <Law_and_Order+0x50>
    85d3:	4d 8d 0c 90          	lea    r9,[r8+rdx*4]
    85d7:	31 c0                	xor    eax,eax
    85d9:	49 89 fa             	mov    r10,rdi
    85dc:	49 c1 ea 02          	shr    r10,0x2
    85e0:	48 89 c6             	mov    rsi,rax
    85e3:	48 83 c0 01          	add    rax,0x1
    85e7:	48 c1 e6 04          	shl    rsi,0x4
    85eb:	41 0f 11 04 31       	movups XMMWORD PTR [r9+rsi*1],xmm0
    85f0:	49 39 c2             	cmp    r10,rax
    85f3:	77 eb                	ja     85e0 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x130>
    85f5:	48 89 f8             	mov    rax,rdi
    85f8:	48 83 e0 fc          	and    rax,0xfffffffffffffffc
    85fc:	48 01 c2             	add    rdx,rax
    85ff:	48 39 f8             	cmp    rax,rdi
    8602:	74 2a                	je     862e <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x17e>
    8604:	48 8d 42 01          	lea    rax,[rdx+0x1]
    8608:	41 c7 04 90 80 96 98 00 	mov    DWORD PTR [r8+rdx*4],0x989680
    8610:	48 39 c8             	cmp    rax,rcx
    8613:	77 19                	ja     862e <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x17e>
    8615:	48 83 c2 02          	add    rdx,0x2
    8619:	41 c7 04 80 80 96 98 00 	mov    DWORD PTR [r8+rax*4],0x989680
    8621:	48 39 d1             	cmp    rcx,rdx
    8624:	72 08                	jb     862e <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x17e>
    8626:	41 c7 04 90 80 96 98 00 	mov    DWORD PTR [r8+rdx*4],0x989680
    862e:	44 8d 5b 04          	lea    r11d,[rbx+0x4]
    8632:	49 63 c7             	movsxd rax,r15d
    8635:	4d 63 db             	movsxd r11,r11d
    8638:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    863d:	4c 39 d8             	cmp    rax,r11
    8640:	0f 82 cd 00 00 00    	jb     8713 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x263>
    8646:	49 8b 16             	mov    rdx,QWORD PTR [r14]
    8649:	4b 8d 04 5b          	lea    rax,[r11+r11*2]
    864d:	4c 8d 3c c2          	lea    r15,[rdx+rax*8]
    8651:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    8658:	49 8b 37             	mov    rsi,QWORD PTR [r15]
    865b:	4d 8b 4f 08          	mov    r9,QWORD PTR [r15+0x8]
    865f:	b8 80 96 98 00       	mov    eax,0x989680
    8664:	31 ff                	xor    edi,edi
    8666:	4c 39 ce             	cmp    rsi,r9
    8669:	74 6f                	je     86da <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x22a>
    866b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    8670:	8b 16                	mov    edx,DWORD PTR [rsi]
    8672:	39 da                	cmp    edx,ebx
    8674:	7c 64                	jl     86da <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x22a>
    8676:	4c 63 f2             	movsxd r14,edx
    8679:	40 0f b6 ff          	movzx  edi,dil
    867d:	41 89 d2             	mov    r10d,edx
    8680:	4a 63 4c b5 00       	movsxd rcx,DWORD PTR [rbp+r14*4+0x0]
    8685:	4c 39 d9             	cmp    rcx,r11
    8688:	0f 94 c1             	sete   cl
    868b:	0f b6 c9             	movzx  ecx,cl
    868e:	01 f9                	add    ecx,edi
    8690:	8b 4e 08             	mov    ecx,DWORD PTR [rsi+0x8]
    8693:	40 0f 95 c7          	setne  dil
    8697:	41 29 da             	sub    r10d,ebx
    869a:	c1 f9 02             	sar    ecx,0x2
    869d:	47 39 54 b5 fc       	cmp    DWORD PTR [r13+r14*4-0x4],r10d
    86a2:	0f 8c a8 00 00 00    	jl     8750 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x2a0>
    86a8:	83 ea 01             	sub    edx,0x1
    86ab:	48 63 d2             	movsxd rdx,edx
    86ae:	45 8b 34 90          	mov    r14d,DWORD PTR [r8+rdx*4]
    86b2:	41 01 ce             	add    r14d,ecx
    86b5:	44 89 f2             	mov    edx,r14d
    86b8:	4d 8b 34 24          	mov    r14,QWORD PTR [r12]
    86bc:	45 0f af 96 98 1d 03 00 	imul   r10d,DWORD PTR [r14+0x31d98]
    86c4:	44 01 d1             	add    ecx,r10d
    86c7:	39 c1                	cmp    ecx,eax
    86c9:	0f 4e c1             	cmovle eax,ecx
    86cc:	39 c2                	cmp    edx,eax
    86ce:	0f 4e c2             	cmovle eax,edx
    86d1:	48 83 c6 10          	add    rsi,0x10
    86d5:	49 39 f1             	cmp    r9,rsi
    86d8:	75 96                	jne    8670 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x1c0>
    86da:	42 8b 54 9d 00       	mov    edx,DWORD PTR [rbp+r11*4+0x0]
    86df:	85 d2                	test   edx,edx
    86e1:	79 19                	jns    86fc <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x24c>
    86e3:	40 84 ff             	test   dil,dil
    86e6:	75 14                	jne    86fc <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x24c>
    86e8:	49 8b 0c 24          	mov    rcx,QWORD PTR [r12]
    86ec:	43 8b 54 98 fc       	mov    edx,DWORD PTR [r8+r11*4-0x4]
    86f1:	03 91 98 1d 03 00    	add    edx,DWORD PTR [rcx+0x31d98]
    86f7:	39 c2                	cmp    edx,eax
    86f9:	0f 4e c2             	cmovle eax,edx
    86fc:	43 89 04 98          	mov    DWORD PTR [r8+r11*4],eax
    8700:	49 83 c7 18          	add    r15,0x18
    8704:	49 83 c3 01          	add    r11,0x1
    8708:	4c 39 5c 24 08       	cmp    QWORD PTR [rsp+0x8],r11
    870d:	0f 83 45 ff ff ff    	jae    8658 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x1a8>
    8713:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    8718:	48 83 c4 28          	add    rsp,0x28
    871c:	5b                   	pop    rbx
    871d:	5d                   	pop    rbp
    871e:	41 5c                	pop    r12
    8720:	41 5d                	pop    r13
    8722:	41 5e                	pop    r14
    8724:	41 5f                	pop    r15
    8726:	c3                   	ret    
    8727:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8730:	41 c7 04 90 80 96 98 00 	mov    DWORD PTR [r8+rdx*4],0x989680
    8738:	48 83 c2 01          	add    rdx,0x1
    873c:	48 39 ca             	cmp    rdx,rcx
    873f:	76 ef                	jbe    8730 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x280>
    8741:	e9 e8 fe ff ff       	jmp    862e <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x17e>
    8746:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    8750:	83 ea 01             	sub    edx,0x1
    8753:	48 63 d2             	movsxd rdx,edx
    8756:	41 03 0c 90          	add    ecx,DWORD PTR [r8+rdx*4]
    875a:	39 c8                	cmp    eax,ecx
    875c:	0f 4f c1             	cmovg  eax,ecx
    875f:	48 83 c6 10          	add    rsi,0x10
    8763:	49 39 f1             	cmp    r9,rsi
    8766:	0f 85 04 ff ff ff    	jne    8670 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x1c0>
    876c:	e9 69 ff ff ff       	jmp    86da <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x22a>
    8771:	45 31 c0             	xor    r8d,r8d
    8774:	e9 cd fd ff ff       	jmp    8546 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)+0x96>
    8779:	e8 52 af ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    877e:	48 8d 0d db af 02 00 	lea    rcx,[rip+0x2afdb]        # 33760 <_IO_stdin_used+0x760>
    8785:	ba 10 02 00 00       	mov    edx,0x210
    878a:	48 8d 35 27 b1 02 00 	lea    rsi,[rip+0x2b127]        # 338b8 <_IO_stdin_used+0x8b8>
    8791:	48 8d 3d 55 b1 02 00 	lea    rdi,[rip+0x2b155]        # 338ed <_IO_stdin_used+0x8ed>
    8798:	e8 33 b0 ff ff       	call   37d0 <__assert_fail@plt>
    879d:	48 8d 0d bc af 02 00 	lea    rcx,[rip+0x2afbc]        # 33760 <_IO_stdin_used+0x760>
    87a4:	ba 0f 02 00 00       	mov    edx,0x20f
    87a9:	48 8d 35 08 b1 02 00 	lea    rsi,[rip+0x2b108]        # 338b8 <_IO_stdin_used+0x8b8>
    87b0:	48 8d 3d 31 b1 02 00 	lea    rdi,[rip+0x2b131]        # 338e8 <_IO_stdin_used+0x8e8>
    87b7:	e8 14 b0 ff ff       	call   37d0 <__assert_fail@plt>
    87bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000087c0 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)>:
    87c0:	f3 0f 1e fa          	endbr64 
    87c4:	41 57                	push   r15
    87c6:	41 56                	push   r14
    87c8:	41 55                	push   r13
    87ca:	41 54                	push   r12
    87cc:	55                   	push   rbp
    87cd:	53                   	push   rbx
    87ce:	48 83 ec 28          	sub    rsp,0x28
    87d2:	44 8b 6c 24 68       	mov    r13d,DWORD PTR [rsp+0x68]
    87d7:	44 8b 64 24 70       	mov    r12d,DWORD PTR [rsp+0x70]
    87dc:	48 89 7c 24 08       	mov    QWORD PTR [rsp+0x8],rdi
    87e1:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    87e6:	48 8b 6c 24 78       	mov    rbp,QWORD PTR [rsp+0x78]
    87eb:	45 85 ed             	test   r13d,r13d
    87ee:	0f 8e 34 02 00 00    	jle    8a28 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x268>
    87f4:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    87f9:	44 39 20             	cmp    DWORD PTR [rax],r12d
    87fc:	0f 8c 07 02 00 00    	jl     8a09 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x249>
    8802:	4c 8b 7a 08          	mov    r15,QWORD PTR [rdx+0x8]
    8806:	4c 2b 3a             	sub    r15,QWORD PTR [rdx]
    8809:	66 0f ef c0          	pxor   xmm0,xmm0
    880d:	48 89 f3             	mov    rbx,rsi
    8810:	4c 89 f8             	mov    rax,r15
    8813:	48 c7 47 10 00 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
    881b:	49 89 ce             	mov    r14,rcx
    881e:	48 c1 f8 02          	sar    rax,0x2
    8822:	0f 11 07             	movups XMMWORD PTR [rdi],xmm0
    8825:	0f 84 d6 01 00 00    	je     8a01 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x241>
    882b:	48 b9 ff ff ff ff ff ff ff 1f 	movabs rcx,0x1fffffffffffffff
    8835:	48 39 c8             	cmp    rax,rcx
    8838:	0f 87 09 02 00 00    	ja     8a47 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x287>
    883e:	4c 89 ff             	mov    rdi,r15
    8841:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    8846:	e8 65 b0 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    884b:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    8850:	49 89 c3             	mov    r11,rax
    8853:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    8858:	66 49 0f 6e c3       	movq   xmm0,r11
    885d:	4d 01 df             	add    r15,r11
    8860:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    8864:	4c 89 78 10          	mov    QWORD PTR [rax+0x10],r15
    8868:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    886b:	48 8b 42 08          	mov    rax,QWORD PTR [rdx+0x8]
    886f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
    8872:	49 89 c7             	mov    r15,rax
    8875:	49 29 f7             	sub    r15,rsi
    8878:	48 39 f0             	cmp    rax,rsi
    887b:	74 0e                	je     888b <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0xcb>
    887d:	4c 89 df             	mov    rdi,r11
    8880:	4c 89 fa             	mov    rdx,r15
    8883:	e8 f8 b1 ff ff       	call   3a80 <memmove@plt>
    8888:	49 89 c3             	mov    r11,rax
    888b:	41 8d 75 08          	lea    esi,[r13+0x8]
    888f:	4d 01 df             	add    r15,r11
    8892:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    8897:	41 8d 4d ff          	lea    ecx,[r13-0x1]
    889b:	44 39 e6             	cmp    esi,r12d
    889e:	41 0f 4f f4          	cmovg  esi,r12d
    88a2:	4c 89 78 08          	mov    QWORD PTR [rax+0x8],r15
    88a6:	39 f1                	cmp    ecx,esi
    88a8:	7f 7b                	jg     8925 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x165>
    88aa:	89 f0                	mov    eax,esi
    88ac:	44 29 e8             	sub    eax,r13d
    88af:	8d 78 02             	lea    edi,[rax+0x2]
    88b2:	89 f0                	mov    eax,esi
    88b4:	44 29 e8             	sub    eax,r13d
    88b7:	83 c0 01             	add    eax,0x1
    88ba:	83 f8 02             	cmp    eax,0x2
    88bd:	76 38                	jbe    88f7 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x137>
    88bf:	89 fa                	mov    edx,edi
    88c1:	48 63 c1             	movsxd rax,ecx
    88c4:	66 0f 6f 05 24 c0 02 00 	movdqa xmm0,XMMWORD PTR [rip+0x2c024]        # 348f0 <Law_and_Order+0x50>
    88cc:	c1 ea 02             	shr    edx,0x2
    88cf:	49 8d 04 83          	lea    rax,[r11+rax*4]
    88d3:	48 c1 e2 04          	shl    rdx,0x4
    88d7:	48 01 c2             	add    rdx,rax
    88da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    88e0:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
    88e3:	48 83 c0 10          	add    rax,0x10
    88e7:	48 39 d0             	cmp    rax,rdx
    88ea:	75 f4                	jne    88e0 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x120>
    88ec:	89 f8                	mov    eax,edi
    88ee:	83 e0 fc             	and    eax,0xfffffffc
    88f1:	01 c1                	add    ecx,eax
    88f3:	39 f8                	cmp    eax,edi
    88f5:	74 2e                	je     8925 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x165>
    88f7:	48 63 c1             	movsxd rax,ecx
    88fa:	41 c7 04 83 80 96 98 00 	mov    DWORD PTR [r11+rax*4],0x989680
    8902:	8d 41 01             	lea    eax,[rcx+0x1]
    8905:	39 c6                	cmp    esi,eax
    8907:	7c 1c                	jl     8925 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x165>
    8909:	48 98                	cdqe   
    890b:	83 c1 02             	add    ecx,0x2
    890e:	41 c7 04 83 80 96 98 00 	mov    DWORD PTR [r11+rax*4],0x989680
    8916:	39 f1                	cmp    ecx,esi
    8918:	7f 0b                	jg     8925 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x165>
    891a:	48 63 c9             	movsxd rcx,ecx
    891d:	41 c7 04 8b 80 96 98 00 	mov    DWORD PTR [r11+rcx*4],0x989680
    8925:	45 8d 45 09          	lea    r8d,[r13+0x9]
    8929:	45 39 c4             	cmp    r12d,r8d
    892c:	0f 8c bb 00 00 00    	jl     89ed <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x22d>
    8932:	49 8b 06             	mov    rax,QWORD PTR [r14]
    8935:	4d 63 c0             	movsxd r8,r8d
    8938:	41 83 c5 04          	add    r13d,0x4
    893c:	4b 8d 14 40          	lea    rdx,[r8+r8*2]
    8940:	4c 8d 3c d0          	lea    r15,[rax+rdx*8]
    8944:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    8948:	49 8b 17             	mov    rdx,QWORD PTR [r15]
    894b:	49 8b 7f 08          	mov    rdi,QWORD PTR [r15+0x8]
    894f:	b9 80 96 98 00       	mov    ecx,0x989680
    8954:	31 f6                	xor    esi,esi
    8956:	46 8b 4c 85 00       	mov    r9d,DWORD PTR [rbp+r8*4+0x0]
    895b:	48 39 fa             	cmp    rdx,rdi
    895e:	75 49                	jne    89a9 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x1e9>
    8960:	eb 4e                	jmp    89b0 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x1f0>
    8962:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    8968:	4c 63 f0             	movsxd r14,eax
    896b:	4e 8d 14 b5 00 00 00 00 	lea    r10,[r14*4+0x0]
    8973:	46 39 44 b5 00       	cmp    DWORD PTR [rbp+r14*4+0x0],r8d
    8978:	75 13                	jne    898d <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x1cd>
    897a:	44 39 c8             	cmp    eax,r9d
    897d:	40 0f b6 f6          	movzx  esi,sil
    8981:	0f 94 c0             	sete   al
    8984:	0f b6 c0             	movzx  eax,al
    8987:	01 f0                	add    eax,esi
    8989:	40 0f 95 c6          	setne  sil
    898d:	8b 42 08             	mov    eax,DWORD PTR [rdx+0x8]
    8990:	4c 8b 33             	mov    r14,QWORD PTR [rbx]
    8993:	c1 f8 02             	sar    eax,0x2
    8996:	43 03 44 16 fc       	add    eax,DWORD PTR [r14+r10*1-0x4]
    899b:	39 c1                	cmp    ecx,eax
    899d:	0f 4f c8             	cmovg  ecx,eax
    89a0:	48 83 c2 10          	add    rdx,0x10
    89a4:	48 39 d7             	cmp    rdi,rdx
    89a7:	74 07                	je     89b0 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x1f0>
    89a9:	8b 02                	mov    eax,DWORD PTR [rdx]
    89ab:	44 39 e8             	cmp    eax,r13d
    89ae:	7f b8                	jg     8968 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x1a8>
    89b0:	45 85 c9             	test   r9d,r9d
    89b3:	79 23                	jns    89d8 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x218>
    89b5:	40 84 f6             	test   sil,sil
    89b8:	75 1e                	jne    89d8 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x218>
    89ba:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    89bf:	41 8d 50 ff          	lea    edx,[r8-0x1]
    89c3:	48 63 d2             	movsxd rdx,edx
    89c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    89c9:	8b 80 98 1d 03 00    	mov    eax,DWORD PTR [rax+0x31d98]
    89cf:	41 03 04 93          	add    eax,DWORD PTR [r11+rdx*4]
    89d3:	39 c8                	cmp    eax,ecx
    89d5:	0f 4e c8             	cmovle ecx,eax
    89d8:	43 89 0c 83          	mov    DWORD PTR [r11+r8*4],ecx
    89dc:	49 83 c0 01          	add    r8,0x1
    89e0:	49 83 c7 18          	add    r15,0x18
    89e4:	45 39 c4             	cmp    r12d,r8d
    89e7:	0f 8d 5b ff ff ff    	jge    8948 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x188>
    89ed:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    89f2:	48 83 c4 28          	add    rsp,0x28
    89f6:	5b                   	pop    rbx
    89f7:	5d                   	pop    rbp
    89f8:	41 5c                	pop    r12
    89fa:	41 5d                	pop    r13
    89fc:	41 5e                	pop    r14
    89fe:	41 5f                	pop    r15
    8a00:	c3                   	ret    
    8a01:	45 31 db             	xor    r11d,r11d
    8a04:	e9 4a fe ff ff       	jmp    8853 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)+0x93>
    8a09:	48 8d 0d e8 ae 02 00 	lea    rcx,[rip+0x2aee8]        # 338f8 <_IO_stdin_used+0x8f8>
    8a10:	ba 36 02 00 00       	mov    edx,0x236
    8a15:	48 8d 35 9c ae 02 00 	lea    rsi,[rip+0x2ae9c]        # 338b8 <_IO_stdin_used+0x8b8>
    8a1c:	48 8d 3d 54 b0 02 00 	lea    rdi,[rip+0x2b054]        # 33a77 <_IO_stdin_used+0xa77>
    8a23:	e8 a8 ad ff ff       	call   37d0 <__assert_fail@plt>
    8a28:	48 8d 0d c9 ae 02 00 	lea    rcx,[rip+0x2aec9]        # 338f8 <_IO_stdin_used+0x8f8>
    8a2f:	ba 35 02 00 00       	mov    edx,0x235
    8a34:	48 8d 35 7d ae 02 00 	lea    rsi,[rip+0x2ae7d]        # 338b8 <_IO_stdin_used+0x8b8>
    8a3b:	48 8d 3d a6 ae 02 00 	lea    rdi,[rip+0x2aea6]        # 338e8 <_IO_stdin_used+0x8e8>
    8a42:	e8 89 ad ff ff       	call   37d0 <__assert_fail@plt>
    8a47:	e8 84 ac ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    8a4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000008a50 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
    8a50:	f3 0f 1e fa          	endbr64 
    8a54:	41 54                	push   r12
    8a56:	49 89 d4             	mov    r12,rdx
    8a59:	55                   	push   rbp
    8a5a:	48 89 f5             	mov    rbp,rsi
    8a5d:	53                   	push   rbx
    8a5e:	48 89 fb             	mov    rbx,rdi
    8a61:	48 83 ec 10          	sub    rsp,0x10
    8a65:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    8a6e:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    8a73:	31 c0                	xor    eax,eax
    8a75:	48 85 d2             	test   rdx,rdx
    8a78:	74 09                	je     8a83 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x33>
    8a7a:	48 85 f6             	test   rsi,rsi
    8a7d:	0f 84 8c 00 00 00    	je     8b0f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xbf>
    8a83:	49 29 ec             	sub    r12,rbp
    8a86:	4c 89 24 24          	mov    QWORD PTR [rsp],r12
    8a8a:	49 83 fc 0f          	cmp    r12,0xf
    8a8e:	77 50                	ja     8ae0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x90>
    8a90:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    8a93:	49 83 fc 01          	cmp    r12,0x1
    8a97:	75 37                	jne    8ad0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x80>
    8a99:	0f b6 45 00          	movzx  eax,BYTE PTR [rbp+0x0]
    8a9d:	88 07                	mov    BYTE PTR [rdi],al
    8a9f:	4c 8b 24 24          	mov    r12,QWORD PTR [rsp]
    8aa3:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    8aa6:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
    8aaa:	42 c6 04 27 00       	mov    BYTE PTR [rdi+r12*1],0x0
    8aaf:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    8ab4:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    8abd:	75 5c                	jne    8b1b <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xcb>
    8abf:	48 83 c4 10          	add    rsp,0x10
    8ac3:	5b                   	pop    rbx
    8ac4:	5d                   	pop    rbp
    8ac5:	41 5c                	pop    r12
    8ac7:	c3                   	ret    
    8ac8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    8ad0:	4d 85 e4             	test   r12,r12
    8ad3:	74 d1                	je     8aa6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x56>
    8ad5:	eb 24                	jmp    8afb <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0xab>
    8ad7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8ae0:	48 89 df             	mov    rdi,rbx
    8ae3:	48 89 e6             	mov    rsi,rsp
    8ae6:	31 d2                	xor    edx,edx
    8ae8:	e8 53 b0 ff ff       	call   3b40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    8aed:	48 89 03             	mov    QWORD PTR [rbx],rax
    8af0:	48 89 c7             	mov    rdi,rax
    8af3:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    8af7:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
    8afb:	4c 89 e2             	mov    rdx,r12
    8afe:	48 89 ee             	mov    rsi,rbp
    8b01:	e8 2a ad ff ff       	call   3830 <memcpy@plt>
    8b06:	4c 8b 24 24          	mov    r12,QWORD PTR [rsp]
    8b0a:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    8b0d:	eb 97                	jmp    8aa6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x56>
    8b0f:	48 8d 3d 82 ab 02 00 	lea    rdi,[rip+0x2ab82]        # 33698 <_IO_stdin_used+0x698>
    8b16:	e8 f5 ac ff ff       	call   3810 <std::__throw_logic_error(char const*)@plt>
    8b1b:	e8 d0 ad ff ff       	call   38f0 <__stack_chk_fail@plt>

0000000000008b20 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)>:
    8b20:	f3 0f 1e fa          	endbr64 
    8b24:	41 57                	push   r15
    8b26:	41 56                	push   r14
    8b28:	41 55                	push   r13
    8b2a:	41 54                	push   r12
    8b2c:	49 89 fc             	mov    r12,rdi
    8b2f:	55                   	push   rbp
    8b30:	53                   	push   rbx
    8b31:	48 83 ec 08          	sub    rsp,0x8
    8b35:	48 39 fe             	cmp    rsi,rdi
    8b38:	74 64                	je     8b9e <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x7e>
    8b3a:	4c 8b 7e 08          	mov    r15,QWORD PTR [rsi+0x8]
    8b3e:	4c 8b 2e             	mov    r13,QWORD PTR [rsi]
    8b41:	48 89 f3             	mov    rbx,rsi
    8b44:	4c 8b 37             	mov    r14,QWORD PTR [rdi]
    8b47:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
    8b4b:	4c 89 fd             	mov    rbp,r15
    8b4e:	4c 29 ed             	sub    rbp,r13
    8b51:	4c 29 f0             	sub    rax,r14
    8b54:	48 89 e9             	mov    rcx,rbp
    8b57:	48 c1 f8 02          	sar    rax,0x2
    8b5b:	48 c1 f9 02          	sar    rcx,0x2
    8b5f:	48 39 c1             	cmp    rcx,rax
    8b62:	77 4c                	ja     8bb0 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x90>
    8b64:	48 8b 7f 08          	mov    rdi,QWORD PTR [rdi+0x8]
    8b68:	48 89 fe             	mov    rsi,rdi
    8b6b:	4c 29 f6             	sub    rsi,r14
    8b6e:	48 89 f0             	mov    rax,rsi
    8b71:	48 c1 f8 02          	sar    rax,0x2
    8b75:	48 39 c1             	cmp    rcx,rax
    8b78:	0f 87 92 00 00 00    	ja     8c10 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0xf0>
    8b7e:	4d 39 fd             	cmp    r13,r15
    8b81:	0f 84 bc 00 00 00    	je     8c43 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x123>
    8b87:	48 89 ea             	mov    rdx,rbp
    8b8a:	4c 89 ee             	mov    rsi,r13
    8b8d:	4c 89 f7             	mov    rdi,r14
    8b90:	e8 eb ae ff ff       	call   3a80 <memmove@plt>
    8b95:	49 03 2c 24          	add    rbp,QWORD PTR [r12]
    8b99:	49 89 6c 24 08       	mov    QWORD PTR [r12+0x8],rbp
    8b9e:	48 83 c4 08          	add    rsp,0x8
    8ba2:	4c 89 e0             	mov    rax,r12
    8ba5:	5b                   	pop    rbx
    8ba6:	5d                   	pop    rbp
    8ba7:	41 5c                	pop    r12
    8ba9:	41 5d                	pop    r13
    8bab:	41 5e                	pop    r14
    8bad:	41 5f                	pop    r15
    8baf:	c3                   	ret    
    8bb0:	31 db                	xor    ebx,ebx
    8bb2:	48 85 c9             	test   rcx,rcx
    8bb5:	74 22                	je     8bd9 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0xb9>
    8bb7:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
    8bc1:	48 39 c1             	cmp    rcx,rax
    8bc4:	0f 87 97 00 00 00    	ja     8c61 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x141>
    8bca:	48 89 ef             	mov    rdi,rbp
    8bcd:	e8 de ac ff ff       	call   38b0 <operator new(unsigned long)@plt>
    8bd2:	4d 8b 34 24          	mov    r14,QWORD PTR [r12]
    8bd6:	48 89 c3             	mov    rbx,rax
    8bd9:	4d 39 fd             	cmp    r13,r15
    8bdc:	74 0e                	je     8bec <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0xcc>
    8bde:	48 89 ea             	mov    rdx,rbp
    8be1:	4c 89 ee             	mov    rsi,r13
    8be4:	48 89 df             	mov    rdi,rbx
    8be7:	e8 44 ac ff ff       	call   3830 <memcpy@plt>
    8bec:	4d 85 f6             	test   r14,r14
    8bef:	74 08                	je     8bf9 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0xd9>
    8bf1:	4c 89 f7             	mov    rdi,r14
    8bf4:	e8 77 ac ff ff       	call   3870 <operator delete(void*)@plt>
    8bf9:	48 01 dd             	add    rbp,rbx
    8bfc:	49 89 1c 24          	mov    QWORD PTR [r12],rbx
    8c00:	49 89 6c 24 10       	mov    QWORD PTR [r12+0x10],rbp
    8c05:	eb 3f                	jmp    8c46 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x126>
    8c07:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8c10:	48 89 f2             	mov    rdx,rsi
    8c13:	48 85 f6             	test   rsi,rsi
    8c16:	74 21                	je     8c39 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x119>
    8c18:	4c 89 f7             	mov    rdi,r14
    8c1b:	4c 89 ee             	mov    rsi,r13
    8c1e:	e8 5d ae ff ff       	call   3a80 <memmove@plt>
    8c23:	49 8b 7c 24 08       	mov    rdi,QWORD PTR [r12+0x8]
    8c28:	4d 8b 34 24          	mov    r14,QWORD PTR [r12]
    8c2c:	4c 8b 7b 08          	mov    r15,QWORD PTR [rbx+0x8]
    8c30:	4c 8b 2b             	mov    r13,QWORD PTR [rbx]
    8c33:	48 89 fa             	mov    rdx,rdi
    8c36:	4c 29 f2             	sub    rdx,r14
    8c39:	49 8d 74 15 00       	lea    rsi,[r13+rdx*1+0x0]
    8c3e:	4c 39 fe             	cmp    rsi,r15
    8c41:	75 0d                	jne    8c50 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x130>
    8c43:	4c 01 f5             	add    rbp,r14
    8c46:	49 89 6c 24 08       	mov    QWORD PTR [r12+0x8],rbp
    8c4b:	e9 4e ff ff ff       	jmp    8b9e <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x7e>
    8c50:	4c 89 fa             	mov    rdx,r15
    8c53:	48 29 f2             	sub    rdx,rsi
    8c56:	e8 25 ae ff ff       	call   3a80 <memmove@plt>
    8c5b:	49 03 2c 24          	add    rbp,QWORD PTR [r12]
    8c5f:	eb e5                	jmp    8c46 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)+0x126>
    8c61:	e8 6a aa ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    8c66:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000008c70 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)>:
    8c70:	f3 0f 1e fa          	endbr64 
    8c74:	48 b9 ff ff ff ff ff ff ff 07 	movabs rcx,0x7ffffffffffffff
    8c7e:	41 57                	push   r15
    8c80:	41 56                	push   r14
    8c82:	41 55                	push   r13
    8c84:	41 54                	push   r12
    8c86:	55                   	push   rbp
    8c87:	48 89 f5             	mov    rbp,rsi
    8c8a:	53                   	push   rbx
    8c8b:	48 83 ec 28          	sub    rsp,0x28
    8c8f:	48 8b 77 08          	mov    rsi,QWORD PTR [rdi+0x8]
    8c93:	4c 8b 27             	mov    r12,QWORD PTR [rdi]
    8c96:	48 89 f0             	mov    rax,rsi
    8c99:	4c 29 e0             	sub    rax,r12
    8c9c:	48 c1 f8 04          	sar    rax,0x4
    8ca0:	48 39 c8             	cmp    rax,rcx
    8ca3:	0f 84 75 01 00 00    	je     8e1e <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x1ae>
    8ca9:	49 89 e8             	mov    r8,rbp
    8cac:	49 89 fe             	mov    r14,rdi
    8caf:	4d 29 e0             	sub    r8,r12
    8cb2:	48 85 c0             	test   rax,rax
    8cb5:	0f 84 45 01 00 00    	je     8e00 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x190>
    8cbb:	49 bf f0 ff ff ff ff ff ff 7f 	movabs r15,0x7ffffffffffffff0
    8cc5:	48 8d 3c 00          	lea    rdi,[rax+rax*1]
    8cc9:	48 39 f8             	cmp    rax,rdi
    8ccc:	0f 86 fe 00 00 00    	jbe    8dd0 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x160>
    8cd2:	4c 89 ff             	mov    rdi,r15
    8cd5:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    8cda:	4c 89 44 24 10       	mov    QWORD PTR [rsp+0x10],r8
    8cdf:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
    8ce4:	e8 c7 ab ff ff       	call   38b0 <operator new(unsigned long)@plt>
    8ce9:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    8cee:	4c 8b 44 24 10       	mov    r8,QWORD PTR [rsp+0x10]
    8cf3:	48 89 c3             	mov    rbx,rax
    8cf6:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    8cfb:	49 01 c7             	add    r15,rax
    8cfe:	4c 8d 68 10          	lea    r13,[rax+0x10]
    8d02:	f3 0f 6f 1a          	movdqu xmm3,XMMWORD PTR [rdx]
    8d06:	42 0f 11 1c 03       	movups XMMWORD PTR [rbx+r8*1],xmm3
    8d0b:	4c 39 e5             	cmp    rbp,r12
    8d0e:	0f 84 de 00 00 00    	je     8df2 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x182>
    8d14:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
    8d18:	31 d2                	xor    edx,edx
    8d1a:	31 c9                	xor    ecx,ecx
    8d1c:	4c 29 e7             	sub    rdi,r12
    8d1f:	48 89 f8             	mov    rax,rdi
    8d22:	48 c1 e8 04          	shr    rax,0x4
    8d26:	48 83 c0 01          	add    rax,0x1
    8d2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    8d30:	f3 41 0f 6f 0c 14    	movdqu xmm1,XMMWORD PTR [r12+rdx*1]
    8d36:	48 83 c1 01          	add    rcx,0x1
    8d3a:	0f 11 0c 13          	movups XMMWORD PTR [rbx+rdx*1],xmm1
    8d3e:	48 83 c2 10          	add    rdx,0x10
    8d42:	48 39 c8             	cmp    rax,rcx
    8d45:	77 e9                	ja     8d30 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0xc0>
    8d47:	4c 8d 6c 3b 20       	lea    r13,[rbx+rdi*1+0x20]
    8d4c:	48 39 f5             	cmp    rbp,rsi
    8d4f:	74 6f                	je     8dc0 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x150>
    8d51:	48 29 ee             	sub    rsi,rbp
    8d54:	31 d2                	xor    edx,edx
    8d56:	31 c9                	xor    ecx,ecx
    8d58:	48 83 ee 10          	sub    rsi,0x10
    8d5c:	48 89 f0             	mov    rax,rsi
    8d5f:	48 c1 e8 04          	shr    rax,0x4
    8d63:	48 83 c0 01          	add    rax,0x1
    8d67:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    8d70:	f3 0f 6f 54 15 00    	movdqu xmm2,XMMWORD PTR [rbp+rdx*1+0x0]
    8d76:	48 83 c1 01          	add    rcx,0x1
    8d7a:	41 0f 11 54 15 00    	movups XMMWORD PTR [r13+rdx*1+0x0],xmm2
    8d80:	48 83 c2 10          	add    rdx,0x10
    8d84:	48 39 c8             	cmp    rax,rcx
    8d87:	77 e7                	ja     8d70 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x100>
    8d89:	4d 8d 6c 35 10       	lea    r13,[r13+rsi*1+0x10]
    8d8e:	4d 85 e4             	test   r12,r12
    8d91:	75 2d                	jne    8dc0 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x150>
    8d93:	66 48 0f 6e c3       	movq   xmm0,rbx
    8d98:	66 49 0f 6e e5       	movq   xmm4,r13
    8d9d:	4d 89 7e 10          	mov    QWORD PTR [r14+0x10],r15
    8da1:	66 0f 6c c4          	punpcklqdq xmm0,xmm4
    8da5:	41 0f 11 06          	movups XMMWORD PTR [r14],xmm0
    8da9:	48 83 c4 28          	add    rsp,0x28
    8dad:	5b                   	pop    rbx
    8dae:	5d                   	pop    rbp
    8daf:	41 5c                	pop    r12
    8db1:	41 5d                	pop    r13
    8db3:	41 5e                	pop    r14
    8db5:	41 5f                	pop    r15
    8db7:	c3                   	ret    
    8db8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    8dc0:	4c 89 e7             	mov    rdi,r12
    8dc3:	e8 a8 aa ff ff       	call   3870 <operator delete(void*)@plt>
    8dc8:	eb c9                	jmp    8d93 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x123>
    8dca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    8dd0:	48 85 ff             	test   rdi,rdi
    8dd3:	75 36                	jne    8e0b <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x19b>
    8dd5:	f3 0f 6f 1a          	movdqu xmm3,XMMWORD PTR [rdx]
    8dd9:	31 db                	xor    ebx,ebx
    8ddb:	41 bd 10 00 00 00    	mov    r13d,0x10
    8de1:	45 31 ff             	xor    r15d,r15d
    8de4:	42 0f 11 1c 03       	movups XMMWORD PTR [rbx+r8*1],xmm3
    8de9:	4c 39 e5             	cmp    rbp,r12
    8dec:	0f 85 22 ff ff ff    	jne    8d14 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0xa4>
    8df2:	48 39 f5             	cmp    rbp,rsi
    8df5:	0f 85 56 ff ff ff    	jne    8d51 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0xe1>
    8dfb:	eb 91                	jmp    8d8e <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x11e>
    8dfd:	0f 1f 00             	nop    DWORD PTR [rax]
    8e00:	41 bf 10 00 00 00    	mov    r15d,0x10
    8e06:	e9 c7 fe ff ff       	jmp    8cd2 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x62>
    8e0b:	48 39 cf             	cmp    rdi,rcx
    8e0e:	48 0f 46 cf          	cmovbe rcx,rdi
    8e12:	49 89 cf             	mov    r15,rcx
    8e15:	49 c1 e7 04          	shl    r15,0x4
    8e19:	e9 b4 fe ff ff       	jmp    8cd2 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)+0x62>
    8e1e:	48 8d 3d c3 a8 02 00 	lea    rdi,[rip+0x2a8c3]        # 336e8 <_IO_stdin_used+0x6e8>
    8e25:	e8 56 a9 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    8e2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000008e30 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)>:
    8e30:	f3 0f 1e fa          	endbr64 
    8e34:	41 57                	push   r15
    8e36:	49 89 f7             	mov    r15,rsi
    8e39:	41 56                	push   r14
    8e3b:	41 55                	push   r13
    8e3d:	41 54                	push   r12
    8e3f:	55                   	push   rbp
    8e40:	53                   	push   rbx
    8e41:	48 81 ec 48 02 00 00 	sub    rsp,0x248
    8e48:	48 8b 84 24 88 02 00 00 	mov    rax,QWORD PTR [rsp+0x288]
    8e50:	4c 8b b4 24 80 02 00 00 	mov    r14,QWORD PTR [rsp+0x280]
    8e58:	48 89 bc 24 f0 01 00 00 	mov    QWORD PTR [rsp+0x1f0],rdi
    8e60:	48 89 8c 24 c8 00 00 00 	mov    QWORD PTR [rsp+0xc8],rcx
    8e68:	48 89 84 24 08 01 00 00 	mov    QWORD PTR [rsp+0x108],rax
    8e70:	48 8b 84 24 90 02 00 00 	mov    rax,QWORD PTR [rsp+0x290]
    8e78:	4c 89 44 24 68       	mov    QWORD PTR [rsp+0x68],r8
    8e7d:	48 89 44 24 78       	mov    QWORD PTR [rsp+0x78],rax
    8e82:	48 8b 84 24 98 02 00 00 	mov    rax,QWORD PTR [rsp+0x298]
    8e8a:	4c 89 8c 24 f0 00 00 00 	mov    QWORD PTR [rsp+0xf0],r9
    8e92:	48 89 84 24 80 00 00 00 	mov    QWORD PTR [rsp+0x80],rax
    8e9a:	48 8b 84 24 a0 02 00 00 	mov    rax,QWORD PTR [rsp+0x2a0]
    8ea2:	48 89 84 24 00 01 00 00 	mov    QWORD PTR [rsp+0x100],rax
    8eaa:	48 8b 84 24 a8 02 00 00 	mov    rax,QWORD PTR [rsp+0x2a8]
    8eb2:	48 89 84 24 98 01 00 00 	mov    QWORD PTR [rsp+0x198],rax
    8eba:	48 8b 84 24 b0 02 00 00 	mov    rax,QWORD PTR [rsp+0x2b0]
    8ec2:	48 89 84 24 a0 01 00 00 	mov    QWORD PTR [rsp+0x1a0],rax
    8eca:	48 8b 84 24 b8 02 00 00 	mov    rax,QWORD PTR [rsp+0x2b8]
    8ed2:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    8ed7:	48 8b 84 24 c0 02 00 00 	mov    rax,QWORD PTR [rsp+0x2c0]
    8edf:	48 89 84 24 c8 01 00 00 	mov    QWORD PTR [rsp+0x1c8],rax
    8ee7:	48 8b 84 24 d0 02 00 00 	mov    rax,QWORD PTR [rsp+0x2d0]
    8eef:	48 89 84 24 b0 01 00 00 	mov    QWORD PTR [rsp+0x1b0],rax
    8ef7:	48 8b 84 24 d8 02 00 00 	mov    rax,QWORD PTR [rsp+0x2d8]
    8eff:	48 89 84 24 28 01 00 00 	mov    QWORD PTR [rsp+0x128],rax
    8f07:	48 8b 84 24 e0 02 00 00 	mov    rax,QWORD PTR [rsp+0x2e0]
    8f0f:	48 89 84 24 18 01 00 00 	mov    QWORD PTR [rsp+0x118],rax
    8f17:	48 8b 84 24 c8 02 00 00 	mov    rax,QWORD PTR [rsp+0x2c8]
    8f1f:	48 89 84 24 f8 01 00 00 	mov    QWORD PTR [rsp+0x1f8],rax
    8f27:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    8f30:	48 89 84 24 38 02 00 00 	mov    QWORD PTR [rsp+0x238],rax
    8f38:	31 c0                	xor    eax,eax
    8f3a:	49 8b 06             	mov    rax,QWORD PTR [r14]
    8f3d:	c6 84 24 0b 02 00 00 03 	mov    BYTE PTR [rsp+0x20b],0x3
    8f45:	8b b0 ac 35 03 00    	mov    esi,DWORD PTR [rax+0x335ac]
    8f4b:	85 f6                	test   esi,esi
    8f4d:	75 08                	jne    8f57 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x127>
    8f4f:	c6 84 24 0b 02 00 00 00 	mov    BYTE PTR [rsp+0x20b],0x0
    8f57:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    8f5c:	48 63 00             	movsxd rax,DWORD PTR [rax]
    8f5f:	85 c0                	test   eax,eax
    8f61:	0f 8e f9 08 00 00    	jle    9860 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa30>
    8f67:	89 c2                	mov    edx,eax
    8f69:	48 63 d8             	movsxd rbx,eax
    8f6c:	4d 89 f5             	mov    r13,r14
    8f6f:	4d 89 fe             	mov    r14,r15
    8f72:	f7 da                	neg    edx
    8f74:	48 89 5c 24 30       	mov    QWORD PTR [rsp+0x30],rbx
    8f79:	89 94 24 b8 01 00 00 	mov    DWORD PTR [rsp+0x1b8],edx
    8f80:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    8f85:	89 fa                	mov    edx,edi
    8f87:	89 bc 24 8c 01 00 00 	mov    DWORD PTR [rsp+0x18c],edi
    8f8e:	83 c2 04             	add    edx,0x4
    8f91:	89 7c 24 14          	mov    DWORD PTR [rsp+0x14],edi
    8f95:	39 c2                	cmp    edx,eax
    8f97:	0f 8f cd 06 00 00    	jg     966a <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x83a>
    8f9d:	48 8d 04 bd 00 00 00 00 	lea    rax,[rdi*4+0x0]
    8fa5:	89 fb                	mov    ebx,edi
    8fa7:	48 63 d2             	movsxd rdx,edx
    8faa:	4d 89 f7             	mov    r15,r14
    8fad:	48 89 84 24 10 01 00 00 	mov    QWORD PTR [rsp+0x110],rax
    8fb5:	48 8d 04 3f          	lea    rax,[rdi+rdi*1]
    8fb9:	48 89 84 24 30 01 00 00 	mov    QWORD PTR [rsp+0x130],rax
    8fc1:	48 83 c0 02          	add    rax,0x2
    8fc5:	48 89 84 24 e8 00 00 00 	mov    QWORD PTR [rsp+0xe8],rax
    8fcd:	89 f8                	mov    eax,edi
    8fcf:	48 69 c0 85 10 42 08 	imul   rax,rax,0x8421085
    8fd6:	4c 89 2c 24          	mov    QWORD PTR [rsp],r13
    8fda:	49 89 d5             	mov    r13,rdx
    8fdd:	48 c1 e8 20          	shr    rax,0x20
    8fe1:	48 89 c1             	mov    rcx,rax
    8fe4:	89 f8                	mov    eax,edi
    8fe6:	29 c8                	sub    eax,ecx
    8fe8:	d1 e8                	shr    eax,1
    8fea:	01 c8                	add    eax,ecx
    8fec:	c1 e8 04             	shr    eax,0x4
    8fef:	89 c1                	mov    ecx,eax
    8ff1:	c1 e1 05             	shl    ecx,0x5
    8ff4:	29 c1                	sub    ecx,eax
    8ff6:	89 f8                	mov    eax,edi
    8ff8:	83 c0 01             	add    eax,0x1
    8ffb:	29 cb                	sub    ebx,ecx
    8ffd:	48 89 c7             	mov    rdi,rax
    9000:	89 84 24 bc 01 00 00 	mov    DWORD PTR [rsp+0x1bc],eax
    9007:	48 69 c0 85 10 42 08 	imul   rax,rax,0x8421085
    900e:	48 89 9c 24 d0 00 00 00 	mov    QWORD PTR [rsp+0xd0],rbx
    9016:	89 fb                	mov    ebx,edi
    9018:	48 c1 e8 20          	shr    rax,0x20
    901c:	48 89 c1             	mov    rcx,rax
    901f:	89 f8                	mov    eax,edi
    9021:	29 c8                	sub    eax,ecx
    9023:	d1 e8                	shr    eax,1
    9025:	01 c8                	add    eax,ecx
    9027:	c1 e8 04             	shr    eax,0x4
    902a:	89 c1                	mov    ecx,eax
    902c:	c1 e1 05             	shl    ecx,0x5
    902f:	29 c1                	sub    ecx,eax
    9031:	48 63 c7             	movsxd rax,edi
    9034:	48 89 84 24 a8 01 00 00 	mov    QWORD PTR [rsp+0x1a8],rax
    903c:	48 01 c0             	add    rax,rax
    903f:	29 cb                	sub    ebx,ecx
    9041:	48 89 84 24 c0 01 00 00 	mov    QWORD PTR [rsp+0x1c0],rax
    9049:	48 8d 84 24 f8 01 00 00 	lea    rax,[rsp+0x1f8]
    9051:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
    9056:	48 8d 84 24 1c 02 00 00 	lea    rax,[rsp+0x21c]
    905e:	48 89 84 24 b8 00 00 00 	mov    QWORD PTR [rsp+0xb8],rax
    9066:	48 8d 84 24 18 02 00 00 	lea    rax,[rsp+0x218]
    906e:	48 89 84 24 b0 00 00 00 	mov    QWORD PTR [rsp+0xb0],rax
    9076:	48 8d 84 24 14 02 00 00 	lea    rax,[rsp+0x214]
    907e:	48 89 84 24 a8 00 00 00 	mov    QWORD PTR [rsp+0xa8],rax
    9086:	48 8d 84 24 10 02 00 00 	lea    rax,[rsp+0x210]
    908e:	48 89 84 24 a0 00 00 00 	mov    QWORD PTR [rsp+0xa0],rax
    9096:	48 8d 84 24 0b 02 00 00 	lea    rax,[rsp+0x20b]
    909e:	48 89 9c 24 20 01 00 00 	mov    QWORD PTR [rsp+0x120],rbx
    90a6:	48 89 84 24 98 00 00 00 	mov    QWORD PTR [rsp+0x98],rax
    90ae:	66 90                	xchg   ax,ax
    90b0:	4a 8d 04 ad 00 00 00 00 	lea    rax,[r13*4+0x0]
    90b8:	48 8b 5c 24 30       	mov    rbx,QWORD PTR [rsp+0x30]
    90bd:	44 89 6c 24 64       	mov    DWORD PTR [rsp+0x64],r13d
    90c2:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    90c7:	48 8b 84 24 28 01 00 00 	mov    rax,QWORD PTR [rsp+0x128]
    90cf:	44 89 6c 24 60       	mov    DWORD PTR [rsp+0x60],r13d
    90d4:	c6 44 24 38 00       	mov    BYTE PTR [rsp+0x38],0x0
    90d9:	8b 3c 98             	mov    edi,DWORD PTR [rax+rbx*4]
    90dc:	42 39 3c a8          	cmp    DWORD PTR [rax+r13*4],edi
    90e0:	7c 06                	jl     90e8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x2b8>
    90e2:	0f 8e de 07 00 00    	jle    98c6 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa96>
    90e8:	48 8b 9c 24 c8 00 00 00 	mov    rbx,QWORD PTR [rsp+0xc8]
    90f0:	4b 8d 7c 6d 00       	lea    rdi,[r13+r13*2+0x0]
    90f5:	c7 84 24 0c 02 00 00 80 96 98 00 	mov    DWORD PTR [rsp+0x20c],0x989680
    9100:	48 8d 04 fd 00 00 00 00 	lea    rax,[rdi*8+0x0]
    9108:	48 8b ac 24 f8 01 00 00 	mov    rbp,QWORD PTR [rsp+0x1f8]
    9110:	48 89 84 24 e0 00 00 00 	mov    QWORD PTR [rsp+0xe0],rax
    9118:	48 03 03             	add    rax,QWORD PTR [rbx]
    911b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    911e:	4c 8b 50 08          	mov    r10,QWORD PTR [rax+0x8]
    9122:	49 39 ca             	cmp    r10,rcx
    9125:	0f 84 6d 08 00 00    	je     9998 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xb68>
    912b:	48 8b 84 24 80 00 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    9133:	4c 89 6c 24 20       	mov    QWORD PTR [rsp+0x20],r13
    9138:	41 bb 80 96 98 00    	mov    r11d,0x989680
    913e:	41 be 80 96 98 00    	mov    r14d,0x989680
    9144:	4c 89 7c 24 28       	mov    QWORD PTR [rsp+0x28],r15
    9149:	4c 8b 2c 24          	mov    r13,QWORD PTR [rsp]
    914d:	48 8b 18             	mov    rbx,QWORD PTR [rax]
    9150:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    9155:	48 89 6c 24 18       	mov    QWORD PTR [rsp+0x18],rbp
    915a:	4c 8b bc 24 18 01 00 00 	mov    r15,QWORD PTR [rsp+0x118]
    9162:	4c 8b 20             	mov    r12,QWORD PTR [rax]
    9165:	b8 80 96 98 00       	mov    eax,0x989680
    916a:	89 c5                	mov    ebp,eax
    916c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9170:	48 63 31             	movsxd rsi,DWORD PTR [rcx]
    9173:	44 8b 49 08          	mov    r9d,DWORD PTR [rcx+0x8]
    9177:	8b 51 0c             	mov    edx,DWORD PTR [rcx+0xc]
    917a:	8d 7e ff             	lea    edi,[rsi-0x1]
    917d:	41 c1 f9 02          	sar    r9d,0x2
    9181:	89 f0                	mov    eax,esi
    9183:	2b 44 24 14          	sub    eax,DWORD PTR [rsp+0x14]
    9187:	48 63 ff             	movsxd rdi,edi
    918a:	c1 fa 02             	sar    edx,0x2
    918d:	44 8b 04 bb          	mov    r8d,DWORD PTR [rbx+rdi*4]
    9191:	45 01 c8             	add    r8d,r9d
    9194:	45 39 c6             	cmp    r14d,r8d
    9197:	45 0f 4f f0          	cmovg  r14d,r8d
    919b:	41 39 44 b7 fc       	cmp    DWORD PTR [r15+rsi*4-0x4],eax
    91a0:	7c 15                	jl     91b7 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x387>
    91a2:	49 8b 75 00          	mov    rsi,QWORD PTR [r13+0x0]
    91a6:	0f af 86 98 1d 03 00 	imul   eax,DWORD PTR [rsi+0x31d98]
    91ad:	44 01 c8             	add    eax,r9d
    91b0:	41 39 c6             	cmp    r14d,eax
    91b3:	44 0f 4f f0          	cmovg  r14d,eax
    91b7:	44 39 c5             	cmp    ebp,r8d
    91ba:	41 0f 4f e8          	cmovg  ebp,r8d
    91be:	41 03 14 bc          	add    edx,DWORD PTR [r12+rdi*4]
    91c2:	41 39 d3             	cmp    r11d,edx
    91c5:	44 0f 4f da          	cmovg  r11d,edx
    91c9:	48 83 c1 10          	add    rcx,0x10
    91cd:	49 39 ca             	cmp    r10,rcx
    91d0:	75 9e                	jne    9170 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x340>
    91d2:	44 89 9c 24 0c 02 00 00 	mov    DWORD PTR [rsp+0x20c],r11d
    91da:	4c 8b 6c 24 20       	mov    r13,QWORD PTR [rsp+0x20]
    91df:	89 ac 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],ebp
    91e6:	4c 8b 7c 24 28       	mov    r15,QWORD PTR [rsp+0x28]
    91eb:	48 8b 6c 24 18       	mov    rbp,QWORD PTR [rsp+0x18]
    91f0:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    91f5:	8b 44 05 00          	mov    eax,DWORD PTR [rbp+rax*1+0x0]
    91f9:	85 c0                	test   eax,eax
    91fb:	79 6b                	jns    9268 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x438>
    91fd:	8b 5c 24 64          	mov    ebx,DWORD PTR [rsp+0x64]
    9201:	48 8b 7c 24 78       	mov    rdi,QWORD PTR [rsp+0x78]
    9206:	8d 4b ff             	lea    ecx,[rbx-0x1]
    9209:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    920c:	48 8b 1c 24          	mov    rbx,QWORD PTR [rsp]
    9210:	48 63 c9             	movsxd rcx,ecx
    9213:	48 8b bc 24 00 01 00 00 	mov    rdi,QWORD PTR [rsp+0x100]
    921b:	8b 14 8a             	mov    edx,DWORD PTR [rdx+rcx*4]
    921e:	48 8b 37             	mov    rsi,QWORD PTR [rdi]
    9221:	41 39 d3             	cmp    r11d,edx
    9224:	44 0f 4f da          	cmovg  r11d,edx
    9228:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
    922b:	8b 1c 8e             	mov    ebx,DWORD PTR [rsi+rcx*4]
    922e:	8b 92 98 1d 03 00    	mov    edx,DWORD PTR [rdx+0x31d98]
    9234:	44 89 9c 24 0c 02 00 00 	mov    DWORD PTR [rsp+0x20c],r11d
    923c:	01 d3                	add    ebx,edx
    923e:	89 de                	mov    esi,ebx
    9240:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [rsp+0x88]
    9247:	39 f3                	cmp    ebx,esi
    9249:	0f 4e f3             	cmovle esi,ebx
    924c:	48 8b 9c 24 80 00 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
    9254:	89 b4 24 88 00 00 00 	mov    DWORD PTR [rsp+0x88],esi
    925b:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
    925e:	03 14 8e             	add    edx,DWORD PTR [rsi+rcx*4]
    9261:	41 39 d6             	cmp    r14d,edx
    9264:	44 0f 4f f2          	cmovg  r14d,edx
    9268:	48 8b bc 24 10 01 00 00 	mov    rdi,QWORD PTR [rsp+0x110]
    9270:	44 89 eb             	mov    ebx,r13d
    9273:	48 8d 54 3d 00       	lea    rdx,[rbp+rdi*1+0x0]
    9278:	48 8b 7c 24 30       	mov    rdi,QWORD PTR [rsp+0x30]
    927d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
    927f:	39 f8                	cmp    eax,edi
    9281:	89 bc 24 dc 00 00 00 	mov    DWORD PTR [rsp+0xdc],edi
    9288:	40 0f 94 c7          	sete   dil
    928c:	44 39 e9             	cmp    ecx,r13d
    928f:	40 0f 94 c6          	sete   sil
    9293:	21 f7                	and    edi,esi
    9295:	40 88 bc 24 5a 01 00 00 	mov    BYTE PTR [rsp+0x15a],dil
    929d:	83 f9 ff             	cmp    ecx,0xffffffff
    92a0:	0f 84 f2 05 00 00    	je     9898 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa68>
    92a6:	83 f8 ff             	cmp    eax,0xffffffff
    92a9:	41 0f 94 c0          	sete   r8b
    92ad:	31 ff                	xor    edi,edi
    92af:	83 f9 ff             	cmp    ecx,0xffffffff
    92b2:	7d 07                	jge    92bb <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x48b>
    92b4:	83 f8 ff             	cmp    eax,0xffffffff
    92b7:	40 0f 9c c7          	setl   dil
    92bb:	48 8b 44 24 68       	mov    rax,QWORD PTR [rsp+0x68]
    92c0:	48 8b b4 24 30 01 00 00 	mov    rsi,QWORD PTR [rsp+0x130]
    92c8:	4f 8d 64 2d 00       	lea    r12,[r13+r13*1+0x0]
    92cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
    92d0:	4a 0f bf 0c 68       	movsx  rcx,WORD PTR [rax+r13*2]
    92d5:	48 0f bf 04 30       	movsx  rax,WORD PTR [rax+rsi*1]
    92da:	c7 84 24 10 02 00 00 80 96 98 00 	mov    DWORD PTR [rsp+0x210],0x989680
    92e5:	48 8d 34 80          	lea    rsi,[rax+rax*4]
    92e9:	48 8d 04 b0          	lea    rax,[rax+rsi*4]
    92ed:	48 01 c1             	add    rcx,rax
    92f0:	48 8d 05 c9 8f 24 00 	lea    rax,[rip+0x248fc9]        # 2522c0 <pair>
    92f7:	8b 04 88             	mov    eax,DWORD PTR [rax+rcx*4]
    92fa:	84 c0                	test   al,al
    92fc:	88 84 24 5b 01 00 00 	mov    BYTE PTR [rsp+0x15b],al
    9303:	0f 9f c0             	setg   al
    9306:	84 44 24 38          	test   BYTE PTR [rsp+0x38],al
    930a:	0f 84 93 05 00 00    	je     98a3 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa73>
    9310:	45 84 c0             	test   r8b,r8b
    9313:	0f 85 8a 05 00 00    	jne    98a3 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa73>
    9319:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [rsp+0x18c]
    9320:	48 8b b4 24 18 01 00 00 	mov    rsi,QWORD PTR [rsp+0x118]
    9328:	f7 d0                	not    eax
    932a:	03 44 24 64          	add    eax,DWORD PTR [rsp+0x64]
    932e:	42 39 44 ae fc       	cmp    DWORD PTR [rsi+r13*4-0x4],eax
    9333:	7c 0e                	jl     9343 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x513>
    9335:	40 0a bc 24 5a 01 00 00 	or     dil,BYTE PTR [rsp+0x15a]
    933d:	0f 85 2a 0f 00 00    	jne    a26d <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x143d>
    9343:	c7 84 24 90 01 00 00 80 96 98 00 	mov    DWORD PTR [rsp+0x190],0x989680
    934e:	8b 02                	mov    eax,DWORD PTR [rdx]
    9350:	83 f8 ff             	cmp    eax,0xffffffff
    9353:	0f 8c 5f 06 00 00    	jl     99b8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xb88>
    9359:	39 d8                	cmp    eax,ebx
    935b:	0f 84 67 06 00 00    	je     99c8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xb98>
    9361:	c7 44 24 38 80 96 98 00 	mov    DWORD PTR [rsp+0x38],0x989680
    9369:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [rsp+0x8c],0x0
    9374:	c7 84 24 94 00 00 00 00 00 00 00 	mov    DWORD PTR [rsp+0x94],0x0
    937f:	44 89 5c 24 18       	mov    DWORD PTR [rsp+0x18],r11d
    9384:	48 83 ec 08          	sub    rsp,0x8
    9388:	ff 74 24 78          	push   QWORD PTR [rsp+0x78]
    938c:	48 8b b4 24 b0 01 00 00 	mov    rsi,QWORD PTR [rsp+0x1b0]
    9394:	48 8b bc 24 a8 01 00 00 	mov    rdi,QWORD PTR [rsp+0x1a8]
    939c:	44 8b 4c 24 70       	mov    r9d,DWORD PTR [rsp+0x70]
    93a1:	44 8b 44 24 24       	mov    r8d,DWORD PTR [rsp+0x24]
    93a6:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
    93ab:	48 8b 54 24 78       	mov    rdx,QWORD PTR [rsp+0x78]
    93b0:	e8 8b de ff ff       	call   7240 <int E_MbLoop<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, short*, vrna_param_s*, int const*>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, short* const&, vrna_param_s* const&, int, int, int const* const&)>
    93b5:	5a                   	pop    rdx
    93b6:	59                   	pop    rcx
    93b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [rsp+0x38]
    93bb:	8b bc 24 90 01 00 00 	mov    edi,DWORD PTR [rsp+0x190]
    93c2:	44 8b 5c 24 18       	mov    r11d,DWORD PTR [rsp+0x18]
    93c7:	39 d8                	cmp    eax,ebx
    93c9:	89 de                	mov    esi,ebx
    93cb:	0f 4e f0             	cmovle esi,eax
    93ce:	39 fe                	cmp    esi,edi
    93d0:	0f 4f f7             	cmovg  esi,edi
    93d3:	39 f8                	cmp    eax,edi
    93d5:	0f 4f c7             	cmovg  eax,edi
    93d8:	89 b4 24 10 02 00 00 	mov    DWORD PTR [rsp+0x210],esi
    93df:	39 c3                	cmp    ebx,eax
    93e1:	0f 8c 19 0d 00 00    	jl     a100 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x12d0>
    93e7:	49 8b 47 20          	mov    rax,QWORD PTR [r15+0x20]
    93eb:	48 8b 8c 24 d0 00 00 00 	mov    rcx,QWORD PTR [rsp+0xd0]
    93f3:	49 8b 17             	mov    rdx,QWORD PTR [r15]
    93f6:	48 0f af c8          	imul   rcx,rax
    93fa:	4a 8d 3c 29          	lea    rdi,[rcx+r13*1]
    93fe:	89 34 ba             	mov    DWORD PTR [rdx+rdi*4],esi
    9401:	48 0f af 84 24 20 01 00 00 	imul   rax,QWORD PTR [rsp+0x120]
    940a:	4d 8d 65 ff          	lea    r12,[r13-0x1]
    940e:	4c 01 e1             	add    rcx,r12
    9411:	4a 8d 34 28          	lea    rsi,[rax+r13*1]
    9415:	4c 01 e0             	add    rax,r12
    9418:	8b 34 b2             	mov    esi,DWORD PTR [rdx+rsi*4]
    941b:	89 b4 24 14 02 00 00 	mov    DWORD PTR [rsp+0x214],esi
    9422:	8b 0c 8a             	mov    ecx,DWORD PTR [rdx+rcx*4]
    9425:	89 8c 24 18 02 00 00 	mov    DWORD PTR [rsp+0x218],ecx
    942c:	8b 04 82             	mov    eax,DWORD PTR [rdx+rax*4]
    942f:	89 84 24 1c 02 00 00 	mov    DWORD PTR [rsp+0x21c],eax
    9436:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    943a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    943d:	83 b8 ac 35 03 00 01 	cmp    DWORD PTR [rax+0x335ac],0x1
    9444:	75 08                	jne    944e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x61e>
    9446:	c6 84 24 0b 02 00 00 00 	mov    BYTE PTR [rsp+0x20b],0x0
    944e:	44 89 5c 24 38       	mov    DWORD PTR [rsp+0x38],r11d
    9453:	48 83 ec 08          	sub    rsp,0x8
    9457:	ff 74 24 78          	push   QWORD PTR [rsp+0x78]
    945b:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    9460:	8b 00                	mov    eax,DWORD PTR [rax]
    9462:	50                   	push   rax
    9463:	ff b4 24 b0 00 00 00 	push   QWORD PTR [rsp+0xb0]
    946a:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [rsp+0x80]
    9471:	57                   	push   rdi
    9472:	8b 5c 24 3c          	mov    ebx,DWORD PTR [rsp+0x3c]
    9476:	53                   	push   rbx
    9477:	48 8b 6c 24 30       	mov    rbp,QWORD PTR [rsp+0x30]
    947c:	4c 8b 84 24 98 00 00 00 	mov    r8,QWORD PTR [rsp+0x98]
    9484:	48 8b 8c 24 e8 00 00 00 	mov    rcx,QWORD PTR [rsp+0xe8]
    948c:	48 8b 94 24 e0 00 00 00 	mov    rdx,QWORD PTR [rsp+0xe0]
    9494:	48 8b b4 24 d8 00 00 00 	mov    rsi,QWORD PTR [rsp+0xd8]
    949c:	49 89 e9             	mov    r9,rbp
    949f:	48 8b bc 24 d0 00 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    94a7:	e8 b4 e1 ff ff       	call   7660 <int E_ext_Stem<int, int, int, int, short*, vrna_param_s*, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int, int const* const&)>
    94ac:	48 83 c4 28          	add    rsp,0x28
    94b0:	49 89 e9             	mov    r9,rbp
    94b3:	ff 74 24 78          	push   QWORD PTR [rsp+0x78]
    94b7:	89 c3                	mov    ebx,eax
    94b9:	ff 74 24 58          	push   QWORD PTR [rsp+0x58]
    94bd:	ff b4 24 b0 00 00 00 	push   QWORD PTR [rsp+0xb0]
    94c4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [rsp+0x80]
    94cb:	50                   	push   rax
    94cc:	8b 44 24 3c          	mov    eax,DWORD PTR [rsp+0x3c]
    94d0:	50                   	push   rax
    94d1:	4c 8b 84 24 98 00 00 00 	mov    r8,QWORD PTR [rsp+0x98]
    94d9:	48 8b 8c 24 e8 00 00 00 	mov    rcx,QWORD PTR [rsp+0xe8]
    94e1:	48 8b 94 24 e0 00 00 00 	mov    rdx,QWORD PTR [rsp+0xe0]
    94e9:	48 8b b4 24 d8 00 00 00 	mov    rsi,QWORD PTR [rsp+0xd8]
    94f1:	48 8b bc 24 d0 00 00 00 	mov    rdi,QWORD PTR [rsp+0xd0]
    94f9:	48 89 6c 24 30       	mov    QWORD PTR [rsp+0x30],rbp
    94fe:	e8 cd e5 ff ff       	call   7ad0 <int E_MLStem<int, int, int, int, short*, vrna_param_s*, int, int const*>(int const&, int const&, int const&, int const&, short* const&, vrna_param_s* const&, int, int, signed char&, int const&, int const* const&)>
    9503:	89 c5                	mov    ebp,eax
    9505:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    950a:	48 83 c4 30          	add    rsp,0x30
    950e:	44 8b 5c 24 38       	mov    r11d,DWORD PTR [rsp+0x38]
    9513:	48 8b 00             	mov    rax,QWORD PTR [rax]
    9516:	83 b8 ac 35 03 00 01 	cmp    DWORD PTR [rax+0x335ac],0x1
    951d:	0f 84 c5 03 00 00    	je     98e8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xab8>
    9523:	44 39 db             	cmp    ebx,r11d
    9526:	44 89 d9             	mov    ecx,r11d
    9529:	45 89 f4             	mov    r12d,r14d
    952c:	0f b6 bc 24 5a 01 00 00 	movzx  edi,BYTE PTR [rsp+0x15a]
    9534:	0f 4e cb             	cmovle ecx,ebx
    9537:	44 39 f5             	cmp    ebp,r14d
    953a:	44 0f 4e e5          	cmovle r12d,ebp
    953e:	44 39 db             	cmp    ebx,r11d
    9541:	0f 9c c0             	setl   al
    9544:	40 08 c7             	or     dil,al
    9547:	75 09                	jne    9552 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x722>
    9549:	44 39 f5             	cmp    ebp,r14d
    954c:	0f 8d c9 00 00 00    	jge    961b <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x7eb>
    9552:	0f be 84 24 0b 02 00 00 	movsx  eax,BYTE PTR [rsp+0x20b]
    955a:	c1 e3 02             	shl    ebx,0x2
    955d:	c1 e5 02             	shl    ebp,0x2
    9560:	49 8b 17             	mov    rdx,QWORD PTR [r15]
    9563:	09 c3                	or     ebx,eax
    9565:	09 c5                	or     ebp,eax
    9567:	48 8b 84 24 d0 00 00 00 	mov    rax,QWORD PTR [rsp+0xd0]
    956f:	49 0f af 47 20       	imul   rax,QWORD PTR [r15+0x20]
    9574:	4c 01 e8             	add    rax,r13
    9577:	48 8d 04 82          	lea    rax,[rdx+rax*4]
    957b:	8b 54 24 64          	mov    edx,DWORD PTR [rsp+0x64]
    957f:	83 c2 04             	add    edx,0x4
    9582:	39 94 24 dc 00 00 00 	cmp    DWORD PTR [rsp+0xdc],edx
    9589:	0f 8f 5d 0d 00 00    	jg     a2ec <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x14bc>
    958f:	48 8b 94 24 c8 00 00 00 	mov    rdx,QWORD PTR [rsp+0xc8]
    9597:	8b 00                	mov    eax,DWORD PTR [rax]
    9599:	89 ac 24 28 02 00 00 	mov    DWORD PTR [rsp+0x228],ebp
    95a0:	48 8b bc 24 e0 00 00 00 	mov    rdi,QWORD PTR [rsp+0xe0]
    95a8:	89 9c 24 2c 02 00 00 	mov    DWORD PTR [rsp+0x22c],ebx
    95af:	48 03 3a             	add    rdi,QWORD PTR [rdx]
    95b2:	8b 54 24 14          	mov    edx,DWORD PTR [rsp+0x14]
    95b6:	89 84 24 24 02 00 00 	mov    DWORD PTR [rsp+0x224],eax
    95bd:	48 8b 77 08          	mov    rsi,QWORD PTR [rdi+0x8]
    95c1:	89 94 24 20 02 00 00 	mov    DWORD PTR [rsp+0x220],edx
    95c8:	48 3b 77 10          	cmp    rsi,QWORD PTR [rdi+0x10]
    95cc:	0f 84 a6 03 00 00    	je     9978 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xb48>
    95d2:	66 0f 6e ca          	movd   xmm1,edx
    95d6:	66 0f 6e e8          	movd   xmm5,eax
    95da:	66 0f 6e c5          	movd   xmm0,ebp
    95de:	48 83 c6 10          	add    rsi,0x10
    95e2:	66 0f 6e e3          	movd   xmm4,ebx
    95e6:	66 0f 62 cd          	punpckldq xmm1,xmm5
    95ea:	66 0f 62 c4          	punpckldq xmm0,xmm4
    95ee:	66 0f 6f d9          	movdqa xmm3,xmm1
    95f2:	66 0f 6c d8          	punpcklqdq xmm3,xmm0
    95f6:	0f 11 5e f0          	movups XMMWORD PTR [rsi-0x10],xmm3
    95fa:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
    95fe:	48 8b 74 24 30       	mov    rsi,QWORD PTR [rsp+0x30]
    9603:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    960b:	4c 89 ea             	mov    rdx,r13
    960e:	89 4c 24 38          	mov    DWORD PTR [rsp+0x38],ecx
    9612:	e8 b9 31 00 00       	call   c7d0 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)>
    9617:	8b 4c 24 38          	mov    ecx,DWORD PTR [rsp+0x38]
    961b:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    9620:	48 8b 5c 24 58       	mov    rbx,QWORD PTR [rsp+0x58]
    9625:	49 83 c5 01          	add    r13,0x1
    9629:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [rsp+0x88]
    9630:	48 8b 00             	mov    rax,QWORD PTR [rax]
    9633:	89 0c 18             	mov    DWORD PTR [rax+rbx*1],ecx
    9636:	48 8b 84 24 80 00 00 00 	mov    rax,QWORD PTR [rsp+0x80]
    963e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    9641:	44 89 24 18          	mov    DWORD PTR [rax+rbx*1],r12d
    9645:	48 8b 84 24 00 01 00 00 	mov    rax,QWORD PTR [rsp+0x100]
    964d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    9650:	89 3c 18             	mov    DWORD PTR [rax+rbx*1],edi
    9653:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    9658:	8b 00                	mov    eax,DWORD PTR [rax]
    965a:	44 39 e8             	cmp    eax,r13d
    965d:	0f 8d 4d fa ff ff    	jge    90b0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x280>
    9663:	4c 8b 2c 24          	mov    r13,QWORD PTR [rsp]
    9667:	4d 89 fe             	mov    r14,r15
    966a:	48 8b 9c 24 98 01 00 00 	mov    rbx,QWORD PTR [rsp+0x198]
    9672:	48 8b bc 24 a0 01 00 00 	mov    rdi,QWORD PTR [rsp+0x1a0]
    967a:	f3 0f 6f 3b          	movdqu xmm7,XMMWORD PTR [rbx]
    967e:	f3 0f 6f 07          	movdqu xmm0,XMMWORD PTR [rdi]
    9682:	48 8b 57 10          	mov    rdx,QWORD PTR [rdi+0x10]
    9686:	0f 11 3f             	movups XMMWORD PTR [rdi],xmm7
    9689:	48 8b 4b 10          	mov    rcx,QWORD PTR [rbx+0x10]
    968d:	48 89 4f 10          	mov    QWORD PTR [rdi+0x10],rcx
    9691:	48 8b bc 24 00 01 00 00 	mov    rdi,QWORD PTR [rsp+0x100]
    9699:	0f 11 03             	movups XMMWORD PTR [rbx],xmm0
    969c:	48 89 53 10          	mov    QWORD PTR [rbx+0x10],rdx
    96a0:	f3 0f 6f 3f          	movdqu xmm7,XMMWORD PTR [rdi]
    96a4:	0f 11 3b             	movups XMMWORD PTR [rbx],xmm7
    96a7:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
    96ab:	0f 29 3c 24          	movaps XMMWORD PTR [rsp],xmm7
    96af:	48 89 4b 10          	mov    QWORD PTR [rbx+0x10],rcx
    96b3:	48 8b 9c 24 c8 01 00 00 	mov    rbx,QWORD PTR [rsp+0x1c8]
    96bb:	48 89 57 10          	mov    QWORD PTR [rdi+0x10],rdx
    96bf:	80 3b 00             	cmp    BYTE PTR [rbx],0x0
    96c2:	0f 11 07             	movups XMMWORD PTR [rdi],xmm0
    96c5:	74 12                	je     96d9 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x8a9>
    96c7:	8b 9c 24 8c 01 00 00 	mov    ebx,DWORD PTR [rsp+0x18c]
    96ce:	8d 53 1e             	lea    edx,[rbx+0x1e]
    96d1:	39 d0                	cmp    eax,edx
    96d3:	0f 8f f9 0b 00 00    	jg     a2d2 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x14a2>
    96d9:	48 8b 84 24 c8 00 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    96e1:	49 bf ff ff ff ff ff ff ff 07 	movabs r15,0x7ffffffffffffff
    96eb:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
    96ef:	48 8b 28             	mov    rbp,QWORD PTR [rax]
    96f2:	48 39 eb             	cmp    rbx,rbp
    96f5:	75 3b                	jne    9732 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x902>
    96f7:	e9 34 01 00 00       	jmp    9830 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa00>
    96fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9700:	66 0f ef c0          	pxor   xmm0,xmm0
    9704:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    9709:	48 85 d2             	test   rdx,rdx
    970c:	78 64                	js     9772 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x942>
    970e:	66 0f ef c9          	pxor   xmm1,xmm1
    9712:	f2 48 0f 2a ca       	cvtsi2sd xmm1,rdx
    9717:	f2 0f 59 0d f9 b1 02 00 	mulsd  xmm1,QWORD PTR [rip+0x2b1f9]        # 34918 <Law_and_Order+0x78>
    971f:	66 0f 2f c1          	comisd xmm0,xmm1
    9723:	77 77                	ja     979c <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x96c>
    9725:	48 83 c5 18          	add    rbp,0x18
    9729:	48 39 eb             	cmp    rbx,rbp
    972c:	0f 84 fe 00 00 00    	je     9830 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xa00>
    9732:	48 8b 7d 08          	mov    rdi,QWORD PTR [rbp+0x8]
    9736:	48 8b 75 00          	mov    rsi,QWORD PTR [rbp+0x0]
    973a:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    973e:	49 89 fc             	mov    r12,rdi
    9741:	49 29 f4             	sub    r12,rsi
    9744:	48 29 f0             	sub    rax,rsi
    9747:	4c 89 e2             	mov    rdx,r12
    974a:	48 c1 fa 04          	sar    rdx,0x4
    974e:	48 c1 f8 04          	sar    rax,0x4
    9752:	79 ac                	jns    9700 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x8d0>
    9754:	48 89 c1             	mov    rcx,rax
    9757:	83 e0 01             	and    eax,0x1
    975a:	66 0f ef c0          	pxor   xmm0,xmm0
    975e:	48 d1 e9             	shr    rcx,1
    9761:	48 09 c1             	or     rcx,rax
    9764:	f2 48 0f 2a c1       	cvtsi2sd xmm0,rcx
    9769:	f2 0f 58 c0          	addsd  xmm0,xmm0
    976d:	48 85 d2             	test   rdx,rdx
    9770:	79 9c                	jns    970e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x8de>
    9772:	48 89 d0             	mov    rax,rdx
    9775:	48 89 d1             	mov    rcx,rdx
    9778:	66 0f ef c9          	pxor   xmm1,xmm1
    977c:	48 d1 e8             	shr    rax,1
    977f:	83 e1 01             	and    ecx,0x1
    9782:	48 09 c8             	or     rax,rcx
    9785:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    978a:	f2 0f 58 c9          	addsd  xmm1,xmm1
    978e:	f2 0f 59 0d 82 b1 02 00 	mulsd  xmm1,QWORD PTR [rip+0x2b182]        # 34918 <Law_and_Order+0x78>
    9796:	66 0f 2f c1          	comisd xmm0,xmm1
    979a:	76 89                	jbe    9725 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x8f5>
    979c:	4c 39 fa             	cmp    rdx,r15
    979f:	0f 87 6b 0b 00 00    	ja     a310 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x14e0>
    97a5:	48 85 d2             	test   rdx,rdx
    97a8:	0f 84 12 0b 00 00    	je     a2c0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1490>
    97ae:	4c 89 e7             	mov    rdi,r12
    97b1:	e8 fa a0 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    97b6:	48 8b 7d 08          	mov    rdi,QWORD PTR [rbp+0x8]
    97ba:	48 8b 75 00          	mov    rsi,QWORD PTR [rbp+0x0]
    97be:	4a 8d 14 20          	lea    rdx,[rax+r12*1]
    97c2:	48 89 c1             	mov    rcx,rax
    97c5:	49 89 f8             	mov    r8,rdi
    97c8:	49 89 d4             	mov    r12,rdx
    97cb:	49 29 f0             	sub    r8,rsi
    97ce:	66 90                	xchg   ax,ax
    97d0:	66 0f 6f 15 28 b1 02 00 	movdqa xmm2,XMMWORD PTR [rip+0x2b128]        # 34900 <Law_and_Order+0x60>
    97d8:	48 83 c0 10          	add    rax,0x10
    97dc:	0f 11 50 f0          	movups XMMWORD PTR [rax-0x10],xmm2
    97e0:	48 39 c2             	cmp    rdx,rax
    97e3:	75 eb                	jne    97d0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x9a0>
    97e5:	48 89 14 24          	mov    QWORD PTR [rsp],rdx
    97e9:	48 39 fe             	cmp    rsi,rdi
    97ec:	74 12                	je     9800 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x9d0>
    97ee:	48 89 cf             	mov    rdi,rcx
    97f1:	4c 89 c2             	mov    rdx,r8
    97f4:	e8 87 a2 ff ff       	call   3a80 <memmove@plt>
    97f9:	48 8b 7d 00          	mov    rdi,QWORD PTR [rbp+0x0]
    97fd:	48 89 c1             	mov    rcx,rax
    9800:	66 48 0f 6e c1       	movq   xmm0,rcx
    9805:	4c 89 65 10          	mov    QWORD PTR [rbp+0x10],r12
    9809:	0f 16 04 24          	movhps xmm0,QWORD PTR [rsp]
    980d:	0f 11 45 00          	movups XMMWORD PTR [rbp+0x0],xmm0
    9811:	48 85 ff             	test   rdi,rdi
    9814:	0f 84 0b ff ff ff    	je     9725 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x8f5>
    981a:	e8 51 a0 ff ff       	call   3870 <operator delete(void*)@plt>
    981f:	48 83 c5 18          	add    rbp,0x18
    9823:	48 39 eb             	cmp    rbx,rbp
    9826:	0f 85 06 ff ff ff    	jne    9732 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x902>
    982c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9830:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    9838:	e8 23 36 00 00       	call   ce60 <compactify(TraceArrows&)>
    983d:	48 83 6c 24 30 01    	sub    QWORD PTR [rsp+0x30],0x1
    9843:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    9848:	48 8b 5c 24 30       	mov    rbx,QWORD PTR [rsp+0x30]
    984d:	83 84 24 b8 01 00 00 01 	add    DWORD PTR [rsp+0x1b8],0x1
    9855:	48 63 00             	movsxd rax,DWORD PTR [rax]
    9858:	85 db                	test   ebx,ebx
    985a:	0f 8f 20 f7 ff ff    	jg     8f80 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x150>
    9860:	48 8b 5c 24 78       	mov    rbx,QWORD PTR [rsp+0x78]
    9865:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
    9868:	8b 04 82             	mov    eax,DWORD PTR [rdx+rax*4]
    986b:	48 8b 94 24 38 02 00 00 	mov    rdx,QWORD PTR [rsp+0x238]
    9873:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
    987c:	0f 85 89 0a 00 00    	jne    a30b <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x14db>
    9882:	48 81 c4 48 02 00 00 	add    rsp,0x248
    9889:	5b                   	pop    rbx
    988a:	5d                   	pop    rbp
    988b:	41 5c                	pop    r12
    988d:	41 5d                	pop    r13
    988f:	41 5e                	pop    r14
    9891:	41 5f                	pop    r15
    9893:	c3                   	ret    
    9894:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9898:	c7 84 24 10 02 00 00 80 96 98 00 	mov    DWORD PTR [rsp+0x210],0x989680
    98a3:	49 8b 47 20          	mov    rax,QWORD PTR [r15+0x20]
    98a7:	48 8b 8c 24 d0 00 00 00 	mov    rcx,QWORD PTR [rsp+0xd0]
    98af:	49 8b 17             	mov    rdx,QWORD PTR [r15]
    98b2:	48 0f af c8          	imul   rcx,rax
    98b6:	4a 8d 34 29          	lea    rsi,[rcx+r13*1]
    98ba:	c7 04 b2 80 96 98 00 	mov    DWORD PTR [rdx+rsi*4],0x989680
    98c1:	e9 3b fb ff ff       	jmp    9401 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x5d1>
    98c6:	0f 85 50 0a 00 00    	jne    a31c <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x14ec>
    98cc:	48 8b 84 24 b0 01 00 00 	mov    rax,QWORD PTR [rsp+0x1b0]
    98d4:	44 39 2c 98          	cmp    DWORD PTR [rax+rbx*4],r13d
    98d8:	0f 9d 44 24 38       	setge  BYTE PTR [rsp+0x38]
    98dd:	e9 06 f8 ff ff       	jmp    90e8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x2b8>
    98e2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    98e8:	0f b6 84 24 0b 02 00 00 	movzx  eax,BYTE PTR [rsp+0x20b]
    98f0:	84 c0                	test   al,al
    98f2:	0f 8e 2b fc ff ff    	jle    9523 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x6f3>
    98f8:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
    98fd:	48 89 d6             	mov    rsi,rdx
    9900:	3c 02                	cmp    al,0x2
    9902:	74 16                	je     991a <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xaea>
    9904:	48 8b b4 24 a8 01 00 00 	mov    rsi,QWORD PTR [rsp+0x1a8]
    990c:	3c 03                	cmp    al,0x3
    990e:	74 0a                	je     991a <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xaea>
    9910:	4d 89 ec             	mov    r12,r13
    9913:	3c 01                	cmp    al,0x1
    9915:	74 03                	je     991a <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xaea>
    9917:	48 89 d6             	mov    rsi,rdx
    991a:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    9922:	4c 89 e2             	mov    rdx,r12
    9925:	44 89 5c 24 38       	mov    DWORD PTR [rsp+0x38],r11d
    992a:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
    992f:	e8 ec 2d 00 00       	call   c720 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)>
    9934:	44 8b 5c 24 38       	mov    r11d,DWORD PTR [rsp+0x38]
    9939:	84 c0                	test   al,al
    993b:	0f 84 e2 fb ff ff    	je     9523 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x6f3>
    9941:	44 39 f5             	cmp    ebp,r14d
    9944:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
    9949:	7c 09                	jl     9954 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xb24>
    994b:	44 39 db             	cmp    ebx,r11d
    994e:	0f 8d cf fb ff ff    	jge    9523 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x6f3>
    9954:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    995c:	4c 89 e2             	mov    rdx,r12
    995f:	44 89 5c 24 38       	mov    DWORD PTR [rsp+0x38],r11d
    9964:	e8 67 2e 00 00       	call   c7d0 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)>
    9969:	44 8b 5c 24 38       	mov    r11d,DWORD PTR [rsp+0x38]
    996e:	e9 b0 fb ff ff       	jmp    9523 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x6f3>
    9973:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    9978:	48 8d 94 24 20 02 00 00 	lea    rdx,[rsp+0x220]
    9980:	89 4c 24 38          	mov    DWORD PTR [rsp+0x38],ecx
    9984:	e8 e7 f2 ff ff       	call   8c70 <void std::vector<quatret, std::allocator<quatret> >::_M_realloc_insert<quatret>(__gnu_cxx::__normal_iterator<quatret*, std::vector<quatret, std::allocator<quatret> > >, quatret&&)>
    9989:	8b 4c 24 38          	mov    ecx,DWORD PTR [rsp+0x38]
    998d:	e9 6c fc ff ff       	jmp    95fe <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x7ce>
    9992:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    9998:	41 bb 80 96 98 00    	mov    r11d,0x989680
    999e:	41 be 80 96 98 00    	mov    r14d,0x989680
    99a4:	c7 84 24 88 00 00 00 80 96 98 00 	mov    DWORD PTR [rsp+0x88],0x989680
    99af:	e9 3c f8 ff ff       	jmp    91f0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x3c0>
    99b4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    99b8:	48 8b 54 24 58       	mov    rdx,QWORD PTR [rsp+0x58]
    99bd:	83 7c 15 00 ff       	cmp    DWORD PTR [rbp+rdx*1+0x0],0xffffffff
    99c2:	0f 8d 91 f9 ff ff    	jge    9359 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x529>
    99c8:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [rsp+0x18c]
    99cf:	8b 5c 24 64          	mov    ebx,DWORD PTR [rsp+0x64]
    99d3:	83 c0 1f             	add    eax,0x1f
    99d6:	8d 53 fb             	lea    edx,[rbx-0x5]
    99d9:	39 d0                	cmp    eax,edx
    99db:	0f 4f c2             	cmovg  eax,edx
    99de:	8b 94 24 bc 01 00 00 	mov    edx,DWORD PTR [rsp+0x1bc]
    99e5:	39 d0                	cmp    eax,edx
    99e7:	0f 8c 74 f9 ff ff    	jl     9361 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x531>
    99ed:	83 c0 01             	add    eax,0x1
    99f0:	89 54 24 3c          	mov    DWORD PTR [rsp+0x3c],edx
    99f4:	83 eb 01             	sub    ebx,0x1
    99f7:	45 31 c9             	xor    r9d,r9d
    99fa:	89 84 24 7c 01 00 00 	mov    DWORD PTR [rsp+0x17c],eax
    9a01:	49 8d 44 24 fe       	lea    rax,[r12-0x2]
    9a06:	4c 8b 54 24 68       	mov    r10,QWORD PTR [rsp+0x68]
    9a0b:	48 89 84 24 f8 00 00 00 	mov    QWORD PTR [rsp+0xf8],rax
    9a13:	48 8b 84 24 c0 01 00 00 	mov    rax,QWORD PTR [rsp+0x1c0]
    9a1b:	89 9c 24 94 01 00 00 	mov    DWORD PTR [rsp+0x194],ebx
    9a22:	48 63 db             	movsxd rbx,ebx
    9a25:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
    9a2a:	8b 84 24 b8 01 00 00 	mov    eax,DWORD PTR [rsp+0x1b8]
    9a31:	48 89 9c 24 80 01 00 00 	mov    QWORD PTR [rsp+0x180],rbx
    9a39:	83 e8 20             	sub    eax,0x20
    9a3c:	c7 44 24 38 80 96 98 00 	mov    DWORD PTR [rsp+0x38],0x989680
    9a44:	89 84 24 88 01 00 00 	mov    DWORD PTR [rsp+0x188],eax
    9a4b:	48 0f be 84 24 5b 01 00 00 	movsx  rax,BYTE PTR [rsp+0x15b]
    9a54:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [rsp+0x8c],0x0
    9a5f:	48 69 d0 88 13 00 00 	imul   rdx,rax,0x1388
    9a66:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
    9a6b:	48 69 c0 e8 03 00 00 	imul   rax,rax,0x3e8
    9a72:	44 89 b4 24 e0 01 00 00 	mov    DWORD PTR [rsp+0x1e0],r14d
    9a7a:	c7 84 24 94 00 00 00 00 00 00 00 	mov    DWORD PTR [rsp+0x94],0x0
    9a85:	44 89 9c 24 e4 01 00 00 	mov    DWORD PTR [rsp+0x1e4],r11d
    9a8d:	48 89 84 24 d8 01 00 00 	mov    QWORD PTR [rsp+0x1d8],rax
    9a95:	48 89 94 24 d0 01 00 00 	mov    QWORD PTR [rsp+0x1d0],rdx
    9a9d:	4c 89 fa             	mov    rdx,r15
    9aa0:	4c 89 ac 24 e8 01 00 00 	mov    QWORD PTR [rsp+0x1e8],r13
    9aa8:	45 89 cd             	mov    r13d,r9d
    9aab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    9ab0:	48 63 44 24 3c       	movsxd rax,DWORD PTR [rsp+0x3c]
    9ab5:	48 89 c3             	mov    rbx,rax
    9ab8:	48 69 c0 43 08 21 84 	imul   rax,rax,0xffffffff84210843
    9abf:	89 d9                	mov    ecx,ebx
    9ac1:	8d 73 04             	lea    esi,[rbx+0x4]
    9ac4:	c1 f9 1f             	sar    ecx,0x1f
    9ac7:	48 c1 e8 20          	shr    rax,0x20
    9acb:	01 d8                	add    eax,ebx
    9acd:	c1 f8 04             	sar    eax,0x4
    9ad0:	29 c8                	sub    eax,ecx
    9ad2:	89 c1                	mov    ecx,eax
    9ad4:	c1 e1 05             	shl    ecx,0x5
    9ad7:	29 c1                	sub    ecx,eax
    9ad9:	89 d8                	mov    eax,ebx
    9adb:	29 c8                	sub    eax,ecx
    9add:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [rsp+0x188]
    9ae4:	03 4c 24 64          	add    ecx,DWORD PTR [rsp+0x64]
    9ae8:	01 d9                	add    ecx,ebx
    9aea:	39 f1                	cmp    ecx,esi
    9aec:	0f 4c ce             	cmovl  ecx,esi
    9aef:	48 63 d9             	movsxd rbx,ecx
    9af2:	48 89 5c 24 28       	mov    QWORD PTR [rsp+0x28],rbx
    9af7:	48 89 df             	mov    rdi,rbx
    9afa:	48 8b 9c 24 80 01 00 00 	mov    rbx,QWORD PTR [rsp+0x180]
    9b02:	48 39 df             	cmp    rdi,rbx
    9b05:	0f 87 45 03 00 00    	ja     9e50 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1020>
    9b0b:	48 98                	cdqe   
    9b0d:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
    9b12:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    9b17:	8b 84 24 94 01 00 00 	mov    eax,DWORD PTR [rsp+0x194]
    9b1e:	48 83 ef 02          	sub    rdi,0x2
    9b22:	29 d8                	sub    eax,ebx
    9b24:	48 89 bc 24 c0 00 00 00 	mov    QWORD PTR [rsp+0xc0],rdi
    9b2c:	89 84 24 90 00 00 00 	mov    DWORD PTR [rsp+0x90],eax
    9b33:	41 89 c4             	mov    r12d,eax
    9b36:	e9 2a 01 00 00       	jmp    9c65 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xe35>
    9b3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    9b40:	85 c9                	test   ecx,ecx
    9b42:	0f 84 a0 01 00 00    	je     9ce8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xeb8>
    9b48:	48 8b b4 24 f0 00 00 00 	mov    rsi,QWORD PTR [rsp+0xf0]
    9b50:	4c 8b bc 24 e8 00 00 00 	mov    r15,QWORD PTR [rsp+0xe8]
    9b58:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
    9b5b:	46 0f bf 5c 06 02    	movsx  r11d,WORD PTR [rsi+r8*1+0x2]
    9b61:	44 89 5c 24 40       	mov    DWORD PTR [rsp+0x40],r11d
    9b66:	4c 8b 9c 24 c0 00 00 00 	mov    r11,QWORD PTR [rsp+0xc0]
    9b6e:	4e 0f bf 0c 1e       	movsx  r9,WORD PTR [rsi+r11*1]
    9b73:	4c 8b 9c 24 f8 00 00 00 	mov    r11,QWORD PTR [rsp+0xf8]
    9b7b:	4e 0f bf 04 1e       	movsx  r8,WORD PTR [rsi+r11*1]
    9b80:	4a 0f bf 34 3e       	movsx  rsi,WORD PTR [rsi+r15*1]
    9b85:	83 f9 01             	cmp    ecx,0x1
    9b88:	0f 84 92 01 00 00    	je     9d20 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xef0>
    9b8e:	83 f9 02             	cmp    ecx,0x2
    9b91:	0f 84 f9 02 00 00    	je     9e90 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1060>
    9b97:	44 8d 5c 0d 00       	lea    r11d,[rbp+rcx*1+0x0]
    9b9c:	41 83 fb 1e          	cmp    r11d,0x1e
    9ba0:	0f 8f 5a 03 00 00    	jg     9f00 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x10d0>
    9ba6:	4d 63 db             	movsxd r11,r11d
    9ba9:	46 8b bc 98 fc 01 00 00 	mov    r15d,DWORD PTR [rax+r11*4+0x1fc]
    9bb1:	29 cd                	sub    ebp,ecx
    9bb3:	48 8b 4c 24 50       	mov    rcx,QWORD PTR [rsp+0x50]
    9bb8:	0f af a8 80 1d 03 00 	imul   ebp,DWORD PTR [rax+0x31d80]
    9bbf:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    9bc3:	44 8b 1d 56 36 1e 00 	mov    r11d,DWORD PTR [rip+0x1e3656]        # 1ed220 <MAX_NINIO>
    9bca:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9bce:	44 39 dd             	cmp    ebp,r11d
    9bd1:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9bd5:	44 0f 4e dd          	cmovle r11d,ebp
    9bd9:	48 01 f1             	add    rcx,rsi
    9bdc:	49 8d b4 08 64 01 00 00 	lea    rsi,[r8+rcx*1+0x164]
    9be4:	48 63 4c 24 40       	movsxd rcx,DWORD PTR [rsp+0x40]
    9be9:	4f 8d 04 b6          	lea    r8,[r14+r14*4]
    9bed:	4f 8d 04 80          	lea    r8,[r8+r8*4]
    9bf1:	45 01 df             	add    r15d,r11d
    9bf4:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9bf8:	49 01 c8             	add    r8,rcx
    9bfb:	4b 8d 8c 01 64 01 00 00 	lea    rcx,[r9+r8*1+0x164]
    9c03:	8b 4c 88 08          	mov    ecx,DWORD PTR [rax+rcx*4+0x8]
    9c07:	03 4c b0 08          	add    ecx,DWORD PTR [rax+rsi*4+0x8]
    9c0b:	41 01 cf             	add    r15d,ecx
    9c0e:	41 01 ff             	add    r15d,edi
    9c11:	44 39 7c 24 38       	cmp    DWORD PTR [rsp+0x38],r15d
    9c16:	7e 3a                	jle    9c52 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xe22>
    9c18:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [rsp+0x90]
    9c1f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    9c22:	44 89 7c 24 38       	mov    DWORD PTR [rsp+0x38],r15d
    9c27:	01 d8                	add    eax,ebx
    9c29:	89 84 24 94 00 00 00 	mov    DWORD PTR [rsp+0x94],eax
    9c30:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    9c35:	48 0f af 42 20       	imul   rax,QWORD PTR [rdx+0x20]
    9c3a:	48 01 d8             	add    rax,rbx
    9c3d:	8b 04 81             	mov    eax,DWORD PTR [rcx+rax*4]
    9c40:	89 84 24 d8 00 00 00 	mov    DWORD PTR [rsp+0xd8],eax
    9c47:	8b 44 24 3c          	mov    eax,DWORD PTR [rsp+0x3c]
    9c4b:	89 84 24 8c 00 00 00 	mov    DWORD PTR [rsp+0x8c],eax
    9c52:	48 83 eb 01          	sub    rbx,0x1
    9c56:	41 83 c4 01          	add    r12d,0x1
    9c5a:	48 3b 5c 24 28       	cmp    rbx,QWORD PTR [rsp+0x28]
    9c5f:	0f 82 eb 01 00 00    	jb     9e50 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1020>
    9c65:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
    9c6a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
    9c6d:	44 89 e5             	mov    ebp,r12d
    9c70:	4c 8d 04 1b          	lea    r8,[rbx+rbx*1]
    9c74:	48 0f af 42 20       	imul   rax,QWORD PTR [rdx+0x20]
    9c79:	4c 8b 7c 24 20       	mov    r15,QWORD PTR [rsp+0x20]
    9c7e:	48 01 d8             	add    rax,rbx
    9c81:	8b 3c 81             	mov    edi,DWORD PTR [rcx+rax*4]
    9c84:	49 8b 0a             	mov    rcx,QWORD PTR [r10]
    9c87:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
    9c8b:	48 0f bf 34 59       	movsx  rsi,WORD PTR [rcx+rbx*2]
    9c90:	4a 0f bf 0c 39       	movsx  rcx,WORD PTR [rcx+r15*1]
    9c95:	48 8b 00             	mov    rax,QWORD PTR [rax]
    9c98:	4c 8d 0c 89          	lea    r9,[rcx+rcx*4]
    9c9c:	4a 8d 0c 89          	lea    rcx,[rcx+r9*4]
    9ca0:	48 01 ce             	add    rsi,rcx
    9ca3:	48 8d 0d 16 86 24 00 	lea    rcx,[rip+0x248616]        # 2522c0 <pair>
    9caa:	45 39 ec             	cmp    r12d,r13d
    9cad:	48 63 0c b1          	movsxd rcx,DWORD PTR [rcx+rsi*4]
    9cb1:	41 0f 4c ed          	cmovl  ebp,r13d
    9cb5:	48 8d 35 04 35 1e 00 	lea    rsi,[rip+0x1e3504]        # 1ed1c0 <rtype>
    9cbc:	4c 63 34 8e          	movsxd r14,DWORD PTR [rsi+rcx*4]
    9cc0:	44 89 e9             	mov    ecx,r13d
    9cc3:	41 0f 4c cc          	cmovl  ecx,r12d
    9cc7:	85 ed                	test   ebp,ebp
    9cc9:	0f 85 71 fe ff ff    	jne    9b40 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xd10>
    9ccf:	48 8b 74 24 50       	mov    rsi,QWORD PTR [rsp+0x50]
    9cd4:	49 8d 0c f6          	lea    rcx,[r14+rsi*8]
    9cd8:	44 8b 7c 88 04       	mov    r15d,DWORD PTR [rax+rcx*4+0x4]
    9cdd:	e9 2c ff ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    9ce2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    9ce8:	83 fd 1e             	cmp    ebp,0x1e
    9ceb:	0f 8f bf 00 00 00    	jg     9db0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xf80>
    9cf1:	48 63 cd             	movsxd rcx,ebp
    9cf4:	44 8b bc 88 80 01 00 00 	mov    r15d,DWORD PTR [rax+rcx*4+0x180]
    9cfc:	83 fd 01             	cmp    ebp,0x1
    9cff:	0f 85 20 01 00 00    	jne    9e25 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xff5>
    9d05:	48 8b 74 24 50       	mov    rsi,QWORD PTR [rsp+0x50]
    9d0a:	49 8d 0c f6          	lea    rcx,[r14+rsi*8]
    9d0e:	44 03 7c 88 04       	add    r15d,DWORD PTR [rax+rcx*4+0x4]
    9d13:	e9 f6 fe ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    9d18:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    9d20:	83 fd 01             	cmp    ebp,0x1
    9d23:	0f 84 e7 02 00 00    	je     a010 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x11e0>
    9d29:	83 fd 02             	cmp    ebp,0x2
    9d2c:	0f 84 8e 02 00 00    	je     9fc0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1190>
    9d32:	8d 4d 01             	lea    ecx,[rbp+0x1]
    9d35:	83 fd 1d             	cmp    ebp,0x1d
    9d38:	0f 8f 0a 03 00 00    	jg     a048 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1218>
    9d3e:	48 63 c9             	movsxd rcx,ecx
    9d41:	8b 8c 88 fc 01 00 00 	mov    ecx,DWORD PTR [rax+rcx*4+0x1fc]
    9d48:	83 ed 01             	sub    ebp,0x1
    9d4b:	0f af a8 80 1d 03 00 	imul   ebp,DWORD PTR [rax+0x31d80]
    9d52:	44 8b 1d c7 34 1e 00 	mov    r11d,DWORD PTR [rip+0x1e34c7]        # 1ed220 <MAX_NINIO>
    9d59:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    9d5d:	44 39 dd             	cmp    ebp,r11d
    9d60:	41 0f 4f eb          	cmovg  ebp,r11d
    9d64:	4c 8b 5c 24 50       	mov    r11,QWORD PTR [rsp+0x50]
    9d69:	4f 8d 1c 9b          	lea    r11,[r11+r11*4]
    9d6d:	01 e9                	add    ecx,ebp
    9d6f:	4f 8d 1c 9b          	lea    r11,[r11+r11*4]
    9d73:	49 01 f3             	add    r11,rsi
    9d76:	4b 8d b4 18 2c 02 00 00 	lea    rsi,[r8+r11*1+0x22c]
    9d7e:	4c 63 44 24 40       	movsxd r8,DWORD PTR [rsp+0x40]
    9d83:	4f 8d 1c b6          	lea    r11,[r14+r14*4]
    9d87:	4f 8d 1c 9b          	lea    r11,[r11+r11*4]
    9d8b:	4f 8d 04 80          	lea    r8,[r8+r8*4]
    9d8f:	4d 01 c3             	add    r11,r8
    9d92:	4f 8d 84 19 2c 02 00 00 	lea    r8,[r9+r11*1+0x22c]
    9d9a:	46 8b 7c 80 08       	mov    r15d,DWORD PTR [rax+r8*4+0x8]
    9d9f:	44 03 7c b0 08       	add    r15d,DWORD PTR [rax+rsi*4+0x8]
    9da4:	41 01 cf             	add    r15d,ecx
    9da7:	e9 62 fe ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    9dac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9db0:	f2 0f 10 b8 90 1d 03 00 	movsd  xmm7,QWORD PTR [rax+0x31d90]
    9db8:	66 0f ef c0          	pxor   xmm0,xmm0
    9dbc:	44 8b b8 f8 01 00 00 	mov    r15d,DWORD PTR [rax+0x1f8]
    9dc3:	4c 89 94 24 50 01 00 00 	mov    QWORD PTR [rsp+0x150],r10
    9dcb:	48 89 94 24 48 01 00 00 	mov    QWORD PTR [rsp+0x148],rdx
    9dd3:	f2 0f 2a c5          	cvtsi2sd xmm0,ebp
    9dd7:	f2 0f 5e 05 31 ab 02 00 	divsd  xmm0,QWORD PTR [rip+0x2ab31]        # 34910 <Law_and_Order+0x70>
    9ddf:	89 bc 24 40 01 00 00 	mov    DWORD PTR [rsp+0x140],edi
    9de6:	48 89 84 24 38 01 00 00 	mov    QWORD PTR [rsp+0x138],rax
    9dee:	f2 0f 11 7c 24 40    	movsd  QWORD PTR [rsp+0x40],xmm7
    9df4:	e8 27 9a ff ff       	call   3820 <log@plt>
    9df9:	f2 0f 59 44 24 40    	mulsd  xmm0,QWORD PTR [rsp+0x40]
    9dff:	48 8b 84 24 38 01 00 00 	mov    rax,QWORD PTR [rsp+0x138]
    9e07:	8b bc 24 40 01 00 00 	mov    edi,DWORD PTR [rsp+0x140]
    9e0e:	48 8b 94 24 48 01 00 00 	mov    rdx,QWORD PTR [rsp+0x148]
    9e16:	4c 8b 94 24 50 01 00 00 	mov    r10,QWORD PTR [rsp+0x150]
    9e1e:	f2 0f 2c c8          	cvttsd2si ecx,xmm0
    9e22:	41 01 cf             	add    r15d,ecx
    9e25:	80 bc 24 5b 01 00 00 02 	cmp    BYTE PTR [rsp+0x15b],0x2
    9e2d:	7e 07                	jle    9e36 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1006>
    9e2f:	44 03 b8 d4 1d 03 00 	add    r15d,DWORD PTR [rax+0x31dd4]
    9e36:	41 83 fe 02          	cmp    r14d,0x2
    9e3a:	0f 8e ce fd ff ff    	jle    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    9e40:	44 03 b8 d4 1d 03 00 	add    r15d,DWORD PTR [rax+0x31dd4]
    9e47:	e9 c2 fd ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    9e4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    9e50:	83 44 24 3c 01       	add    DWORD PTR [rsp+0x3c],0x1
    9e55:	41 83 c5 01          	add    r13d,0x1
    9e59:	8b 44 24 3c          	mov    eax,DWORD PTR [rsp+0x3c]
    9e5d:	48 83 44 24 20 02    	add    QWORD PTR [rsp+0x20],0x2
    9e63:	3b 84 24 7c 01 00 00 	cmp    eax,DWORD PTR [rsp+0x17c]
    9e6a:	0f 85 40 fc ff ff    	jne    9ab0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xc80>
    9e70:	44 8b b4 24 e0 01 00 00 	mov    r14d,DWORD PTR [rsp+0x1e0]
    9e78:	44 8b 9c 24 e4 01 00 00 	mov    r11d,DWORD PTR [rsp+0x1e4]
    9e80:	49 89 d7             	mov    r15,rdx
    9e83:	4c 8b ac 24 e8 01 00 00 	mov    r13,QWORD PTR [rsp+0x1e8]
    9e8b:	e9 ef f4 ff ff       	jmp    937f <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x54f>
    9e90:	83 fd 02             	cmp    ebp,0x2
    9e93:	0f 84 27 03 00 00    	je     a1c0 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1390>
    9e99:	83 fd 03             	cmp    ebp,0x3
    9e9c:	0f 85 f5 fc ff ff    	jne    9b97 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xd67>
    9ea2:	48 8b 4c 24 50       	mov    rcx,QWORD PTR [rsp+0x50]
    9ea7:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    9eab:	44 8b 98 80 1d 03 00 	mov    r11d,DWORD PTR [rax+0x31d80]
    9eb2:	44 03 98 10 02 00 00 	add    r11d,DWORD PTR [rax+0x210]
    9eb9:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9ebd:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9ec1:	48 01 f1             	add    rcx,rsi
    9ec4:	48 63 74 24 40       	movsxd rsi,DWORD PTR [rsp+0x40]
    9ec9:	49 8d 8c 08 f4 02 00 00 	lea    rcx,[r8+rcx*1+0x2f4]
    9ed1:	4f 8d 04 b6          	lea    r8,[r14+r14*4]
    9ed5:	4f 8d 04 80          	lea    r8,[r8+r8*4]
    9ed9:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    9edd:	4c 01 c6             	add    rsi,r8
    9ee0:	49 8d b4 31 f4 02 00 00 	lea    rsi,[r9+rsi*1+0x2f4]
    9ee8:	8b 74 b0 08          	mov    esi,DWORD PTR [rax+rsi*4+0x8]
    9eec:	03 74 88 08          	add    esi,DWORD PTR [rax+rcx*4+0x8]
    9ef0:	41 89 f7             	mov    r15d,esi
    9ef3:	45 01 df             	add    r15d,r11d
    9ef6:	e9 13 fd ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    9efb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    9f00:	f2 0f 10 b0 90 1d 03 00 	movsd  xmm6,QWORD PTR [rax+0x31d90]
    9f08:	66 0f ef c0          	pxor   xmm0,xmm0
    9f0c:	44 8b b8 74 02 00 00 	mov    r15d,DWORD PTR [rax+0x274]
    9f13:	4c 89 94 24 70 01 00 00 	mov    QWORD PTR [rsp+0x170],r10
    9f1b:	f2 41 0f 2a c3       	cvtsi2sd xmm0,r11d
    9f20:	48 89 94 24 68 01 00 00 	mov    QWORD PTR [rsp+0x168],rdx
    9f28:	f2 0f 5e 05 e0 a9 02 00 	divsd  xmm0,QWORD PTR [rip+0x2a9e0]        # 34910 <Law_and_Order+0x70>
    9f30:	89 8c 24 60 01 00 00 	mov    DWORD PTR [rsp+0x160],ecx
    9f37:	89 b4 24 78 01 00 00 	mov    DWORD PTR [rsp+0x178],esi
    9f3e:	44 89 84 24 5c 01 00 00 	mov    DWORD PTR [rsp+0x15c],r8d
    9f46:	44 89 8c 24 50 01 00 00 	mov    DWORD PTR [rsp+0x150],r9d
    9f4e:	89 bc 24 48 01 00 00 	mov    DWORD PTR [rsp+0x148],edi
    9f55:	48 89 84 24 40 01 00 00 	mov    QWORD PTR [rsp+0x140],rax
    9f5d:	f2 0f 11 b4 24 38 01 00 00 	movsd  QWORD PTR [rsp+0x138],xmm6
    9f66:	e8 b5 98 ff ff       	call   3820 <log@plt>
    9f6b:	4c 8b 94 24 70 01 00 00 	mov    r10,QWORD PTR [rsp+0x170]
    9f73:	f2 0f 59 84 24 38 01 00 00 	mulsd  xmm0,QWORD PTR [rsp+0x138]
    9f7c:	48 8b 94 24 68 01 00 00 	mov    rdx,QWORD PTR [rsp+0x168]
    9f84:	8b 8c 24 60 01 00 00 	mov    ecx,DWORD PTR [rsp+0x160]
    9f8b:	48 63 b4 24 78 01 00 00 	movsxd rsi,DWORD PTR [rsp+0x178]
    9f93:	4c 63 84 24 5c 01 00 00 	movsxd r8,DWORD PTR [rsp+0x15c]
    9f9b:	4c 63 8c 24 50 01 00 00 	movsxd r9,DWORD PTR [rsp+0x150]
    9fa3:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [rsp+0x148]
    9faa:	48 8b 84 24 40 01 00 00 	mov    rax,QWORD PTR [rsp+0x140]
    9fb2:	f2 44 0f 2c d8       	cvttsd2si r11d,xmm0
    9fb7:	45 01 df             	add    r15d,r11d
    9fba:	e9 f2 fb ff ff       	jmp    9bb1 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xd81>
    9fbf:	90                   	nop
    9fc0:	48 63 4c 24 40       	movsxd rcx,DWORD PTR [rsp+0x40]
    9fc5:	41 83 fd 01          	cmp    r13d,0x1
    9fc9:	0f 84 41 02 00 00    	je     a210 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x13e0>
    9fcf:	4c 8b 7c 24 50       	mov    r15,QWORD PTR [rsp+0x50]
    9fd4:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9fd8:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    9fdc:	4d 69 f6 e8 03 00 00 	imul   r14,r14,0x3e8
    9fe3:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    9fe7:	48 01 ce             	add    rsi,rcx
    9fea:	4c 89 f9             	mov    rcx,r15
    9fed:	48 c1 e1 05          	shl    rcx,0x5
    9ff1:	4c 29 f9             	sub    rcx,r15
    9ff4:	49 8d 0c 8f          	lea    rcx,[r15+rcx*4]
    9ff8:	48 01 f1             	add    rcx,rsi
    9ffb:	49 01 ce             	add    r14,rcx
    9ffe:	4b 8d 8c 31 dc 0b 00 00 	lea    rcx,[r9+r14*1+0xbdc]
    a006:	44 8b 7c 88 08       	mov    r15d,DWORD PTR [rax+rcx*4+0x8]
    a00b:	e9 fe fb ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    a010:	4b 8d 0c b6          	lea    rcx,[r14+r14*4]
    a014:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    a018:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    a01c:	48 01 f1             	add    rcx,rsi
    a01f:	48 8b 74 24 50       	mov    rsi,QWORD PTR [rsp+0x50]
    a024:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    a028:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    a02c:	48 8d 0c f1          	lea    rcx,[rcx+rsi*8]
    a030:	49 8d 8c 08 9c 05 00 00 	lea    rcx,[r8+rcx*1+0x59c]
    a038:	44 8b 7c 88 08       	mov    r15d,DWORD PTR [rax+rcx*4+0x8]
    a03d:	e9 cc fb ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    a042:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    a048:	f2 0f 10 a8 90 1d 03 00 	movsd  xmm5,QWORD PTR [rax+0x31d90]
    a050:	66 0f ef c0          	pxor   xmm0,xmm0
    a054:	44 8b b8 74 02 00 00 	mov    r15d,DWORD PTR [rax+0x274]
    a05b:	4c 89 94 24 68 01 00 00 	mov    QWORD PTR [rsp+0x168],r10
    a063:	f2 0f 2a c1          	cvtsi2sd xmm0,ecx
    a067:	48 89 94 24 60 01 00 00 	mov    QWORD PTR [rsp+0x160],rdx
    a06f:	f2 0f 5e 05 99 a8 02 00 	divsd  xmm0,QWORD PTR [rip+0x2a899]        # 34910 <Law_and_Order+0x70>
    a077:	89 b4 24 78 01 00 00 	mov    DWORD PTR [rsp+0x178],esi
    a07e:	44 89 84 24 5c 01 00 00 	mov    DWORD PTR [rsp+0x15c],r8d
    a086:	44 89 8c 24 50 01 00 00 	mov    DWORD PTR [rsp+0x150],r9d
    a08e:	89 bc 24 48 01 00 00 	mov    DWORD PTR [rsp+0x148],edi
    a095:	48 89 84 24 40 01 00 00 	mov    QWORD PTR [rsp+0x140],rax
    a09d:	f2 0f 11 ac 24 38 01 00 00 	movsd  QWORD PTR [rsp+0x138],xmm5
    a0a6:	e8 75 97 ff ff       	call   3820 <log@plt>
    a0ab:	4c 8b 94 24 68 01 00 00 	mov    r10,QWORD PTR [rsp+0x168]
    a0b3:	f2 0f 59 84 24 38 01 00 00 	mulsd  xmm0,QWORD PTR [rsp+0x138]
    a0bc:	48 8b 94 24 60 01 00 00 	mov    rdx,QWORD PTR [rsp+0x160]
    a0c4:	48 63 b4 24 78 01 00 00 	movsxd rsi,DWORD PTR [rsp+0x178]
    a0cc:	4c 63 84 24 5c 01 00 00 	movsxd r8,DWORD PTR [rsp+0x15c]
    a0d4:	4c 63 8c 24 50 01 00 00 	movsxd r9,DWORD PTR [rsp+0x150]
    a0dc:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [rsp+0x148]
    a0e3:	48 8b 84 24 40 01 00 00 	mov    rax,QWORD PTR [rsp+0x140]
    a0eb:	f2 0f 2c c8          	cvttsd2si ecx,xmm0
    a0ef:	44 01 f9             	add    ecx,r15d
    a0f2:	e9 51 fc ff ff       	jmp    9d48 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xf18>
    a0f7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    a100:	48 8b 84 24 c8 00 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    a108:	4c 63 84 24 94 00 00 00 	movsxd r8,DWORD PTR [rsp+0x94]
    a110:	4c 63 8c 24 8c 00 00 00 	movsxd r9,DWORD PTR [rsp+0x8c]
    a118:	48 8b 00             	mov    rax,QWORD PTR [rax]
    a11b:	4b 8d 14 40          	lea    rdx,[r8+r8*2]
    a11f:	48 8d 04 d0          	lea    rax,[rax+rdx*8]
    a123:	4c 8b 50 08          	mov    r10,QWORD PTR [rax+0x8]
    a127:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    a12a:	4c 89 d0             	mov    rax,r10
    a12d:	48 29 f8             	sub    rax,rdi
    a130:	48 c1 f8 04          	sar    rax,0x4
    a134:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    a138:	48 85 c0             	test   rax,rax
    a13b:	7e 28                	jle    a165 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1335>
    a13d:	48 89 c1             	mov    rcx,rax
    a140:	48 d1 f9             	sar    rcx,1
    a143:	48 89 ca             	mov    rdx,rcx
    a146:	48 c1 e2 04          	shl    rdx,0x4
    a14a:	48 01 fa             	add    rdx,rdi
    a14d:	48 63 32             	movsxd rsi,DWORD PTR [rdx]
    a150:	49 39 f1             	cmp    r9,rsi
    a153:	73 63                	jae    a1b8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1388>
    a155:	48 29 c8             	sub    rax,rcx
    a158:	48 8d 7a 10          	lea    rdi,[rdx+0x10]
    a15c:	48 83 e8 01          	sub    rax,0x1
    a160:	48 85 c0             	test   rax,rax
    a163:	7f d8                	jg     a13d <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x130d>
    a165:	49 39 fa             	cmp    r10,rdi
    a168:	74 0f                	je     a179 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1349>
    a16a:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [rsp+0x8c]
    a171:	3b 07                	cmp    eax,DWORD PTR [rdi]
    a173:	0f 84 d1 00 00 00    	je     a24a <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x141a>
    a179:	48 8b 74 24 30       	mov    rsi,QWORD PTR [rsp+0x30]
    a17e:	4c 89 ea             	mov    rdx,r13
    a181:	44 89 5c 24 38       	mov    DWORD PTR [rsp+0x38],r11d
    a186:	48 63 8c 24 8c 00 00 00 	movsxd rcx,DWORD PTR [rsp+0x8c]
    a18e:	44 8b 8c 24 d8 00 00 00 	mov    r9d,DWORD PTR [rsp+0xd8]
    a196:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    a19e:	e8 ed 2f 00 00       	call   d190 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)>
    a1a3:	8b b4 24 10 02 00 00 	mov    esi,DWORD PTR [rsp+0x210]
    a1aa:	44 8b 5c 24 38       	mov    r11d,DWORD PTR [rsp+0x38]
    a1af:	e9 33 f2 ff ff       	jmp    93e7 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x5b7>
    a1b4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    a1b8:	48 89 c8             	mov    rax,rcx
    a1bb:	e9 78 ff ff ff       	jmp    a138 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x1308>
    a1c0:	4d 69 f6 71 02 00 00 	imul   r14,r14,0x271
    a1c7:	4f 8d 0c 89          	lea    r9,[r9+r9*4]
    a1cb:	48 63 4c 24 40       	movsxd rcx,DWORD PTR [rsp+0x40]
    a1d0:	4f 8d 0c 89          	lea    r9,[r9+r9*4]
    a1d4:	4d 01 ce             	add    r14,r9
    a1d7:	49 89 f1             	mov    r9,rsi
    a1da:	49 c1 e1 05          	shl    r9,0x5
    a1de:	49 29 f1             	sub    r9,rsi
    a1e1:	4a 8d 34 8e          	lea    rsi,[rsi+r9*4]
    a1e5:	49 01 f6             	add    r14,rsi
    a1e8:	48 8d 34 89          	lea    rsi,[rcx+rcx*4]
    a1ec:	4c 01 f6             	add    rsi,r14
    a1ef:	48 03 b4 24 d0 01 00 00 	add    rsi,QWORD PTR [rsp+0x1d0]
    a1f7:	49 8d 8c 30 1c 2b 00 00 	lea    rcx,[r8+rsi*1+0x2b1c]
    a1ff:	44 8b 7c 88 08       	mov    r15d,DWORD PTR [rax+rcx*4+0x8]
    a204:	e9 05 fa ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    a209:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    a210:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    a214:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    a218:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    a21c:	48 01 f1             	add    rcx,rsi
    a21f:	4c 89 f6             	mov    rsi,r14
    a222:	48 c1 e6 05          	shl    rsi,0x5
    a226:	4c 29 f6             	sub    rsi,r14
    a229:	49 8d 34 b6          	lea    rsi,[r14+rsi*4]
    a22d:	48 01 f1             	add    rcx,rsi
    a230:	48 03 8c 24 d8 01 00 00 	add    rcx,QWORD PTR [rsp+0x1d8]
    a238:	49 8d 8c 08 dc 0b 00 00 	lea    rcx,[r8+rcx*1+0xbdc]
    a240:	44 8b 7c 88 08       	mov    r15d,DWORD PTR [rax+rcx*4+0x8]
    a245:	e9 c4 f9 ff ff       	jmp    9c0e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0xdde>
    a24a:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    a252:	44 89 5c 24 38       	mov    DWORD PTR [rsp+0x38],r11d
    a257:	e8 64 25 00 00       	call   c7c0 <avoid_trace_arrow(TraceArrows&)>
    a25c:	8b b4 24 10 02 00 00 	mov    esi,DWORD PTR [rsp+0x210]
    a263:	44 8b 5c 24 38       	mov    r11d,DWORD PTR [rsp+0x38]
    a268:	e9 7a f1 ff ff       	jmp    93e7 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x5b7>
    a26d:	44 8b 4c 24 60       	mov    r9d,DWORD PTR [rsp+0x60]
    a272:	44 8b 44 24 14       	mov    r8d,DWORD PTR [rsp+0x14]
    a277:	44 89 5c 24 38       	mov    DWORD PTR [rsp+0x38],r11d
    a27c:	48 8b 94 24 f0 00 00 00 	mov    rdx,QWORD PTR [rsp+0xf0]
    a284:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
    a288:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
    a28d:	48 8b bc 24 f0 01 00 00 	mov    rdi,QWORD PTR [rsp+0x1f0]
    a295:	e8 f6 cc ff ff       	call   6f90 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)>
    a29a:	48 8b ac 24 f8 01 00 00 	mov    rbp,QWORD PTR [rsp+0x1f8]
    a2a2:	44 8b 5c 24 38       	mov    r11d,DWORD PTR [rsp+0x38]
    a2a7:	89 84 24 90 01 00 00 	mov    DWORD PTR [rsp+0x190],eax
    a2ae:	48 8b 84 24 10 01 00 00 	mov    rax,QWORD PTR [rsp+0x110]
    a2b6:	48 8d 54 05 00       	lea    rdx,[rbp+rax*1+0x0]
    a2bb:	e9 8e f0 ff ff       	jmp    934e <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x51e>
    a2c0:	48 c7 04 24 00 00 00 00 	mov    QWORD PTR [rsp],0x0
    a2c8:	4d 89 e0             	mov    r8,r12
    a2cb:	31 c9                	xor    ecx,ecx
    a2cd:	e9 17 f5 ff ff       	jmp    97e9 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x9b9>
    a2d2:	89 de                	mov    esi,ebx
    a2d4:	48 8b bc 24 08 01 00 00 	mov    rdi,QWORD PTR [rsp+0x108]
    a2dc:	83 c6 1f             	add    esi,0x1f
    a2df:	48 63 f6             	movsxd rsi,esi
    a2e2:	e8 69 2a 00 00       	call   cd50 <gc_row(TraceArrows&, unsigned long)>
    a2e7:	e9 ed f3 ff ff       	jmp    96d9 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x8a9>
    a2ec:	48 8d 0d 95 97 02 00 	lea    rcx,[rip+0x29795]        # 33a88 <_IO_stdin_used+0xa88>
    a2f3:	ba dd 03 00 00       	mov    edx,0x3dd
    a2f8:	48 8d 35 b9 95 02 00 	lea    rsi,[rip+0x295b9]        # 338b8 <_IO_stdin_used+0x8b8>
    a2ff:	48 8d 3d 8b 98 02 00 	lea    rdi,[rip+0x2988b]        # 33b91 <_IO_stdin_used+0xb91>
    a306:	e8 c5 94 ff ff       	call   37d0 <__assert_fail@plt>
    a30b:	e8 e0 95 ff ff       	call   38f0 <__stack_chk_fail@plt>
    a310:	48 8d 3d 49 98 02 00 	lea    rdi,[rip+0x29849]        # 33b60 <_IO_stdin_used+0xb60>
    a317:	e8 64 94 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    a31c:	c6 44 24 38 01       	mov    BYTE PTR [rsp+0x38],0x1
    a321:	e9 c2 ed ff ff       	jmp    90e8 <int fold<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, LocARNA::Matrix<int>, SparseMFEFold::{unnamed type#1}, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, short*, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >, vrna_param_s*, TraceArrows, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LocARNA::Matrix<int>&, SparseMFEFold::{unnamed type#1} const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > >&, short* const&, std::vector<SparseMFEFold::{unnamed type#1}<quatret, std::allocator<std::vector> >, std::allocator<std::allocator<std::vector> > > const&, vrna_param_s* const&, TraceArrows&, SparseMFEFold::{unnamed type#1}<int, std::allocator<int> >&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int const*, int const, int const, int const)+0x2b8>
    a326:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000a330 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>:
    a330:	f3 0f 1e fa          	endbr64 
    a334:	41 57                	push   r15
    a336:	4d 89 c7             	mov    r15,r8
    a339:	41 56                	push   r14
    a33b:	41 55                	push   r13
    a33d:	41 54                	push   r12
    a33f:	55                   	push   rbp
    a340:	53                   	push   rbx
    a341:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
    a348:	48 8b 84 24 e0 00 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    a350:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
    a355:	48 8b bc 24 28 01 00 00 	mov    rdi,QWORD PTR [rsp+0x128]
    a35d:	8b 9c 24 18 01 00 00 	mov    ebx,DWORD PTR [rsp+0x118]
    a364:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
    a369:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
    a36e:	48 8b 84 24 e8 00 00 00 	mov    rax,QWORD PTR [rsp+0xe8]
    a376:	48 89 7c 24 58       	mov    QWORD PTR [rsp+0x58],rdi
    a37b:	48 8b bc 24 30 01 00 00 	mov    rdi,QWORD PTR [rsp+0x130]
    a383:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    a388:	48 8b 84 24 f8 00 00 00 	mov    rax,QWORD PTR [rsp+0xf8]
    a390:	48 89 74 24 08       	mov    QWORD PTR [rsp+0x8],rsi
    a395:	4c 8b b4 24 f0 00 00 00 	mov    r14,QWORD PTR [rsp+0xf0]
    a39d:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    a3a2:	48 8b 84 24 00 01 00 00 	mov    rax,QWORD PTR [rsp+0x100]
    a3aa:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
    a3af:	8b 94 24 20 01 00 00 	mov    edx,DWORD PTR [rsp+0x120]
    a3b6:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    a3bb:	48 8b 84 24 08 01 00 00 	mov    rax,QWORD PTR [rsp+0x108]
    a3c3:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    a3c8:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
    a3cd:	8b 84 24 10 01 00 00 	mov    eax,DWORD PTR [rsp+0x110]
    a3d4:	48 89 7c 24 60       	mov    QWORD PTR [rsp+0x60],rdi
    a3d9:	89 44 24 68          	mov    DWORD PTR [rsp+0x68],eax
    a3dd:	8d 68 03             	lea    ebp,[rax+0x3]
    a3e0:	48 63 c3             	movsxd rax,ebx
    a3e3:	48 83 e8 01          	sub    rax,0x1
    a3e7:	eb 2f                	jmp    a418 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xe8>
    a3e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    a3f0:	4d 8b 06             	mov    r8,QWORD PTR [r14]
    a3f3:	4d 8b 0f             	mov    r9,QWORD PTR [r15]
    a3f6:	44 8d 53 ff          	lea    r10d,[rbx-0x1]
    a3fa:	4c 8d 58 ff          	lea    r11,[rax-0x1]
    a3fe:	41 8b 0c 80          	mov    ecx,DWORD PTR [r8+rax*4]
    a402:	41 8b b9 98 1d 03 00 	mov    edi,DWORD PTR [r9+0x31d98]
    a409:	8d 34 39             	lea    esi,[rcx+rdi*1]
    a40c:	39 d6                	cmp    esi,edx
    a40e:	75 20                	jne    a430 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x100>
    a410:	4c 89 d8             	mov    rax,r11
    a413:	89 ca                	mov    edx,ecx
    a415:	44 89 d3             	mov    ebx,r10d
    a418:	39 eb                	cmp    ebx,ebp
    a41a:	7f d4                	jg     a3f0 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xc0>
    a41c:	48 81 c4 a8 00 00 00 	add    rsp,0xa8
    a423:	5b                   	pop    rbx
    a424:	5d                   	pop    rbp
    a425:	41 5c                	pop    r12
    a427:	41 5d                	pop    r13
    a429:	41 5e                	pop    r14
    a42b:	41 5f                	pop    r15
    a42d:	c3                   	ret    
    a42e:	66 90                	xchg   ax,ax
    a430:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    a435:	48 63 f3             	movsxd rsi,ebx
    a438:	8d 6b 01             	lea    ebp,[rbx+0x1]
    a43b:	48 89 b4 24 90 00 00 00 	mov    QWORD PTR [rsp+0x90],rsi
    a443:	48 8d 34 76          	lea    rsi,[rsi+rsi*2]
    a447:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
    a44a:	48 8d 0c f1          	lea    rcx,[rcx+rsi*8]
    a44e:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
    a451:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
    a455:	48 39 ce             	cmp    rsi,rcx
    a458:	0f 84 b2 05 00 00    	je     aa10 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6e0>
    a45e:	4c 89 4c 24 70       	mov    QWORD PTR [rsp+0x70],r9
    a463:	44 8b 4c 24 68       	mov    r9d,DWORD PTR [rsp+0x68]
    a468:	4c 89 bc 24 80 00 00 00 	mov    QWORD PTR [rsp+0x80],r15
    a470:	49 89 cf             	mov    r15,rcx
    a473:	44 89 54 24 6c       	mov    DWORD PTR [rsp+0x6c],r10d
    a478:	48 89 44 24 78       	mov    QWORD PTR [rsp+0x78],rax
    a47d:	4c 89 b4 24 88 00 00 00 	mov    QWORD PTR [rsp+0x88],r14
    a485:	eb 4b                	jmp    a4d2 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1a2>
    a487:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    a490:	44 8b 6e 08          	mov    r13d,DWORD PTR [rsi+0x8]
    a494:	8d 4d ff             	lea    ecx,[rbp-0x1]
    a497:	48 63 c1             	movsxd rax,ecx
    a49a:	45 8b 14 80          	mov    r10d,DWORD PTR [r8+rax*4]
    a49e:	45 89 eb             	mov    r11d,r13d
    a4a1:	41 c1 fb 02          	sar    r11d,0x2
    a4a5:	47 8d 24 1a          	lea    r12d,[r10+r11*1]
    a4a9:	41 39 d4             	cmp    r12d,edx
    a4ac:	0f 84 5e 01 00 00    	je     a610 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x2e0>
    a4b2:	89 e8                	mov    eax,ebp
    a4b4:	44 29 c8             	sub    eax,r9d
    a4b7:	0f af c7             	imul   eax,edi
    a4ba:	44 01 d8             	add    eax,r11d
    a4bd:	39 d0                	cmp    eax,edx
    a4bf:	0f 84 eb 02 00 00    	je     a7b0 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x480>
    a4c5:	48 83 c6 10          	add    rsi,0x10
    a4c9:	49 39 f7             	cmp    r15,rsi
    a4cc:	0f 84 1e 03 00 00    	je     a7f0 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x4c0>
    a4d2:	89 e9                	mov    ecx,ebp
    a4d4:	8b 2e                	mov    ebp,DWORD PTR [rsi]
    a4d6:	44 39 cd             	cmp    ebp,r9d
    a4d9:	7d b5                	jge    a490 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x160>
    a4db:	8d 71 ff             	lea    esi,[rcx-0x1]
    a4de:	44 8b 54 24 6c       	mov    r10d,DWORD PTR [rsp+0x6c]
    a4e3:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    a4e8:	89 cd                	mov    ebp,ecx
    a4ea:	89 b4 24 98 00 00 00 	mov    DWORD PTR [rsp+0x98],esi
    a4f1:	48 63 f6             	movsxd rsi,esi
    a4f4:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    a4f9:	41 bb 80 96 98 00    	mov    r11d,0x989680
    a4ff:	41 8b 34 b0          	mov    esi,DWORD PTR [r8+rsi*4]
    a503:	c7 44 24 6c 80 96 98 00 	mov    DWORD PTR [rsp+0x6c],0x989680
    a50b:	4c 8b bc 24 80 00 00 00 	mov    r15,QWORD PTR [rsp+0x80]
    a513:	4c 8b b4 24 88 00 00 00 	mov    r14,QWORD PTR [rsp+0x88]
    a51b:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [rsp+0x9c],esi
    a522:	44 8d a6 80 96 98 00 	lea    r12d,[rsi+0x989680]
    a529:	41 83 b9 ac 35 03 00 01 	cmp    DWORD PTR [r9+0x335ac],0x1
    a531:	44 89 64 24 70       	mov    DWORD PTR [rsp+0x70],r12d
    a536:	0f 84 3d 04 00 00    	je     a979 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x649>
    a53c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    a540:	3b 54 24 70          	cmp    edx,DWORD PTR [rsp+0x70]
    a544:	0f 84 f1 02 00 00    	je     a83b <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x50b>
    a54a:	89 e8                	mov    eax,ebp
    a54c:	2b 44 24 68          	sub    eax,DWORD PTR [rsp+0x68]
    a550:	0f af f8             	imul   edi,eax
    a553:	44 01 df             	add    edi,r11d
    a556:	39 d7                	cmp    edi,edx
    a558:	0f 85 2e 05 00 00    	jne    aa8c <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x75c>
    a55e:	48 8b 44 24 60       	mov    rax,QWORD PTR [rsp+0x60]
    a563:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
    a568:	4d 89 f8             	mov    r8,r15
    a56b:	89 9c 24 18 01 00 00 	mov    DWORD PTR [rsp+0x118],ebx
    a572:	89 ac 24 10 01 00 00 	mov    DWORD PTR [rsp+0x110],ebp
    a579:	48 8b 4c 24 28       	mov    rcx,QWORD PTR [rsp+0x28]
    a57e:	48 89 84 24 30 01 00 00 	mov    QWORD PTR [rsp+0x130],rax
    a586:	48 8b 44 24 58       	mov    rax,QWORD PTR [rsp+0x58]
    a58b:	4c 89 b4 24 f0 00 00 00 	mov    QWORD PTR [rsp+0xf0],r14
    a593:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
    a598:	48 89 84 24 28 01 00 00 	mov    QWORD PTR [rsp+0x128],rax
    a5a0:	8b 44 24 6c          	mov    eax,DWORD PTR [rsp+0x6c]
    a5a4:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    a5a9:	48 8b 7c 24 18       	mov    rdi,QWORD PTR [rsp+0x18]
    a5ae:	89 84 24 20 01 00 00 	mov    DWORD PTR [rsp+0x120],eax
    a5b5:	48 8b 44 24 50       	mov    rax,QWORD PTR [rsp+0x50]
    a5ba:	48 89 84 24 08 01 00 00 	mov    QWORD PTR [rsp+0x108],rax
    a5c2:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
    a5c7:	48 89 84 24 00 01 00 00 	mov    QWORD PTR [rsp+0x100],rax
    a5cf:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    a5d4:	48 89 84 24 f8 00 00 00 	mov    QWORD PTR [rsp+0xf8],rax
    a5dc:	48 8b 44 24 38       	mov    rax,QWORD PTR [rsp+0x38]
    a5e1:	48 89 84 24 e8 00 00 00 	mov    QWORD PTR [rsp+0xe8],rax
    a5e9:	48 8b 44 24 30       	mov    rax,QWORD PTR [rsp+0x30]
    a5ee:	48 89 84 24 e0 00 00 00 	mov    QWORD PTR [rsp+0xe0],rax
    a5f6:	48 81 c4 a8 00 00 00 	add    rsp,0xa8
    a5fd:	5b                   	pop    rbx
    a5fe:	5d                   	pop    rbp
    a5ff:	41 5c                	pop    r12
    a601:	41 5d                	pop    r13
    a603:	41 5e                	pop    r14
    a605:	41 5f                	pop    r15
    a607:	e9 64 09 00 00       	jmp    af70 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>
    a60c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    a610:	8b 76 04             	mov    esi,DWORD PTR [rsi+0x4]
    a613:	44 89 94 24 9c 00 00 00 	mov    DWORD PTR [rsp+0x9c],r10d
    a61b:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    a620:	44 8b 54 24 6c       	mov    r10d,DWORD PTR [rsp+0x6c]
    a625:	89 54 24 70          	mov    DWORD PTR [rsp+0x70],edx
    a629:	89 8c 24 98 00 00 00 	mov    DWORD PTR [rsp+0x98],ecx
    a630:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    a635:	89 74 24 6c          	mov    DWORD PTR [rsp+0x6c],esi
    a639:	4c 8b bc 24 80 00 00 00 	mov    r15,QWORD PTR [rsp+0x80]
    a641:	4c 8b b4 24 88 00 00 00 	mov    r14,QWORD PTR [rsp+0x88]
    a649:	41 83 e5 03          	and    r13d,0x3
    a64d:	41 80 fd 02          	cmp    r13b,0x2
    a651:	0f 84 d9 00 00 00    	je     a730 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x400>
    a657:	41 80 fd 03          	cmp    r13b,0x3
    a65b:	0f 84 c8 fe ff ff    	je     a529 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1f9>
    a661:	41 80 fd 01          	cmp    r13b,0x1
    a665:	74 59                	je     a6c0 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x390>
    a667:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    a66c:	48 8b b4 24 90 00 00 00 	mov    rsi,QWORD PTR [rsp+0x90]
    a674:	48 8b 00             	mov    rax,QWORD PTR [rax]
    a677:	48 0f bf 0c 70       	movsx  rcx,WORD PTR [rax+rsi*2]
    a67c:	48 63 f5             	movsxd rsi,ebp
    a67f:	48 0f bf 04 70       	movsx  rax,WORD PTR [rax+rsi*2]
    a684:	48 8d 34 80          	lea    rsi,[rax+rax*4]
    a688:	48 8d 04 b0          	lea    rax,[rax+rsi*4]
    a68c:	48 01 c1             	add    rcx,rax
    a68f:	48 8d 05 2a 7c 24 00 	lea    rax,[rip+0x247c2a]        # 2522c0 <pair>
    a696:	48 0f be 04 88       	movsx  rax,BYTE PTR [rax+rcx*4]
    a69b:	31 c9                	xor    ecx,ecx
    a69d:	83 f8 02             	cmp    eax,0x2
    a6a0:	7e 07                	jle    a6a9 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x379>
    a6a2:	41 8b 89 d4 1d 03 00 	mov    ecx,DWORD PTR [r9+0x31dd4]
    a6a9:	41 03 8c 81 9c 1d 03 00 	add    ecx,DWORD PTR [r9+rax*4+0x31d9c]
    a6b1:	44 89 d8             	mov    eax,r11d
    a6b4:	29 c8                	sub    eax,ecx
    a6b6:	89 44 24 6c          	mov    DWORD PTR [rsp+0x6c],eax
    a6ba:	e9 81 fe ff ff       	jmp    a540 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x210>
    a6bf:	90                   	nop
    a6c0:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
    a6c5:	48 8b 8c 24 90 00 00 00 	mov    rcx,QWORD PTR [rsp+0x90]
    a6cd:	83 c5 01             	add    ebp,0x1
    a6d0:	48 63 f5             	movsxd rsi,ebp
    a6d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    a6d6:	4c 0f bf 44 70 fe    	movsx  r8,WORD PTR [rax+rsi*2-0x2]
    a6dc:	48 0f bf 0c 48       	movsx  rcx,WORD PTR [rax+rcx*2]
    a6e1:	48 0f bf 04 70       	movsx  rax,WORD PTR [rax+rsi*2]
    a6e6:	48 8d 34 80          	lea    rsi,[rax+rax*4]
    a6ea:	48 8d 04 b0          	lea    rax,[rax+rsi*4]
    a6ee:	48 01 c1             	add    rcx,rax
    a6f1:	48 8d 05 c8 7b 24 00 	lea    rax,[rip+0x247bc8]        # 2522c0 <pair>
    a6f8:	0f be 34 88          	movsx  esi,BYTE PTR [rax+rcx*4]
    a6fc:	45 85 c0             	test   r8d,r8d
    a6ff:	0f 88 60 02 00 00    	js     a965 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x635>
    a705:	48 63 c6             	movsxd rax,esi
    a708:	48 8d 0c 80          	lea    rcx,[rax+rax*4]
    a70c:	49 8d 8c 08 4c 05 00 00 	lea    rcx,[r8+rcx*1+0x54c]
    a714:	41 8b 4c 89 08       	mov    ecx,DWORD PTR [r9+rcx*4+0x8]
    a719:	83 fe 02             	cmp    esi,0x2
    a71c:	7e 8b                	jle    a6a9 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x379>
    a71e:	41 03 89 d4 1d 03 00 	add    ecx,DWORD PTR [r9+0x31dd4]
    a725:	eb 82                	jmp    a6a9 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x379>
    a727:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    a730:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
    a735:	48 8b 0b             	mov    rcx,QWORD PTR [rbx]
    a738:	48 8b 9c 24 90 00 00 00 	mov    rbx,QWORD PTR [rsp+0x90]
    a740:	48 0f bf 34 41       	movsx  rsi,WORD PTR [rcx+rax*2]
    a745:	48 63 c5             	movsxd rax,ebp
    a748:	0f bf 1c 59          	movsx  ebx,WORD PTR [rcx+rbx*2]
    a74c:	48 0f bf 04 41       	movsx  rax,WORD PTR [rcx+rax*2]
    a751:	48 8d 0c 80          	lea    rcx,[rax+rax*4]
    a755:	48 8d 04 88          	lea    rax,[rax+rcx*4]
    a759:	48 01 c6             	add    rsi,rax
    a75c:	48 8d 05 5d 7b 24 00 	lea    rax,[rip+0x247b5d]        # 2522c0 <pair>
    a763:	44 0f be 04 b0       	movsx  r8d,BYTE PTR [rax+rsi*4]
    a768:	85 db                	test   ebx,ebx
    a76a:	0f 88 ff 01 00 00    	js     a96f <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x63f>
    a770:	49 63 c8             	movsxd rcx,r8d
    a773:	48 63 c3             	movsxd rax,ebx
    a776:	48 8d 34 89          	lea    rsi,[rcx+rcx*4]
    a77a:	48 8d 84 30 74 05 00 00 	lea    rax,[rax+rsi*1+0x574]
    a782:	41 8b 44 81 08       	mov    eax,DWORD PTR [r9+rax*4+0x8]
    a787:	41 83 f8 02          	cmp    r8d,0x2
    a78b:	7e 07                	jle    a794 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x464>
    a78d:	41 03 81 d4 1d 03 00 	add    eax,DWORD PTR [r9+0x31dd4]
    a794:	41 03 84 89 9c 1d 03 00 	add    eax,DWORD PTR [r9+rcx*4+0x31d9c]
    a79c:	44 89 db             	mov    ebx,r11d
    a79f:	29 c3                	sub    ebx,eax
    a7a1:	89 5c 24 6c          	mov    DWORD PTR [rsp+0x6c],ebx
    a7a5:	44 89 d3             	mov    ebx,r10d
    a7a8:	e9 93 fd ff ff       	jmp    a540 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x210>
    a7ad:	0f 1f 00             	nop    DWORD PTR [rax]
    a7b0:	8b 76 04             	mov    esi,DWORD PTR [rsi+0x4]
    a7b3:	44 89 94 24 9c 00 00 00 	mov    DWORD PTR [rsp+0x9c],r10d
    a7bb:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    a7c0:	44 8b 54 24 6c       	mov    r10d,DWORD PTR [rsp+0x6c]
    a7c5:	89 8c 24 98 00 00 00 	mov    DWORD PTR [rsp+0x98],ecx
    a7cc:	44 89 64 24 70       	mov    DWORD PTR [rsp+0x70],r12d
    a7d1:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    a7d6:	89 74 24 6c          	mov    DWORD PTR [rsp+0x6c],esi
    a7da:	4c 8b bc 24 80 00 00 00 	mov    r15,QWORD PTR [rsp+0x80]
    a7e2:	4c 8b b4 24 88 00 00 00 	mov    r14,QWORD PTR [rsp+0x88]
    a7ea:	e9 5a fe ff ff       	jmp    a649 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x319>
    a7ef:	90                   	nop
    a7f0:	44 89 d6             	mov    esi,r10d
    a7f3:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    a7f8:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
    a7fd:	44 89 94 24 9c 00 00 00 	mov    DWORD PTR [rsp+0x9c],r10d
    a805:	89 8c 24 98 00 00 00 	mov    DWORD PTR [rsp+0x98],ecx
    a80c:	44 8b 54 24 6c       	mov    r10d,DWORD PTR [rsp+0x6c]
    a811:	41 bb 80 96 98 00    	mov    r11d,0x989680
    a817:	44 8d a6 80 96 98 00 	lea    r12d,[rsi+0x989680]
    a81e:	c7 44 24 6c 80 96 98 00 	mov    DWORD PTR [rsp+0x6c],0x989680
    a826:	4c 8b bc 24 80 00 00 00 	mov    r15,QWORD PTR [rsp+0x80]
    a82e:	4c 8b b4 24 88 00 00 00 	mov    r14,QWORD PTR [rsp+0x88]
    a836:	e9 ee fc ff ff       	jmp    a529 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1f9>
    a83b:	48 83 ec 08          	sub    rsp,0x8
    a83f:	4d 89 f8             	mov    r8,r15
    a842:	4c 8b 6c 24 68       	mov    r13,QWORD PTR [rsp+0x68]
    a847:	41 55                	push   r13
    a849:	4c 8b 64 24 68       	mov    r12,QWORD PTR [rsp+0x68]
    a84e:	41 54                	push   r12
    a850:	8b 84 24 b4 00 00 00 	mov    eax,DWORD PTR [rsp+0xb4]
    a857:	50                   	push   rax
    a858:	8b 84 24 b8 00 00 00 	mov    eax,DWORD PTR [rsp+0xb8]
    a85f:	50                   	push   rax
    a860:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [rsp+0x90]
    a867:	50                   	push   rax
    a868:	ff b4 24 80 00 00 00 	push   QWORD PTR [rsp+0x80]
    a86f:	ff b4 24 80 00 00 00 	push   QWORD PTR [rsp+0x80]
    a876:	ff b4 24 80 00 00 00 	push   QWORD PTR [rsp+0x80]
    a87d:	41 56                	push   r14
    a87f:	ff b4 24 88 00 00 00 	push   QWORD PTR [rsp+0x88]
    a886:	ff b4 24 88 00 00 00 	push   QWORD PTR [rsp+0x88]
    a88d:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    a892:	48 8b 8c 24 88 00 00 00 	mov    rcx,QWORD PTR [rsp+0x88]
    a89a:	48 8b 94 24 80 00 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    a8a2:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
    a8a7:	48 8b 7c 24 78       	mov    rdi,QWORD PTR [rsp+0x78]
    a8ac:	e8 7f fa ff ff       	call   a330 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>
    a8b1:	48 8b 84 24 b0 00 00 00 	mov    rax,QWORD PTR [rsp+0xb0]
    a8b9:	4d 89 f8             	mov    r8,r15
    a8bc:	44 8b 94 24 cc 00 00 00 	mov    r10d,DWORD PTR [rsp+0xcc]
    a8c4:	4c 89 ac 24 90 01 00 00 	mov    QWORD PTR [rsp+0x190],r13
    a8cc:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    a8d1:	48 89 84 24 68 01 00 00 	mov    QWORD PTR [rsp+0x168],rax
    a8d9:	48 8b 84 24 a8 00 00 00 	mov    rax,QWORD PTR [rsp+0xa8]
    a8e1:	4c 89 a4 24 88 01 00 00 	mov    QWORD PTR [rsp+0x188],r12
    a8e9:	48 8b 8c 24 88 00 00 00 	mov    rcx,QWORD PTR [rsp+0x88]
    a8f1:	48 89 84 24 60 01 00 00 	mov    QWORD PTR [rsp+0x160],rax
    a8f9:	48 8b 84 24 a0 00 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    a901:	44 89 94 24 80 01 00 00 	mov    DWORD PTR [rsp+0x180],r10d
    a909:	48 8b 94 24 80 00 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    a911:	48 89 84 24 58 01 00 00 	mov    QWORD PTR [rsp+0x158],rax
    a919:	48 8b 84 24 98 00 00 00 	mov    rax,QWORD PTR [rsp+0x98]
    a921:	89 9c 24 78 01 00 00 	mov    DWORD PTR [rsp+0x178],ebx
    a928:	48 8b 74 24 68       	mov    rsi,QWORD PTR [rsp+0x68]
    a92d:	48 89 84 24 48 01 00 00 	mov    QWORD PTR [rsp+0x148],rax
    a935:	48 8b 84 24 90 00 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    a93d:	89 ac 24 70 01 00 00 	mov    DWORD PTR [rsp+0x170],ebp
    a944:	48 8b 7c 24 78       	mov    rdi,QWORD PTR [rsp+0x78]
    a949:	4c 89 b4 24 50 01 00 00 	mov    QWORD PTR [rsp+0x150],r14
    a951:	48 89 84 24 40 01 00 00 	mov    QWORD PTR [rsp+0x140],rax
    a959:	48 81 c4 08 01 00 00 	add    rsp,0x108
    a960:	e9 98 fc ff ff       	jmp    a5fd <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x2cd>
    a965:	31 c9                	xor    ecx,ecx
    a967:	48 63 c6             	movsxd rax,esi
    a96a:	e9 aa fd ff ff       	jmp    a719 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x3e9>
    a96f:	31 c0                	xor    eax,eax
    a971:	49 63 c8             	movsxd rcx,r8d
    a974:	e9 0e fe ff ff       	jmp    a787 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x457>
    a979:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
    a97e:	83 c5 01             	add    ebp,0x1
    a981:	48 63 cd             	movsxd rcx,ebp
    a984:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
    a987:	48 8b 9c 24 90 00 00 00 	mov    rbx,QWORD PTR [rsp+0x90]
    a98f:	44 0f bf 44 4e fe    	movsx  r8d,WORD PTR [rsi+rcx*2-0x2]
    a995:	48 0f bf 0c 4e       	movsx  rcx,WORD PTR [rsi+rcx*2]
    a99a:	48 0f bf 04 46       	movsx  rax,WORD PTR [rsi+rax*2]
    a99f:	48 0f bf 1c 5e       	movsx  rbx,WORD PTR [rsi+rbx*2]
    a9a4:	48 8d 34 89          	lea    rsi,[rcx+rcx*4]
    a9a8:	48 8d 0c b1          	lea    rcx,[rcx+rsi*4]
    a9ac:	48 01 c8             	add    rax,rcx
    a9af:	48 8d 0d 0a 79 24 00 	lea    rcx,[rip+0x24790a]        # 2522c0 <pair>
    a9b6:	44 0f be 24 81       	movsx  r12d,BYTE PTR [rcx+rax*4]
    a9bb:	45 85 c0             	test   r8d,r8d
    a9be:	0f 88 9e 00 00 00    	js     aa62 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x732>
    a9c4:	85 db                	test   ebx,ebx
    a9c6:	78 7c                	js     aa44 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x714>
    a9c8:	49 63 f4             	movsxd rsi,r12d
    a9cb:	49 63 c8             	movsxd rcx,r8d
    a9ce:	48 8d 04 b6          	lea    rax,[rsi+rsi*4]
    a9d2:	48 8d 0c 89          	lea    rcx,[rcx+rcx*4]
    a9d6:	48 8d 04 80          	lea    rax,[rax+rax*4]
    a9da:	48 01 c8             	add    rax,rcx
    a9dd:	48 8d 84 03 84 04 00 00 	lea    rax,[rbx+rax*1+0x484]
    a9e5:	41 8b 44 81 08       	mov    eax,DWORD PTR [r9+rax*4+0x8]
    a9ea:	41 83 fc 02          	cmp    r12d,0x2
    a9ee:	7e 07                	jle    a9f7 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6c7>
    a9f0:	41 03 81 d4 1d 03 00 	add    eax,DWORD PTR [r9+0x31dd4]
    a9f7:	41 03 84 b1 9c 1d 03 00 	add    eax,DWORD PTR [r9+rsi*4+0x31d9c]
    a9ff:	44 89 db             	mov    ebx,r11d
    aa02:	29 c3                	sub    ebx,eax
    aa04:	89 5c 24 6c          	mov    DWORD PTR [rsp+0x6c],ebx
    aa08:	44 89 d3             	mov    ebx,r10d
    aa0b:	e9 30 fb ff ff       	jmp    a540 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x210>
    aa10:	48 8b b4 24 90 00 00 00 	mov    rsi,QWORD PTR [rsp+0x90]
    aa18:	89 9c 24 98 00 00 00 	mov    DWORD PTR [rsp+0x98],ebx
    aa1f:	41 bb 80 96 98 00    	mov    r11d,0x989680
    aa25:	c7 44 24 6c 80 96 98 00 	mov    DWORD PTR [rsp+0x6c],0x989680
    aa2d:	41 8b 34 b0          	mov    esi,DWORD PTR [r8+rsi*4]
    aa31:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [rsp+0x9c],esi
    aa38:	44 8d a6 80 96 98 00 	lea    r12d,[rsi+0x989680]
    aa3f:	e9 e5 fa ff ff       	jmp    a529 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1f9>
    aa44:	45 85 c0             	test   r8d,r8d
    aa47:	78 19                	js     aa62 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x732>
    aa49:	49 63 f4             	movsxd rsi,r12d
    aa4c:	49 63 c0             	movsxd rax,r8d
    aa4f:	48 8d 0c b6          	lea    rcx,[rsi+rsi*4]
    aa53:	48 8d 84 08 4c 05 00 00 	lea    rax,[rax+rcx*1+0x54c]
    aa5b:	41 8b 44 81 08       	mov    eax,DWORD PTR [r9+rax*4+0x8]
    aa60:	eb 88                	jmp    a9ea <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6ba>
    aa62:	85 db                	test   ebx,ebx
    aa64:	78 1c                	js     aa82 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x752>
    aa66:	49 63 f4             	movsxd rsi,r12d
    aa69:	48 63 c3             	movsxd rax,ebx
    aa6c:	48 8d 0c b6          	lea    rcx,[rsi+rsi*4]
    aa70:	48 8d 84 08 74 05 00 00 	lea    rax,[rax+rcx*1+0x574]
    aa78:	41 8b 44 81 08       	mov    eax,DWORD PTR [r9+rax*4+0x8]
    aa7d:	e9 68 ff ff ff       	jmp    a9ea <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6ba>
    aa82:	31 c0                	xor    eax,eax
    aa84:	49 63 f4             	movsxd rsi,r12d
    aa87:	e9 5e ff ff ff       	jmp    a9ea <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6ba>
    aa8c:	48 8d 0d 0d 91 02 00 	lea    rcx,[rip+0x2910d]        # 33ba0 <_IO_stdin_used+0xba0>
    aa93:	ba 62 03 00 00       	mov    edx,0x362
    aa98:	48 8d 35 19 8e 02 00 	lea    rsi,[rip+0x28e19]        # 338b8 <_IO_stdin_used+0x8b8>
    aa9f:	48 8d 3d b0 93 02 00 	lea    rdi,[rip+0x293b0]        # 33e56 <_IO_stdin_used+0xe56>
    aaa6:	e8 25 8d ff ff       	call   37d0 <__assert_fail@plt>
    aaab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000aab0 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)>:
    aab0:	f3 0f 1e fa          	endbr64 
    aab4:	41 57                	push   r15
    aab6:	41 56                	push   r14
    aab8:	41 55                	push   r13
    aaba:	4d 89 c5             	mov    r13,r8
    aabd:	41 54                	push   r12
    aabf:	55                   	push   rbp
    aac0:	53                   	push   rbx
    aac1:	48 83 ec 58          	sub    rsp,0x58
    aac5:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [rsp+0xc0]
    aacc:	8b 9c 24 c8 00 00 00 	mov    ebx,DWORD PTR [rsp+0xc8]
    aad3:	48 89 7c 24 28       	mov    QWORD PTR [rsp+0x28],rdi
    aad8:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    aadd:	4c 8b a4 24 a8 00 00 00 	mov    r12,QWORD PTR [rsp+0xa8]
    aae5:	44 8d 50 08          	lea    r10d,[rax+0x8]
    aae9:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    aaee:	48 63 c3             	movsxd rax,ebx
    aaf1:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
    aaf6:	4c 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],r9
    aafb:	eb 32                	jmp    ab2f <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x7f>
    aafd:	0f 1f 00             	nop    DWORD PTR [rax]
    ab00:	4d 8b 1c 24          	mov    r11,QWORD PTR [r12]
    ab04:	49 8b 75 00          	mov    rsi,QWORD PTR [r13+0x0]
    ab08:	8d 7b ff             	lea    edi,[rbx-0x1]
    ab0b:	4c 8d 48 ff          	lea    r9,[rax-0x1]
    ab0f:	4c 8d 04 85 00 00 00 00 	lea    r8,[rax*4+0x0]
    ab17:	41 8b 0c 83          	mov    ecx,DWORD PTR [r11+rax*4]
    ab1b:	8b 96 98 1d 03 00    	mov    edx,DWORD PTR [rsi+0x31d98]
    ab21:	41 03 54 83 fc       	add    edx,DWORD PTR [r11+rax*4-0x4]
    ab26:	39 ca                	cmp    edx,ecx
    ab28:	75 1e                	jne    ab48 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x98>
    ab2a:	4c 89 c8             	mov    rax,r9
    ab2d:	89 fb                	mov    ebx,edi
    ab2f:	44 39 d3             	cmp    ebx,r10d
    ab32:	7f cc                	jg     ab00 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x50>
    ab34:	48 83 c4 58          	add    rsp,0x58
    ab38:	5b                   	pop    rbx
    ab39:	5d                   	pop    rbp
    ab3a:	41 5c                	pop    r12
    ab3c:	41 5d                	pop    r13
    ab3e:	41 5e                	pop    r14
    ab40:	41 5f                	pop    r15
    ab42:	c3                   	ret    
    ab43:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ab48:	4c 8b 7c 24 10       	mov    r15,QWORD PTR [rsp+0x10]
    ab4d:	48 8d 14 40          	lea    rdx,[rax+rax*2]
    ab51:	8d 6b 01             	lea    ebp,[rbx+0x1]
    ab54:	4d 8b 17             	mov    r10,QWORD PTR [r15]
    ab57:	4c 8b bc 24 a0 00 00 00 	mov    r15,QWORD PTR [rsp+0xa0]
    ab5f:	4d 8d 14 d2          	lea    r10,[r10+rdx*8]
    ab63:	4d 8b 3f             	mov    r15,QWORD PTR [r15]
    ab66:	49 8b 12             	mov    rdx,QWORD PTR [r10]
    ab69:	4d 8b 52 08          	mov    r10,QWORD PTR [r10+0x8]
    ab6d:	4c 89 7c 24 48       	mov    QWORD PTR [rsp+0x48],r15
    ab72:	49 39 d2             	cmp    r10,rdx
    ab75:	0f 84 7e 03 00 00    	je     aef9 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x449>
    ab7b:	44 8b b4 24 c0 00 00 00 	mov    r14d,DWORD PTR [rsp+0xc0]
    ab83:	89 7c 24 34          	mov    DWORD PTR [rsp+0x34],edi
    ab87:	4c 89 4c 24 40       	mov    QWORD PTR [rsp+0x40],r9
    ab8c:	4d 89 f9             	mov    r9,r15
    ab8f:	41 83 c6 03          	add    r14d,0x3
    ab93:	48 89 74 24 38       	mov    QWORD PTR [rsp+0x38],rsi
    ab98:	44 89 f7             	mov    edi,r14d
    ab9b:	eb 2e                	jmp    abcb <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x11b>
    ab9d:	0f 1f 00             	nop    DWORD PTR [rax]
    aba0:	44 8b 42 08          	mov    r8d,DWORD PTR [rdx+0x8]
    aba4:	44 8d 7d ff          	lea    r15d,[rbp-0x1]
    aba8:	49 63 f7             	movsxd rsi,r15d
    abab:	45 8b 1c b1          	mov    r11d,DWORD PTR [r9+rsi*4]
    abaf:	45 89 c6             	mov    r14d,r8d
    abb2:	41 c1 fe 02          	sar    r14d,0x2
    abb6:	43 8d 34 33          	lea    esi,[r11+r14*1]
    abba:	39 ce                	cmp    esi,ecx
    abbc:	0f 84 26 01 00 00    	je     ace8 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x238>
    abc2:	48 83 c2 10          	add    rdx,0x10
    abc6:	49 39 d2             	cmp    r10,rdx
    abc9:	74 1c                	je     abe7 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x137>
    abcb:	41 89 e8             	mov    r8d,ebp
    abce:	8b 2a                	mov    ebp,DWORD PTR [rdx]
    abd0:	39 fd                	cmp    ebp,edi
    abd2:	7f cc                	jg     aba0 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0xf0>
    abd4:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
    abd9:	45 8d 78 ff          	lea    r15d,[r8-0x1]
    abdd:	44 89 c5             	mov    ebp,r8d
    abe0:	49 63 c7             	movsxd rax,r15d
    abe3:	44 8b 1c 87          	mov    r11d,DWORD PTR [rdi+rax*4]
    abe7:	41 8d 83 80 96 98 00 	lea    eax,[r11+0x989680]
    abee:	39 c8                	cmp    eax,ecx
    abf0:	0f 85 58 03 00 00    	jne    af4e <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x49e>
    abf6:	41 ba 80 96 98 00    	mov    r10d,0x989680
    abfc:	44 89 54 24 34       	mov    DWORD PTR [rsp+0x34],r10d
    ac01:	48 83 ec 08          	sub    rsp,0x8
    ac05:	4d 89 e8             	mov    r8,r13
    ac08:	ff b4 24 e0 00 00 00 	push   QWORD PTR [rsp+0xe0]
    ac0f:	ff b4 24 e0 00 00 00 	push   QWORD PTR [rsp+0xe0]
    ac16:	41 53                	push   r11
    ac18:	41 57                	push   r15
    ac1a:	8b 84 24 e8 00 00 00 	mov    eax,DWORD PTR [rsp+0xe8]
    ac21:	50                   	push   rax
    ac22:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    ac29:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    ac30:	41 54                	push   r12
    ac32:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    ac39:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    ac40:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    ac47:	4c 8b 74 24 70       	mov    r14,QWORD PTR [rsp+0x70]
    ac4c:	4c 8b bc 24 88 00 00 00 	mov    r15,QWORD PTR [rsp+0x88]
    ac54:	4c 8b 4c 24 68       	mov    r9,QWORD PTR [rsp+0x68]
    ac59:	48 8b 8c 24 80 00 00 00 	mov    rcx,QWORD PTR [rsp+0x80]
    ac61:	48 8b 54 24 78       	mov    rdx,QWORD PTR [rsp+0x78]
    ac66:	4c 89 f6             	mov    rsi,r14
    ac69:	4c 89 ff             	mov    rdi,r15
    ac6c:	e8 bf f6 ff ff       	call   a330 <void trace_WM<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>
    ac71:	48 83 c4 58          	add    rsp,0x58
    ac75:	4d 89 e8             	mov    r8,r13
    ac78:	4c 89 f6             	mov    rsi,r14
    ac7b:	ff b4 24 e0 00 00 00 	push   QWORD PTR [rsp+0xe0]
    ac82:	4c 89 ff             	mov    rdi,r15
    ac85:	ff b4 24 e0 00 00 00 	push   QWORD PTR [rsp+0xe0]
    ac8c:	44 8b 54 24 4c       	mov    r10d,DWORD PTR [rsp+0x4c]
    ac91:	41 52                	push   r10
    ac93:	53                   	push   rbx
    ac94:	55                   	push   rbp
    ac95:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    ac9c:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    aca3:	41 54                	push   r12
    aca5:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    acac:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    acb3:	ff b4 24 e8 00 00 00 	push   QWORD PTR [rsp+0xe8]
    acba:	4c 8b 4c 24 68       	mov    r9,QWORD PTR [rsp+0x68]
    acbf:	48 8b 8c 24 80 00 00 00 	mov    rcx,QWORD PTR [rsp+0x80]
    acc7:	48 8b 54 24 78       	mov    rdx,QWORD PTR [rsp+0x78]
    accc:	e8 9f 02 00 00       	call   af70 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>
    acd1:	48 83 c4 60          	add    rsp,0x60
    acd5:	48 83 c4 58          	add    rsp,0x58
    acd9:	5b                   	pop    rbx
    acda:	5d                   	pop    rbp
    acdb:	41 5c                	pop    r12
    acdd:	41 5d                	pop    r13
    acdf:	41 5e                	pop    r14
    ace1:	41 5f                	pop    r15
    ace3:	c3                   	ret    
    ace4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    ace8:	44 8b 52 04          	mov    r10d,DWORD PTR [rdx+0x4]
    acec:	44 89 c2             	mov    edx,r8d
    acef:	8b 7c 24 34          	mov    edi,DWORD PTR [rsp+0x34]
    acf3:	83 e2 03             	and    edx,0x3
    acf6:	48 8b 74 24 38       	mov    rsi,QWORD PTR [rsp+0x38]
    acfb:	4c 8b 4c 24 40       	mov    r9,QWORD PTR [rsp+0x40]
    ad00:	80 fa 01             	cmp    dl,0x1
    ad03:	0f 84 77 01 00 00    	je     ae80 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x3d0>
    ad09:	41 83 e0 02          	and    r8d,0x2
    ad0d:	74 79                	je     ad88 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x2d8>
    ad0f:	80 fa 02             	cmp    dl,0x2
    ad12:	0f 85 c8 00 00 00    	jne    ade0 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x330>
    ad18:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    ad1d:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
    ad20:	48 0f bf 0c 42       	movsx  rcx,WORD PTR [rdx+rax*2]
    ad25:	48 63 c5             	movsxd rax,ebp
    ad28:	4e 0f bf 04 4a       	movsx  r8,WORD PTR [rdx+r9*2]
    ad2d:	48 0f bf 04 42       	movsx  rax,WORD PTR [rdx+rax*2]
    ad32:	48 8d 14 80          	lea    rdx,[rax+rax*4]
    ad36:	48 8d 04 90          	lea    rax,[rax+rdx*4]
    ad3a:	49 01 c0             	add    r8,rax
    ad3d:	48 8d 05 7c 75 24 00 	lea    rax,[rip+0x24757c]        # 2522c0 <pair>
    ad44:	42 0f be 14 80       	movsx  edx,BYTE PTR [rax+r8*4]
    ad49:	85 c9                	test   ecx,ecx
    ad4b:	0f 88 9e 01 00 00    	js     aeef <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x43f>
    ad51:	48 63 c2             	movsxd rax,edx
    ad54:	4c 8d 04 80          	lea    r8,[rax+rax*4]
    ad58:	4a 8d 8c 01 74 05 00 00 	lea    rcx,[rcx+r8*1+0x574]
    ad60:	8b 4c 8e 08          	mov    ecx,DWORD PTR [rsi+rcx*4+0x8]
    ad64:	83 fa 02             	cmp    edx,0x2
    ad67:	7e 06                	jle    ad6f <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x2bf>
    ad69:	03 8e d4 1d 03 00    	add    ecx,DWORD PTR [rsi+0x31dd4]
    ad6f:	03 8c 86 9c 1d 03 00 	add    ecx,DWORD PTR [rsi+rax*4+0x31d9c]
    ad76:	45 89 f2             	mov    r10d,r14d
    ad79:	89 fb                	mov    ebx,edi
    ad7b:	41 29 ca             	sub    r10d,ecx
    ad7e:	e9 79 fe ff ff       	jmp    abfc <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14c>
    ad83:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ad88:	84 d2                	test   dl,dl
    ad8a:	0f 85 6c fe ff ff    	jne    abfc <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14c>
    ad90:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    ad95:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    ad98:	48 0f bf 0c 42       	movsx  rcx,WORD PTR [rdx+rax*2]
    ad9d:	48 63 c5             	movsxd rax,ebp
    ada0:	48 0f bf 04 42       	movsx  rax,WORD PTR [rdx+rax*2]
    ada5:	48 8d 14 80          	lea    rdx,[rax+rax*4]
    ada9:	48 8d 04 90          	lea    rax,[rax+rdx*4]
    adad:	31 d2                	xor    edx,edx
    adaf:	48 01 c1             	add    rcx,rax
    adb2:	48 8d 05 07 75 24 00 	lea    rax,[rip+0x247507]        # 2522c0 <pair>
    adb9:	48 0f be 04 88       	movsx  rax,BYTE PTR [rax+rcx*4]
    adbe:	83 f8 02             	cmp    eax,0x2
    adc1:	7e 06                	jle    adc9 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x319>
    adc3:	8b 96 d4 1d 03 00    	mov    edx,DWORD PTR [rsi+0x31dd4]
    adc9:	03 94 86 9c 1d 03 00 	add    edx,DWORD PTR [rsi+rax*4+0x31d9c]
    add0:	45 89 f2             	mov    r10d,r14d
    add3:	41 29 d2             	sub    r10d,edx
    add6:	e9 21 fe ff ff       	jmp    abfc <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14c>
    addb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ade0:	83 be ac 35 03 00 01 	cmp    DWORD PTR [rsi+0x335ac],0x1
    ade7:	0f 85 0f fe ff ff    	jne    abfc <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14c>
    aded:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    adf2:	83 c5 01             	add    ebp,0x1
    adf5:	48 63 d5             	movsxd rdx,ebp
    adf8:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
    adfb:	0f bf 1c 41          	movsx  ebx,WORD PTR [rcx+rax*2]
    adff:	48 0f bf 04 51       	movsx  rax,WORD PTR [rcx+rdx*2]
    ae04:	44 0f bf 54 51 fe    	movsx  r10d,WORD PTR [rcx+rdx*2-0x2]
    ae0a:	4e 0f bf 04 49       	movsx  r8,WORD PTR [rcx+r9*2]
    ae0f:	48 8d 14 80          	lea    rdx,[rax+rax*4]
    ae13:	48 8d 04 90          	lea    rax,[rax+rdx*4]
    ae17:	49 01 c0             	add    r8,rax
    ae1a:	48 8d 05 9f 74 24 00 	lea    rax,[rip+0x24749f]        # 2522c0 <pair>
    ae21:	46 0f be 04 80       	movsx  r8d,BYTE PTR [rax+r8*4]
    ae26:	45 85 d2             	test   r10d,r10d
    ae29:	0f 88 f6 00 00 00    	js     af25 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x475>
    ae2f:	85 db                	test   ebx,ebx
    ae31:	0f 88 ce 00 00 00    	js     af05 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x455>
    ae37:	49 63 c8             	movsxd rcx,r8d
    ae3a:	49 63 d2             	movsxd rdx,r10d
    ae3d:	4c 63 cb             	movsxd r9,ebx
    ae40:	48 8d 04 89          	lea    rax,[rcx+rcx*4]
    ae44:	48 8d 14 92          	lea    rdx,[rdx+rdx*4]
    ae48:	48 8d 04 80          	lea    rax,[rax+rax*4]
    ae4c:	48 01 d0             	add    rax,rdx
    ae4f:	49 8d 84 01 84 04 00 00 	lea    rax,[r9+rax*1+0x484]
    ae57:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
    ae5b:	41 83 f8 02          	cmp    r8d,0x2
    ae5f:	7e 06                	jle    ae67 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x3b7>
    ae61:	03 86 d4 1d 03 00    	add    eax,DWORD PTR [rsi+0x31dd4]
    ae67:	03 84 8e 9c 1d 03 00 	add    eax,DWORD PTR [rsi+rcx*4+0x31d9c]
    ae6e:	89 fb                	mov    ebx,edi
    ae70:	41 29 c6             	sub    r14d,eax
    ae73:	45 89 f2             	mov    r10d,r14d
    ae76:	e9 81 fd ff ff       	jmp    abfc <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14c>
    ae7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ae80:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    ae85:	83 c5 01             	add    ebp,0x1
    ae88:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    ae8b:	48 63 fd             	movsxd rdi,ebp
    ae8e:	48 0f bf 4c 7a fe    	movsx  rcx,WORD PTR [rdx+rdi*2-0x2]
    ae94:	48 0f bf 04 42       	movsx  rax,WORD PTR [rdx+rax*2]
    ae99:	48 0f bf 14 7a       	movsx  rdx,WORD PTR [rdx+rdi*2]
    ae9e:	48 8d 3c 92          	lea    rdi,[rdx+rdx*4]
    aea2:	48 8d 14 ba          	lea    rdx,[rdx+rdi*4]
    aea6:	48 01 d0             	add    rax,rdx
    aea9:	48 8d 15 10 74 24 00 	lea    rdx,[rip+0x247410]        # 2522c0 <pair>
    aeb0:	0f be 14 82          	movsx  edx,BYTE PTR [rdx+rax*4]
    aeb4:	85 c9                	test   ecx,ecx
    aeb6:	78 30                	js     aee8 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x438>
    aeb8:	48 63 c2             	movsxd rax,edx
    aebb:	48 8d 3c 80          	lea    rdi,[rax+rax*4]
    aebf:	48 8d 8c 39 4c 05 00 00 	lea    rcx,[rcx+rdi*1+0x54c]
    aec7:	8b 4c 8e 08          	mov    ecx,DWORD PTR [rsi+rcx*4+0x8]
    aecb:	83 fa 02             	cmp    edx,0x2
    aece:	7e 06                	jle    aed6 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x426>
    aed0:	03 8e d4 1d 03 00    	add    ecx,DWORD PTR [rsi+0x31dd4]
    aed6:	03 8c 86 9c 1d 03 00 	add    ecx,DWORD PTR [rsi+rax*4+0x31d9c]
    aedd:	45 89 f2             	mov    r10d,r14d
    aee0:	41 29 ca             	sub    r10d,ecx
    aee3:	e9 14 fd ff ff       	jmp    abfc <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14c>
    aee8:	31 c9                	xor    ecx,ecx
    aeea:	48 63 c2             	movsxd rax,edx
    aeed:	eb dc                	jmp    aecb <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x41b>
    aeef:	31 c9                	xor    ecx,ecx
    aef1:	48 63 c2             	movsxd rax,edx
    aef4:	e9 6b fe ff ff       	jmp    ad64 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x2b4>
    aef9:	47 8b 1c 07          	mov    r11d,DWORD PTR [r15+r8*1]
    aefd:	41 89 df             	mov    r15d,ebx
    af00:	e9 e2 fc ff ff       	jmp    abe7 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x137>
    af05:	45 85 d2             	test   r10d,r10d
    af08:	78 1b                	js     af25 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x475>
    af0a:	49 63 c8             	movsxd rcx,r8d
    af0d:	49 63 c2             	movsxd rax,r10d
    af10:	48 8d 14 89          	lea    rdx,[rcx+rcx*4]
    af14:	48 8d 84 10 4c 05 00 00 	lea    rax,[rax+rdx*1+0x54c]
    af1c:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
    af20:	e9 36 ff ff ff       	jmp    ae5b <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x3ab>
    af25:	85 db                	test   ebx,ebx
    af27:	78 1b                	js     af44 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x494>
    af29:	49 63 c8             	movsxd rcx,r8d
    af2c:	48 63 c3             	movsxd rax,ebx
    af2f:	48 8d 14 89          	lea    rdx,[rcx+rcx*4]
    af33:	48 8d 84 10 74 05 00 00 	lea    rax,[rax+rdx*1+0x574]
    af3b:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
    af3f:	e9 17 ff ff ff       	jmp    ae5b <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x3ab>
    af44:	31 c0                	xor    eax,eax
    af46:	49 63 c8             	movsxd rcx,r8d
    af49:	e9 0d ff ff ff       	jmp    ae5b <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x3ab>
    af4e:	48 8d 0d 0b 8f 02 00 	lea    rcx,[rip+0x28f0b]        # 33e60 <_IO_stdin_used+0xe60>
    af55:	ba ae 03 00 00       	mov    edx,0x3ae
    af5a:	48 8d 35 57 89 02 00 	lea    rsi,[rip+0x28957]        # 338b8 <_IO_stdin_used+0x8b8>
    af61:	48 8d 3d ee 8e 02 00 	lea    rdi,[rip+0x28eee]        # 33e56 <_IO_stdin_used+0xe56>
    af68:	e8 63 88 ff ff       	call   37d0 <__assert_fail@plt>
    af6d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000000af70 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>:
    af70:	f3 0f 1e fa          	endbr64 
    af74:	55                   	push   rbp
    af75:	48 89 e5             	mov    rbp,rsp
    af78:	41 57                	push   r15
    af7a:	41 56                	push   r14
    af7c:	41 55                	push   r13
    af7e:	41 54                	push   r12
    af80:	53                   	push   rbx
    af81:	48 81 ec b8 01 00 00 	sub    rsp,0x1b8
    af88:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    af8c:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
    af93:	48 89 b5 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rsi
    af9a:	44 8b 6d 40          	mov    r13d,DWORD PTR [rbp+0x40]
    af9e:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
    afa5:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
    afa9:	48 89 95 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdx
    afb0:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
    afb7:	48 8b 45 20          	mov    rax,QWORD PTR [rbp+0x20]
    afbb:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
    afc2:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
    afc9:	48 8b 45 28          	mov    rax,QWORD PTR [rbp+0x28]
    afcd:	4c 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],r8
    afd4:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
    afdb:	48 8b 45 30          	mov    rax,QWORD PTR [rbp+0x30]
    afdf:	4c 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r9
    afe6:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
    afed:	48 8b 45 38          	mov    rax,QWORD PTR [rbp+0x38]
    aff1:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
    aff8:	48 8b 45 58          	mov    rax,QWORD PTR [rbp+0x58]
    affc:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
    b003:	48 8b 45 60          	mov    rax,QWORD PTR [rbp+0x60]
    b007:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
    b00e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    b017:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    b01b:	31 c0                	xor    eax,eax
    b01d:	41 8d 45 03          	lea    eax,[r13+0x3]
    b021:	3b 45 48             	cmp    eax,DWORD PTR [rbp+0x48]
    b024:	0f 8d 89 0f 00 00    	jge    bfb3 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1043>
    b02a:	4c 8b 01             	mov    r8,QWORD PTR [rcx]
    b02d:	49 63 c5             	movsxd rax,r13d
    b030:	4c 63 65 48          	movsxd r12,DWORD PTR [rbp+0x48]
    b034:	49 89 c7             	mov    r15,rax
    b037:	49 01 c0             	add    r8,rax
    b03a:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
    b041:	80 38 00             	cmp    BYTE PTR [rax],0x0
    b044:	0f 85 66 0b 00 00    	jne    bbb0 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xc40>
    b04a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
    b051:	41 c6 00 28          	mov    BYTE PTR [r8],0x28
    b055:	48 8b 00             	mov    rax,QWORD PTR [rax]
    b058:	42 c6 04 20 29       	mov    BYTE PTR [rax+r12*1],0x29
    b05d:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
    b064:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
    b06b:	4c 89 fe             	mov    rsi,r15
    b06e:	4b 8d 1c 3f          	lea    rbx,[r15+r15*1]
    b072:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    b075:	4b 8d 04 24          	lea    rax,[r12+r12*1]
    b079:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
    b080:	4a 0f bf 0c 62       	movsx  rcx,WORD PTR [rdx+r12*2]
    b085:	4a 0f bf 14 7a       	movsx  rdx,WORD PTR [rdx+r15*2]
    b08a:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
    b08e:	48 8d 04 82          	lea    rax,[rdx+rax*4]
    b092:	48 8d 15 27 72 24 00 	lea    rdx,[rip+0x247227]        # 2522c0 <pair>
    b099:	48 01 c8             	add    rax,rcx
    b09c:	8b 04 82             	mov    eax,DWORD PTR [rdx+rax*4]
    b09f:	4c 89 e2             	mov    rdx,r12
    b0a2:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
    b0a8:	e8 73 16 00 00       	call   c720 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)>
    b0ad:	84 c0                	test   al,al
    b0af:	0f 85 a3 0a 00 00    	jne    bb58 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xbe8>
    b0b5:	8b 45 48             	mov    eax,DWORD PTR [rbp+0x48]
    b0b8:	83 e8 1f             	sub    eax,0x1f
    b0bb:	44 39 e8             	cmp    eax,r13d
    b0be:	41 0f 4c c5          	cmovl  eax,r13d
    b0c2:	89 c2                	mov    edx,eax
    b0c4:	8b 45 48             	mov    eax,DWORD PTR [rbp+0x48]
    b0c7:	83 e8 01             	sub    eax,0x1
    b0ca:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
    b0d0:	39 d0                	cmp    eax,edx
    b0d2:	0f 8e 8a 03 00 00    	jle    b462 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x4f2>
    b0d8:	48 8d 43 02          	lea    rax,[rbx+0x2]
    b0dc:	48 8b 9d d0 fe ff ff 	mov    rbx,QWORD PTR [rbp-0x130]
    b0e3:	48 c7 85 18 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xe8],0x0
    b0ee:	41 b8 01 00 00 00    	mov    r8d,0x1
    b0f4:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    b0fb:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    b102:	45 89 c6             	mov    r14d,r8d
    b105:	48 83 eb 02          	sub    rbx,0x2
    b109:	48 89 9d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rbx
    b110:	8b 5d 48             	mov    ebx,DWORD PTR [rbp+0x48]
    b113:	48 8b 00             	mov    rax,QWORD PTR [rax]
    b116:	29 d3                	sub    ebx,edx
    b118:	48 63 95 bc fe ff ff 	movsxd rdx,DWORD PTR [rbp-0x144]
    b11f:	89 9d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ebx
    b125:	48 69 da 88 13 00 00 	imul   rbx,rdx,0x1388
    b12c:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    b133:	48 69 d2 e8 03 00 00 	imul   rdx,rdx,0x3e8
    b13a:	48 89 9d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rbx
    b141:	48 89 95 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rdx
    b148:	44 89 ea             	mov    edx,r13d
    b14b:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
    b152:	8b 9d b8 fe ff ff    	mov    ebx,DWORD PTR [rbp-0x148]
    b158:	2b 9d 18 ff ff ff    	sub    ebx,DWORD PTR [rbp-0xe8]
    b15e:	48 8d 0c 76          	lea    rcx,[rsi+rsi*2]
    b162:	89 9d ac fe ff ff    	mov    DWORD PTR [rbp-0x154],ebx
    b168:	4c 8d 1c 8d 00 00 00 00 	lea    r11,[rcx*4+0x0]
    b170:	4a 8d 0c 18          	lea    rcx,[rax+r11*1]
    b174:	48 8b 19             	mov    rbx,QWORD PTR [rcx]
    b177:	48 3b 59 08          	cmp    rbx,QWORD PTR [rcx+0x8]
    b17b:	0f 84 bd 02 00 00    	je     b43e <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x4ce>
    b181:	48 8d 4e 02          	lea    rcx,[rsi+0x2]
    b185:	41 89 d7             	mov    r15d,edx
    b188:	49 63 d6             	movsxd rdx,r14d
    b18b:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
    b192:	e9 10 01 00 00       	jmp    b2a7 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x337>
    b197:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    b1a0:	85 ff                	test   edi,edi
    b1a2:	0f 84 58 02 00 00    	je     b400 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x490>
    b1a8:	4c 8b 8d d8 fe ff ff 	mov    r9,QWORD PTR [rbp-0x128]
    b1af:	4d 8b 01             	mov    r8,QWORD PTR [r9]
    b1b2:	4c 8b 8d e0 fe ff ff 	mov    r9,QWORD PTR [rbp-0x120]
    b1b9:	47 0f bf 54 10 fe    	movsx  r10d,WORD PTR [r8+r10*1-0x2]
    b1bf:	47 0f bf 0c 08       	movsx  r9d,WORD PTR [r8+r9*1]
    b1c4:	44 89 95 e8 fe ff ff 	mov    DWORD PTR [rbp-0x118],r10d
    b1cb:	4c 8b 95 d0 fe ff ff 	mov    r10,QWORD PTR [rbp-0x130]
    b1d2:	44 89 8d f0 fe ff ff 	mov    DWORD PTR [rbp-0x110],r9d
    b1d9:	4c 8b 8d c8 fe ff ff 	mov    r9,QWORD PTR [rbp-0x138]
    b1e0:	4f 0f bf 54 10 fe    	movsx  r10,WORD PTR [r8+r10*1-0x2]
    b1e6:	4f 0f bf 04 08       	movsx  r8,WORD PTR [r8+r9*1]
    b1eb:	83 ff 01             	cmp    edi,0x1
    b1ee:	0f 84 cc 05 00 00    	je     b7c0 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x850>
    b1f4:	83 ff 02             	cmp    edi,0x2
    b1f7:	0f 84 03 07 00 00    	je     b900 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x990>
    b1fd:	41 8d 34 3c          	lea    esi,[r12+rdi*1]
    b201:	83 fe 1e             	cmp    esi,0x1e
    b204:	0f 8f 76 07 00 00    	jg     b980 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xa10>
    b20a:	48 63 f6             	movsxd rsi,esi
    b20d:	44 8b b4 b1 fc 01 00 00 	mov    r14d,DWORD PTR [rcx+rsi*4+0x1fc]
    b215:	41 29 fc             	sub    r12d,edi
    b218:	44 0f af a1 80 1d 03 00 	imul   r12d,DWORD PTR [rcx+0x31d80]
    b220:	8b 35 fa 1f 1e 00    	mov    esi,DWORD PTR [rip+0x1e1ffa]        # 1ed220 <MAX_NINIO>
    b226:	4b 8d 3c 80          	lea    rdi,[r8+r8*4]
    b22a:	4c 63 8d f0 fe ff ff 	movsxd r9,DWORD PTR [rbp-0x110]
    b231:	41 39 f4             	cmp    r12d,esi
    b234:	4f 8d 04 89          	lea    r8,[r9+r9*4]
    b238:	41 0f 4e f4          	cmovle esi,r12d
    b23c:	41 01 f6             	add    r14d,esi
    b23f:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
    b246:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    b24a:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    b24e:	48 01 fe             	add    rsi,rdi
    b251:	49 8d bc 32 64 01 00 00 	lea    rdi,[r10+rsi*1+0x164]
    b259:	4b 8d 74 ad 00       	lea    rsi,[r13+r13*4+0x0]
    b25e:	4c 63 95 e8 fe ff ff 	movsxd r10,DWORD PTR [rbp-0x118]
    b265:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    b269:	4c 01 c6             	add    rsi,r8
    b26c:	49 8d b4 32 64 01 00 00 	lea    rsi,[r10+rsi*1+0x164]
    b274:	44 8b 64 b1 08       	mov    r12d,DWORD PTR [rcx+rsi*4+0x8]
    b279:	44 03 64 b9 08       	add    r12d,DWORD PTR [rcx+rdi*4+0x8]
    b27e:	45 01 e6             	add    r14d,r12d
    b281:	41 01 c6             	add    r14d,eax
    b284:	44 3b 75 50          	cmp    r14d,DWORD PTR [rbp+0x50]
    b288:	0f 84 d1 00 00 00    	je     b35f <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x3ef>
    b28e:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    b295:	48 8b 00             	mov    rax,QWORD PTR [rax]
    b298:	48 83 c3 10          	add    rbx,0x10
    b29c:	4a 39 5c 18 08       	cmp    QWORD PTR [rax+r11*1+0x8],rbx
    b2a1:	0f 84 91 01 00 00    	je     b438 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x4c8>
    b2a7:	8b 0b                	mov    ecx,DWORD PTR [rbx]
    b2a9:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
    b2af:	44 39 f9             	cmp    ecx,r15d
    b2b2:	0f 8e 80 01 00 00    	jle    b438 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x4c8>
    b2b8:	41 89 c8             	mov    r8d,ecx
    b2bb:	89 cf                	mov    edi,ecx
    b2bd:	45 29 f8             	sub    r8d,r15d
    b2c0:	41 83 f8 1f          	cmp    r8d,0x1f
    b2c4:	7f d2                	jg     b298 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x328>
    b2c6:	4c 63 cf             	movsxd r9,edi
    b2c9:	48 8b bd 10 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf0]
    b2d0:	4d 63 f0             	movsxd r14,r8d
    b2d3:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
    b2d6:	4f 8d 14 09          	lea    r10,[r9+r9*1]
    b2da:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
    b2e1:	48 8b 37             	mov    rsi,QWORD PTR [rdi]
    b2e4:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
    b2eb:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
    b2ee:	48 0f bf 3c 3e       	movsx  rdi,WORD PTR [rsi+rdi*1]
    b2f3:	4a 0f bf 34 4e       	movsx  rsi,WORD PTR [rsi+r9*2]
    b2f8:	4c 8d 0c b6          	lea    r9,[rsi+rsi*4]
    b2fc:	4a 8d 34 8e          	lea    rsi,[rsi+r9*4]
    b300:	4c 8b 8d 18 ff ff ff 	mov    r9,QWORD PTR [rbp-0xe8]
    b307:	48 01 f7             	add    rdi,rsi
    b30a:	48 8d 35 af 6f 24 00 	lea    rsi,[rip+0x246faf]        # 2522c0 <pair>
    b311:	41 39 d0             	cmp    r8d,edx
    b314:	48 63 34 be          	movsxd rsi,DWORD PTR [rsi+rdi*4]
    b318:	48 8d 3d a1 1e 1e 00 	lea    rdi,[rip+0x1e1ea1]        # 1ed1c0 <rtype>
    b31f:	45 89 cc             	mov    r12d,r9d
    b322:	4c 0f 4e f2          	cmovle r14,rdx
    b326:	4c 63 2c b7          	movsxd r13,DWORD PTR [rdi+rsi*4]
    b32a:	41 8d 70 ff          	lea    esi,[r8-0x1]
    b32e:	44 89 cf             	mov    edi,r9d
    b331:	44 0f 4f e6          	cmovg  r12d,esi
    b335:	0f 4e fe             	cmovle edi,esi
    b338:	45 85 e4             	test   r12d,r12d
    b33b:	0f 85 5f fe ff ff    	jne    b1a0 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x230>
    b341:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
    b348:	49 8d 74 f5 00       	lea    rsi,[r13+rsi*8+0x0]
    b34d:	44 8b 74 b1 04       	mov    r14d,DWORD PTR [rcx+rsi*4+0x4]
    b352:	41 01 c6             	add    r14d,eax
    b355:	44 3b 75 50          	cmp    r14d,DWORD PTR [rbp+0x50]
    b359:	0f 85 2f ff ff ff    	jne    b28e <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x31e>
    b35f:	8b 43 04             	mov    eax,DWORD PTR [rbx+0x4]
    b362:	48 83 ec 08          	sub    rsp,0x8
    b366:	44 8b 8d 28 ff ff ff 	mov    r9d,DWORD PTR [rbp-0xd8]
    b36d:	ff b5 40 fe ff ff    	push   QWORD PTR [rbp-0x1c0]
    b373:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    b379:	50                   	push   rax
    b37a:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    b380:	50                   	push   rax
    b381:	41 51                	push   r9
    b383:	ff b5 a0 fe ff ff    	push   QWORD PTR [rbp-0x160]
    b389:	4c 8b 8d 10 ff ff ff 	mov    r9,QWORD PTR [rbp-0xf0]
    b390:	4c 8b 85 00 ff ff ff 	mov    r8,QWORD PTR [rbp-0x100]
    b397:	ff b5 68 fe ff ff    	push   QWORD PTR [rbp-0x198]
    b39d:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
    b3a4:	ff b5 50 fe ff ff    	push   QWORD PTR [rbp-0x1b0]
    b3aa:	48 8b 95 38 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c8]
    b3b1:	ff b5 58 fe ff ff    	push   QWORD PTR [rbp-0x1a8]
    b3b7:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    b3be:	ff b5 b0 fe ff ff    	push   QWORD PTR [rbp-0x150]
    b3c4:	48 8b bd 48 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1b8]
    b3cb:	ff b5 d8 fe ff ff    	push   QWORD PTR [rbp-0x128]
    b3d1:	e8 9a fb ff ff       	call   af70 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>
    b3d6:	48 83 c4 60          	add    rsp,0x60
    b3da:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    b3de:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    b3e7:	0f 85 c1 0b 00 00    	jne    bfae <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x103e>
    b3ed:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
    b3f1:	5b                   	pop    rbx
    b3f2:	41 5c                	pop    r12
    b3f4:	41 5d                	pop    r13
    b3f6:	41 5e                	pop    r14
    b3f8:	41 5f                	pop    r15
    b3fa:	5d                   	pop    rbp
    b3fb:	c3                   	ret    
    b3fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    b400:	41 83 fc 1e          	cmp    r12d,0x1e
    b404:	0f 8f 56 04 00 00    	jg     b860 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x8f0>
    b40a:	49 63 f4             	movsxd rsi,r12d
    b40d:	44 8b b4 b1 80 01 00 00 	mov    r14d,DWORD PTR [rcx+rsi*4+0x180]
    b415:	41 83 fc 01          	cmp    r12d,0x1
    b419:	0f 85 b2 04 00 00    	jne    b8d1 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x961>
    b41f:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
    b426:	49 8d 74 fd 00       	lea    rsi,[r13+rdi*8+0x0]
    b42b:	44 03 74 b1 04       	add    r14d,DWORD PTR [rcx+rsi*4+0x4]
    b430:	e9 4c fe ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    b435:	0f 1f 00             	nop    DWORD PTR [rax]
    b438:	41 89 d6             	mov    r14d,edx
    b43b:	44 89 fa             	mov    edx,r15d
    b43e:	48 83 85 18 ff ff ff 01 	add    QWORD PTR [rbp-0xe8],0x1
    b446:	41 83 c6 01          	add    r14d,0x1
    b44a:	48 83 ad 20 ff ff ff 02 	sub    QWORD PTR [rbp-0xe0],0x2
    b452:	44 39 b5 a8 fe ff ff 	cmp    DWORD PTR [rbp-0x158],r14d
    b459:	0f 85 ec fc ff ff    	jne    b14b <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1db>
    b45f:	41 89 d5             	mov    r13d,edx
    b462:	4c 8b bd 00 ff ff ff 	mov    r15,QWORD PTR [rbp-0x100]
    b469:	44 8b 4d 48          	mov    r9d,DWORD PTR [rbp+0x48]
    b46d:	45 89 e8             	mov    r8d,r13d
    b470:	48 8b 9d 10 ff ff ff 	mov    rbx,QWORD PTR [rbp-0xf0]
    b477:	48 8b 95 d8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x128]
    b47e:	48 8b bd 48 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1b8]
    b485:	4c 89 f9             	mov    rcx,r15
    b488:	48 89 de             	mov    rsi,rbx
    b48b:	e8 00 bb ff ff       	call   6f90 <int HairpinE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, short*, short*, vrna_param_s*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, short* const&, short* const&, vrna_param_s* const&, int, int)>
    b490:	3b 45 50             	cmp    eax,DWORD PTR [rbp+0x50]
    b493:	0f 84 41 ff ff ff    	je     b3da <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x46a>
    b499:	8b 95 b8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x148]
    b49f:	41 8d 45 01          	lea    eax,[r13+0x1]
    b4a3:	48 89 d9             	mov    rcx,rbx
    b4a6:	4d 89 f8             	mov    r8,r15
    b4a9:	ff b5 40 fe ff ff    	push   QWORD PTR [rbp-0x1c0]
    b4af:	4c 8b b5 58 fe ff ff 	mov    r14,QWORD PTR [rbp-0x1a8]
    b4b6:	4c 8d 9d 30 ff ff ff 	lea    r11,[rbp-0xd0]
    b4bd:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    b4c3:	4d 89 df             	mov    r15,r11
    b4c6:	4c 89 df             	mov    rdi,r11
    b4c9:	48 8b 9d 08 ff ff ff 	mov    rbx,QWORD PTR [rbp-0xf8]
    b4d0:	52                   	push   rdx
    b4d1:	4c 89 f6             	mov    rsi,r14
    b4d4:	50                   	push   rax
    b4d5:	4c 8b 8d 68 fe ff ff 	mov    r9,QWORD PTR [rbp-0x198]
    b4dc:	48 89 da             	mov    rdx,rbx
    b4df:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
    b4e5:	e8 c6 cf ff ff       	call   84b0 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)>
    b4ea:	48 83 c4 20          	add    rsp,0x20
    b4ee:	4c 89 fe             	mov    rsi,r15
    b4f1:	4c 89 f7             	mov    rdi,r14
    b4f4:	e8 27 d6 ff ff       	call   8b20 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)>
    b4f9:	4c 8b 7b 08          	mov    r15,QWORD PTR [rbx+0x8]
    b4fd:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
    b500:	66 0f ef c0          	pxor   xmm0,xmm0
    b504:	48 c7 45 c0 00 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
    b50c:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    b510:	4c 89 fb             	mov    rbx,r15
    b513:	48 89 d1             	mov    rcx,rdx
    b516:	48 29 d3             	sub    rbx,rdx
    b519:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
    b523:	48 89 d8             	mov    rax,rbx
    b526:	48 c1 f8 03          	sar    rax,0x3
    b52a:	48 0f af c2          	imul   rax,rdx
    b52e:	48 85 c0             	test   rax,rax
    b531:	0f 84 24 0a 00 00    	je     bf5b <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfeb>
    b537:	48 ba 55 55 55 55 55 55 55 05 	movabs rdx,0x555555555555555
    b541:	48 39 d0             	cmp    rax,rdx
    b544:	0f 87 40 0a 00 00    	ja     bf8a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x101a>
    b54a:	48 89 df             	mov    rdi,rbx
    b54d:	e8 5e 83 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    b552:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    b559:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    b560:	4c 8b 78 08          	mov    r15,QWORD PTR [rax+0x8]
    b564:	48 8b 00             	mov    rax,QWORD PTR [rax]
    b567:	48 89 c1             	mov    rcx,rax
    b56a:	4c 8b a5 18 ff ff ff 	mov    r12,QWORD PTR [rbp-0xe8]
    b571:	66 49 0f 6e c4       	movq   xmm0,r12
    b576:	4c 01 e3             	add    rbx,r12
    b579:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    b57d:	48 89 5d c0          	mov    QWORD PTR [rbp-0x40],rbx
    b581:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    b585:	49 39 cf             	cmp    r15,rcx
    b588:	0f 84 d5 00 00 00    	je     b663 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6f3>
    b58e:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
    b595:	49 be ff ff ff ff ff ff ff 07 	movabs r14,0x7ffffffffffffff
    b59f:	90                   	nop
    b5a0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
    b5a7:	66 0f ef c0          	pxor   xmm0,xmm0
    b5ab:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
    b5af:	48 2b 18             	sub    rbx,QWORD PTR [rax]
    b5b2:	41 0f 11 04 24       	movups XMMWORD PTR [r12],xmm0
    b5b7:	49 c7 44 24 10 00 00 00 00 	mov    QWORD PTR [r12+0x10],0x0
    b5c0:	48 89 d8             	mov    rax,rbx
    b5c3:	48 c1 f8 04          	sar    rax,0x4
    b5c7:	0f 84 15 07 00 00    	je     bce2 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xd72>
    b5cd:	4c 39 f0             	cmp    rax,r14
    b5d0:	0f 87 af 09 00 00    	ja     bf85 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1015>
    b5d6:	48 89 df             	mov    rdi,rbx
    b5d9:	e8 d2 82 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    b5de:	48 01 c3             	add    rbx,rax
    b5e1:	66 48 0f 6e c0       	movq   xmm0,rax
    b5e6:	49 89 5c 24 10       	mov    QWORD PTR [r12+0x10],rbx
    b5eb:	48 8b 9d 28 ff ff ff 	mov    rbx,QWORD PTR [rbp-0xd8]
    b5f2:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    b5f6:	41 0f 11 04 24       	movups XMMWORD PTR [r12],xmm0
    b5fb:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
    b5ff:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
    b602:	48 39 f2             	cmp    rdx,rsi
    b605:	74 3b                	je     b642 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6d2>
    b607:	4c 8d 42 f0          	lea    r8,[rdx-0x10]
    b60b:	31 c9                	xor    ecx,ecx
    b60d:	31 d2                	xor    edx,edx
    b60f:	49 29 f0             	sub    r8,rsi
    b612:	4c 89 c7             	mov    rdi,r8
    b615:	48 c1 ef 04          	shr    rdi,0x4
    b619:	48 83 c7 01          	add    rdi,0x1
    b61d:	0f 1f 00             	nop    DWORD PTR [rax]
    b620:	f3 0f 6f 0c 16       	movdqu xmm1,XMMWORD PTR [rsi+rdx*1]
    b625:	48 83 c1 01          	add    rcx,0x1
    b629:	0f 11 0c 10          	movups XMMWORD PTR [rax+rdx*1],xmm1
    b62d:	48 83 c2 10          	add    rdx,0x10
    b631:	48 39 f9             	cmp    rcx,rdi
    b634:	72 ea                	jb     b620 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x6b0>
    b636:	48 89 9d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rbx
    b63d:	4a 8d 44 00 10       	lea    rax,[rax+r8*1+0x10]
    b642:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
    b647:	49 83 c4 18          	add    r12,0x18
    b64b:	48 83 85 28 ff ff ff 18 	add    QWORD PTR [rbp-0xd8],0x18
    b653:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
    b65a:	49 39 c7             	cmp    r15,rax
    b65d:	0f 85 3d ff ff ff    	jne    b5a0 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x630>
    b663:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
    b669:	4c 8d 7d b0          	lea    r15,[rbp-0x50]
    b66d:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    b673:	48 8d bd 50 ff ff ff 	lea    rdi,[rbp-0xb0]
    b67a:	4c 8b 8d 00 ff ff ff 	mov    r9,QWORD PTR [rbp-0x100]
    b681:	4c 89 f9             	mov    rcx,r15
    b684:	4c 89 65 b8          	mov    QWORD PTR [rbp-0x48],r12
    b688:	49 89 fe             	mov    r14,rdi
    b68b:	4c 8b 85 10 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf0]
    b692:	48 8b 95 50 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1b0]
    b699:	50                   	push   rax
    b69a:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
    b6a0:	48 8b b5 58 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a8]
    b6a7:	50                   	push   rax
    b6a8:	ff b5 68 fe ff ff    	push   QWORD PTR [rbp-0x198]
    b6ae:	e8 0d d1 ff ff       	call   87c0 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)>
    b6b3:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
    b6b7:	4c 8b 65 b0          	mov    r12,QWORD PTR [rbp-0x50]
    b6bb:	48 83 c4 20          	add    rsp,0x20
    b6bf:	4c 39 e3             	cmp    rbx,r12
    b6c2:	74 23                	je     b6e7 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x777>
    b6c4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    b6c8:	49 8b 3c 24          	mov    rdi,QWORD PTR [r12]
    b6cc:	48 85 ff             	test   rdi,rdi
    b6cf:	0f 84 fb 05 00 00    	je     bcd0 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xd60>
    b6d5:	e8 96 81 ff ff       	call   3870 <operator delete(void*)@plt>
    b6da:	49 83 c4 18          	add    r12,0x18
    b6de:	49 39 dc             	cmp    r12,rbx
    b6e1:	75 e5                	jne    b6c8 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x758>
    b6e3:	4c 8b 65 b0          	mov    r12,QWORD PTR [rbp-0x50]
    b6e7:	4d 85 e4             	test   r12,r12
    b6ea:	74 08                	je     b6f4 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x784>
    b6ec:	4c 89 e7             	mov    rdi,r12
    b6ef:	e8 7c 81 ff ff       	call   3870 <operator delete(void*)@plt>
    b6f4:	48 8b bd 50 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1b0]
    b6fb:	4c 89 f6             	mov    rsi,r14
    b6fe:	e8 1d d4 ff ff       	call   8b20 <std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&)>
    b703:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
    b70a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    b70d:	83 b8 ac 35 03 00 01 	cmp    DWORD PTR [rax+0x335ac],0x1
    b714:	0f 84 cf 05 00 00    	je     bce9 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xd79>
    b71a:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
    b720:	ff b5 40 fe ff ff    	push   QWORD PTR [rbp-0x1c0]
    b726:	4c 8b 8d 10 ff ff ff 	mov    r9,QWORD PTR [rbp-0xf0]
    b72d:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    b733:	4c 8b 85 00 ff ff ff 	mov    r8,QWORD PTR [rbp-0x100]
    b73a:	50                   	push   rax
    b73b:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
    b741:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
    b748:	48 8b 95 38 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c8]
    b74f:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    b756:	50                   	push   rax
    b757:	48 8b bd 48 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1b8]
    b75e:	ff b5 a0 fe ff ff    	push   QWORD PTR [rbp-0x160]
    b764:	ff b5 68 fe ff ff    	push   QWORD PTR [rbp-0x198]
    b76a:	ff b5 50 fe ff ff    	push   QWORD PTR [rbp-0x1b0]
    b770:	ff b5 58 fe ff ff    	push   QWORD PTR [rbp-0x1a8]
    b776:	ff b5 b0 fe ff ff    	push   QWORD PTR [rbp-0x150]
    b77c:	ff b5 d8 fe ff ff    	push   QWORD PTR [rbp-0x128]
    b782:	e8 29 f3 ff ff       	call   aab0 <void trace_WM2<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)>
    b787:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
    b78e:	48 83 c4 50          	add    rsp,0x50
    b792:	48 85 ff             	test   rdi,rdi
    b795:	74 05                	je     b79c <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x82c>
    b797:	e8 d4 80 ff ff       	call   3870 <operator delete(void*)@plt>
    b79c:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
    b7a3:	48 85 ff             	test   rdi,rdi
    b7a6:	0f 84 2e fc ff ff    	je     b3da <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x46a>
    b7ac:	e8 bf 80 ff ff       	call   3870 <operator delete(void*)@plt>
    b7b1:	e9 24 fc ff ff       	jmp    b3da <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x46a>
    b7b6:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    b7c0:	41 83 fc 01          	cmp    r12d,0x1
    b7c4:	0f 84 b6 02 00 00    	je     ba80 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xb10>
    b7ca:	41 83 fc 02          	cmp    r12d,0x2
    b7ce:	0f 84 4c 02 00 00    	je     ba20 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xab0>
    b7d4:	41 83 fc 1d          	cmp    r12d,0x1d
    b7d8:	0f 8f da 02 00 00    	jg     bab8 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xb48>
    b7de:	42 8b b4 b1 fc 01 00 00 	mov    esi,DWORD PTR [rcx+r14*4+0x1fc]
    b7e6:	41 83 ec 01          	sub    r12d,0x1
    b7ea:	44 0f af a1 80 1d 03 00 	imul   r12d,DWORD PTR [rcx+0x31d80]
    b7f2:	8b 3d 28 1a 1e 00    	mov    edi,DWORD PTR [rip+0x1e1a28]        # 1ed220 <MAX_NINIO>
    b7f8:	4f 8d 04 80          	lea    r8,[r8+r8*4]
    b7fc:	4c 63 8d f0 fe ff ff 	movsxd r9,DWORD PTR [rbp-0x110]
    b803:	41 39 fc             	cmp    r12d,edi
    b806:	4f 8d 0c 89          	lea    r9,[r9+r9*4]
    b80a:	44 0f 4f e7          	cmovg  r12d,edi
    b80e:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
    b815:	48 8d 3c bf          	lea    rdi,[rdi+rdi*4]
    b819:	44 01 e6             	add    esi,r12d
    b81c:	48 8d 3c bf          	lea    rdi,[rdi+rdi*4]
    b820:	4c 01 c7             	add    rdi,r8
    b823:	4f 8d 44 ad 00       	lea    r8,[r13+r13*4+0x0]
    b828:	49 8d bc 3a 2c 02 00 00 	lea    rdi,[r10+rdi*1+0x22c]
    b830:	4f 8d 04 80          	lea    r8,[r8+r8*4]
    b834:	4c 63 95 e8 fe ff ff 	movsxd r10,DWORD PTR [rbp-0x118]
    b83b:	4d 01 c8             	add    r8,r9
    b83e:	44 8b 74 b9 08       	mov    r14d,DWORD PTR [rcx+rdi*4+0x8]
    b843:	4f 8d 84 02 2c 02 00 00 	lea    r8,[r10+r8*1+0x22c]
    b84b:	46 8b 64 81 08       	mov    r12d,DWORD PTR [rcx+r8*4+0x8]
    b850:	45 01 e6             	add    r14d,r12d
    b853:	41 01 f6             	add    r14d,esi
    b856:	e9 26 fa ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    b85b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    b860:	f2 0f 10 a1 90 1d 03 00 	movsd  xmm4,QWORD PTR [rcx+0x31d90]
    b868:	66 0f ef c0          	pxor   xmm0,xmm0
    b86c:	44 8b b1 f8 01 00 00 	mov    r14d,DWORD PTR [rcx+0x1f8]
    b873:	4c 89 9d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],r11
    b87a:	89 95 90 fe ff ff    	mov    DWORD PTR [rbp-0x170],edx
    b880:	f2 41 0f 2a c4       	cvtsi2sd xmm0,r12d
    b885:	f2 0f 5e 05 83 90 02 00 	divsd  xmm0,QWORD PTR [rip+0x29083]        # 34910 <Law_and_Order+0x70>
    b88d:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    b893:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
    b89a:	f2 0f 11 a5 f0 fe ff ff 	movsd  QWORD PTR [rbp-0x110],xmm4
    b8a2:	e8 79 7f ff ff       	call   3820 <log@plt>
    b8a7:	f2 0f 59 85 f0 fe ff ff 	mulsd  xmm0,QWORD PTR [rbp-0x110]
    b8af:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
    b8b6:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    b8bc:	48 63 95 90 fe ff ff 	movsxd rdx,DWORD PTR [rbp-0x170]
    b8c3:	4c 8b 9d 88 fe ff ff 	mov    r11,QWORD PTR [rbp-0x178]
    b8ca:	f2 0f 2c f0          	cvttsd2si esi,xmm0
    b8ce:	41 01 f6             	add    r14d,esi
    b8d1:	83 bd bc fe ff ff 02 	cmp    DWORD PTR [rbp-0x144],0x2
    b8d8:	7e 07                	jle    b8e1 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x971>
    b8da:	44 03 b1 d4 1d 03 00 	add    r14d,DWORD PTR [rcx+0x31dd4]
    b8e1:	41 83 fd 02          	cmp    r13d,0x2
    b8e5:	0f 8e 96 f9 ff ff    	jle    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    b8eb:	44 03 b1 d4 1d 03 00 	add    r14d,DWORD PTR [rcx+0x31dd4]
    b8f2:	e9 8a f9 ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    b8f7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    b900:	41 83 fc 02          	cmp    r12d,0x2
    b904:	0f 84 2b 03 00 00    	je     bc35 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xcc5>
    b90a:	41 83 fc 03          	cmp    r12d,0x3
    b90e:	0f 85 e9 f8 ff ff    	jne    b1fd <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x28d>
    b914:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
    b91b:	4c 63 8d f0 fe ff ff 	movsxd r9,DWORD PTR [rbp-0x110]
    b922:	44 8b a1 80 1d 03 00 	mov    r12d,DWORD PTR [rcx+0x31d80]
    b929:	44 03 a1 10 02 00 00 	add    r12d,DWORD PTR [rcx+0x210]
    b930:	48 8d 34 bf          	lea    rsi,[rdi+rdi*4]
    b934:	4b 8d 3c 80          	lea    rdi,[r8+r8*4]
    b938:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    b93c:	4f 8d 04 89          	lea    r8,[r9+r9*4]
    b940:	48 01 fe             	add    rsi,rdi
    b943:	4b 8d 7c ad 00       	lea    rdi,[r13+r13*4+0x0]
    b948:	49 8d b4 32 f4 02 00 00 	lea    rsi,[r10+rsi*1+0x2f4]
    b950:	48 8d 3c bf          	lea    rdi,[rdi+rdi*4]
    b954:	4c 63 95 e8 fe ff ff 	movsxd r10,DWORD PTR [rbp-0x118]
    b95b:	4c 01 c7             	add    rdi,r8
    b95e:	49 8d bc 3a f4 02 00 00 	lea    rdi,[r10+rdi*1+0x2f4]
    b966:	8b 7c b9 08          	mov    edi,DWORD PTR [rcx+rdi*4+0x8]
    b96a:	03 7c b1 08          	add    edi,DWORD PTR [rcx+rsi*4+0x8]
    b96e:	41 89 fe             	mov    r14d,edi
    b971:	45 01 e6             	add    r14d,r12d
    b974:	e9 08 f9 ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    b979:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    b980:	f2 0f 10 99 90 1d 03 00 	movsd  xmm3,QWORD PTR [rcx+0x31d90]
    b988:	66 0f ef c0          	pxor   xmm0,xmm0
    b98c:	44 8b b1 74 02 00 00 	mov    r14d,DWORD PTR [rcx+0x274]
    b993:	4c 89 9d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],r11
    b99a:	f2 0f 2a c6          	cvtsi2sd xmm0,esi
    b99e:	89 95 78 fe ff ff    	mov    DWORD PTR [rbp-0x188],edx
    b9a4:	f2 0f 5e 05 64 8f 02 00 	divsd  xmm0,QWORD PTR [rip+0x28f64]        # 34910 <Law_and_Order+0x70>
    b9ac:	89 bd 7c fe ff ff    	mov    DWORD PTR [rbp-0x184],edi
    b9b2:	44 89 85 80 fe ff ff 	mov    DWORD PTR [rbp-0x180],r8d
    b9b9:	44 89 95 84 fe ff ff 	mov    DWORD PTR [rbp-0x17c],r10d
    b9c0:	89 85 88 fe ff ff    	mov    DWORD PTR [rbp-0x178],eax
    b9c6:	48 89 8d 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rcx
    b9cd:	f2 0f 11 9d 98 fe ff ff 	movsd  QWORD PTR [rbp-0x168],xmm3
    b9d5:	e8 46 7e ff ff       	call   3820 <log@plt>
    b9da:	f2 0f 59 85 98 fe ff ff 	mulsd  xmm0,QWORD PTR [rbp-0x168]
    b9e2:	4c 8b 9d 70 fe ff ff 	mov    r11,QWORD PTR [rbp-0x190]
    b9e9:	48 63 95 78 fe ff ff 	movsxd rdx,DWORD PTR [rbp-0x188]
    b9f0:	8b bd 7c fe ff ff    	mov    edi,DWORD PTR [rbp-0x184]
    b9f6:	4c 63 85 80 fe ff ff 	movsxd r8,DWORD PTR [rbp-0x180]
    b9fd:	4c 63 95 84 fe ff ff 	movsxd r10,DWORD PTR [rbp-0x17c]
    ba04:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
    ba0a:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
    ba11:	f2 0f 2c f0          	cvttsd2si esi,xmm0
    ba15:	41 01 f6             	add    r14d,esi
    ba18:	e9 f8 f7 ff ff       	jmp    b215 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x2a5>
    ba1d:	0f 1f 00             	nop    DWORD PTR [rax]
    ba20:	83 fe 01             	cmp    esi,0x1
    ba23:	0f 84 5d 02 00 00    	je     bc86 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xd16>
    ba29:	4c 63 8d f0 fe ff ff 	movsxd r9,DWORD PTR [rbp-0x110]
    ba30:	4c 8b b5 f8 fe ff ff 	mov    r14,QWORD PTR [rbp-0x108]
    ba37:	4d 69 ed e8 03 00 00 	imul   r13,r13,0x3e8
    ba3e:	4c 63 95 e8 fe ff ff 	movsxd r10,DWORD PTR [rbp-0x118]
    ba45:	4b 8d 34 89          	lea    rsi,[r9+r9*4]
    ba49:	48 8d 3c b6          	lea    rdi,[rsi+rsi*4]
    ba4d:	4b 8d 34 80          	lea    rsi,[r8+r8*4]
    ba51:	48 01 f7             	add    rdi,rsi
    ba54:	4c 89 f6             	mov    rsi,r14
    ba57:	48 c1 e6 05          	shl    rsi,0x5
    ba5b:	4c 29 f6             	sub    rsi,r14
    ba5e:	49 8d 34 b6          	lea    rsi,[r14+rsi*4]
    ba62:	48 01 fe             	add    rsi,rdi
    ba65:	4c 01 ee             	add    rsi,r13
    ba68:	49 8d b4 32 dc 0b 00 00 	lea    rsi,[r10+rsi*1+0xbdc]
    ba70:	44 8b 74 b1 08       	mov    r14d,DWORD PTR [rcx+rsi*4+0x8]
    ba75:	e9 07 f8 ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    ba7a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    ba80:	4b 8d 74 ad 00       	lea    rsi,[r13+r13*4+0x0]
    ba85:	4b 8d 3c 80          	lea    rdi,[r8+r8*4]
    ba89:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    ba8d:	48 01 fe             	add    rsi,rdi
    ba90:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
    ba97:	48 8d 3c bf          	lea    rdi,[rdi+rdi*4]
    ba9b:	48 8d 3c bf          	lea    rdi,[rdi+rdi*4]
    ba9f:	48 8d 34 fe          	lea    rsi,[rsi+rdi*8]
    baa3:	49 8d b4 32 9c 05 00 00 	lea    rsi,[r10+rsi*1+0x59c]
    baab:	44 8b 74 b1 08       	mov    r14d,DWORD PTR [rcx+rsi*4+0x8]
    bab0:	e9 cc f7 ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    bab5:	0f 1f 00             	nop    DWORD PTR [rax]
    bab8:	f2 0f 10 a9 90 1d 03 00 	movsd  xmm5,QWORD PTR [rcx+0x31d90]
    bac0:	89 85 84 fe ff ff    	mov    DWORD PTR [rbp-0x17c],eax
    bac6:	66 0f ef c0          	pxor   xmm0,xmm0
    baca:	8b 81 74 02 00 00    	mov    eax,DWORD PTR [rcx+0x274]
    bad0:	4c 89 9d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],r11
    bad7:	f2 41 0f 2a c6       	cvtsi2sd xmm0,r14d
    badc:	f2 0f 5e 05 2c 8e 02 00 	divsd  xmm0,QWORD PTR [rip+0x28e2c]        # 34910 <Law_and_Order+0x70>
    bae4:	89 95 78 fe ff ff    	mov    DWORD PTR [rbp-0x188],edx
    baea:	44 89 85 7c fe ff ff 	mov    DWORD PTR [rbp-0x184],r8d
    baf1:	44 89 95 80 fe ff ff 	mov    DWORD PTR [rbp-0x180],r10d
    baf8:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    bafe:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
    bb05:	f2 0f 11 ad 90 fe ff ff 	movsd  QWORD PTR [rbp-0x170],xmm5
    bb0d:	e8 0e 7d ff ff       	call   3820 <log@plt>
    bb12:	f2 0f 59 85 90 fe ff ff 	mulsd  xmm0,QWORD PTR [rbp-0x170]
    bb1a:	4c 8b 9d 70 fe ff ff 	mov    r11,QWORD PTR [rbp-0x190]
    bb21:	48 63 95 78 fe ff ff 	movsxd rdx,DWORD PTR [rbp-0x188]
    bb28:	4c 63 85 7c fe ff ff 	movsxd r8,DWORD PTR [rbp-0x184]
    bb2f:	4c 63 95 80 fe ff ff 	movsxd r10,DWORD PTR [rbp-0x180]
    bb36:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [rbp-0x17c]
    bb3c:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
    bb43:	f2 0f 2c f0          	cvttsd2si esi,xmm0
    bb47:	03 b5 98 fe ff ff    	add    esi,DWORD PTR [rbp-0x168]
    bb4d:	e9 94 fc ff ff       	jmp    b7e6 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x876>
    bb52:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    bb58:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
    bb5f:	4c 89 e2             	mov    rdx,r12
    bb62:	4c 89 fe             	mov    rsi,r15
    bb65:	e8 06 0b 00 00       	call   c670 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)>
    bb6a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    bb6d:	4c 01 fa             	add    rdx,r15
    bb70:	48 89 d3             	mov    rbx,rdx
    bb73:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
    bb77:	49 29 d4             	sub    r12,rdx
    bb7a:	44 39 eb             	cmp    ebx,r13d
    bb7d:	0f 8e 0c 04 00 00    	jle    bf8f <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x101f>
    bb83:	44 39 65 48          	cmp    DWORD PTR [rbp+0x48],r12d
    bb87:	0f 8e 45 04 00 00    	jle    bfd2 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1062>
    bb8d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    bb90:	48 83 ec 08          	sub    rsp,0x8
    bb94:	ff b5 40 fe ff ff    	push   QWORD PTR [rbp-0x1c0]
    bb9a:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    bba0:	50                   	push   rax
    bba1:	41 54                	push   r12
    bba3:	53                   	push   rbx
    bba4:	e9 da f7 ff ff       	jmp    b383 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x413>
    bba9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    bbb0:	48 8b 16             	mov    rdx,QWORD PTR [rsi]
    bbb3:	4b 8d 04 64          	lea    rax,[r12+r12*2]
    bbb7:	4c 89 fb             	mov    rbx,r15
    bbba:	48 8d 04 c2          	lea    rax,[rdx+rax*8]
    bbbe:	4c 8b 48 08          	mov    r9,QWORD PTR [rax+0x8]
    bbc2:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    bbc5:	4c 89 c8             	mov    rax,r9
    bbc8:	48 29 f8             	sub    rax,rdi
    bbcb:	48 c1 f8 04          	sar    rax,0x4
    bbcf:	90                   	nop
    bbd0:	48 85 c0             	test   rax,rax
    bbd3:	7e 28                	jle    bbfd <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xc8d>
    bbd5:	48 89 c1             	mov    rcx,rax
    bbd8:	48 d1 f9             	sar    rcx,1
    bbdb:	48 89 ca             	mov    rdx,rcx
    bbde:	48 c1 e2 04          	shl    rdx,0x4
    bbe2:	48 01 fa             	add    rdx,rdi
    bbe5:	48 63 32             	movsxd rsi,DWORD PTR [rdx]
    bbe8:	48 39 de             	cmp    rsi,rbx
    bbeb:	76 43                	jbe    bc30 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xcc0>
    bbed:	48 29 c8             	sub    rax,rcx
    bbf0:	48 8d 7a 10          	lea    rdi,[rdx+0x10]
    bbf4:	48 83 e8 01          	sub    rax,0x1
    bbf8:	48 85 c0             	test   rax,rax
    bbfb:	7f d8                	jg     bbd5 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xc65>
    bbfd:	49 89 df             	mov    r15,rbx
    bc00:	49 39 f9             	cmp    r9,rdi
    bc03:	0f 84 41 f4 ff ff    	je     b04a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xda>
    bc09:	44 39 2f             	cmp    DWORD PTR [rdi],r13d
    bc0c:	0f 85 38 f4 ff ff    	jne    b04a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xda>
    bc12:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
    bc19:	41 c6 00 7b          	mov    BYTE PTR [r8],0x7b
    bc1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    bc20:	42 c6 04 20 7d       	mov    BYTE PTR [rax+r12*1],0x7d
    bc25:	e9 33 f4 ff ff       	jmp    b05d <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xed>
    bc2a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    bc30:	48 89 c8             	mov    rax,rcx
    bc33:	eb 9b                	jmp    bbd0 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xc60>
    bc35:	48 63 b5 e8 fe ff ff 	movsxd rsi,DWORD PTR [rbp-0x118]
    bc3c:	4d 69 ed 71 02 00 00 	imul   r13,r13,0x271
    bc43:	4c 89 c7             	mov    rdi,r8
    bc46:	4c 63 8d f0 fe ff ff 	movsxd r9,DWORD PTR [rbp-0x110]
    bc4d:	48 c1 e7 05          	shl    rdi,0x5
    bc51:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    bc55:	4c 29 c7             	sub    rdi,r8
    bc58:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    bc5c:	49 8d 3c b8          	lea    rdi,[r8+rdi*4]
    bc60:	4c 01 ee             	add    rsi,r13
    bc63:	48 01 fe             	add    rsi,rdi
    bc66:	4b 8d 3c 89          	lea    rdi,[r9+r9*4]
    bc6a:	48 01 fe             	add    rsi,rdi
    bc6d:	48 03 b5 30 fe ff ff 	add    rsi,QWORD PTR [rbp-0x1d0]
    bc74:	49 8d b4 32 1c 2b 00 00 	lea    rsi,[r10+rsi*1+0x2b1c]
    bc7c:	44 8b 74 b1 08       	mov    r14d,DWORD PTR [rcx+rsi*4+0x8]
    bc81:	e9 fb f5 ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    bc86:	4c 63 8d f0 fe ff ff 	movsxd r9,DWORD PTR [rbp-0x110]
    bc8d:	4b 8d 34 80          	lea    rsi,[r8+r8*4]
    bc91:	48 8d 34 b6          	lea    rsi,[rsi+rsi*4]
    bc95:	4b 8d 3c 89          	lea    rdi,[r9+r9*4]
    bc99:	48 01 fe             	add    rsi,rdi
    bc9c:	4c 89 ef             	mov    rdi,r13
    bc9f:	48 c1 e7 05          	shl    rdi,0x5
    bca3:	4c 29 ef             	sub    rdi,r13
    bca6:	49 8d 7c bd 00       	lea    rdi,[r13+rdi*4+0x0]
    bcab:	48 01 fe             	add    rsi,rdi
    bcae:	48 03 b5 28 fe ff ff 	add    rsi,QWORD PTR [rbp-0x1d8]
    bcb5:	49 8d b4 32 dc 0b 00 00 	lea    rsi,[r10+rsi*1+0xbdc]
    bcbd:	44 8b 74 b1 08       	mov    r14d,DWORD PTR [rcx+rsi*4+0x8]
    bcc2:	e9 ba f5 ff ff       	jmp    b281 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x311>
    bcc7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    bcd0:	49 83 c4 18          	add    r12,0x18
    bcd4:	4c 39 e3             	cmp    rbx,r12
    bcd7:	0f 85 eb f9 ff ff    	jne    b6c8 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x758>
    bcdd:	e9 01 fa ff ff       	jmp    b6e3 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x773>
    bce2:	31 c0                	xor    eax,eax
    bce4:	e9 f5 f8 ff ff       	jmp    b5de <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x66e>
    bce9:	8b 95 b8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x148]
    bcef:	41 8d 45 02          	lea    eax,[r13+0x2]
    bcf3:	ff b5 40 fe ff ff    	push   QWORD PTR [rbp-0x1c0]
    bcf9:	48 8d bd 70 ff ff ff 	lea    rdi,[rbp-0x90]
    bd00:	48 8b 9d 08 ff ff ff 	mov    rbx,QWORD PTR [rbp-0xf8]
    bd07:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    bd0d:	4c 8b 8d 68 fe ff ff 	mov    r9,QWORD PTR [rbp-0x198]
    bd14:	52                   	push   rdx
    bd15:	50                   	push   rax
    bd16:	4c 8b 85 00 ff ff ff 	mov    r8,QWORD PTR [rbp-0x100]
    bd1d:	48 89 da             	mov    rdx,rbx
    bd20:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
    bd27:	48 8b b5 58 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a8]
    bd2e:	89 85 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],eax
    bd34:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
    bd3b:	e8 70 c7 ff ff       	call   84b0 <auto recompute_WM<std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, short* const&, vrna_param_s* const&, int const&, int, int, int const*, int const*)>
    bd40:	4c 8b 73 08          	mov    r14,QWORD PTR [rbx+0x8]
    bd44:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
    bd47:	66 0f ef c0          	pxor   xmm0,xmm0
    bd4b:	48 83 c4 20          	add    rsp,0x20
    bd4f:	48 c7 45 c0 00 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
    bd57:	4c 89 f3             	mov    rbx,r14
    bd5a:	48 89 d1             	mov    rcx,rdx
    bd5d:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    bd61:	48 29 d3             	sub    rbx,rdx
    bd64:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
    bd6e:	48 89 d8             	mov    rax,rbx
    bd71:	48 c1 f8 03          	sar    rax,0x3
    bd75:	48 0f af c2          	imul   rax,rdx
    bd79:	48 85 c0             	test   rax,rax
    bd7c:	0f 84 e9 01 00 00    	je     bf6b <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xffb>
    bd82:	48 ba 55 55 55 55 55 55 55 05 	movabs rdx,0x555555555555555
    bd8c:	48 39 d0             	cmp    rax,rdx
    bd8f:	0f 87 eb 01 00 00    	ja     bf80 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1010>
    bd95:	48 89 df             	mov    rdi,rbx
    bd98:	e8 13 7b ff ff       	call   38b0 <operator new(unsigned long)@plt>
    bd9d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
    bda4:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    bdab:	4c 8b 70 08          	mov    r14,QWORD PTR [rax+0x8]
    bdaf:	48 8b 00             	mov    rax,QWORD PTR [rax]
    bdb2:	48 89 c1             	mov    rcx,rax
    bdb5:	4c 8b a5 28 ff ff ff 	mov    r12,QWORD PTR [rbp-0xd8]
    bdbc:	66 49 0f 6e c4       	movq   xmm0,r12
    bdc1:	4c 01 e3             	add    rbx,r12
    bdc4:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    bdc8:	48 89 5d c0          	mov    QWORD PTR [rbp-0x40],rbx
    bdcc:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    bdd0:	49 39 ce             	cmp    r14,rcx
    bdd3:	0f 84 c1 00 00 00    	je     be9a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xf2a>
    bdd9:	49 89 cd             	mov    r13,rcx
    bddc:	49 8b 5d 08          	mov    rbx,QWORD PTR [r13+0x8]
    bde0:	49 2b 5d 00          	sub    rbx,QWORD PTR [r13+0x0]
    bde4:	66 0f ef c0          	pxor   xmm0,xmm0
    bde8:	49 c7 44 24 10 00 00 00 00 	mov    QWORD PTR [r12+0x10],0x0
    bdf1:	48 89 d8             	mov    rax,rbx
    bdf4:	41 0f 11 04 24       	movups XMMWORD PTR [r12],xmm0
    bdf9:	48 c1 f8 04          	sar    rax,0x4
    bdfd:	0f 84 51 01 00 00    	je     bf54 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfe4>
    be03:	48 ba ff ff ff ff ff ff ff 07 	movabs rdx,0x7ffffffffffffff
    be0d:	48 39 d0             	cmp    rax,rdx
    be10:	0f 87 65 01 00 00    	ja     bf7b <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x100b>
    be16:	48 89 df             	mov    rdi,rbx
    be19:	e8 92 7a ff ff       	call   38b0 <operator new(unsigned long)@plt>
    be1e:	48 89 c1             	mov    rcx,rax
    be21:	66 48 0f 6e c1       	movq   xmm0,rcx
    be26:	48 01 cb             	add    rbx,rcx
    be29:	66 0f 6c c0          	punpcklqdq xmm0,xmm0
    be2d:	49 89 5c 24 10       	mov    QWORD PTR [r12+0x10],rbx
    be32:	4c 89 eb             	mov    rbx,r13
    be35:	41 0f 11 04 24       	movups XMMWORD PTR [r12],xmm0
    be3a:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
    be3e:	49 8b 75 00          	mov    rsi,QWORD PTR [r13+0x0]
    be42:	48 39 f0             	cmp    rax,rsi
    be45:	74 37                	je     be7e <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xf0e>
    be47:	4c 8d 40 f0          	lea    r8,[rax-0x10]
    be4b:	31 d2                	xor    edx,edx
    be4d:	31 c0                	xor    eax,eax
    be4f:	49 29 f0             	sub    r8,rsi
    be52:	4c 89 c7             	mov    rdi,r8
    be55:	48 c1 ef 04          	shr    rdi,0x4
    be59:	48 83 c7 01          	add    rdi,0x1
    be5d:	0f 1f 00             	nop    DWORD PTR [rax]
    be60:	f3 0f 6f 14 06       	movdqu xmm2,XMMWORD PTR [rsi+rax*1]
    be65:	48 83 c2 01          	add    rdx,0x1
    be69:	0f 11 14 01          	movups XMMWORD PTR [rcx+rax*1],xmm2
    be6d:	48 83 c0 10          	add    rax,0x10
    be71:	48 39 fa             	cmp    rdx,rdi
    be74:	72 ea                	jb     be60 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xef0>
    be76:	49 89 dd             	mov    r13,rbx
    be79:	4a 8d 4c 01 10       	lea    rcx,[rcx+r8*1+0x10]
    be7e:	4c 89 e8             	mov    rax,r13
    be81:	49 89 4c 24 08       	mov    QWORD PTR [r12+0x8],rcx
    be86:	49 83 c4 18          	add    r12,0x18
    be8a:	48 83 c0 18          	add    rax,0x18
    be8e:	49 89 c5             	mov    r13,rax
    be91:	49 39 c6             	cmp    r14,rax
    be94:	0f 85 42 ff ff ff    	jne    bddc <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xe6c>
    be9a:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
    bea0:	ff b5 60 fe ff ff    	push   QWORD PTR [rbp-0x1a0]
    bea6:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
    beaa:	4c 89 f9             	mov    rcx,r15
    bead:	4c 8b 8d 00 ff ff ff 	mov    r9,QWORD PTR [rbp-0x100]
    beb4:	4c 89 65 b8          	mov    QWORD PTR [rbp-0x48],r12
    beb8:	4c 8b 85 10 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf0]
    bebf:	48 8b 95 50 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1b0]
    bec6:	50                   	push   rax
    bec7:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
    becd:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
    bed4:	50                   	push   rax
    bed5:	ff b5 68 fe ff ff    	push   QWORD PTR [rbp-0x198]
    bedb:	e8 e0 c8 ff ff       	call   87c0 <auto recompute_WM2<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short*, vrna_param_s*, int>(std::vector<int, std::allocator<int> > const&, std::vector<int, std::allocator<int> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, short* const&, vrna_param_s* const&, int const&, int, int, int const*)>
    bee0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    bee4:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
    bee8:	48 83 c4 20          	add    rsp,0x20
    beec:	48 89 c7             	mov    rdi,rax
    beef:	48 39 c3             	cmp    rbx,rax
    bef2:	74 23                	je     bf17 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfa7>
    bef4:	48 8b 38             	mov    rdi,QWORD PTR [rax]
    bef7:	49 89 c7             	mov    r15,rax
    befa:	48 85 ff             	test   rdi,rdi
    befd:	74 4a                	je     bf49 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfd9>
    beff:	e8 6c 79 ff ff       	call   3870 <operator delete(void*)@plt>
    bf04:	49 83 c7 18          	add    r15,0x18
    bf08:	4c 89 f8             	mov    rax,r15
    bf0b:	4c 39 fb             	cmp    rbx,r15
    bf0e:	75 e4                	jne    bef4 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xf84>
    bf10:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    bf14:	48 89 c7             	mov    rdi,rax
    bf17:	48 85 ff             	test   rdi,rdi
    bf1a:	74 05                	je     bf21 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfb1>
    bf1c:	e8 4f 79 ff ff       	call   3870 <operator delete(void*)@plt>
    bf21:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
    bf25:	48 85 ff             	test   rdi,rdi
    bf28:	74 05                	je     bf2f <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfbf>
    bf2a:	e8 41 79 ff ff       	call   3870 <operator delete(void*)@plt>
    bf2f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
    bf36:	48 85 ff             	test   rdi,rdi
    bf39:	0f 84 db f7 ff ff    	je     b71a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x7aa>
    bf3f:	e8 2c 79 ff ff       	call   3870 <operator delete(void*)@plt>
    bf44:	e9 d1 f7 ff ff       	jmp    b71a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x7aa>
    bf49:	48 83 c0 18          	add    rax,0x18
    bf4d:	48 39 c3             	cmp    rbx,rax
    bf50:	75 a2                	jne    bef4 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xf84>
    bf52:	eb bc                	jmp    bf10 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xfa0>
    bf54:	31 c9                	xor    ecx,ecx
    bf56:	e9 c6 fe ff ff       	jmp    be21 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xeb1>
    bf5b:	48 c7 85 18 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xe8],0x0
    bf66:	e9 ff f5 ff ff       	jmp    b56a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x5fa>
    bf6b:	48 c7 85 28 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xd8],0x0
    bf76:	e9 3a fe ff ff       	jmp    bdb5 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0xe45>
    bf7b:	e8 50 77 ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    bf80:	e8 4b 77 ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    bf85:	e8 46 77 ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    bf8a:	e8 41 77 ff ff       	call   36d0 <std::__throw_bad_alloc()@plt>
    bf8f:	48 8d 0d 6a 81 02 00 	lea    rcx,[rip+0x2816a]        # 34100 <_IO_stdin_used+0x1100>
    bf96:	ba e1 02 00 00       	mov    edx,0x2e1
    bf9b:	48 8d 35 16 79 02 00 	lea    rsi,[rip+0x27916]        # 338b8 <_IO_stdin_used+0x8b8>
    bfa2:	48 8d 3d 14 84 02 00 	lea    rdi,[rip+0x28414]        # 343bd <_IO_stdin_used+0x13bd>
    bfa9:	e8 22 78 ff ff       	call   37d0 <__assert_fail@plt>
    bfae:	e8 3d 79 ff ff       	call   38f0 <__stack_chk_fail@plt>
    bfb3:	48 8d 0d 46 81 02 00 	lea    rcx,[rip+0x28146]        # 34100 <_IO_stdin_used+0x1100>
    bfba:	ba d2 02 00 00       	mov    edx,0x2d2
    bfbf:	48 8d 35 f2 78 02 00 	lea    rsi,[rip+0x278f2]        # 338b8 <_IO_stdin_used+0x8b8>
    bfc6:	48 8d 3d e4 83 02 00 	lea    rdi,[rip+0x283e4]        # 343b1 <_IO_stdin_used+0x13b1>
    bfcd:	e8 fe 77 ff ff       	call   37d0 <__assert_fail@plt>
    bfd2:	48 8d 0d 27 81 02 00 	lea    rcx,[rip+0x28127]        # 34100 <_IO_stdin_used+0x1100>
    bfd9:	ba e2 02 00 00       	mov    edx,0x2e2
    bfde:	48 8d 35 d3 78 02 00 	lea    rsi,[rip+0x278d3]        # 338b8 <_IO_stdin_used+0x8b8>
    bfe5:	48 8d 3d d5 83 02 00 	lea    rdi,[rip+0x283d5]        # 343c1 <_IO_stdin_used+0x13c1>
    bfec:	e8 df 77 ff ff       	call   37d0 <__assert_fail@plt>
    bff1:	f3 0f 1e fa          	endbr64 
    bff5:	48 89 c3             	mov    rbx,rax
    bff8:	eb 25                	jmp    c01f <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10af>
    bffa:	f3 0f 1e fa          	endbr64 
    bffe:	48 89 c3             	mov    rbx,rax
    c001:	eb 57                	jmp    c05a <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10ea>
    c003:	f3 0f 1e fa          	endbr64 
    c007:	48 89 c3             	mov    rbx,rax
    c00a:	eb 35                	jmp    c041 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10d1>
    c00c:	e8 7f 7a ff ff       	call   3a90 <__cxa_end_catch@plt>
    c011:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
    c015:	48 85 ff             	test   rdi,rdi
    c018:	74 05                	je     c01f <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10af>
    c01a:	e8 51 78 ff ff       	call   3870 <operator delete(void*)@plt>
    c01f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
    c026:	48 85 ff             	test   rdi,rdi
    c029:	74 05                	je     c030 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10c0>
    c02b:	e8 40 78 ff ff       	call   3870 <operator delete(void*)@plt>
    c030:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
    c037:	48 85 ff             	test   rdi,rdi
    c03a:	74 05                	je     c041 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10d1>
    c03c:	e8 2f 78 ff ff       	call   3870 <operator delete(void*)@plt>
    c041:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
    c048:	48 85 ff             	test   rdi,rdi
    c04b:	74 05                	je     c052 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10e2>
    c04d:	e8 1e 78 ff ff       	call   3870 <operator delete(void*)@plt>
    c052:	48 89 df             	mov    rdi,rbx
    c055:	e8 b6 7a ff ff       	call   3b10 <_Unwind_Resume@plt>
    c05a:	4c 89 ff             	mov    rdi,r15
    c05d:	e8 be 95 ff ff       	call   5620 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()>
    c062:	eb bb                	jmp    c01f <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10af>
    c064:	f3 0f 1e fa          	endbr64 
    c068:	48 89 c3             	mov    rbx,rax
    c06b:	eb 09                	jmp    c076 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1106>
    c06d:	f3 0f 1e fa          	endbr64 
    c071:	48 89 c7             	mov    rdi,rax
    c074:	eb 0a                	jmp    c080 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1110>
    c076:	4c 89 ff             	mov    rdi,r15
    c079:	e8 a2 95 ff ff       	call   5620 <std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >::~vector()>
    c07e:	eb c1                	jmp    c041 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10d1>
    c080:	e8 7b 76 ff ff       	call   3700 <__cxa_begin_catch@plt>
    c085:	48 8b 9d 18 ff ff ff 	mov    rbx,QWORD PTR [rbp-0xe8]
    c08c:	4c 39 e3             	cmp    rbx,r12
    c08f:	75 2b                	jne    c0bc <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x114c>
    c091:	e8 5a 79 ff ff       	call   39f0 <__cxa_rethrow@plt>
    c096:	f3 0f 1e fa          	endbr64 
    c09a:	48 89 c3             	mov    rbx,rax
    c09d:	eb 91                	jmp    c030 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10c0>
    c09f:	f3 0f 1e fa          	endbr64 
    c0a3:	48 89 c7             	mov    rdi,rax
    c0a6:	e8 55 76 ff ff       	call   3700 <__cxa_begin_catch@plt>
    c0ab:	48 8b 9d 28 ff ff ff 	mov    rbx,QWORD PTR [rbp-0xd8]
    c0b2:	4c 39 e3             	cmp    rbx,r12
    c0b5:	75 21                	jne    c0d8 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1168>
    c0b7:	e8 34 79 ff ff       	call   39f0 <__cxa_rethrow@plt>
    c0bc:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    c0bf:	48 85 ff             	test   rdi,rdi
    c0c2:	74 05                	je     c0c9 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1159>
    c0c4:	e8 a7 77 ff ff       	call   3870 <operator delete(void*)@plt>
    c0c9:	48 83 c3 18          	add    rbx,0x18
    c0cd:	eb bd                	jmp    c08c <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x111c>
    c0cf:	f3 0f 1e fa          	endbr64 
    c0d3:	48 89 c3             	mov    rbx,rax
    c0d6:	eb 13                	jmp    c0eb <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x117b>
    c0d8:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    c0db:	48 85 ff             	test   rdi,rdi
    c0de:	74 05                	je     c0e5 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1175>
    c0e0:	e8 8b 77 ff ff       	call   3870 <operator delete(void*)@plt>
    c0e5:	48 83 c3 18          	add    rbx,0x18
    c0e9:	eb c7                	jmp    c0b2 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x1142>
    c0eb:	e8 a0 79 ff ff       	call   3a90 <__cxa_end_catch@plt>
    c0f0:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
    c0f4:	48 85 ff             	test   rdi,rdi
    c0f7:	0f 84 44 ff ff ff    	je     c041 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10d1>
    c0fd:	e8 6e 77 ff ff       	call   3870 <operator delete(void*)@plt>
    c102:	e9 3a ff ff ff       	jmp    c041 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x10d1>
    c107:	f3 0f 1e fa          	endbr64 
    c10b:	48 89 c3             	mov    rbx,rax
    c10e:	e9 f9 fe ff ff       	jmp    c00c <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)+0x109c>
    c113:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    c11d:	0f 1f 00             	nop    DWORD PTR [rax]

000000000000c120 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)>:
    c120:	f3 0f 1e fa          	endbr64 
    c124:	41 57                	push   r15
    c126:	41 56                	push   r14
    c128:	49 89 f6             	mov    r14,rsi
    c12b:	41 55                	push   r13
    c12d:	41 54                	push   r12
    c12f:	55                   	push   rbp
    c130:	53                   	push   rbx
    c131:	48 81 ec 88 00 00 00 	sub    rsp,0x88
    c138:	48 8b 84 24 c0 00 00 00 	mov    rax,QWORD PTR [rsp+0xc0]
    c140:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
    c145:	8b 9c 24 00 01 00 00 	mov    ebx,DWORD PTR [rsp+0x100]
    c14c:	44 8b 84 24 f8 00 00 00 	mov    r8d,DWORD PTR [rsp+0xf8]
    c154:	48 89 4c 24 28       	mov    QWORD PTR [rsp+0x28],rcx
    c159:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
    c15e:	48 8b 84 24 c8 00 00 00 	mov    rax,QWORD PTR [rsp+0xc8]
    c166:	48 89 7c 24 18       	mov    QWORD PTR [rsp+0x18],rdi
    c16b:	4c 8b ac 24 d0 00 00 00 	mov    r13,QWORD PTR [rsp+0xd0]
    c173:	41 8d 48 04          	lea    ecx,[r8+0x4]
    c177:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
    c17c:	48 8b 84 24 d8 00 00 00 	mov    rax,QWORD PTR [rsp+0xd8]
    c184:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
    c189:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
    c18e:	48 8b 84 24 e0 00 00 00 	mov    rax,QWORD PTR [rsp+0xe0]
    c196:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
    c19b:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
    c1a0:	48 8b 84 24 e8 00 00 00 	mov    rax,QWORD PTR [rsp+0xe8]
    c1a8:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
    c1ad:	48 8b 84 24 f0 00 00 00 	mov    rax,QWORD PTR [rsp+0xf0]
    c1b5:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
    c1ba:	48 8b 84 24 08 01 00 00 	mov    rax,QWORD PTR [rsp+0x108]
    c1c2:	48 89 44 24 60       	mov    QWORD PTR [rsp+0x60],rax
    c1c7:	48 8b 84 24 10 01 00 00 	mov    rax,QWORD PTR [rsp+0x110]
    c1cf:	48 89 44 24 68       	mov    QWORD PTR [rsp+0x68],rax
    c1d4:	48 63 c3             	movsxd rax,ebx
    c1d7:	eb 22                	jmp    c1fb <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0xdb>
    c1d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c1e0:	49 8b 55 00          	mov    rdx,QWORD PTR [r13+0x0]
    c1e4:	44 8d 63 ff          	lea    r12d,[rbx-0x1]
    c1e8:	48 8d 78 ff          	lea    rdi,[rax-0x1]
    c1ec:	8b 34 82             	mov    esi,DWORD PTR [rdx+rax*4]
    c1ef:	3b 74 82 fc          	cmp    esi,DWORD PTR [rdx+rax*4-0x4]
    c1f3:	75 23                	jne    c218 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0xf8>
    c1f5:	48 89 f8             	mov    rax,rdi
    c1f8:	44 89 e3             	mov    ebx,r12d
    c1fb:	39 d9                	cmp    ecx,ebx
    c1fd:	7c e1                	jl     c1e0 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0xc0>
    c1ff:	48 81 c4 88 00 00 00 	add    rsp,0x88
    c206:	5b                   	pop    rbx
    c207:	5d                   	pop    rbp
    c208:	41 5c                	pop    r12
    c20a:	41 5d                	pop    r13
    c20c:	41 5e                	pop    r14
    c20e:	41 5f                	pop    r15
    c210:	c3                   	ret    
    c211:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c218:	4d 8b 0e             	mov    r9,QWORD PTR [r14]
    c21b:	48 8d 0c 40          	lea    rcx,[rax+rax*2]
    c21f:	8d 6b 01             	lea    ebp,[rbx+0x1]
    c222:	4d 8d 0c c9          	lea    r9,[r9+rcx*8]
    c226:	49 8b 09             	mov    rcx,QWORD PTR [r9]
    c229:	4d 8b 51 08          	mov    r10,QWORD PTR [r9+0x8]
    c22d:	49 39 ca             	cmp    r10,rcx
    c230:	0f 84 8f 03 00 00    	je     c5c5 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x4a5>
    c236:	48 89 44 24 70       	mov    QWORD PTR [rsp+0x70],rax
    c23b:	eb 31                	jmp    c26e <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x14e>
    c23d:	0f 1f 00             	nop    DWORD PTR [rax]
    c240:	44 8b 59 0c          	mov    r11d,DWORD PTR [rcx+0xc]
    c244:	44 8d 4d ff          	lea    r9d,[rbp-0x1]
    c248:	4d 63 c9             	movsxd r9,r9d
    c24b:	42 8b 04 8a          	mov    eax,DWORD PTR [rdx+r9*4]
    c24f:	45 89 df             	mov    r15d,r11d
    c252:	41 c1 ff 02          	sar    r15d,0x2
    c256:	44 01 f8             	add    eax,r15d
    c259:	39 c6                	cmp    esi,eax
    c25b:	0f 84 bf 00 00 00    	je     c320 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x200>
    c261:	48 83 c1 10          	add    rcx,0x10
    c265:	49 39 ca             	cmp    r10,rcx
    c268:	0f 84 da 02 00 00    	je     c548 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x428>
    c26e:	41 89 e9             	mov    r9d,ebp
    c271:	8b 29                	mov    ebp,DWORD PTR [rcx]
    c273:	44 39 c5             	cmp    ebp,r8d
    c276:	7d c8                	jge    c240 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x120>
    c278:	45 39 c8             	cmp    r8d,r9d
    c27b:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    c280:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
    c285:	44 89 cd             	mov    ebp,r9d
    c288:	0f 9e c1             	setle  cl
    c28b:	44 39 cb             	cmp    ebx,r9d
    c28e:	41 bf 80 96 98 00    	mov    r15d,0x989680
    c294:	41 ba 80 96 98 00    	mov    r10d,0x989680
    c29a:	0f 9f c2             	setg   dl
    c29d:	21 d1                	and    ecx,edx
    c29f:	88 4c 24 70          	mov    BYTE PTR [rsp+0x70],cl
    c2a3:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
    c2a6:	83 b9 ac 35 03 00 01 	cmp    DWORD PTR [rcx+0x335ac],0x1
    c2ad:	89 6c 24 78          	mov    DWORD PTR [rsp+0x78],ebp
    c2b1:	0f 85 f4 00 00 00    	jne    c3ab <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x28b>
    c2b7:	48 8b 5c 24 10       	mov    rbx,QWORD PTR [rsp+0x10]
    c2bc:	8d 75 01             	lea    esi,[rbp+0x1]
    c2bf:	44 89 44 24 7c       	mov    DWORD PTR [rsp+0x7c],r8d
    c2c4:	89 74 24 78          	mov    DWORD PTR [rsp+0x78],esi
    c2c8:	48 63 f6             	movsxd rsi,esi
    c2cb:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
    c2ce:	44 89 e3             	mov    ebx,r12d
    c2d1:	44 0f bf 54 72 fe    	movsx  r10d,WORD PTR [rdx+rsi*2-0x2]
    c2d7:	44 0f bf 0c 42       	movsx  r9d,WORD PTR [rdx+rax*2]
    c2dc:	48 0f bf 04 7a       	movsx  rax,WORD PTR [rdx+rdi*2]
    c2e1:	48 0f bf 14 72       	movsx  rdx,WORD PTR [rdx+rsi*2]
    c2e6:	48 8d 34 92          	lea    rsi,[rdx+rdx*4]
    c2ea:	48 8d 14 b2          	lea    rdx,[rdx+rsi*4]
    c2ee:	44 89 d6             	mov    esi,r10d
    c2f1:	48 01 d0             	add    rax,rdx
    c2f4:	48 8d 15 c5 5f 24 00 	lea    rdx,[rip+0x245fc5]        # 2522c0 <pair>
    c2fb:	0f be 3c 82          	movsx  edi,BYTE PTR [rdx+rax*4]
    c2ff:	44 89 ca             	mov    edx,r9d
    c302:	e8 08 c9 00 00       	call   18c0f <E_ExtLoop>
    c307:	45 89 fa             	mov    r10d,r15d
    c30a:	44 8b 44 24 7c       	mov    r8d,DWORD PTR [rsp+0x7c]
    c30f:	41 29 c2             	sub    r10d,eax
    c312:	e9 94 00 00 00       	jmp    c3ab <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x28b>
    c317:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    c320:	39 dd                	cmp    ebp,ebx
    c322:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    c327:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
    c32c:	0f 9c 44 24 70       	setl   BYTE PTR [rsp+0x70]
    c331:	41 83 e3 03          	and    r11d,0x3
    c335:	44 8b 51 04          	mov    r10d,DWORD PTR [rcx+0x4]
    c339:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
    c33c:	41 80 fb 02          	cmp    r11b,0x2
    c340:	0f 84 2a 02 00 00    	je     c570 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x450>
    c346:	41 80 fb 03          	cmp    r11b,0x3
    c34a:	0f 84 56 ff ff ff    	je     c2a6 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x186>
    c350:	41 80 fb 01          	cmp    r11b,0x1
    c354:	0f 85 96 01 00 00    	jne    c4f0 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x3d0>
    c35a:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    c35f:	8d 7d 01             	lea    edi,[rbp+0x1]
    c362:	44 89 44 24 7c       	mov    DWORD PTR [rsp+0x7c],r8d
    c367:	89 7c 24 78          	mov    DWORD PTR [rsp+0x78],edi
    c36b:	48 63 ff             	movsxd rdi,edi
    c36e:	48 8b 16             	mov    rdx,QWORD PTR [rsi]
    c371:	0f bf 74 7a fe       	movsx  esi,WORD PTR [rdx+rdi*2-0x2]
    c376:	48 0f bf 04 42       	movsx  rax,WORD PTR [rdx+rax*2]
    c37b:	48 0f bf 14 7a       	movsx  rdx,WORD PTR [rdx+rdi*2]
    c380:	48 8d 3c 92          	lea    rdi,[rdx+rdx*4]
    c384:	48 8d 14 ba          	lea    rdx,[rdx+rdi*4]
    c388:	48 01 d0             	add    rax,rdx
    c38b:	48 8d 15 2e 5f 24 00 	lea    rdx,[rip+0x245f2e]        # 2522c0 <pair>
    c392:	0f be 3c 82          	movsx  edi,BYTE PTR [rdx+rax*4]
    c396:	ba ff ff ff ff       	mov    edx,0xffffffff
    c39b:	e8 6f c8 00 00       	call   18c0f <E_ExtLoop>
    c3a0:	45 89 fa             	mov    r10d,r15d
    c3a3:	44 8b 44 24 7c       	mov    r8d,DWORD PTR [rsp+0x7c]
    c3a8:	41 29 c2             	sub    r10d,eax
    c3ab:	80 7c 24 70 00       	cmp    BYTE PTR [rsp+0x70],0x0
    c3b0:	0f 84 4c 02 00 00    	je     c602 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x4e2>
    c3b6:	41 81 fa 7f 96 98 00 	cmp    r10d,0x98967f
    c3bd:	0f 8f 20 02 00 00    	jg     c5e3 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x4c3>
    c3c3:	44 89 54 24 70       	mov    DWORD PTR [rsp+0x70],r10d
    c3c8:	48 83 ec 08          	sub    rsp,0x8
    c3cc:	83 ed 01             	sub    ebp,0x1
    c3cf:	4c 89 f6             	mov    rsi,r14
    c3d2:	4c 8b 7c 24 70       	mov    r15,QWORD PTR [rsp+0x70]
    c3d7:	41 57                	push   r15
    c3d9:	4c 8b 64 24 70       	mov    r12,QWORD PTR [rsp+0x70]
    c3de:	41 54                	push   r12
    c3e0:	55                   	push   rbp
    c3e1:	41 50                	push   r8
    c3e3:	48 8b ac 24 80 00 00 00 	mov    rbp,QWORD PTR [rsp+0x80]
    c3eb:	55                   	push   rbp
    c3ec:	ff 74 24 78          	push   QWORD PTR [rsp+0x78]
    c3f0:	ff 74 24 78          	push   QWORD PTR [rsp+0x78]
    c3f4:	ff 74 24 78          	push   QWORD PTR [rsp+0x78]
    c3f8:	41 55                	push   r13
    c3fa:	4c 8b ac 24 a0 00 00 00 	mov    r13,QWORD PTR [rsp+0xa0]
    c402:	41 55                	push   r13
    c404:	ff b4 24 88 00 00 00 	push   QWORD PTR [rsp+0x88]
    c40b:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    c410:	4c 8b 44 24 68       	mov    r8,QWORD PTR [rsp+0x68]
    c415:	48 8b 8c 24 88 00 00 00 	mov    rcx,QWORD PTR [rsp+0x88]
    c41d:	48 8b 94 24 80 00 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    c425:	48 8b 7c 24 78       	mov    rdi,QWORD PTR [rsp+0x78]
    c42a:	e8 f1 fc ff ff       	call   c120 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)>
    c42f:	48 8b 84 24 a8 00 00 00 	mov    rax,QWORD PTR [rsp+0xa8]
    c437:	8b b4 24 d8 00 00 00 	mov    esi,DWORD PTR [rsp+0xd8]
    c43e:	4c 89 bc 24 70 01 00 00 	mov    QWORD PTR [rsp+0x170],r15
    c446:	44 8b 94 24 d0 00 00 00 	mov    r10d,DWORD PTR [rsp+0xd0]
    c44e:	4c 89 a4 24 68 01 00 00 	mov    QWORD PTR [rsp+0x168],r12
    c456:	48 89 84 24 40 01 00 00 	mov    QWORD PTR [rsp+0x140],rax
    c45e:	48 8b 84 24 a0 00 00 00 	mov    rax,QWORD PTR [rsp+0xa0]
    c466:	89 9c 24 58 01 00 00 	mov    DWORD PTR [rsp+0x158],ebx
    c46d:	4c 8b 4c 24 70       	mov    r9,QWORD PTR [rsp+0x70]
    c472:	48 89 84 24 38 01 00 00 	mov    QWORD PTR [rsp+0x138],rax
    c47a:	48 8b 84 24 98 00 00 00 	mov    rax,QWORD PTR [rsp+0x98]
    c482:	89 b4 24 50 01 00 00 	mov    DWORD PTR [rsp+0x150],esi
    c489:	4c 8b 44 24 68       	mov    r8,QWORD PTR [rsp+0x68]
    c48e:	4c 89 f6             	mov    rsi,r14
    c491:	48 89 84 24 30 01 00 00 	mov    QWORD PTR [rsp+0x130],rax
    c499:	48 8b 84 24 90 00 00 00 	mov    rax,QWORD PTR [rsp+0x90]
    c4a1:	48 89 ac 24 48 01 00 00 	mov    QWORD PTR [rsp+0x148],rbp
    c4a9:	48 8b 8c 24 88 00 00 00 	mov    rcx,QWORD PTR [rsp+0x88]
    c4b1:	4c 89 ac 24 28 01 00 00 	mov    QWORD PTR [rsp+0x128],r13
    c4b9:	48 8b 94 24 80 00 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
    c4c1:	44 89 94 24 60 01 00 00 	mov    DWORD PTR [rsp+0x160],r10d
    c4c9:	48 8b 7c 24 78       	mov    rdi,QWORD PTR [rsp+0x78]
    c4ce:	48 89 84 24 20 01 00 00 	mov    QWORD PTR [rsp+0x120],rax
    c4d6:	48 81 c4 e8 00 00 00 	add    rsp,0xe8
    c4dd:	5b                   	pop    rbx
    c4de:	5d                   	pop    rbp
    c4df:	41 5c                	pop    r12
    c4e1:	41 5d                	pop    r13
    c4e3:	41 5e                	pop    r14
    c4e5:	41 5f                	pop    r15
    c4e7:	e9 84 ea ff ff       	jmp    af70 <void trace_V<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> >&, std::allocator<int>&, int const&, bool const&, int, int, int, int const*, int const)>
    c4ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    c4f0:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]
    c4f5:	44 89 44 24 7c       	mov    DWORD PTR [rsp+0x7c],r8d
    c4fa:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    c4fd:	48 0f bf 34 42       	movsx  rsi,WORD PTR [rdx+rax*2]
    c502:	48 63 c5             	movsxd rax,ebp
    c505:	48 0f bf 04 42       	movsx  rax,WORD PTR [rdx+rax*2]
    c50a:	48 8d 14 80          	lea    rdx,[rax+rax*4]
    c50e:	48 8d 04 90          	lea    rax,[rax+rdx*4]
    c512:	48 8d 15 a7 5d 24 00 	lea    rdx,[rip+0x245da7]        # 2522c0 <pair>
    c519:	48 01 f0             	add    rax,rsi
    c51c:	be ff ff ff ff       	mov    esi,0xffffffff
    c521:	0f be 3c 82          	movsx  edi,BYTE PTR [rdx+rax*4]
    c525:	ba ff ff ff ff       	mov    edx,0xffffffff
    c52a:	e8 e0 c6 00 00       	call   18c0f <E_ExtLoop>
    c52f:	45 89 fa             	mov    r10d,r15d
    c532:	89 6c 24 78          	mov    DWORD PTR [rsp+0x78],ebp
    c536:	44 8b 44 24 7c       	mov    r8d,DWORD PTR [rsp+0x7c]
    c53b:	41 29 c2             	sub    r10d,eax
    c53e:	e9 68 fe ff ff       	jmp    c3ab <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x28b>
    c543:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    c548:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    c54d:	39 dd                	cmp    ebp,ebx
    c54f:	48 8b 44 24 70       	mov    rax,QWORD PTR [rsp+0x70]
    c554:	41 bf 80 96 98 00    	mov    r15d,0x989680
    c55a:	0f 9c 44 24 70       	setl   BYTE PTR [rsp+0x70]
    c55f:	41 ba 80 96 98 00    	mov    r10d,0x989680
    c565:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
    c568:	e9 39 fd ff ff       	jmp    c2a6 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x186>
    c56d:	0f 1f 00             	nop    DWORD PTR [rax]
    c570:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    c575:	44 89 44 24 7c       	mov    DWORD PTR [rsp+0x7c],r8d
    c57a:	44 89 e3             	mov    ebx,r12d
    c57d:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
    c580:	0f bf 14 46          	movsx  edx,WORD PTR [rsi+rax*2]
    c584:	48 63 c5             	movsxd rax,ebp
    c587:	48 0f bf 3c 7e       	movsx  rdi,WORD PTR [rsi+rdi*2]
    c58c:	48 0f bf 04 46       	movsx  rax,WORD PTR [rsi+rax*2]
    c591:	48 8d 34 80          	lea    rsi,[rax+rax*4]
    c595:	48 8d 04 b0          	lea    rax,[rax+rsi*4]
    c599:	48 8d 35 20 5d 24 00 	lea    rsi,[rip+0x245d20]        # 2522c0 <pair>
    c5a0:	48 01 f8             	add    rax,rdi
    c5a3:	0f be 3c 86          	movsx  edi,BYTE PTR [rsi+rax*4]
    c5a7:	be ff ff ff ff       	mov    esi,0xffffffff
    c5ac:	e8 5e c6 00 00       	call   18c0f <E_ExtLoop>
    c5b1:	45 89 fa             	mov    r10d,r15d
    c5b4:	89 6c 24 78          	mov    DWORD PTR [rsp+0x78],ebp
    c5b8:	44 8b 44 24 7c       	mov    r8d,DWORD PTR [rsp+0x7c]
    c5bd:	41 29 c2             	sub    r10d,eax
    c5c0:	e9 e6 fd ff ff       	jmp    c3ab <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x28b>
    c5c5:	48 8b 74 24 08       	mov    rsi,QWORD PTR [rsp+0x8]
    c5ca:	c6 44 24 70 00       	mov    BYTE PTR [rsp+0x70],0x0
    c5cf:	41 bf 80 96 98 00    	mov    r15d,0x989680
    c5d5:	41 ba 80 96 98 00    	mov    r10d,0x989680
    c5db:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
    c5de:	e9 c3 fc ff ff       	jmp    c2a6 <void trace_W<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > >, SparseMFEFold::{unnamed type#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, vrna_param_s*, short*, vrna_param_s*, TraceArrows, std::vector<int, std::allocator<int> >, std::allocator<int>, std::allocator<int>, int, bool>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::vector<quatret, std::allocator<quatret> >, std::allocator<std::vector<quatret, std::allocator<quatret> > > > const&, SparseMFEFold::{unnamed type#1} const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, vrna_param_s* const&, short* const&, vrna_param_s* const&, TraceArrows&, std::vector<int, std::allocator<int> > const&, std::allocator<int>&, std::allocator<int>&, int const&, bool const&, int, int, int const*, int const)+0x186>
    c5e3:	48 8d 0d de 7d 02 00 	lea    rcx,[rip+0x27dde]        # 343c8 <_IO_stdin_used+0x13c8>
    c5ea:	ba c2 02 00 00       	mov    edx,0x2c2
    c5ef:	48 8d 35 c2 72 02 00 	lea    rsi,[rip+0x272c2]        # 338b8 <_IO_stdin_used+0x8b8>
    c5f6:	48 8d 3d b4 80 02 00 	lea    rdi,[rip+0x280b4]        # 346b1 <_IO_stdin_used+0x16b1>
    c5fd:	e8 ce 71 ff ff       	call   37d0 <__assert_fail@plt>
    c602:	48 8d 0d bf 7d 02 00 	lea    rcx,[rip+0x27dbf]        # 343c8 <_IO_stdin_used+0x13c8>
    c609:	ba c1 02 00 00       	mov    edx,0x2c1
    c60e:	48 8d 35 a3 72 02 00 	lea    rsi,[rip+0x272a3]        # 338b8 <_IO_stdin_used+0x8b8>
    c615:	48 8d 3d 89 80 02 00 	lea    rdi,[rip+0x28089]        # 346a5 <_IO_stdin_used+0x16a5>
    c61c:	e8 af 71 ff ff       	call   37d0 <__assert_fail@plt>
    c621:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    c62b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c630 <TraceArrows::TraceArrows(unsigned long)>:
    c630:	f3 0f 1e fa          	endbr64 
    c634:	66 0f ef c0          	pxor   xmm0,xmm0
    c638:	48 c7 47 10 00 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
    c640:	48 89 77 18          	mov    QWORD PTR [rdi+0x18],rsi
    c644:	48 c7 47 20 00 00 00 00 	mov    QWORD PTR [rdi+0x20],0x0
    c64c:	48 c7 47 28 00 00 00 00 	mov    QWORD PTR [rdi+0x28],0x0
    c654:	48 c7 47 30 00 00 00 00 	mov    QWORD PTR [rdi+0x30],0x0
    c65c:	48 c7 47 38 00 00 00 00 	mov    QWORD PTR [rdi+0x38],0x0
    c664:	0f 11 07             	movups XMMWORD PTR [rdi],xmm0
    c667:	c3                   	ret    
    c668:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c670 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)>:
    c670:	f3 0f 1e fa          	endbr64 
    c674:	48 c1 e6 05          	shl    rsi,0x5
    c678:	48 03 37             	add    rsi,QWORD PTR [rdi]
    c67b:	4c 8b 46 08          	mov    r8,QWORD PTR [rsi+0x8]
    c67f:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    c682:	48 be ab aa aa aa aa aa aa aa 	movabs rsi,0xaaaaaaaaaaaaaaab
    c68c:	4c 89 c1             	mov    rcx,r8
    c68f:	48 29 c1             	sub    rcx,rax
    c692:	48 c1 f9 03          	sar    rcx,0x3
    c696:	48 0f af ce          	imul   rcx,rsi
    c69a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    c6a0:	48 85 c9             	test   rcx,rcx
    c6a3:	7e 29                	jle    c6ce <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x5e>
    c6a5:	48 89 ce             	mov    rsi,rcx
    c6a8:	48 89 cf             	mov    rdi,rcx
    c6ab:	48 d1 fe             	sar    rsi,1
    c6ae:	48 83 e7 fe          	and    rdi,0xfffffffffffffffe
    c6b2:	48 01 f7             	add    rdi,rsi
    c6b5:	48 8d 3c f8          	lea    rdi,[rax+rdi*8]
    c6b9:	48 39 17             	cmp    QWORD PTR [rdi],rdx
    c6bc:	73 32                	jae    c6f0 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x80>
    c6be:	48 29 f1             	sub    rcx,rsi
    c6c1:	48 8d 47 18          	lea    rax,[rdi+0x18]
    c6c5:	48 83 e9 01          	sub    rcx,0x1
    c6c9:	48 85 c9             	test   rcx,rcx
    c6cc:	7f d7                	jg     c6a5 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x35>
    c6ce:	49 39 c0             	cmp    r8,rax
    c6d1:	74 0d                	je     c6e0 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x70>
    c6d3:	48 39 10             	cmp    QWORD PTR [rax],rdx
    c6d6:	77 08                	ja     c6e0 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x70>
    c6d8:	75 1b                	jne    c6f5 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x85>
    c6da:	48 83 c0 08          	add    rax,0x8
    c6de:	c3                   	ret    
    c6df:	90                   	nop
    c6e0:	4c 89 c0             	mov    rax,r8
    c6e3:	48 83 c0 08          	add    rax,0x8
    c6e7:	c3                   	ret    
    c6e8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    c6f0:	48 89 f1             	mov    rcx,rsi
    c6f3:	eb ab                	jmp    c6a0 <trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x30>
    c6f5:	50                   	push   rax
    c6f6:	48 8d 0d 2b 82 02 00 	lea    rcx,[rip+0x2822b]        # 34928 <Law_and_Order+0x88>
    c6fd:	ba 43 00 00 00       	mov    edx,0x43
    c702:	48 8d 35 87 83 02 00 	lea    rsi,[rip+0x28387]        # 34a90 <Law_and_Order+0x1f0>
    c709:	48 8d 3d b0 83 02 00 	lea    rdi,[rip+0x283b0]        # 34ac0 <Law_and_Order+0x220>
    c710:	e8 bb 70 ff ff       	call   37d0 <__assert_fail@plt>
    c715:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000c720 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)>:
    c720:	f3 0f 1e fa          	endbr64 
    c724:	48 c1 e6 05          	shl    rsi,0x5
    c728:	48 03 37             	add    rsi,QWORD PTR [rdi]
    c72b:	4c 8b 46 08          	mov    r8,QWORD PTR [rsi+0x8]
    c72f:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
    c732:	48 be ab aa aa aa aa aa aa aa 	movabs rsi,0xaaaaaaaaaaaaaaab
    c73c:	4c 89 c0             	mov    rax,r8
    c73f:	48 29 c8             	sub    rax,rcx
    c742:	48 c1 f8 03          	sar    rax,0x3
    c746:	48 0f af c6          	imul   rax,rsi
    c74a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    c750:	48 85 c0             	test   rax,rax
    c753:	7e 29                	jle    c77e <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x5e>
    c755:	48 89 c6             	mov    rsi,rax
    c758:	48 89 c7             	mov    rdi,rax
    c75b:	48 d1 fe             	sar    rsi,1
    c75e:	48 83 e7 fe          	and    rdi,0xfffffffffffffffe
    c762:	48 01 f7             	add    rdi,rsi
    c765:	48 8d 3c f9          	lea    rdi,[rcx+rdi*8]
    c769:	48 39 17             	cmp    QWORD PTR [rdi],rdx
    c76c:	73 2a                	jae    c798 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x78>
    c76e:	48 29 f0             	sub    rax,rsi
    c771:	48 8d 4f 18          	lea    rcx,[rdi+0x18]
    c775:	48 83 e8 01          	sub    rax,0x1
    c779:	48 85 c0             	test   rax,rax
    c77c:	7f d7                	jg     c755 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x35>
    c77e:	49 39 c8             	cmp    r8,rcx
    c781:	74 0d                	je     c790 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x70>
    c783:	48 39 11             	cmp    QWORD PTR [rcx],rdx
    c786:	77 08                	ja     c790 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x70>
    c788:	75 13                	jne    c79d <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x7d>
    c78a:	b8 01 00 00 00       	mov    eax,0x1
    c78f:	c3                   	ret    
    c790:	31 c0                	xor    eax,eax
    c792:	c3                   	ret    
    c793:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    c798:	48 89 f0             	mov    rax,rsi
    c79b:	eb b3                	jmp    c750 <exists_trace_arrow_from(TraceArrows&, unsigned long, unsigned long)+0x30>
    c79d:	50                   	push   rax
    c79e:	48 8d 0d 4b 83 02 00 	lea    rcx,[rip+0x2834b]        # 34af0 <Law_and_Order+0x250>
    c7a5:	ba 3c 00 00 00       	mov    edx,0x3c
    c7aa:	48 8d 35 df 82 02 00 	lea    rsi,[rip+0x282df]        # 34a90 <Law_and_Order+0x1f0>
    c7b1:	48 8d 3d 08 83 02 00 	lea    rdi,[rip+0x28308]        # 34ac0 <Law_and_Order+0x220>
    c7b8:	e8 13 70 ff ff       	call   37d0 <__assert_fail@plt>
    c7bd:	0f 1f 00             	nop    DWORD PTR [rax]

000000000000c7c0 <avoid_trace_arrow(TraceArrows&)>:
    c7c0:	f3 0f 1e fa          	endbr64 
    c7c4:	48 83 47 28 01       	add    QWORD PTR [rdi+0x28],0x1
    c7c9:	c3                   	ret    
    c7ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

000000000000c7d0 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)>:
    c7d0:	f3 0f 1e fa          	endbr64 
    c7d4:	48 b9 ab aa aa aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaab
    c7de:	48 c1 e6 05          	shl    rsi,0x5
    c7e2:	48 03 37             	add    rsi,QWORD PTR [rdi]
    c7e5:	4c 8b 46 08          	mov    r8,QWORD PTR [rsi+0x8]
    c7e9:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
    c7ec:	4c 89 c0             	mov    rax,r8
    c7ef:	48 89 f7             	mov    rdi,rsi
    c7f2:	48 29 f0             	sub    rax,rsi
    c7f5:	48 c1 f8 03          	sar    rax,0x3
    c7f9:	48 0f af c1          	imul   rax,rcx
    c7fd:	48 89 c1             	mov    rcx,rax
    c800:	48 85 c9             	test   rcx,rcx
    c803:	7e 29                	jle    c82e <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x5e>
    c805:	49 89 c9             	mov    r9,rcx
    c808:	49 89 ca             	mov    r10,rcx
    c80b:	49 d1 f9             	sar    r9,1
    c80e:	49 83 e2 fe          	and    r10,0xfffffffffffffffe
    c812:	4d 01 ca             	add    r10,r9
    c815:	4e 8d 14 d7          	lea    r10,[rdi+r10*8]
    c819:	49 39 12             	cmp    QWORD PTR [r10],rdx
    c81c:	73 72                	jae    c890 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xc0>
    c81e:	4c 29 c9             	sub    rcx,r9
    c821:	49 8d 7a 18          	lea    rdi,[r10+0x18]
    c825:	48 83 e9 01          	sub    rcx,0x1
    c829:	48 85 c9             	test   rcx,rcx
    c82c:	7f d7                	jg     c805 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x35>
    c82e:	49 39 f8             	cmp    r8,rdi
    c831:	0f 84 99 00 00 00    	je     c8d0 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x100>
    c837:	48 83 ec 08          	sub    rsp,0x8
    c83b:	48 39 17             	cmp    QWORD PTR [rdi],rdx
    c83e:	77 45                	ja     c885 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xb5>
    c840:	0f 85 8b 00 00 00    	jne    c8d1 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x101>
    c846:	48 85 c0             	test   rax,rax
    c849:	7e 29                	jle    c874 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xa4>
    c84b:	48 89 c1             	mov    rcx,rax
    c84e:	48 89 c7             	mov    rdi,rax
    c851:	48 d1 f9             	sar    rcx,1
    c854:	48 83 e7 fe          	and    rdi,0xfffffffffffffffe
    c858:	48 01 cf             	add    rdi,rcx
    c85b:	48 8d 3c fe          	lea    rdi,[rsi+rdi*8]
    c85f:	48 39 17             	cmp    QWORD PTR [rdi],rdx
    c862:	73 3c                	jae    c8a0 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xd0>
    c864:	48 29 c8             	sub    rax,rcx
    c867:	48 8d 77 18          	lea    rsi,[rdi+0x18]
    c86b:	48 83 e8 01          	sub    rax,0x1
    c86f:	48 85 c0             	test   rax,rax
    c872:	7f d7                	jg     c84b <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x7b>
    c874:	49 39 f0             	cmp    r8,rsi
    c877:	74 05                	je     c87e <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xae>
    c879:	48 39 16             	cmp    QWORD PTR [rsi],rdx
    c87c:	76 2a                	jbe    c8a8 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xd8>
    c87e:	4c 89 c6             	mov    rsi,r8
    c881:	83 46 10 01          	add    DWORD PTR [rsi+0x10],0x1
    c885:	48 83 c4 08          	add    rsp,0x8
    c889:	c3                   	ret    
    c88a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    c890:	4c 89 c9             	mov    rcx,r9
    c893:	e9 68 ff ff ff       	jmp    c800 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x30>
    c898:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    c8a0:	48 89 c8             	mov    rax,rcx
    c8a3:	eb a1                	jmp    c846 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0x76>
    c8a5:	0f 1f 00             	nop    DWORD PTR [rax]
    c8a8:	74 d7                	je     c881 <inc_source_ref_count(TraceArrows&, unsigned long, unsigned long)+0xb1>
    c8aa:	48 8d 0d 77 80 02 00 	lea    rcx,[rip+0x28077]        # 34928 <Law_and_Order+0x88>
    c8b1:	ba 43 00 00 00       	mov    edx,0x43
    c8b6:	48 8d 35 d3 81 02 00 	lea    rsi,[rip+0x281d3]        # 34a90 <Law_and_Order+0x1f0>
    c8bd:	48 8d 3d fc 81 02 00 	lea    rdi,[rip+0x281fc]        # 34ac0 <Law_and_Order+0x220>
    c8c4:	e8 07 6f ff ff       	call   37d0 <__assert_fail@plt>
    c8c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c8d0:	c3                   	ret    
    c8d1:	48 8d 0d 18 82 02 00 	lea    rcx,[rip+0x28218]        # 34af0 <Law_and_Order+0x250>
    c8d8:	ba 3c 00 00 00       	mov    edx,0x3c
    c8dd:	48 8d 35 ac 81 02 00 	lea    rsi,[rip+0x281ac]        # 34a90 <Law_and_Order+0x1f0>
    c8e4:	48 8d 3d d5 81 02 00 	lea    rdi,[rip+0x281d5]        # 34ac0 <Law_and_Order+0x220>
    c8eb:	e8 e0 6e ff ff       	call   37d0 <__assert_fail@plt>

000000000000c8f0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)>:
    c8f0:	f3 0f 1e fa          	endbr64 
    c8f4:	41 57                	push   r15
    c8f6:	48 89 f0             	mov    rax,rsi
    c8f9:	41 56                	push   r14
    c8fb:	48 c1 e0 05          	shl    rax,0x5
    c8ff:	41 55                	push   r13
    c901:	41 54                	push   r12
    c903:	55                   	push   rbp
    c904:	48 89 fd             	mov    rbp,rdi
    c907:	53                   	push   rbx
    c908:	48 83 ec 28          	sub    rsp,0x28
    c90c:	4c 8b 17             	mov    r10,QWORD PTR [rdi]
    c90f:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
    c914:	4d 8d 24 02          	lea    r12,[r10+rax*1]
    c918:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
    c922:	49 8b 7c 24 08       	mov    rdi,QWORD PTR [r12+0x8]
    c927:	4d 8b 04 24          	mov    r8,QWORD PTR [r12]
    c92b:	49 89 f9             	mov    r9,rdi
    c92e:	4d 89 c3             	mov    r11,r8
    c931:	4d 29 c1             	sub    r9,r8
    c934:	4c 89 c9             	mov    rcx,r9
    c937:	48 c1 f9 03          	sar    rcx,0x3
    c93b:	48 0f af c8          	imul   rcx,rax
    c93f:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    c944:	48 89 c8             	mov    rax,rcx
    c947:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    c950:	48 85 c0             	test   rax,rax
    c953:	7e 2e                	jle    c983 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x93>
    c955:	48 89 c3             	mov    rbx,rax
    c958:	49 89 c5             	mov    r13,rax
    c95b:	48 d1 fb             	sar    rbx,1
    c95e:	49 83 e5 fe          	and    r13,0xfffffffffffffffe
    c962:	49 01 dd             	add    r13,rbx
    c965:	4f 8d 2c eb          	lea    r13,[r11+r13*8]
    c969:	49 39 55 00          	cmp    QWORD PTR [r13+0x0],rdx
    c96d:	0f 83 35 03 00 00    	jae    cca8 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x3b8>
    c973:	48 29 d8             	sub    rax,rbx
    c976:	4d 8d 5d 18          	lea    r11,[r13+0x18]
    c97a:	48 83 e8 01          	sub    rax,0x1
    c97e:	48 85 c0             	test   rax,rax
    c981:	7f d2                	jg     c955 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x65>
    c983:	4c 39 df             	cmp    rdi,r11
    c986:	74 78                	je     ca00 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x110>
    c988:	49 39 13             	cmp    QWORD PTR [r11],rdx
    c98b:	77 73                	ja     ca00 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x110>
    c98d:	0f 85 8a 03 00 00    	jne    cd1d <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x42d>
    c993:	4c 89 c3             	mov    rbx,r8
    c996:	48 89 c8             	mov    rax,rcx
    c999:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    c9a0:	48 85 c0             	test   rax,rax
    c9a3:	7e 2d                	jle    c9d2 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0xe2>
    c9a5:	48 89 c1             	mov    rcx,rax
    c9a8:	49 89 c3             	mov    r11,rax
    c9ab:	48 d1 f9             	sar    rcx,1
    c9ae:	49 83 e3 fe          	and    r11,0xfffffffffffffffe
    c9b2:	49 01 cb             	add    r11,rcx
    c9b5:	4e 8d 1c db          	lea    r11,[rbx+r11*8]
    c9b9:	49 39 13             	cmp    QWORD PTR [r11],rdx
    c9bc:	0f 83 ee 02 00 00    	jae    ccb0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x3c0>
    c9c2:	48 29 c8             	sub    rax,rcx
    c9c5:	49 8d 5b 18          	lea    rbx,[r11+0x18]
    c9c9:	48 83 e8 01          	sub    rax,0x1
    c9cd:	48 85 c0             	test   rax,rax
    c9d0:	7f d3                	jg     c9a5 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0xb5>
    c9d2:	48 39 df             	cmp    rdi,rbx
    c9d5:	74 49                	je     ca20 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x130>
    c9d7:	48 39 13             	cmp    QWORD PTR [rbx],rdx
    c9da:	77 44                	ja     ca20 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x130>
    c9dc:	0f 85 04 03 00 00    	jne    cce6 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x3f6>
    c9e2:	8b 43 10             	mov    eax,DWORD PTR [rbx+0x10]
    c9e5:	85 c0                	test   eax,eax
    c9e7:	74 41                	je     ca2a <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x13a>
    c9e9:	48 83 c4 28          	add    rsp,0x28
    c9ed:	5b                   	pop    rbx
    c9ee:	5d                   	pop    rbp
    c9ef:	41 5c                	pop    r12
    c9f1:	41 5d                	pop    r13
    c9f3:	41 5e                	pop    r14
    c9f5:	41 5f                	pop    r15
    c9f7:	c3                   	ret    
    c9f8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    ca00:	48 8d 0d 69 82 02 00 	lea    rcx,[rip+0x28269]        # 34c70 <Law_and_Order+0x3d0>
    ca07:	ba 40 00 00 00       	mov    edx,0x40
    ca0c:	48 8d 35 9d 82 02 00 	lea    rsi,[rip+0x2829d]        # 34cb0 <Law_and_Order+0x410>
    ca13:	48 8d 3d a9 83 02 00 	lea    rdi,[rip+0x283a9]        # 34dc3 <Law_and_Order+0x523>
    ca1a:	e8 b1 6d ff ff       	call   37d0 <__assert_fail@plt>
    ca1f:	90                   	nop
    ca20:	48 89 fb             	mov    rbx,rdi
    ca23:	8b 43 10             	mov    eax,DWORD PTR [rbx+0x10]
    ca26:	85 c0                	test   eax,eax
    ca28:	75 bf                	jne    c9e9 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0xf9>
    ca2a:	0f b6 43 09          	movzx  eax,BYTE PTR [rbx+0x9]
    ca2e:	49 89 d7             	mov    r15,rdx
    ca31:	48 b9 ab aa aa aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaab
    ca3b:	49 29 c7             	sub    r15,rax
    ca3e:	0f b6 43 08          	movzx  eax,BYTE PTR [rbx+0x8]
    ca42:	48 01 f0             	add    rax,rsi
    ca45:	48 c1 e0 05          	shl    rax,0x5
    ca49:	49 01 c2             	add    r10,rax
    ca4c:	49 8b 42 08          	mov    rax,QWORD PTR [r10+0x8]
    ca50:	4d 8b 2a             	mov    r13,QWORD PTR [r10]
    ca53:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
    ca58:	4c 29 e8             	sub    rax,r13
    ca5b:	4d 89 ee             	mov    r14,r13
    ca5e:	48 c1 f8 03          	sar    rax,0x3
    ca62:	48 0f af c1          	imul   rax,rcx
    ca66:	48 89 c1             	mov    rcx,rax
    ca69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    ca70:	48 85 c9             	test   rcx,rcx
    ca73:	7e 2d                	jle    caa2 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x1b2>
    ca75:	49 89 ca             	mov    r10,rcx
    ca78:	49 89 cb             	mov    r11,rcx
    ca7b:	49 d1 fa             	sar    r10,1
    ca7e:	49 83 e3 fe          	and    r11,0xfffffffffffffffe
    ca82:	4d 01 d3             	add    r11,r10
    ca85:	4f 8d 1c de          	lea    r11,[r14+r11*8]
    ca89:	4d 3b 3b             	cmp    r15,QWORD PTR [r11]
    ca8c:	0f 86 2e 02 00 00    	jbe    ccc0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x3d0>
    ca92:	4c 29 d1             	sub    rcx,r10
    ca95:	4d 8d 73 18          	lea    r14,[r11+0x18]
    ca99:	48 83 e9 01          	sub    rcx,0x1
    ca9d:	48 85 c9             	test   rcx,rcx
    caa0:	7f d3                	jg     ca75 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x185>
    caa2:	4c 39 74 24 18       	cmp    QWORD PTR [rsp+0x18],r14
    caa7:	0f 84 a5 00 00 00    	je     cb52 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x262>
    caad:	4d 3b 3e             	cmp    r15,QWORD PTR [r14]
    cab0:	0f 82 9c 00 00 00    	jb     cb52 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x262>
    cab6:	0f 85 61 02 00 00    	jne    cd1d <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x42d>
    cabc:	48 85 c0             	test   rax,rax
    cabf:	7e 2e                	jle    caef <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x1ff>
    cac1:	48 89 c7             	mov    rdi,rax
    cac4:	48 89 c1             	mov    rcx,rax
    cac7:	48 d1 ff             	sar    rdi,1
    caca:	48 83 e1 fe          	and    rcx,0xfffffffffffffffe
    cace:	48 01 f9             	add    rcx,rdi
    cad1:	49 8d 4c cd 00       	lea    rcx,[r13+rcx*8+0x0]
    cad6:	4c 3b 39             	cmp    r15,QWORD PTR [rcx]
    cad9:	0f 86 f1 01 00 00    	jbe    ccd0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x3e0>
    cadf:	48 29 f8             	sub    rax,rdi
    cae2:	4c 8d 69 18          	lea    r13,[rcx+0x18]
    cae6:	48 83 e8 01          	sub    rax,0x1
    caea:	48 85 c0             	test   rax,rax
    caed:	7f d2                	jg     cac1 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x1d1>
    caef:	4c 39 6c 24 18       	cmp    QWORD PTR [rsp+0x18],r13
    caf4:	74 0a                	je     cb00 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x210>
    caf6:	4d 3b 7d 00          	cmp    r15,QWORD PTR [r13+0x0]
    cafa:	0f 83 e0 01 00 00    	jae    cce0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x3f0>
    cb00:	4c 8b 6c 24 18       	mov    r13,QWORD PTR [rsp+0x18]
    cb05:	41 83 6d 10 01       	sub    DWORD PTR [r13+0x10],0x1
    cb0a:	0f b6 43 09          	movzx  eax,BYTE PTR [rbx+0x9]
    cb0e:	48 89 ef             	mov    rdi,rbp
    cb11:	48 29 c2             	sub    rdx,rax
    cb14:	0f b6 43 08          	movzx  eax,BYTE PTR [rbx+0x8]
    cb18:	48 01 c6             	add    rsi,rax
    cb1b:	e8 d0 fd ff ff       	call   c8f0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)>
    cb20:	4c 8b 64 24 10       	mov    r12,QWORD PTR [rsp+0x10]
    cb25:	4c 03 65 00          	add    r12,QWORD PTR [rbp+0x0]
    cb29:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
    cb33:	49 8b 7c 24 08       	mov    rdi,QWORD PTR [r12+0x8]
    cb38:	4d 8b 04 24          	mov    r8,QWORD PTR [r12]
    cb3c:	49 89 f9             	mov    r9,rdi
    cb3f:	4d 29 c1             	sub    r9,r8
    cb42:	4c 89 ca             	mov    rdx,r9
    cb45:	48 c1 fa 03          	sar    rdx,0x3
    cb49:	48 0f af d0          	imul   rdx,rax
    cb4d:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
    cb52:	48 ba 55 55 55 55 55 55 55 05 	movabs rdx,0x555555555555555
    cb5c:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    cb61:	48 83 e8 01          	sub    rax,0x1
    cb65:	48 39 d0             	cmp    rax,rdx
    cb68:	0f 87 ce 01 00 00    	ja     cd3c <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x44c>
    cb6e:	4d 8d 69 e8          	lea    r13,[r9-0x18]
    cb72:	48 85 c0             	test   rax,rax
    cb75:	0f 84 95 01 00 00    	je     cd10 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x420>
    cb7b:	4c 89 ef             	mov    rdi,r13
    cb7e:	e8 2d 6d ff ff       	call   38b0 <operator new(unsigned long)@plt>
    cb83:	48 8b 7c 24 08       	mov    rdi,QWORD PTR [rsp+0x8]
    cb88:	4e 8d 0c 28          	lea    r9,[rax+r13*1]
    cb8c:	48 8d 14 7f          	lea    rdx,[rdi+rdi*2]
    cb90:	4c 8d 54 d0 e8       	lea    r10,[rax+rdx*8-0x18]
    cb95:	48 89 c2             	mov    rdx,rax
    cb98:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    cba0:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
    cba7:	48 83 c2 18          	add    rdx,0x18
    cbab:	4c 39 d2             	cmp    rdx,r10
    cbae:	75 f0                	jne    cba0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x2b0>
    cbb0:	4d 8b 04 24          	mov    r8,QWORD PTR [r12]
    cbb4:	49 8b 7c 24 08       	mov    rdi,QWORD PTR [r12+0x8]
    cbb9:	48 b9 ab aa aa aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaab
    cbc3:	48 89 da             	mov    rdx,rbx
    cbc6:	4c 29 c2             	sub    rdx,r8
    cbc9:	49 89 d3             	mov    r11,rdx
    cbcc:	49 c1 fb 03          	sar    r11,0x3
    cbd0:	4c 0f af d9          	imul   r11,rcx
    cbd4:	48 85 d2             	test   rdx,rdx
    cbd7:	0f 8e 2b 01 00 00    	jle    cd08 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x418>
    cbdd:	48 89 c6             	mov    rsi,rax
    cbe0:	4c 89 c1             	mov    rcx,r8
    cbe3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    cbe8:	4c 8b 29             	mov    r13,QWORD PTR [rcx]
    cbeb:	48 83 c6 18          	add    rsi,0x18
    cbef:	48 83 c1 18          	add    rcx,0x18
    cbf3:	4c 89 6e e8          	mov    QWORD PTR [rsi-0x18],r13
    cbf7:	4c 8b 69 f0          	mov    r13,QWORD PTR [rcx-0x10]
    cbfb:	4c 89 6e f0          	mov    QWORD PTR [rsi-0x10],r13
    cbff:	44 8b 69 f8          	mov    r13d,DWORD PTR [rcx-0x8]
    cc03:	44 89 6e f8          	mov    DWORD PTR [rsi-0x8],r13d
    cc07:	49 83 eb 01          	sub    r11,0x1
    cc0b:	75 db                	jne    cbe8 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x2f8>
    cc0d:	48 85 d2             	test   rdx,rdx
    cc10:	b9 18 00 00 00       	mov    ecx,0x18
    cc15:	48 0f 4e d1          	cmovle rdx,rcx
    cc19:	48 01 c2             	add    rdx,rax
    cc1c:	48 be ab aa aa aa aa aa aa aa 	movabs rsi,0xaaaaaaaaaaaaaaab
    cc26:	48 83 c3 18          	add    rbx,0x18
    cc2a:	48 29 df             	sub    rdi,rbx
    cc2d:	48 89 f9             	mov    rcx,rdi
    cc30:	48 c1 f9 03          	sar    rcx,0x3
    cc34:	48 0f af ce          	imul   rcx,rsi
    cc38:	48 85 ff             	test   rdi,rdi
    cc3b:	7e 26                	jle    cc63 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x373>
    cc3d:	0f 1f 00             	nop    DWORD PTR [rax]
    cc40:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
    cc43:	48 83 c2 18          	add    rdx,0x18
    cc47:	48 83 c3 18          	add    rbx,0x18
    cc4b:	48 89 72 e8          	mov    QWORD PTR [rdx-0x18],rsi
    cc4f:	48 8b 73 f0          	mov    rsi,QWORD PTR [rbx-0x10]
    cc53:	48 89 72 f0          	mov    QWORD PTR [rdx-0x10],rsi
    cc57:	8b 73 f8             	mov    esi,DWORD PTR [rbx-0x8]
    cc5a:	89 72 f8             	mov    DWORD PTR [rdx-0x8],esi
    cc5d:	48 83 e9 01          	sub    rcx,0x1
    cc61:	75 dd                	jne    cc40 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x350>
    cc63:	66 48 0f 6e c0       	movq   xmm0,rax
    cc68:	66 49 0f 6e ca       	movq   xmm1,r10
    cc6d:	4d 89 4c 24 10       	mov    QWORD PTR [r12+0x10],r9
    cc72:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    cc76:	41 0f 11 04 24       	movups XMMWORD PTR [r12],xmm0
    cc7b:	4d 85 c0             	test   r8,r8
    cc7e:	74 08                	je     cc88 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x398>
    cc80:	4c 89 c7             	mov    rdi,r8
    cc83:	e8 e8 6b ff ff       	call   3870 <operator delete(void*)@plt>
    cc88:	48 83 6d 20 01       	sub    QWORD PTR [rbp+0x20],0x1
    cc8d:	48 83 45 30 01       	add    QWORD PTR [rbp+0x30],0x1
    cc92:	48 83 c4 28          	add    rsp,0x28
    cc96:	5b                   	pop    rbx
    cc97:	5d                   	pop    rbp
    cc98:	41 5c                	pop    r12
    cc9a:	41 5d                	pop    r13
    cc9c:	41 5e                	pop    r14
    cc9e:	41 5f                	pop    r15
    cca0:	c3                   	ret    
    cca1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    cca8:	48 89 d8             	mov    rax,rbx
    ccab:	e9 a0 fc ff ff       	jmp    c950 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x60>
    ccb0:	48 89 c8             	mov    rax,rcx
    ccb3:	e9 e8 fc ff ff       	jmp    c9a0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0xb0>
    ccb8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    ccc0:	4c 89 d1             	mov    rcx,r10
    ccc3:	e9 a8 fd ff ff       	jmp    ca70 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x180>
    ccc8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    ccd0:	48 89 f8             	mov    rax,rdi
    ccd3:	e9 e4 fd ff ff       	jmp    cabc <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x1cc>
    ccd8:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    cce0:	0f 84 1f fe ff ff    	je     cb05 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x215>
    cce6:	48 8d 0d 3b 7c 02 00 	lea    rcx,[rip+0x27c3b]        # 34928 <Law_and_Order+0x88>
    cced:	ba 43 00 00 00       	mov    edx,0x43
    ccf2:	48 8d 35 97 7d 02 00 	lea    rsi,[rip+0x27d97]        # 34a90 <Law_and_Order+0x1f0>
    ccf9:	48 8d 3d c0 7d 02 00 	lea    rdi,[rip+0x27dc0]        # 34ac0 <Law_and_Order+0x220>
    cd00:	e8 cb 6a ff ff       	call   37d0 <__assert_fail@plt>
    cd05:	0f 1f 00             	nop    DWORD PTR [rax]
    cd08:	48 89 c2             	mov    rdx,rax
    cd0b:	e9 0c ff ff ff       	jmp    cc1c <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x32c>
    cd10:	4d 89 e9             	mov    r9,r13
    cd13:	31 c0                	xor    eax,eax
    cd15:	45 31 d2             	xor    r10d,r10d
    cd18:	e9 9c fe ff ff       	jmp    cbb9 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)+0x2c9>
    cd1d:	48 8d 0d cc 7d 02 00 	lea    rcx,[rip+0x27dcc]        # 34af0 <Law_and_Order+0x250>
    cd24:	ba 3c 00 00 00       	mov    edx,0x3c
    cd29:	48 8d 35 60 7d 02 00 	lea    rsi,[rip+0x27d60]        # 34a90 <Law_and_Order+0x1f0>
    cd30:	48 8d 3d 89 7d 02 00 	lea    rdi,[rip+0x27d89]        # 34ac0 <Law_and_Order+0x220>
    cd37:	e8 94 6a ff ff       	call   37d0 <__assert_fail@plt>
    cd3c:	48 8d 3d 1d 6e 02 00 	lea    rdi,[rip+0x26e1d]        # 33b60 <_IO_stdin_used+0xb60>
    cd43:	e8 38 6a ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    cd48:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cd50 <gc_row(TraceArrows&, unsigned long)>:
    cd50:	f3 0f 1e fa          	endbr64 
    cd54:	41 56                	push   r14
    cd56:	41 55                	push   r13
    cd58:	41 54                	push   r12
    cd5a:	55                   	push   rbp
    cd5b:	53                   	push   rbx
    cd5c:	48 8b 47 18          	mov    rax,QWORD PTR [rdi+0x18]
    cd60:	48 39 f0             	cmp    rax,rsi
    cd63:	0f 82 cb 00 00 00    	jb     ce34 <gc_row(TraceArrows&, unsigned long)+0xe4>
    cd69:	48 89 f5             	mov    rbp,rsi
    cd6c:	4c 8d 66 04          	lea    r12,[rsi+0x4]
    cd70:	49 89 fd             	mov    r13,rdi
    cd73:	49 89 f6             	mov    r14,rsi
    cd76:	48 bb ab aa aa aa aa aa aa aa 	movabs rbx,0xaaaaaaaaaaaaaaab
    cd80:	48 c1 e5 05          	shl    rbp,0x5
    cd84:	4c 39 e0             	cmp    rax,r12
    cd87:	72 79                	jb     ce02 <gc_row(TraceArrows&, unsigned long)+0xb2>
    cd89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    cd90:	49 8b 45 00          	mov    rax,QWORD PTR [r13+0x0]
    cd94:	48 01 e8             	add    rax,rbp
    cd97:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
    cd9b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    cd9e:	48 89 f8             	mov    rax,rdi
    cda1:	48 29 d0             	sub    rax,rdx
    cda4:	48 c1 f8 03          	sar    rax,0x3
    cda8:	48 0f af c3          	imul   rax,rbx
    cdac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    cdb0:	48 85 c0             	test   rax,rax
    cdb3:	7e 29                	jle    cdde <gc_row(TraceArrows&, unsigned long)+0x8e>
    cdb5:	48 89 c1             	mov    rcx,rax
    cdb8:	49 89 c0             	mov    r8,rax
    cdbb:	48 d1 f9             	sar    rcx,1
    cdbe:	49 83 e0 fe          	and    r8,0xfffffffffffffffe
    cdc2:	49 01 c8             	add    r8,rcx
    cdc5:	4a 8d 34 c2          	lea    rsi,[rdx+r8*8]
    cdc9:	4c 39 26             	cmp    QWORD PTR [rsi],r12
    cdcc:	73 42                	jae    ce10 <gc_row(TraceArrows&, unsigned long)+0xc0>
    cdce:	48 29 c8             	sub    rax,rcx
    cdd1:	48 8d 56 18          	lea    rdx,[rsi+0x18]
    cdd5:	48 83 e8 01          	sub    rax,0x1
    cdd9:	48 85 c0             	test   rax,rax
    cddc:	7f d7                	jg     cdb5 <gc_row(TraceArrows&, unsigned long)+0x65>
    cdde:	48 39 d7             	cmp    rdi,rdx
    cde1:	74 15                	je     cdf8 <gc_row(TraceArrows&, unsigned long)+0xa8>
    cde3:	4c 39 22             	cmp    QWORD PTR [rdx],r12
    cde6:	77 10                	ja     cdf8 <gc_row(TraceArrows&, unsigned long)+0xa8>
    cde8:	75 2b                	jne    ce15 <gc_row(TraceArrows&, unsigned long)+0xc5>
    cdea:	4c 89 e2             	mov    rdx,r12
    cded:	4c 89 f6             	mov    rsi,r14
    cdf0:	4c 89 ef             	mov    rdi,r13
    cdf3:	e8 f8 fa ff ff       	call   c8f0 <gc_trace_arrow(TraceArrows&, unsigned long, unsigned long)>
    cdf8:	49 83 c4 01          	add    r12,0x1
    cdfc:	4d 39 65 18          	cmp    QWORD PTR [r13+0x18],r12
    ce00:	73 8e                	jae    cd90 <gc_row(TraceArrows&, unsigned long)+0x40>
    ce02:	5b                   	pop    rbx
    ce03:	5d                   	pop    rbp
    ce04:	41 5c                	pop    r12
    ce06:	41 5d                	pop    r13
    ce08:	41 5e                	pop    r14
    ce0a:	c3                   	ret    
    ce0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    ce10:	48 89 c8             	mov    rax,rcx
    ce13:	eb 9b                	jmp    cdb0 <gc_row(TraceArrows&, unsigned long)+0x60>
    ce15:	48 8d 0d d4 7c 02 00 	lea    rcx,[rip+0x27cd4]        # 34af0 <Law_and_Order+0x250>
    ce1c:	ba 3c 00 00 00       	mov    edx,0x3c
    ce21:	48 8d 35 68 7c 02 00 	lea    rsi,[rip+0x27c68]        # 34a90 <Law_and_Order+0x1f0>
    ce28:	48 8d 3d 91 7c 02 00 	lea    rdi,[rip+0x27c91]        # 34ac0 <Law_and_Order+0x220>
    ce2f:	e8 9c 69 ff ff       	call   37d0 <__assert_fail@plt>
    ce34:	48 8d 0d a5 7e 02 00 	lea    rcx,[rip+0x27ea5]        # 34ce0 <Law_and_Order+0x440>
    ce3b:	ba 56 00 00 00       	mov    edx,0x56
    ce40:	48 8d 35 69 7e 02 00 	lea    rsi,[rip+0x27e69]        # 34cb0 <Law_and_Order+0x410>
    ce47:	48 8d 3d 91 7f 02 00 	lea    rdi,[rip+0x27f91]        # 34ddf <Law_and_Order+0x53f>
    ce4e:	e8 7d 69 ff ff       	call   37d0 <__assert_fail@plt>
    ce53:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ce5e:	66 90                	xchg   ax,ax

000000000000ce60 <compactify(TraceArrows&)>:
    ce60:	f3 0f 1e fa          	endbr64 
    ce64:	41 56                	push   r14
    ce66:	41 55                	push   r13
    ce68:	41 54                	push   r12
    ce6a:	55                   	push   rbp
    ce6b:	53                   	push   rbx
    ce6c:	48 83 ec 10          	sub    rsp,0x10
    ce70:	4c 8b 77 08          	mov    r14,QWORD PTR [rdi+0x8]
    ce74:	48 8b 1f             	mov    rbx,QWORD PTR [rdi]
    ce77:	4c 39 f3             	cmp    rbx,r14
    ce7a:	0f 84 71 01 00 00    	je     cff1 <compactify(TraceArrows&)+0x191>
    ce80:	49 bd ab aa aa aa aa aa aa aa 	movabs r13,0xaaaaaaaaaaaaaaab
    ce8a:	48 bd 55 55 55 55 55 55 55 05 	movabs rbp,0x555555555555555
    ce94:	eb 3c                	jmp    ced2 <compactify(TraceArrows&)+0x72>
    ce96:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    cea0:	66 0f ef c0          	pxor   xmm0,xmm0
    cea4:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    cea9:	48 85 d2             	test   rdx,rdx
    ceac:	78 6b                	js     cf19 <compactify(TraceArrows&)+0xb9>
    ceae:	66 0f ef c9          	pxor   xmm1,xmm1
    ceb2:	f2 48 0f 2a ca       	cvtsi2sd xmm1,rdx
    ceb7:	f2 0f 59 0d 29 7f 02 00 	mulsd  xmm1,QWORD PTR [rip+0x27f29]        # 34de8 <Law_and_Order+0x548>
    cebf:	66 0f 2f c1          	comisd xmm0,xmm1
    cec3:	77 7e                	ja     cf43 <compactify(TraceArrows&)+0xe3>
    cec5:	48 83 c3 20          	add    rbx,0x20
    cec9:	49 39 de             	cmp    r14,rbx
    cecc:	0f 84 1f 01 00 00    	je     cff1 <compactify(TraceArrows&)+0x191>
    ced2:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    ced5:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
    ced9:	4c 8b 63 08          	mov    r12,QWORD PTR [rbx+0x8]
    cedd:	48 29 f8             	sub    rax,rdi
    cee0:	48 c1 f8 03          	sar    rax,0x3
    cee4:	49 29 fc             	sub    r12,rdi
    cee7:	49 0f af c5          	imul   rax,r13
    ceeb:	4c 89 e2             	mov    rdx,r12
    ceee:	48 c1 fa 03          	sar    rdx,0x3
    cef2:	49 0f af d5          	imul   rdx,r13
    cef6:	48 85 c0             	test   rax,rax
    cef9:	79 a5                	jns    cea0 <compactify(TraceArrows&)+0x40>
    cefb:	48 89 c1             	mov    rcx,rax
    cefe:	83 e0 01             	and    eax,0x1
    cf01:	66 0f ef c0          	pxor   xmm0,xmm0
    cf05:	48 d1 e9             	shr    rcx,1
    cf08:	48 09 c1             	or     rcx,rax
    cf0b:	f2 48 0f 2a c1       	cvtsi2sd xmm0,rcx
    cf10:	f2 0f 58 c0          	addsd  xmm0,xmm0
    cf14:	48 85 d2             	test   rdx,rdx
    cf17:	79 95                	jns    ceae <compactify(TraceArrows&)+0x4e>
    cf19:	48 89 d0             	mov    rax,rdx
    cf1c:	48 89 d1             	mov    rcx,rdx
    cf1f:	66 0f ef c9          	pxor   xmm1,xmm1
    cf23:	48 d1 e8             	shr    rax,1
    cf26:	83 e1 01             	and    ecx,0x1
    cf29:	48 09 c8             	or     rax,rcx
    cf2c:	f2 48 0f 2a c8       	cvtsi2sd xmm1,rax
    cf31:	f2 0f 58 c9          	addsd  xmm1,xmm1
    cf35:	f2 0f 59 0d ab 7e 02 00 	mulsd  xmm1,QWORD PTR [rip+0x27eab]        # 34de8 <Law_and_Order+0x548>
    cf3d:	66 0f 2f c1          	comisd xmm0,xmm1
    cf41:	76 82                	jbe    cec5 <compactify(TraceArrows&)+0x65>
    cf43:	48 39 ea             	cmp    rdx,rbp
    cf46:	0f 87 c9 00 00 00    	ja     d015 <compactify(TraceArrows&)+0x1b5>
    cf4c:	48 85 d2             	test   rdx,rdx
    cf4f:	0f 84 ab 00 00 00    	je     d000 <compactify(TraceArrows&)+0x1a0>
    cf55:	4c 89 e7             	mov    rdi,r12
    cf58:	e8 53 69 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    cf5d:	4e 8d 0c 20          	lea    r9,[rax+r12*1]
    cf61:	48 89 c2             	mov    rdx,rax
    cf64:	4c 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],r9
    cf69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    cf70:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
    cf77:	48 83 c2 18          	add    rdx,0x18
    cf7b:	4c 39 ca             	cmp    rdx,r9
    cf7e:	75 f0                	jne    cf70 <compactify(TraceArrows&)+0x110>
    cf80:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    cf83:	4c 8b 63 08          	mov    r12,QWORD PTR [rbx+0x8]
    cf87:	49 29 fc             	sub    r12,rdi
    cf8a:	4c 89 e6             	mov    rsi,r12
    cf8d:	48 c1 fe 03          	sar    rsi,0x3
    cf91:	49 0f af f5          	imul   rsi,r13
    cf95:	48 89 c1             	mov    rcx,rax
    cf98:	48 89 fa             	mov    rdx,rdi
    cf9b:	4d 85 e4             	test   r12,r12
    cf9e:	7e 25                	jle    cfc5 <compactify(TraceArrows&)+0x165>
    cfa0:	4c 8b 02             	mov    r8,QWORD PTR [rdx]
    cfa3:	48 83 c1 18          	add    rcx,0x18
    cfa7:	48 83 c2 18          	add    rdx,0x18
    cfab:	4c 89 41 e8          	mov    QWORD PTR [rcx-0x18],r8
    cfaf:	4c 8b 42 f0          	mov    r8,QWORD PTR [rdx-0x10]
    cfb3:	4c 89 41 f0          	mov    QWORD PTR [rcx-0x10],r8
    cfb7:	44 8b 42 f8          	mov    r8d,DWORD PTR [rdx-0x8]
    cfbb:	44 89 41 f8          	mov    DWORD PTR [rcx-0x8],r8d
    cfbf:	48 83 ee 01          	sub    rsi,0x1
    cfc3:	75 db                	jne    cfa0 <compactify(TraceArrows&)+0x140>
    cfc5:	66 48 0f 6e c0       	movq   xmm0,rax
    cfca:	4c 89 4b 10          	mov    QWORD PTR [rbx+0x10],r9
    cfce:	0f 16 44 24 08       	movhps xmm0,QWORD PTR [rsp+0x8]
    cfd3:	0f 11 03             	movups XMMWORD PTR [rbx],xmm0
    cfd6:	48 85 ff             	test   rdi,rdi
    cfd9:	0f 84 e6 fe ff ff    	je     cec5 <compactify(TraceArrows&)+0x65>
    cfdf:	e8 8c 68 ff ff       	call   3870 <operator delete(void*)@plt>
    cfe4:	48 83 c3 20          	add    rbx,0x20
    cfe8:	49 39 de             	cmp    r14,rbx
    cfeb:	0f 85 e1 fe ff ff    	jne    ced2 <compactify(TraceArrows&)+0x72>
    cff1:	48 83 c4 10          	add    rsp,0x10
    cff5:	5b                   	pop    rbx
    cff6:	5d                   	pop    rbp
    cff7:	41 5c                	pop    r12
    cff9:	41 5d                	pop    r13
    cffb:	41 5e                	pop    r14
    cffd:	c3                   	ret    
    cffe:	66 90                	xchg   ax,ax
    d000:	48 c7 44 24 08 00 00 00 00 	mov    QWORD PTR [rsp+0x8],0x0
    d009:	4d 89 e1             	mov    r9,r12
    d00c:	31 f6                	xor    esi,esi
    d00e:	31 c0                	xor    eax,eax
    d010:	e9 80 ff ff ff       	jmp    cf95 <compactify(TraceArrows&)+0x135>
    d015:	48 8d 3d 44 6b 02 00 	lea    rdi,[rip+0x26b44]        # 33b60 <_IO_stdin_used+0xb60>
    d01c:	e8 5f 67 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    d021:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    d02c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000000d030 <numberT(TraceArrows&)>:
    d030:	f3 0f 1e fa          	endbr64 
    d034:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    d037:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
    d03b:	45 31 c0             	xor    r8d,r8d
    d03e:	48 39 ca             	cmp    rdx,rcx
    d041:	74 28                	je     d06b <numberT(TraceArrows&)+0x3b>
    d043:	48 be ab aa aa aa aa aa aa aa 	movabs rsi,0xaaaaaaaaaaaaaaab
    d04d:	0f 1f 00             	nop    DWORD PTR [rax]
    d050:	48 8b 42 08          	mov    rax,QWORD PTR [rdx+0x8]
    d054:	48 2b 02             	sub    rax,QWORD PTR [rdx]
    d057:	48 83 c2 20          	add    rdx,0x20
    d05b:	48 c1 f8 03          	sar    rax,0x3
    d05f:	48 0f af c6          	imul   rax,rsi
    d063:	49 01 c0             	add    r8,rax
    d066:	48 39 d1             	cmp    rcx,rdx
    d069:	75 e5                	jne    d050 <numberT(TraceArrows&)+0x20>
    d06b:	4c 89 c0             	mov    rax,r8
    d06e:	c3                   	ret    
    d06f:	90                   	nop

000000000000d070 <capacityT(TraceArrows&)>:
    d070:	f3 0f 1e fa          	endbr64 
    d074:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    d077:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
    d07b:	45 31 c0             	xor    r8d,r8d
    d07e:	48 39 ca             	cmp    rdx,rcx
    d081:	74 28                	je     d0ab <capacityT(TraceArrows&)+0x3b>
    d083:	48 be ab aa aa aa aa aa aa aa 	movabs rsi,0xaaaaaaaaaaaaaaab
    d08d:	0f 1f 00             	nop    DWORD PTR [rax]
    d090:	48 8b 42 10          	mov    rax,QWORD PTR [rdx+0x10]
    d094:	48 2b 02             	sub    rax,QWORD PTR [rdx]
    d097:	48 83 c2 20          	add    rdx,0x20
    d09b:	48 c1 f8 03          	sar    rax,0x3
    d09f:	48 0f af c6          	imul   rax,rsi
    d0a3:	49 01 c0             	add    r8,rax
    d0a6:	48 39 d1             	cmp    rcx,rdx
    d0a9:	75 e5                	jne    d090 <capacityT(TraceArrows&)+0x20>
    d0ab:	4c 89 c0             	mov    rax,r8
    d0ae:	c3                   	ret    
    d0af:	90                   	nop

000000000000d0b0 <erasedT(TraceArrows&)>:
    d0b0:	f3 0f 1e fa          	endbr64 
    d0b4:	48 8b 47 30          	mov    rax,QWORD PTR [rdi+0x30]
    d0b8:	c3                   	ret    
    d0b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000000d0c0 <sizeT(TraceArrows&)>:
    d0c0:	f3 0f 1e fa          	endbr64 
    d0c4:	48 8b 47 20          	mov    rax,QWORD PTR [rdi+0x20]
    d0c8:	c3                   	ret    
    d0c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000000d0d0 <avoidedT(TraceArrows&)>:
    d0d0:	f3 0f 1e fa          	endbr64 
    d0d4:	48 8b 47 28          	mov    rax,QWORD PTR [rdi+0x28]
    d0d8:	c3                   	ret    
    d0d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000000d0e0 <maxT(TraceArrows&)>:
    d0e0:	f3 0f 1e fa          	endbr64 
    d0e4:	48 8b 47 38          	mov    rax,QWORD PTR [rdi+0x38]
    d0e8:	c3                   	ret    
    d0e9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

000000000000d0f0 <resize(TraceArrows&, unsigned long)>:
    d0f0:	f3 0f 1e fa          	endbr64 
    d0f4:	41 55                	push   r13
    d0f6:	41 54                	push   r12
    d0f8:	55                   	push   rbp
    d0f9:	48 89 fd             	mov    rbp,rdi
    d0fc:	53                   	push   rbx
    d0fd:	48 83 ec 08          	sub    rsp,0x8
    d101:	4c 8b 67 08          	mov    r12,QWORD PTR [rdi+0x8]
    d105:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
    d108:	4c 89 e0             	mov    rax,r12
    d10b:	48 29 d0             	sub    rax,rdx
    d10e:	48 c1 f8 05          	sar    rax,0x5
    d112:	48 39 c6             	cmp    rsi,rax
    d115:	77 51                	ja     d168 <resize(TraceArrows&, unsigned long)+0x78>
    d117:	72 0f                	jb     d128 <resize(TraceArrows&, unsigned long)+0x38>
    d119:	48 83 c4 08          	add    rsp,0x8
    d11d:	5b                   	pop    rbx
    d11e:	5d                   	pop    rbp
    d11f:	41 5c                	pop    r12
    d121:	41 5d                	pop    r13
    d123:	c3                   	ret    
    d124:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    d128:	48 c1 e6 05          	shl    rsi,0x5
    d12c:	4c 8d 2c 32          	lea    r13,[rdx+rsi*1]
    d130:	4d 39 ec             	cmp    r12,r13
    d133:	74 e4                	je     d119 <resize(TraceArrows&, unsigned long)+0x29>
    d135:	4c 89 eb             	mov    rbx,r13
    d138:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    d140:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
    d143:	48 85 ff             	test   rdi,rdi
    d146:	74 38                	je     d180 <resize(TraceArrows&, unsigned long)+0x90>
    d148:	e8 23 67 ff ff       	call   3870 <operator delete(void*)@plt>
    d14d:	48 83 c3 20          	add    rbx,0x20
    d151:	49 39 dc             	cmp    r12,rbx
    d154:	75 ea                	jne    d140 <resize(TraceArrows&, unsigned long)+0x50>
    d156:	4c 89 6d 08          	mov    QWORD PTR [rbp+0x8],r13
    d15a:	48 83 c4 08          	add    rsp,0x8
    d15e:	5b                   	pop    rbx
    d15f:	5d                   	pop    rbp
    d160:	41 5c                	pop    r12
    d162:	41 5d                	pop    r13
    d164:	c3                   	ret    
    d165:	0f 1f 00             	nop    DWORD PTR [rax]
    d168:	48 83 c4 08          	add    rsp,0x8
    d16c:	48 29 c6             	sub    rsi,rax
    d16f:	5b                   	pop    rbx
    d170:	5d                   	pop    rbp
    d171:	41 5c                	pop    r12
    d173:	41 5d                	pop    r13
    d175:	e9 36 02 00 00       	jmp    d3b0 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)>
    d17a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    d180:	48 83 c3 20          	add    rbx,0x20
    d184:	49 39 dc             	cmp    r12,rbx
    d187:	75 b7                	jne    d140 <resize(TraceArrows&, unsigned long)+0x50>
    d189:	eb cb                	jmp    d156 <resize(TraceArrows&, unsigned long)+0x66>
    d18b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d190 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)>:
    d190:	f3 0f 1e fa          	endbr64 
    d194:	55                   	push   rbp
    d195:	41 89 ca             	mov    r10d,ecx
    d198:	4c 89 c5             	mov    rbp,r8
    d19b:	41 89 d0             	mov    r8d,edx
    d19e:	53                   	push   rbx
    d19f:	48 89 fb             	mov    rbx,rdi
    d1a2:	41 29 f2             	sub    r10d,esi
    d1a5:	41 29 e8             	sub    r8d,ebp
    d1a8:	48 83 ec 38          	sub    rsp,0x38
    d1ac:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    d1b5:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
    d1ba:	31 c0                	xor    eax,eax
    d1bc:	48 8b 07             	mov    rax,QWORD PTR [rdi]
    d1bf:	48 89 f7             	mov    rdi,rsi
    d1c2:	48 c1 e7 05          	shl    rdi,0x5
    d1c6:	48 01 c7             	add    rdi,rax
    d1c9:	48 8b 77 08          	mov    rsi,QWORD PTR [rdi+0x8]
    d1cd:	48 39 37             	cmp    QWORD PTR [rdi],rsi
    d1d0:	74 0a                	je     d1dc <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x4c>
    d1d2:	48 3b 56 e8          	cmp    rdx,QWORD PTR [rsi-0x18]
    d1d6:	0f 86 8d 01 00 00    	jbe    d369 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x1d9>
    d1dc:	48 89 54 24 10       	mov    QWORD PTR [rsp+0x10],rdx
    d1e1:	44 88 54 24 18       	mov    BYTE PTR [rsp+0x18],r10b
    d1e6:	44 88 44 24 19       	mov    BYTE PTR [rsp+0x19],r8b
    d1eb:	44 89 4c 24 1c       	mov    DWORD PTR [rsp+0x1c],r9d
    d1f0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [rsp+0x20],0x0
    d1f8:	48 3b 77 10          	cmp    rsi,QWORD PTR [rdi+0x10]
    d1fc:	0f 84 46 01 00 00    	je     d348 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x1b8>
    d202:	66 0f 6f 44 24 10    	movdqa xmm0,XMMWORD PTR [rsp+0x10]
    d208:	48 83 c6 18          	add    rsi,0x18
    d20c:	0f 11 46 e8          	movups XMMWORD PTR [rsi-0x18],xmm0
    d210:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
    d215:	48 89 56 f8          	mov    QWORD PTR [rsi-0x8],rdx
    d219:	48 89 77 08          	mov    QWORD PTR [rdi+0x8],rsi
    d21d:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
    d227:	48 c1 e1 05          	shl    rcx,0x5
    d22b:	48 01 c8             	add    rax,rcx
    d22e:	4c 8b 40 08          	mov    r8,QWORD PTR [rax+0x8]
    d232:	4c 8b 08             	mov    r9,QWORD PTR [rax]
    d235:	4c 89 c0             	mov    rax,r8
    d238:	4c 89 c9             	mov    rcx,r9
    d23b:	4c 29 c8             	sub    rax,r9
    d23e:	48 c1 f8 03          	sar    rax,0x3
    d242:	48 0f af c2          	imul   rax,rdx
    d246:	48 89 c2             	mov    rdx,rax
    d249:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d250:	48 85 d2             	test   rdx,rdx
    d253:	7e 2d                	jle    d282 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0xf2>
    d255:	48 89 d6             	mov    rsi,rdx
    d258:	48 89 d7             	mov    rdi,rdx
    d25b:	48 d1 fe             	sar    rsi,1
    d25e:	48 83 e7 fe          	and    rdi,0xfffffffffffffffe
    d262:	48 01 f7             	add    rdi,rsi
    d265:	48 8d 3c f9          	lea    rdi,[rcx+rdi*8]
    d269:	48 3b 2f             	cmp    rbp,QWORD PTR [rdi]
    d26c:	0f 86 96 00 00 00    	jbe    d308 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x178>
    d272:	48 29 f2             	sub    rdx,rsi
    d275:	48 8d 4f 18          	lea    rcx,[rdi+0x18]
    d279:	48 83 ea 01          	sub    rdx,0x1
    d27d:	48 85 d2             	test   rdx,rdx
    d280:	7f d3                	jg     d255 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0xc5>
    d282:	49 39 c8             	cmp    r8,rcx
    d285:	74 4e                	je     d2d5 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x145>
    d287:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
    d28a:	48 39 f5             	cmp    rbp,rsi
    d28d:	72 46                	jb     d2d5 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x145>
    d28f:	0f 85 f3 00 00 00    	jne    d388 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x1f8>
    d295:	48 85 c0             	test   rax,rax
    d298:	7e 29                	jle    d2c3 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x133>
    d29a:	48 89 c2             	mov    rdx,rax
    d29d:	48 89 c1             	mov    rcx,rax
    d2a0:	48 d1 fa             	sar    rdx,1
    d2a3:	48 83 e1 fe          	and    rcx,0xfffffffffffffffe
    d2a7:	48 01 d1             	add    rcx,rdx
    d2aa:	49 8d 0c c9          	lea    rcx,[r9+rcx*8]
    d2ae:	48 3b 31             	cmp    rsi,QWORD PTR [rcx]
    d2b1:	76 5d                	jbe    d310 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x180>
    d2b3:	48 29 d0             	sub    rax,rdx
    d2b6:	4c 8d 49 18          	lea    r9,[rcx+0x18]
    d2ba:	48 83 e8 01          	sub    rax,0x1
    d2be:	48 85 c0             	test   rax,rax
    d2c1:	7f d7                	jg     d29a <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x10a>
    d2c3:	4d 39 c8             	cmp    r8,r9
    d2c6:	74 05                	je     d2cd <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x13d>
    d2c8:	49 3b 31             	cmp    rsi,QWORD PTR [r9]
    d2cb:	73 53                	jae    d320 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x190>
    d2cd:	4d 89 c1             	mov    r9,r8
    d2d0:	41 83 41 10 01       	add    DWORD PTR [r9+0x10],0x1
    d2d5:	48 8b 43 20          	mov    rax,QWORD PTR [rbx+0x20]
    d2d9:	48 83 c0 01          	add    rax,0x1
    d2dd:	48 39 43 38          	cmp    QWORD PTR [rbx+0x38],rax
    d2e1:	48 89 43 20          	mov    QWORD PTR [rbx+0x20],rax
    d2e5:	48 0f 43 43 38       	cmovae rax,QWORD PTR [rbx+0x38]
    d2ea:	48 89 43 38          	mov    QWORD PTR [rbx+0x38],rax
    d2ee:	48 8b 44 24 28       	mov    rax,QWORD PTR [rsp+0x28]
    d2f3:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
    d2fc:	75 66                	jne    d364 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x1d4>
    d2fe:	48 83 c4 38          	add    rsp,0x38
    d302:	5b                   	pop    rbx
    d303:	5d                   	pop    rbp
    d304:	c3                   	ret    
    d305:	0f 1f 00             	nop    DWORD PTR [rax]
    d308:	48 89 f2             	mov    rdx,rsi
    d30b:	e9 40 ff ff ff       	jmp    d250 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0xc0>
    d310:	48 89 d0             	mov    rax,rdx
    d313:	e9 7d ff ff ff       	jmp    d295 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x105>
    d318:	0f 1f 84 00 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    d320:	74 ae                	je     d2d0 <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x140>
    d322:	48 8d 0d ff 75 02 00 	lea    rcx,[rip+0x275ff]        # 34928 <Law_and_Order+0x88>
    d329:	ba 43 00 00 00       	mov    edx,0x43
    d32e:	48 8d 35 5b 77 02 00 	lea    rsi,[rip+0x2775b]        # 34a90 <Law_and_Order+0x1f0>
    d335:	48 8d 3d 84 77 02 00 	lea    rdi,[rip+0x27784]        # 34ac0 <Law_and_Order+0x220>
    d33c:	e8 8f 64 ff ff       	call   37d0 <__assert_fail@plt>
    d341:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d348:	48 8d 54 24 10       	lea    rdx,[rsp+0x10]
    d34d:	48 89 4c 24 08       	mov    QWORD PTR [rsp+0x8],rcx
    d352:	e8 79 02 00 00       	call   d5d0 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)>
    d357:	48 8b 03             	mov    rax,QWORD PTR [rbx]
    d35a:	48 8b 4c 24 08       	mov    rcx,QWORD PTR [rsp+0x8]
    d35f:	e9 b9 fe ff ff       	jmp    d21d <register_trace_arrow(TraceArrows&, unsigned long, unsigned long, unsigned long, unsigned long, int)+0x8d>
    d364:	e8 87 65 ff ff       	call   38f0 <__stack_chk_fail@plt>
    d369:	48 8d 0d 98 79 02 00 	lea    rcx,[rip+0x27998]        # 34d08 <Law_and_Order+0x468>
    d370:	ba 55 00 00 00       	mov    edx,0x55
    d375:	48 8d 35 14 77 02 00 	lea    rsi,[rip+0x27714]        # 34a90 <Law_and_Order+0x1f0>
    d37c:	48 8d 3d 05 7a 02 00 	lea    rdi,[rip+0x27a05]        # 34d88 <Law_and_Order+0x4e8>
    d383:	e8 48 64 ff ff       	call   37d0 <__assert_fail@plt>
    d388:	48 8d 0d 61 77 02 00 	lea    rcx,[rip+0x27761]        # 34af0 <Law_and_Order+0x250>
    d38f:	ba 3c 00 00 00       	mov    edx,0x3c
    d394:	48 8d 35 f5 76 02 00 	lea    rsi,[rip+0x276f5]        # 34a90 <Law_and_Order+0x1f0>
    d39b:	48 8d 3d 1e 77 02 00 	lea    rdi,[rip+0x2771e]        # 34ac0 <Law_and_Order+0x220>
    d3a2:	e8 29 64 ff ff       	call   37d0 <__assert_fail@plt>
    d3a7:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]

000000000000d3b0 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)>:
    d3b0:	f3 0f 1e fa          	endbr64 
    d3b4:	48 85 f6             	test   rsi,rsi
    d3b7:	0f 84 8b 00 00 00    	je     d448 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x98>
    d3bd:	48 ba ff ff ff ff ff ff ff 03 	movabs rdx,0x3ffffffffffffff
    d3c7:	41 57                	push   r15
    d3c9:	41 56                	push   r14
    d3cb:	41 55                	push   r13
    d3cd:	41 54                	push   r12
    d3cf:	49 89 fc             	mov    r12,rdi
    d3d2:	55                   	push   rbp
    d3d3:	53                   	push   rbx
    d3d4:	48 89 f3             	mov    rbx,rsi
    d3d7:	48 89 d6             	mov    rsi,rdx
    d3da:	48 83 ec 08          	sub    rsp,0x8
    d3de:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
    d3e2:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
    d3e6:	48 89 cd             	mov    rbp,rcx
    d3e9:	48 2b 2f             	sub    rbp,QWORD PTR [rdi]
    d3ec:	48 29 c8             	sub    rax,rcx
    d3ef:	49 89 ee             	mov    r14,rbp
    d3f2:	48 c1 f8 05          	sar    rax,0x5
    d3f6:	49 c1 fe 05          	sar    r14,0x5
    d3fa:	4c 29 f6             	sub    rsi,r14
    d3fd:	48 39 c3             	cmp    rbx,rax
    d400:	77 4e                	ja     d450 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0xa0>
    d402:	48 89 c8             	mov    rax,rcx
    d405:	48 89 da             	mov    rdx,rbx
    d408:	66 0f ef c0          	pxor   xmm0,xmm0
    d40c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    d410:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    d418:	48 83 c0 20          	add    rax,0x20
    d41c:	0f 11 40 e0          	movups XMMWORD PTR [rax-0x20],xmm0
    d420:	48 83 ea 01          	sub    rdx,0x1
    d424:	75 ea                	jne    d410 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x60>
    d426:	48 c1 e3 05          	shl    rbx,0x5
    d42a:	48 01 d9             	add    rcx,rbx
    d42d:	49 89 4c 24 08       	mov    QWORD PTR [r12+0x8],rcx
    d432:	48 83 c4 08          	add    rsp,0x8
    d436:	5b                   	pop    rbx
    d437:	5d                   	pop    rbp
    d438:	41 5c                	pop    r12
    d43a:	41 5d                	pop    r13
    d43c:	41 5e                	pop    r14
    d43e:	41 5f                	pop    r15
    d440:	c3                   	ret    
    d441:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d448:	c3                   	ret    
    d449:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    d450:	48 39 de             	cmp    rsi,rbx
    d453:	0f 82 66 01 00 00    	jb     d5bf <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x20f>
    d459:	4c 39 f3             	cmp    rbx,r14
    d45c:	4d 89 f7             	mov    r15,r14
    d45f:	4c 0f 43 fb          	cmovae r15,rbx
    d463:	4d 01 f7             	add    r15,r14
    d466:	49 39 d7             	cmp    r15,rdx
    d469:	4c 0f 47 fa          	cmova  r15,rdx
    d46d:	49 c1 e7 05          	shl    r15,0x5
    d471:	4c 89 ff             	mov    rdi,r15
    d474:	e8 37 64 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    d479:	48 89 d9             	mov    rcx,rbx
    d47c:	66 0f ef c0          	pxor   xmm0,xmm0
    d480:	49 89 c5             	mov    r13,rax
    d483:	48 8d 14 28          	lea    rdx,[rax+rbp*1]
    d487:	66 0f 1f 84 00 00 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
    d490:	48 c7 42 10 00 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
    d498:	48 83 c2 20          	add    rdx,0x20
    d49c:	0f 11 42 e0          	movups XMMWORD PTR [rdx-0x20],xmm0
    d4a0:	48 83 e9 01          	sub    rcx,0x1
    d4a4:	75 ea                	jne    d490 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0xe0>
    d4a6:	49 8b 74 24 08       	mov    rsi,QWORD PTR [r12+0x8]
    d4ab:	49 8b 3c 24          	mov    rdi,QWORD PTR [r12]
    d4af:	48 39 fe             	cmp    rsi,rdi
    d4b2:	0f 84 af 00 00 00    	je     d567 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1b7>
    d4b8:	48 8d 46 e0          	lea    rax,[rsi-0x20]
    d4bc:	48 8d 57 37          	lea    rdx,[rdi+0x37]
    d4c0:	48 89 f9             	mov    rcx,rdi
    d4c3:	48 29 f8             	sub    rax,rdi
    d4c6:	4c 29 ea             	sub    rdx,r13
    d4c9:	49 89 c0             	mov    r8,rax
    d4cc:	49 c1 e8 05          	shr    r8,0x5
    d4d0:	48 83 fa 6e          	cmp    rdx,0x6e
    d4d4:	4c 89 ea             	mov    rdx,r13
    d4d7:	0f 86 c0 00 00 00    	jbe    d59d <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1ed>
    d4dd:	48 3d a0 00 00 00    	cmp    rax,0xa0
    d4e3:	0f 86 b4 00 00 00    	jbe    d59d <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1ed>
    d4e9:	48 83 e0 c0          	and    rax,0xffffffffffffffc0
    d4ed:	48 01 f8             	add    rax,rdi
    d4f0:	f3 0f 6f 09          	movdqu xmm1,XMMWORD PTR [rcx]
    d4f4:	f3 0f 6f 59 10       	movdqu xmm3,XMMWORD PTR [rcx+0x10]
    d4f9:	48 83 c1 40          	add    rcx,0x40
    d4fd:	48 83 c2 40          	add    rdx,0x40
    d501:	f3 0f 6f 41 e0       	movdqu xmm0,XMMWORD PTR [rcx-0x20]
    d506:	f3 0f 6f 51 f0       	movdqu xmm2,XMMWORD PTR [rcx-0x10]
    d50b:	66 0f d6 4a c0       	movq   QWORD PTR [rdx-0x40],xmm1
    d510:	0f 17 4a c8          	movhps QWORD PTR [rdx-0x38],xmm1
    d514:	66 0f d6 5a d0       	movq   QWORD PTR [rdx-0x30],xmm3
    d519:	66 0f d6 42 e0       	movq   QWORD PTR [rdx-0x20],xmm0
    d51e:	0f 17 42 e8          	movhps QWORD PTR [rdx-0x18],xmm0
    d522:	66 0f d6 52 f0       	movq   QWORD PTR [rdx-0x10],xmm2
    d527:	48 39 c1             	cmp    rcx,rax
    d52a:	75 c4                	jne    d4f0 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x140>
    d52c:	4c 89 c0             	mov    rax,r8
    d52f:	48 83 e0 fe          	and    rax,0xfffffffffffffffe
    d533:	48 c1 e0 05          	shl    rax,0x5
    d537:	48 8d 14 07          	lea    rdx,[rdi+rax*1]
    d53b:	4c 01 e8             	add    rax,r13
    d53e:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
    d542:	f3 0f 6f 2a          	movdqu xmm5,XMMWORD PTR [rdx]
    d546:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
    d54a:	48 8d 4a 20          	lea    rcx,[rdx+0x20]
    d54e:	0f 11 28             	movups XMMWORD PTR [rax],xmm5
    d551:	48 39 ce             	cmp    rsi,rcx
    d554:	74 11                	je     d567 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1b7>
    d556:	f3 0f 6f 72 20       	movdqu xmm6,XMMWORD PTR [rdx+0x20]
    d55b:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
    d55f:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
    d563:	0f 11 70 20          	movups XMMWORD PTR [rax+0x20],xmm6
    d567:	48 85 ff             	test   rdi,rdi
    d56a:	74 05                	je     d571 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1c1>
    d56c:	e8 ff 62 ff ff       	call   3870 <operator delete(void*)@plt>
    d571:	4c 01 f3             	add    rbx,r14
    d574:	4d 89 2c 24          	mov    QWORD PTR [r12],r13
    d578:	48 c1 e3 05          	shl    rbx,0x5
    d57c:	49 8d 54 1d 00       	lea    rdx,[r13+rbx*1+0x0]
    d581:	4d 01 fd             	add    r13,r15
    d584:	49 89 54 24 08       	mov    QWORD PTR [r12+0x8],rdx
    d589:	4d 89 6c 24 10       	mov    QWORD PTR [r12+0x10],r13
    d58e:	48 83 c4 08          	add    rsp,0x8
    d592:	5b                   	pop    rbx
    d593:	5d                   	pop    rbp
    d594:	41 5c                	pop    r12
    d596:	41 5d                	pop    r13
    d598:	41 5e                	pop    r14
    d59a:	41 5f                	pop    r15
    d59c:	c3                   	ret    
    d59d:	48 89 f8             	mov    rax,rdi
    d5a0:	f3 0f 6f 20          	movdqu xmm4,XMMWORD PTR [rax]
    d5a4:	48 83 c0 20          	add    rax,0x20
    d5a8:	48 83 c2 20          	add    rdx,0x20
    d5ac:	0f 11 62 e0          	movups XMMWORD PTR [rdx-0x20],xmm4
    d5b0:	48 8b 48 f0          	mov    rcx,QWORD PTR [rax-0x10]
    d5b4:	48 89 4a f0          	mov    QWORD PTR [rdx-0x10],rcx
    d5b8:	48 39 c6             	cmp    rsi,rax
    d5bb:	75 e3                	jne    d5a0 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1f0>
    d5bd:	eb a8                	jmp    d567 <std::vector<SimpleMap<unsigned long, TraceArrow>, std::allocator<SimpleMap<unsigned long, TraceArrow> > >::_M_default_append(unsigned long)+0x1b7>
    d5bf:	48 8d 3d b5 60 02 00 	lea    rdi,[rip+0x260b5]        # 3367b <_IO_stdin_used+0x67b>
    d5c6:	e8 b5 61 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>
    d5cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d5d0 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)>:
    d5d0:	f3 0f 1e fa          	endbr64 
    d5d4:	48 b9 ab aa aa aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaab
    d5de:	41 57                	push   r15
    d5e0:	41 56                	push   r14
    d5e2:	41 55                	push   r13
    d5e4:	41 54                	push   r12
    d5e6:	55                   	push   rbp
    d5e7:	53                   	push   rbx
    d5e8:	48 83 ec 28          	sub    rsp,0x28
    d5ec:	4c 8b 7f 08          	mov    r15,QWORD PTR [rdi+0x8]
    d5f0:	4c 8b 2f             	mov    r13,QWORD PTR [rdi]
    d5f3:	4c 89 f8             	mov    rax,r15
    d5f6:	4c 29 e8             	sub    rax,r13
    d5f9:	48 c1 f8 03          	sar    rax,0x3
    d5fd:	48 0f af c1          	imul   rax,rcx
    d601:	48 b9 55 55 55 55 55 55 55 05 	movabs rcx,0x555555555555555
    d60b:	48 39 c8             	cmp    rax,rcx
    d60e:	0f 84 3f 01 00 00    	je     d753 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x183>
    d614:	48 89 f5             	mov    rbp,rsi
    d617:	49 89 fe             	mov    r14,rdi
    d61a:	4c 29 ee             	sub    rsi,r13
    d61d:	48 85 c0             	test   rax,rax
    d620:	0f 84 12 01 00 00    	je     d738 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x168>
    d626:	49 bc f8 ff ff ff ff ff ff 7f 	movabs r12,0x7ffffffffffffff8
    d630:	48 8d 3c 00          	lea    rdi,[rax+rax*1]
    d634:	48 39 f8             	cmp    rax,rdi
    d637:	0f 86 db 00 00 00    	jbe    d718 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x148>
    d63d:	4c 89 e7             	mov    rdi,r12
    d640:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
    d645:	48 89 74 24 10       	mov    QWORD PTR [rsp+0x10],rsi
    d64a:	e8 61 62 ff ff       	call   38b0 <operator new(unsigned long)@plt>
    d64f:	48 8b 74 24 10       	mov    rsi,QWORD PTR [rsp+0x10]
    d654:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
    d659:	48 89 c3             	mov    rbx,rax
    d65c:	4a 8d 04 20          	lea    rax,[rax+r12*1]
    d660:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax
    d665:	4c 8d 63 18          	lea    r12,[rbx+0x18]
    d669:	f3 0f 6f 12          	movdqu xmm2,XMMWORD PTR [rdx]
    d66d:	48 8b 42 10          	mov    rax,QWORD PTR [rdx+0x10]
    d671:	0f 11 14 33          	movups XMMWORD PTR [rbx+rsi*1],xmm2
    d675:	48 89 44 33 10       	mov    QWORD PTR [rbx+rsi*1+0x10],rax
    d67a:	4c 39 ed             	cmp    rbp,r13
    d67d:	74 36                	je     d6b5 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0xe5>
    d67f:	48 89 da             	mov    rdx,rbx
    d682:	4c 89 e8             	mov    rax,r13
    d685:	0f 1f 00             	nop    DWORD PTR [rax]
    d688:	f3 0f 6f 08          	movdqu xmm1,XMMWORD PTR [rax]
    d68c:	48 83 c0 18          	add    rax,0x18
    d690:	48 83 c2 18          	add    rdx,0x18
    d694:	0f 11 4a e8          	movups XMMWORD PTR [rdx-0x18],xmm1
    d698:	48 8b 48 f8          	mov    rcx,QWORD PTR [rax-0x8]
    d69c:	48 89 4a f8          	mov    QWORD PTR [rdx-0x8],rcx
    d6a0:	48 39 c5             	cmp    rbp,rax
    d6a3:	75 e3                	jne    d688 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0xb8>
    d6a5:	48 8d 45 e8          	lea    rax,[rbp-0x18]
    d6a9:	4c 29 e8             	sub    rax,r13
    d6ac:	48 c1 e8 03          	shr    rax,0x3
    d6b0:	4c 8d 64 c3 30       	lea    r12,[rbx+rax*8+0x30]
    d6b5:	4c 39 fd             	cmp    rbp,r15
    d6b8:	74 24                	je     d6de <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x10e>
    d6ba:	49 29 ef             	sub    r15,rbp
    d6bd:	4c 89 e7             	mov    rdi,r12
    d6c0:	48 89 ee             	mov    rsi,rbp
    d6c3:	49 8d 47 e8          	lea    rax,[r15-0x18]
    d6c7:	48 c1 e8 03          	shr    rax,0x3
    d6cb:	4c 8d 3c c5 18 00 00 00 	lea    r15,[rax*8+0x18]
    d6d3:	4c 89 fa             	mov    rdx,r15
    d6d6:	4d 01 fc             	add    r12,r15
    d6d9:	e8 52 61 ff ff       	call   3830 <memcpy@plt>
    d6de:	4d 85 ed             	test   r13,r13
    d6e1:	74 08                	je     d6eb <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x11b>
    d6e3:	4c 89 ef             	mov    rdi,r13
    d6e6:	e8 85 61 ff ff       	call   3870 <operator delete(void*)@plt>
    d6eb:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
    d6f0:	66 48 0f 6e c3       	movq   xmm0,rbx
    d6f5:	66 49 0f 6e dc       	movq   xmm3,r12
    d6fa:	66 0f 6c c3          	punpcklqdq xmm0,xmm3
    d6fe:	49 89 46 10          	mov    QWORD PTR [r14+0x10],rax
    d702:	41 0f 11 06          	movups XMMWORD PTR [r14],xmm0
    d706:	48 83 c4 28          	add    rsp,0x28
    d70a:	5b                   	pop    rbx
    d70b:	5d                   	pop    rbp
    d70c:	41 5c                	pop    r12
    d70e:	41 5d                	pop    r13
    d710:	41 5e                	pop    r14
    d712:	41 5f                	pop    r15
    d714:	c3                   	ret    
    d715:	0f 1f 00             	nop    DWORD PTR [rax]
    d718:	48 85 ff             	test   rdi,rdi
    d71b:	75 26                	jne    d743 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x173>
    d71d:	48 c7 44 24 08 00 00 00 00 	mov    QWORD PTR [rsp+0x8],0x0
    d726:	41 bc 18 00 00 00    	mov    r12d,0x18
    d72c:	31 db                	xor    ebx,ebx
    d72e:	e9 36 ff ff ff       	jmp    d669 <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x99>
    d733:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
    d738:	41 bc 18 00 00 00    	mov    r12d,0x18
    d73e:	e9 fa fe ff ff       	jmp    d63d <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x6d>
    d743:	48 39 cf             	cmp    rdi,rcx
    d746:	48 0f 46 cf          	cmovbe rcx,rdi
    d74a:	4c 6b e1 18          	imul   r12,rcx,0x18
    d74e:	e9 ea fe ff ff       	jmp    d63d <void std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > >::_M_realloc_insert<std::pair<unsigned long, TraceArrow> >(__gnu_cxx::__normal_iterator<std::pair<unsigned long, TraceArrow>*, std::vector<std::pair<unsigned long, TraceArrow>, std::allocator<std::pair<unsigned long, TraceArrow> > > >, std::pair<unsigned long, TraceArrow>&&)+0x6d>
    d753:	48 8d 3d 8e 5f 02 00 	lea    rdi,[rip+0x25f8e]        # 336e8 <_IO_stdin_used+0x6e8>
    d75a:	e8 21 60 ff ff       	call   3780 <std::__throw_length_error(char const*)@plt>

000000000000d75f <hc_default>:
    d75f:	f3 0f 1e fa          	endbr64 
    d763:	55                   	push   rbp
    d764:	48 89 e5             	mov    rbp,rsp
    d767:	48 83 ec 40          	sub    rsp,0x40
    d76b:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    d76e:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    d771:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    d774:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
    d777:	44 89 c0             	mov    eax,r8d
    d77a:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
    d77e:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
    d781:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    d785:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    d789:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    d78d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    d790:	2b 45 dc             	sub    eax,DWORD PTR [rbp-0x24]
    d793:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    d796:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    d799:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
    d79c:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    d79f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7a3:	8b 00                	mov    eax,DWORD PTR [rax]
    d7a5:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    d7a8:	0f b6 45 cc          	movzx  eax,BYTE PTR [rbp-0x34]
    d7ac:	83 e8 0c             	sub    eax,0xc
    d7af:	83 f8 07             	cmp    eax,0x7
    d7b2:	0f 87 53 03 00 00    	ja     db0b <hc_default+0x3ac>
    d7b8:	89 c0                	mov    eax,eax
    d7ba:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    d7c2:	48 8d 05 5f 76 02 00 	lea    rax,[rip+0x2765f]        # 34e28 <Law_and_Order+0x588>
    d7c9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    d7cc:	48 98                	cdqe   
    d7ce:	48 8d 15 53 76 02 00 	lea    rdx,[rip+0x27653]        # 34e28 <Law_and_Order+0x588>
    d7d5:	48 01 d0             	add    rax,rdx
    d7d8:	3e ff e0             	notrack jmp rax
    d7db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7df:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    d7e3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    d7e6:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    d7ea:	89 c1                	mov    ecx,eax
    d7ec:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    d7ef:	01 c8                	add    eax,ecx
    d7f1:	89 c0                	mov    eax,eax
    d7f3:	48 01 d0             	add    rax,rdx
    d7f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    d7f9:	0f b6 c0             	movzx  eax,al
    d7fc:	83 e0 01             	and    eax,0x1
    d7ff:	85 c0                	test   eax,eax
    d801:	0f 84 1d 03 00 00    	je     db24 <hc_default+0x3c5>
    d807:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    d80b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    d80e:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
    d811:	0f 84 0d 03 00 00    	je     db24 <hc_default+0x3c5>
    d817:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    d81a:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    d81d:	83 e8 01             	sub    eax,0x1
    d820:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    d823:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    d827:	0f 84 f7 02 00 00    	je     db24 <hc_default+0x3c5>
    d82d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d831:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    d835:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    d838:	48 63 d2             	movsxd rdx,edx
    d83b:	48 83 c2 01          	add    rdx,0x1
    d83f:	48 c1 e2 02          	shl    rdx,0x2
    d843:	48 01 d0             	add    rax,rdx
    d846:	8b 00                	mov    eax,DWORD PTR [rax]
    d848:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    d84b:	0f 8e d3 02 00 00    	jle    db24 <hc_default+0x3c5>
    d851:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    d855:	e9 ca 02 00 00       	jmp    db24 <hc_default+0x3c5>
    d85a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d85e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    d862:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    d865:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    d869:	89 c1                	mov    ecx,eax
    d86b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    d86e:	01 c8                	add    eax,ecx
    d870:	89 c0                	mov    eax,eax
    d872:	48 01 d0             	add    rax,rdx
    d875:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    d878:	0f b6 c0             	movzx  eax,al
    d87b:	83 e0 01             	and    eax,0x1
    d87e:	85 c0                	test   eax,eax
    d880:	0f 84 a1 02 00 00    	je     db27 <hc_default+0x3c8>
    d886:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    d88a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    d88d:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
    d890:	0f 84 91 02 00 00    	je     db27 <hc_default+0x3c8>
    d896:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    d899:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    d89c:	83 e8 01             	sub    eax,0x1
    d89f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    d8a2:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    d8a6:	0f 84 7b 02 00 00    	je     db27 <hc_default+0x3c8>
    d8ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d8b0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    d8b4:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    d8b7:	48 63 d2             	movsxd rdx,edx
    d8ba:	48 83 c2 01          	add    rdx,0x1
    d8be:	48 c1 e2 02          	shl    rdx,0x2
    d8c2:	48 01 d0             	add    rax,rdx
    d8c5:	8b 00                	mov    eax,DWORD PTR [rax]
    d8c7:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    d8ca:	0f 8e 57 02 00 00    	jle    db27 <hc_default+0x3c8>
    d8d0:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    d8d4:	e9 4e 02 00 00       	jmp    db27 <hc_default+0x3c8>
    d8d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d8dd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    d8e1:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    d8e4:	83 ea 01             	sub    edx,0x1
    d8e7:	89 d1                	mov    ecx,edx
    d8e9:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
    d8ed:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    d8f0:	01 ca                	add    edx,ecx
    d8f2:	89 d2                	mov    edx,edx
    d8f4:	48 01 d0             	add    rax,rdx
    d8f7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    d8fa:	0f b6 c0             	movzx  eax,al
    d8fd:	83 e0 01             	and    eax,0x1
    d900:	85 c0                	test   eax,eax
    d902:	0f 84 22 02 00 00    	je     db2a <hc_default+0x3cb>
    d908:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    d90c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d910:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    d914:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    d917:	48 63 d2             	movsxd rdx,edx
    d91a:	48 c1 e2 02          	shl    rdx,0x2
    d91e:	48 01 d0             	add    rax,rdx
    d921:	8b 00                	mov    eax,DWORD PTR [rax]
    d923:	85 c0                	test   eax,eax
    d925:	75 04                	jne    d92b <hc_default+0x1cc>
    d927:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    d92b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    d92e:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
    d931:	0f 84 f3 01 00 00    	je     db2a <hc_default+0x3cb>
    d937:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    d93a:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    d93d:	83 e8 01             	sub    eax,0x1
    d940:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    d943:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    d947:	0f 84 dd 01 00 00    	je     db2a <hc_default+0x3cb>
    d94d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d951:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    d955:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    d958:	48 63 d2             	movsxd rdx,edx
    d95b:	48 83 c2 01          	add    rdx,0x1
    d95f:	48 c1 e2 02          	shl    rdx,0x2
    d963:	48 01 d0             	add    rax,rdx
    d966:	8b 00                	mov    eax,DWORD PTR [rax]
    d968:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    d96b:	0f 8e b9 01 00 00    	jle    db2a <hc_default+0x3cb>
    d971:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    d975:	e9 b0 01 00 00       	jmp    db2a <hc_default+0x3cb>
    d97a:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    d97e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    d981:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    d984:	83 e8 01             	sub    eax,0x1
    d987:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    d98a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    d98e:	0f 84 99 01 00 00    	je     db2d <hc_default+0x3ce>
    d994:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d998:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    d99c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    d99f:	48 63 d2             	movsxd rdx,edx
    d9a2:	48 83 c2 01          	add    rdx,0x1
    d9a6:	48 c1 e2 02          	shl    rdx,0x2
    d9aa:	48 01 d0             	add    rax,rdx
    d9ad:	8b 00                	mov    eax,DWORD PTR [rax]
    d9af:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    d9b2:	0f 8e 75 01 00 00    	jle    db2d <hc_default+0x3ce>
    d9b8:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    d9bc:	e9 6c 01 00 00       	jmp    db2d <hc_default+0x3ce>
    d9c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d9c5:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    d9c9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    d9cc:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    d9d0:	89 c1                	mov    ecx,eax
    d9d2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    d9d5:	01 c8                	add    eax,ecx
    d9d7:	89 c0                	mov    eax,eax
    d9d9:	48 01 d0             	add    rax,rdx
    d9dc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    d9df:	0f b6 c0             	movzx  eax,al
    d9e2:	83 e0 01             	and    eax,0x1
    d9e5:	85 c0                	test   eax,eax
    d9e7:	0f 84 43 01 00 00    	je     db30 <hc_default+0x3d1>
    d9ed:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    d9f1:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    d9f5:	74 20                	je     da17 <hc_default+0x2b8>
    d9f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d9fb:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    d9ff:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    da02:	48 63 d2             	movsxd rdx,edx
    da05:	48 c1 e2 02          	shl    rdx,0x2
    da09:	48 01 d0             	add    rax,rdx
    da0c:	8b 00                	mov    eax,DWORD PTR [rax]
    da0e:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    da11:	7e 04                	jle    da17 <hc_default+0x2b8>
    da13:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    da17:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    da1b:	0f 84 0f 01 00 00    	je     db30 <hc_default+0x3d1>
    da21:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    da25:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    da29:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    da2c:	48 63 d2             	movsxd rdx,edx
    da2f:	48 83 c2 01          	add    rdx,0x1
    da33:	48 c1 e2 02          	shl    rdx,0x2
    da37:	48 01 d0             	add    rax,rdx
    da3a:	8b 00                	mov    eax,DWORD PTR [rax]
    da3c:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    da3f:	0f 8e eb 00 00 00    	jle    db30 <hc_default+0x3d1>
    da45:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    da49:	e9 e2 00 00 00       	jmp    db30 <hc_default+0x3d1>
    da4e:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    da52:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    da56:	74 20                	je     da78 <hc_default+0x319>
    da58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    da5c:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    da60:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    da63:	48 63 d2             	movsxd rdx,edx
    da66:	48 c1 e2 02          	shl    rdx,0x2
    da6a:	48 01 d0             	add    rax,rdx
    da6d:	8b 00                	mov    eax,DWORD PTR [rax]
    da6f:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    da72:	7e 04                	jle    da78 <hc_default+0x319>
    da74:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    da78:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    da7c:	0f 84 b1 00 00 00    	je     db33 <hc_default+0x3d4>
    da82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    da86:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    da8a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    da8d:	48 63 d2             	movsxd rdx,edx
    da90:	48 83 c2 01          	add    rdx,0x1
    da94:	48 c1 e2 02          	shl    rdx,0x2
    da98:	48 01 d0             	add    rax,rdx
    da9b:	8b 00                	mov    eax,DWORD PTR [rax]
    da9d:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    daa0:	0f 8e 8d 00 00 00    	jle    db33 <hc_default+0x3d4>
    daa6:	c6 45 eb 00          	mov    BYTE PTR [rbp-0x15],0x0
    daaa:	e9 84 00 00 00       	jmp    db33 <hc_default+0x3d4>
    daaf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    dab2:	2b 45 dc             	sub    eax,DWORD PTR [rbp-0x24]
    dab5:	83 c0 01             	add    eax,0x1
    dab8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    dabb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dabf:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dac3:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    dac6:	48 63 d2             	movsxd rdx,edx
    dac9:	48 c1 e2 02          	shl    rdx,0x2
    dacd:	48 01 d0             	add    rax,rdx
    dad0:	8b 00                	mov    eax,DWORD PTR [rax]
    dad2:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    dad5:	0f 9e c0             	setle  al
    dad8:	88 45 eb             	mov    BYTE PTR [rbp-0x15],al
    dadb:	eb 5a                	jmp    db37 <hc_default+0x3d8>
    dadd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dae1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    dae5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    dae8:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    daec:	89 c1                	mov    ecx,eax
    daee:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    daf1:	01 c8                	add    eax,ecx
    daf3:	89 c0                	mov    eax,eax
    daf5:	48 01 d0             	add    rax,rdx
    daf8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    dafb:	0f b6 c0             	movzx  eax,al
    dafe:	83 e0 01             	and    eax,0x1
    db01:	85 c0                	test   eax,eax
    db03:	74 31                	je     db36 <hc_default+0x3d7>
    db05:	c6 45 eb 01          	mov    BYTE PTR [rbp-0x15],0x1
    db09:	eb 2b                	jmp    db36 <hc_default+0x3d7>
    db0b:	0f b6 45 cc          	movzx  eax,BYTE PTR [rbp-0x34]
    db0f:	89 c6                	mov    esi,eax
    db11:	48 8d 3d d8 72 02 00 	lea    rdi,[rip+0x272d8]        # 34df0 <Law_and_Order+0x550>
    db18:	b8 00 00 00 00       	mov    eax,0x0
    db1d:	e8 c9 14 02 00       	call   2efeb <vrna_message_warning>
    db22:	eb 13                	jmp    db37 <hc_default+0x3d8>
    db24:	90                   	nop
    db25:	eb 10                	jmp    db37 <hc_default+0x3d8>
    db27:	90                   	nop
    db28:	eb 0d                	jmp    db37 <hc_default+0x3d8>
    db2a:	90                   	nop
    db2b:	eb 0a                	jmp    db37 <hc_default+0x3d8>
    db2d:	90                   	nop
    db2e:	eb 07                	jmp    db37 <hc_default+0x3d8>
    db30:	90                   	nop
    db31:	eb 04                	jmp    db37 <hc_default+0x3d8>
    db33:	90                   	nop
    db34:	eb 01                	jmp    db37 <hc_default+0x3d8>
    db36:	90                   	nop
    db37:	0f b6 45 eb          	movzx  eax,BYTE PTR [rbp-0x15]
    db3b:	c9                   	leave  
    db3c:	c3                   	ret    

000000000000db3d <hc_sn>:
    db3d:	f3 0f 1e fa          	endbr64 
    db41:	55                   	push   rbp
    db42:	48 89 e5             	mov    rbp,rsp
    db45:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    db48:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    db4b:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    db4e:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
    db51:	44 89 c0             	mov    eax,r8d
    db54:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
    db58:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
    db5b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    db5f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    db63:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    db67:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
    db6b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    db6f:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    db73:	b8 01 00 00 00       	mov    eax,0x1
    db78:	5d                   	pop    rbp
    db79:	c3                   	ret    

000000000000db7a <hc_default_window>:
    db7a:	f3 0f 1e fa          	endbr64 
    db7e:	55                   	push   rbp
    db7f:	48 89 e5             	mov    rbp,rsp
    db82:	48 83 ec 40          	sub    rsp,0x40
    db86:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    db89:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    db8c:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    db8f:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
    db92:	44 89 c0             	mov    eax,r8d
    db95:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
    db99:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
    db9c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    dba0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    dba4:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    dba8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    dbab:	2b 45 dc             	sub    eax,DWORD PTR [rbp-0x24]
    dbae:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    dbb1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    dbb4:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
    dbb7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    dbba:	0f b6 45 cc          	movzx  eax,BYTE PTR [rbp-0x34]
    dbbe:	83 e8 0c             	sub    eax,0xc
    dbc1:	83 f8 08             	cmp    eax,0x8
    dbc4:	0f 87 e9 03 00 00    	ja     dfb3 <hc_default_window+0x439>
    dbca:	89 c0                	mov    eax,eax
    dbcc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    dbd4:	48 8d 05 6d 72 02 00 	lea    rax,[rip+0x2726d]        # 34e48 <Law_and_Order+0x5a8>
    dbdb:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    dbde:	48 98                	cdqe   
    dbe0:	48 8d 15 61 72 02 00 	lea    rdx,[rip+0x27261]        # 34e48 <Law_and_Order+0x5a8>
    dbe7:	48 01 d0             	add    rax,rdx
    dbea:	3e ff e0             	notrack jmp rax
    dbed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dbf1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    dbf5:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    dbf8:	48 63 d2             	movsxd rdx,edx
    dbfb:	48 c1 e2 03          	shl    rdx,0x3
    dbff:	48 01 d0             	add    rax,rdx
    dc02:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    dc05:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    dc08:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
    dc0b:	48 98                	cdqe   
    dc0d:	48 01 d0             	add    rax,rdx
    dc10:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    dc13:	0f b6 c0             	movzx  eax,al
    dc16:	83 e0 01             	and    eax,0x1
    dc19:	85 c0                	test   eax,eax
    dc1b:	0f 84 ab 03 00 00    	je     dfcc <hc_default_window+0x452>
    dc21:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    dc25:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    dc28:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
    dc2b:	0f 84 9b 03 00 00    	je     dfcc <hc_default_window+0x452>
    dc31:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    dc34:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    dc37:	83 e8 01             	sub    eax,0x1
    dc3a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    dc3d:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    dc41:	0f 84 85 03 00 00    	je     dfcc <hc_default_window+0x452>
    dc47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dc4b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dc4f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    dc52:	48 63 d2             	movsxd rdx,edx
    dc55:	48 83 c2 01          	add    rdx,0x1
    dc59:	48 c1 e2 02          	shl    rdx,0x2
    dc5d:	48 01 d0             	add    rax,rdx
    dc60:	8b 00                	mov    eax,DWORD PTR [rax]
    dc62:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    dc65:	0f 8e 61 03 00 00    	jle    dfcc <hc_default_window+0x452>
    dc6b:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    dc6f:	e9 58 03 00 00       	jmp    dfcc <hc_default_window+0x452>
    dc74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dc78:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    dc7c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    dc7f:	48 63 d2             	movsxd rdx,edx
    dc82:	48 c1 e2 03          	shl    rdx,0x3
    dc86:	48 01 d0             	add    rax,rdx
    dc89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    dc8c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    dc8f:	2b 45 dc             	sub    eax,DWORD PTR [rbp-0x24]
    dc92:	48 98                	cdqe   
    dc94:	48 01 d0             	add    rax,rdx
    dc97:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    dc9a:	0f b6 c0             	movzx  eax,al
    dc9d:	83 e0 01             	and    eax,0x1
    dca0:	85 c0                	test   eax,eax
    dca2:	0f 84 27 03 00 00    	je     dfcf <hc_default_window+0x455>
    dca8:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    dcac:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    dcaf:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
    dcb2:	0f 84 17 03 00 00    	je     dfcf <hc_default_window+0x455>
    dcb8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    dcbb:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    dcbe:	83 e8 01             	sub    eax,0x1
    dcc1:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    dcc4:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    dcc8:	0f 84 01 03 00 00    	je     dfcf <hc_default_window+0x455>
    dcce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dcd2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dcd6:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    dcd9:	48 63 d2             	movsxd rdx,edx
    dcdc:	48 83 c2 01          	add    rdx,0x1
    dce0:	48 c1 e2 02          	shl    rdx,0x2
    dce4:	48 01 d0             	add    rax,rdx
    dce7:	8b 00                	mov    eax,DWORD PTR [rax]
    dce9:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    dcec:	0f 8e dd 02 00 00    	jle    dfcf <hc_default_window+0x455>
    dcf2:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    dcf6:	e9 d4 02 00 00       	jmp    dfcf <hc_default_window+0x455>
    dcfb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dcff:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    dd03:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    dd06:	48 63 d2             	movsxd rdx,edx
    dd09:	48 c1 e2 03          	shl    rdx,0x3
    dd0d:	48 01 d0             	add    rax,rdx
    dd10:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    dd13:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    dd16:	83 e8 01             	sub    eax,0x1
    dd19:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
    dd1c:	48 98                	cdqe   
    dd1e:	48 01 d0             	add    rax,rdx
    dd21:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    dd24:	0f b6 c0             	movzx  eax,al
    dd27:	83 e0 01             	and    eax,0x1
    dd2a:	85 c0                	test   eax,eax
    dd2c:	0f 84 a0 02 00 00    	je     dfd2 <hc_default_window+0x458>
    dd32:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    dd36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dd3a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dd3e:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    dd41:	48 63 d2             	movsxd rdx,edx
    dd44:	48 c1 e2 02          	shl    rdx,0x2
    dd48:	48 01 d0             	add    rax,rdx
    dd4b:	8b 00                	mov    eax,DWORD PTR [rax]
    dd4d:	85 c0                	test   eax,eax
    dd4f:	75 04                	jne    dd55 <hc_default_window+0x1db>
    dd51:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    dd55:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    dd58:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
    dd5b:	0f 84 71 02 00 00    	je     dfd2 <hc_default_window+0x458>
    dd61:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    dd64:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    dd67:	83 e8 01             	sub    eax,0x1
    dd6a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    dd6d:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    dd71:	0f 84 5b 02 00 00    	je     dfd2 <hc_default_window+0x458>
    dd77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dd7b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dd7f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    dd82:	48 63 d2             	movsxd rdx,edx
    dd85:	48 83 c2 01          	add    rdx,0x1
    dd89:	48 c1 e2 02          	shl    rdx,0x2
    dd8d:	48 01 d0             	add    rax,rdx
    dd90:	8b 00                	mov    eax,DWORD PTR [rax]
    dd92:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    dd95:	0f 8e 37 02 00 00    	jle    dfd2 <hc_default_window+0x458>
    dd9b:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    dd9f:	e9 2e 02 00 00       	jmp    dfd2 <hc_default_window+0x458>
    dda4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dda8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    ddac:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    ddaf:	48 63 d2             	movsxd rdx,edx
    ddb2:	48 83 c2 01          	add    rdx,0x1
    ddb6:	48 c1 e2 03          	shl    rdx,0x3
    ddba:	48 01 d0             	add    rax,rdx
    ddbd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    ddc0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ddc3:	8d 48 01             	lea    ecx,[rax+0x1]
    ddc6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    ddc9:	29 c8                	sub    eax,ecx
    ddcb:	48 98                	cdqe   
    ddcd:	48 01 d0             	add    rax,rdx
    ddd0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    ddd3:	0f b6 c0             	movzx  eax,al
    ddd6:	83 e0 01             	and    eax,0x1
    ddd9:	85 c0                	test   eax,eax
    dddb:	0f 84 f4 01 00 00    	je     dfd5 <hc_default_window+0x45b>
    dde1:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    dde5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    dde9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dded:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    ddf0:	48 63 d2             	movsxd rdx,edx
    ddf3:	48 c1 e2 02          	shl    rdx,0x2
    ddf7:	48 01 d0             	add    rax,rdx
    ddfa:	8b 00                	mov    eax,DWORD PTR [rax]
    ddfc:	85 c0                	test   eax,eax
    ddfe:	75 04                	jne    de04 <hc_default_window+0x28a>
    de00:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    de04:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    de07:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
    de0a:	0f 84 c5 01 00 00    	je     dfd5 <hc_default_window+0x45b>
    de10:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    de13:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    de16:	83 e8 01             	sub    eax,0x1
    de19:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    de1c:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    de20:	0f 84 af 01 00 00    	je     dfd5 <hc_default_window+0x45b>
    de26:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    de2a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    de2e:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    de31:	48 63 d2             	movsxd rdx,edx
    de34:	48 83 c2 01          	add    rdx,0x1
    de38:	48 c1 e2 02          	shl    rdx,0x2
    de3c:	48 01 d0             	add    rax,rdx
    de3f:	8b 00                	mov    eax,DWORD PTR [rax]
    de41:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    de44:	0f 8e 8b 01 00 00    	jle    dfd5 <hc_default_window+0x45b>
    de4a:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    de4e:	e9 82 01 00 00       	jmp    dfd5 <hc_default_window+0x45b>
    de53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    de57:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    de5b:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    de5e:	48 63 d2             	movsxd rdx,edx
    de61:	48 c1 e2 03          	shl    rdx,0x3
    de65:	48 01 d0             	add    rax,rdx
    de68:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    de6b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    de6e:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    de71:	48 98                	cdqe   
    de73:	48 01 d0             	add    rax,rdx
    de76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    de79:	0f b6 c0             	movzx  eax,al
    de7c:	83 e0 01             	and    eax,0x1
    de7f:	85 c0                	test   eax,eax
    de81:	0f 84 51 01 00 00    	je     dfd8 <hc_default_window+0x45e>
    de87:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    de8b:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    de8f:	74 20                	je     deb1 <hc_default_window+0x337>
    de91:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    de95:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    de99:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    de9c:	48 63 d2             	movsxd rdx,edx
    de9f:	48 c1 e2 02          	shl    rdx,0x2
    dea3:	48 01 d0             	add    rax,rdx
    dea6:	8b 00                	mov    eax,DWORD PTR [rax]
    dea8:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    deab:	7e 04                	jle    deb1 <hc_default_window+0x337>
    dead:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    deb1:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    deb5:	0f 84 1d 01 00 00    	je     dfd8 <hc_default_window+0x45e>
    debb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    debf:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    dec3:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    dec6:	48 63 d2             	movsxd rdx,edx
    dec9:	48 83 c2 01          	add    rdx,0x1
    decd:	48 c1 e2 02          	shl    rdx,0x2
    ded1:	48 01 d0             	add    rax,rdx
    ded4:	8b 00                	mov    eax,DWORD PTR [rax]
    ded6:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    ded9:	0f 8e f9 00 00 00    	jle    dfd8 <hc_default_window+0x45e>
    dedf:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    dee3:	e9 f0 00 00 00       	jmp    dfd8 <hc_default_window+0x45e>
    dee8:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    deec:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    deef:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    def2:	83 e8 01             	sub    eax,0x1
    def5:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    def8:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    defc:	0f 84 d9 00 00 00    	je     dfdb <hc_default_window+0x461>
    df02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    df06:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    df0a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
    df0d:	48 63 d2             	movsxd rdx,edx
    df10:	48 83 c2 01          	add    rdx,0x1
    df14:	48 c1 e2 02          	shl    rdx,0x2
    df18:	48 01 d0             	add    rax,rdx
    df1b:	8b 00                	mov    eax,DWORD PTR [rax]
    df1d:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    df20:	0f 8e b5 00 00 00    	jle    dfdb <hc_default_window+0x461>
    df26:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    df2a:	e9 ac 00 00 00       	jmp    dfdb <hc_default_window+0x461>
    df2f:	c6 45 ef 01          	mov    BYTE PTR [rbp-0x11],0x1
    df33:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    df37:	74 20                	je     df59 <hc_default_window+0x3df>
    df39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    df3d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    df41:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    df44:	48 63 d2             	movsxd rdx,edx
    df47:	48 c1 e2 02          	shl    rdx,0x2
    df4b:	48 01 d0             	add    rax,rdx
    df4e:	8b 00                	mov    eax,DWORD PTR [rax]
    df50:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    df53:	7e 04                	jle    df59 <hc_default_window+0x3df>
    df55:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    df59:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    df5d:	74 7f                	je     dfde <hc_default_window+0x464>
    df5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    df63:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    df67:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
    df6a:	48 63 d2             	movsxd rdx,edx
    df6d:	48 83 c2 01          	add    rdx,0x1
    df71:	48 c1 e2 02          	shl    rdx,0x2
    df75:	48 01 d0             	add    rax,rdx
    df78:	8b 00                	mov    eax,DWORD PTR [rax]
    df7a:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    df7d:	7e 5f                	jle    dfde <hc_default_window+0x464>
    df7f:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
    df83:	eb 59                	jmp    dfde <hc_default_window+0x464>
    df85:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    df88:	2b 45 dc             	sub    eax,DWORD PTR [rbp-0x24]
    df8b:	83 c0 01             	add    eax,0x1
    df8e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    df91:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    df95:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
    df99:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    df9c:	48 63 d2             	movsxd rdx,edx
    df9f:	48 c1 e2 02          	shl    rdx,0x2
    dfa3:	48 01 d0             	add    rax,rdx
    dfa6:	8b 00                	mov    eax,DWORD PTR [rax]
    dfa8:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    dfab:	0f 9e c0             	setle  al
    dfae:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
    dfb1:	eb 2c                	jmp    dfdf <hc_default_window+0x465>
    dfb3:	0f b6 45 cc          	movzx  eax,BYTE PTR [rbp-0x34]
    dfb7:	89 c6                	mov    esi,eax
    dfb9:	48 8d 3d 30 6e 02 00 	lea    rdi,[rip+0x26e30]        # 34df0 <Law_and_Order+0x550>
    dfc0:	b8 00 00 00 00       	mov    eax,0x0
    dfc5:	e8 21 10 02 00       	call   2efeb <vrna_message_warning>
    dfca:	eb 13                	jmp    dfdf <hc_default_window+0x465>
    dfcc:	90                   	nop
    dfcd:	eb 10                	jmp    dfdf <hc_default_window+0x465>
    dfcf:	90                   	nop
    dfd0:	eb 0d                	jmp    dfdf <hc_default_window+0x465>
    dfd2:	90                   	nop
    dfd3:	eb 0a                	jmp    dfdf <hc_default_window+0x465>
    dfd5:	90                   	nop
    dfd6:	eb 07                	jmp    dfdf <hc_default_window+0x465>
    dfd8:	90                   	nop
    dfd9:	eb 04                	jmp    dfdf <hc_default_window+0x465>
    dfdb:	90                   	nop
    dfdc:	eb 01                	jmp    dfdf <hc_default_window+0x465>
    dfde:	90                   	nop
    dfdf:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
    dfe3:	c9                   	leave  
    dfe4:	c3                   	ret    

000000000000dfe5 <hc_default_sn>:
    dfe5:	f3 0f 1e fa          	endbr64 
    dfe9:	55                   	push   rbp
    dfea:	48 89 e5             	mov    rbp,rsp
    dfed:	48 83 ec 30          	sub    rsp,0x30
    dff1:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    dff4:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    dff7:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    dffa:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
    dffd:	44 89 c0             	mov    eax,r8d
    e000:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    e004:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
    e007:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e00b:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
    e00f:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e012:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e015:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e018:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e01b:	4d 89 c1             	mov    r9,r8
    e01e:	41 89 f8             	mov    r8d,edi
    e021:	89 c7                	mov    edi,eax
    e023:	e8 37 f7 ff ff       	call   d75f <hc_default>
    e028:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    e02b:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e02f:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
    e033:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e036:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e039:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e03c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e03f:	4d 89 c1             	mov    r9,r8
    e042:	41 89 f8             	mov    r8d,edi
    e045:	89 c7                	mov    edi,eax
    e047:	e8 f1 fa ff ff       	call   db3d <hc_sn>
    e04c:	84 c0                	test   al,al
    e04e:	74 06                	je     e056 <hc_default_sn+0x71>
    e050:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
    e054:	eb 05                	jmp    e05b <hc_default_sn+0x76>
    e056:	b8 00 00 00 00       	mov    eax,0x0
    e05b:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    e05e:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
    e062:	c9                   	leave  
    e063:	c3                   	ret    

000000000000e064 <hc_default_user>:
    e064:	f3 0f 1e fa          	endbr64 
    e068:	55                   	push   rbp
    e069:	48 89 e5             	mov    rbp,rsp
    e06c:	48 83 ec 30          	sub    rsp,0x30
    e070:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    e073:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    e076:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    e079:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
    e07c:	44 89 c0             	mov    eax,r8d
    e07f:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    e083:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
    e086:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e08a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e08e:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e092:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
    e096:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e099:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e09c:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e09f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e0a2:	4d 89 c1             	mov    r9,r8
    e0a5:	41 89 f8             	mov    r8d,edi
    e0a8:	89 c7                	mov    edi,eax
    e0aa:	e8 b0 f6 ff ff       	call   d75f <hc_default>
    e0af:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e0b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e0b6:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
    e0ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e0be:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
    e0c2:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e0c6:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e0c9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e0cc:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e0cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e0d2:	4d 89 c1             	mov    r9,r8
    e0d5:	41 89 f8             	mov    r8d,edi
    e0d8:	89 c7                	mov    edi,eax
    e0da:	41 ff d2             	call   r10
    e0dd:	84 c0                	test   al,al
    e0df:	74 06                	je     e0e7 <hc_default_user+0x83>
    e0e1:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e0e5:	eb 05                	jmp    e0ec <hc_default_user+0x88>
    e0e7:	b8 00 00 00 00       	mov    eax,0x0
    e0ec:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e0ef:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e0f3:	c9                   	leave  
    e0f4:	c3                   	ret    

000000000000e0f5 <hc_default_sn_user>:
    e0f5:	f3 0f 1e fa          	endbr64 
    e0f9:	55                   	push   rbp
    e0fa:	48 89 e5             	mov    rbp,rsp
    e0fd:	48 83 ec 30          	sub    rsp,0x30
    e101:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    e104:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    e107:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    e10a:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
    e10d:	44 89 c0             	mov    eax,r8d
    e110:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    e114:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
    e117:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e11b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e11f:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e123:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
    e127:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e12a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e12d:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e130:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e133:	4d 89 c1             	mov    r9,r8
    e136:	41 89 f8             	mov    r8d,edi
    e139:	89 c7                	mov    edi,eax
    e13b:	e8 1f f6 ff ff       	call   d75f <hc_default>
    e140:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e143:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e147:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
    e14b:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e14e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e151:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e154:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e157:	4d 89 c1             	mov    r9,r8
    e15a:	41 89 f8             	mov    r8d,edi
    e15d:	89 c7                	mov    edi,eax
    e15f:	e8 d9 f9 ff ff       	call   db3d <hc_sn>
    e164:	84 c0                	test   al,al
    e166:	74 06                	je     e16e <hc_default_sn_user+0x79>
    e168:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e16c:	eb 05                	jmp    e173 <hc_default_sn_user+0x7e>
    e16e:	b8 00 00 00 00       	mov    eax,0x0
    e173:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e176:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e17a:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
    e17e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e182:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
    e186:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e18a:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e18d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e190:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e193:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e196:	4d 89 c1             	mov    r9,r8
    e199:	41 89 f8             	mov    r8d,edi
    e19c:	89 c7                	mov    edi,eax
    e19e:	41 ff d2             	call   r10
    e1a1:	84 c0                	test   al,al
    e1a3:	74 06                	je     e1ab <hc_default_sn_user+0xb6>
    e1a5:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e1a9:	eb 05                	jmp    e1b0 <hc_default_sn_user+0xbb>
    e1ab:	b8 00 00 00 00       	mov    eax,0x0
    e1b0:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e1b3:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e1b7:	c9                   	leave  
    e1b8:	c3                   	ret    

000000000000e1b9 <hc_default_user_window>:
    e1b9:	f3 0f 1e fa          	endbr64 
    e1bd:	55                   	push   rbp
    e1be:	48 89 e5             	mov    rbp,rsp
    e1c1:	48 83 ec 30          	sub    rsp,0x30
    e1c5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    e1c8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    e1cb:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    e1ce:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
    e1d1:	44 89 c0             	mov    eax,r8d
    e1d4:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
    e1d8:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
    e1db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e1df:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e1e3:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e1e7:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
    e1eb:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e1ee:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e1f1:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e1f4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e1f7:	4d 89 c1             	mov    r9,r8
    e1fa:	41 89 f8             	mov    r8d,edi
    e1fd:	89 c7                	mov    edi,eax
    e1ff:	e8 76 f9 ff ff       	call   db7a <hc_default_window>
    e204:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e207:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e20b:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
    e20f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e213:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
    e217:	0f b6 7d dc          	movzx  edi,BYTE PTR [rbp-0x24]
    e21b:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
    e21e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    e221:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    e224:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e227:	4d 89 c1             	mov    r9,r8
    e22a:	41 89 f8             	mov    r8d,edi
    e22d:	89 c7                	mov    edi,eax
    e22f:	41 ff d2             	call   r10
    e232:	84 c0                	test   al,al
    e234:	74 06                	je     e23c <hc_default_user_window+0x83>
    e236:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e23a:	eb 05                	jmp    e241 <hc_default_user_window+0x88>
    e23c:	b8 00 00 00 00       	mov    eax,0x0
    e241:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
    e244:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
    e248:	c9                   	leave  
    e249:	c3                   	ret    

000000000000e24a <prepare_hc_default>:
    e24a:	55                   	push   rbp
    e24b:	48 89 e5             	mov    rbp,rsp
    e24e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    e252:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    e256:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e25a:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e25e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
    e262:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e266:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e26a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e26e:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    e271:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e275:	89 10                	mov    DWORD PTR [rax],edx
    e277:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e27b:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e27f:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
    e283:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e287:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e28b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e28f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    e293:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e297:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e29b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e29f:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e2a3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
    e2a7:	48 85 c0             	test   rax,rax
    e2aa:	74 46                	je     e2f2 <prepare_hc_default+0xa8>
    e2ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e2b0:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e2b4:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
    e2b8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e2bc:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
    e2c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e2c4:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e2c8:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
    e2cc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e2d0:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    e2d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e2d8:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    e2db:	83 f8 01             	cmp    eax,0x1
    e2de:	75 09                	jne    e2e9 <prepare_hc_default+0x9f>
    e2e0:	48 8d 05 7d fd ff ff 	lea    rax,[rip+0xfffffffffffffd7d]        # e064 <hc_default_user>
    e2e7:	eb 25                	jmp    e30e <prepare_hc_default+0xc4>
    e2e9:	48 8d 05 05 fe ff ff 	lea    rax,[rip+0xfffffffffffffe05]        # e0f5 <hc_default_sn_user>
    e2f0:	eb 1c                	jmp    e30e <prepare_hc_default+0xc4>
    e2f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e2f6:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    e2f9:	83 f8 01             	cmp    eax,0x1
    e2fc:	75 09                	jne    e307 <prepare_hc_default+0xbd>
    e2fe:	48 8d 05 5a f4 ff ff 	lea    rax,[rip+0xfffffffffffff45a]        # d75f <hc_default>
    e305:	eb 07                	jmp    e30e <prepare_hc_default+0xc4>
    e307:	48 8d 05 d7 fc ff ff 	lea    rax,[rip+0xfffffffffffffcd7]        # dfe5 <hc_default_sn>
    e30e:	5d                   	pop    rbp
    e30f:	c3                   	ret    

000000000000e310 <prepare_hc_default_window>:
    e310:	55                   	push   rbp
    e311:	48 89 e5             	mov    rbp,rsp
    e314:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    e318:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    e31c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e320:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e324:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    e328:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e32c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e330:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e334:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e338:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
    e33c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e340:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e344:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e348:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    e34c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e350:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e354:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e358:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e35c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
    e360:	48 85 c0             	test   rax,rax
    e363:	74 31                	je     e396 <prepare_hc_default_window+0x86>
    e365:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e369:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e36d:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
    e371:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e375:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
    e379:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e37d:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e381:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
    e385:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e389:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    e38d:	48 8d 05 25 fe ff ff 	lea    rax,[rip+0xfffffffffffffe25]        # e1b9 <hc_default_user_window>
    e394:	eb 07                	jmp    e39d <prepare_hc_default_window+0x8d>
    e396:	48 8d 05 dd f7 ff ff 	lea    rax,[rip+0xfffffffffffff7dd]        # db7a <hc_default_window>
    e39d:	5d                   	pop    rbp
    e39e:	c3                   	ret    

000000000000e39f <init_sc_wrapper>:
    e39f:	55                   	push   rbp
    e3a0:	48 89 e5             	mov    rbp,rsp
    e3a3:	48 83 ec 30          	sub    rsp,0x30
    e3a7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    e3ab:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    e3af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3b3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    e3ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3be:	48 c7 40 28 00 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
    e3c6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3ca:	48 c7 40 30 00 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
    e3d2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3d6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [rax+0x38],0x1
    e3dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3e1:	48 c7 40 48 00 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
    e3e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3ed:	48 c7 40 50 00 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
    e3f5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e3f9:	48 c7 40 58 00 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
    e401:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e405:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
    e40d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e411:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    e419:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e41d:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
    e425:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e429:	48 c7 40 20 00 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
    e431:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e435:	8b 00                	mov    eax,DWORD PTR [rax]
    e437:	85 c0                	test   eax,eax
    e439:	74 0e                	je     e449 <init_sc_wrapper+0xaa>
    e43b:	83 f8 01             	cmp    eax,0x1
    e43e:	0f 84 40 01 00 00    	je     e584 <init_sc_wrapper+0x1e5>
    e444:	e9 c9 03 00 00       	jmp    e812 <init_sc_wrapper+0x473>
    e449:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e44d:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
    e454:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e458:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    e45d:	0f 84 ab 03 00 00    	je     e80e <init_sc_wrapper+0x46f>
    e463:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e467:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    e46b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e46f:	48 89 10             	mov    QWORD PTR [rax],rdx
    e472:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e476:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
    e47a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e47e:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    e482:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e486:	48 8b 50 68          	mov    rdx,QWORD PTR [rax+0x68]
    e48a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e48e:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
    e492:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e496:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    e49a:	48 85 c0             	test   rax,rax
    e49d:	0f 84 8f 00 00 00    	je     e532 <init_sc_wrapper+0x193>
    e4a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e4a7:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    e4ab:	48 85 c0             	test   rax,rax
    e4ae:	74 41                	je     e4f1 <init_sc_wrapper+0x152>
    e4b0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e4b4:	48 8d 15 c5 0e 00 00 	lea    rdx,[rip+0xec5]        # f380 <sc_user_def_f5_reduce_to_ext>
    e4bb:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e4bf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e4c3:	48 8d 15 c4 11 00 00 	lea    rdx,[rip+0x11c4]        # f68e <sc_user_def_f5_reduce_to_stem>
    e4ca:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e4ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e4d2:	48 8d 15 c0 17 00 00 	lea    rdx,[rip+0x17c0]        # fc99 <sc_user_def_f5_split_in_ext_stem>
    e4d9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e4dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e4e1:	48 8d 15 0c 1f 00 00 	lea    rdx,[rip+0x1f0c]        # 103f4 <sc_user_def_f5_split_in_ext_stem1>
    e4e8:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e4ec:	e9 1d 03 00 00       	jmp    e80e <init_sc_wrapper+0x46f>
    e4f1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e4f5:	48 8d 15 1f 08 00 00 	lea    rdx,[rip+0x81f]        # ed1b <sc_default_f5_reduce>
    e4fc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e500:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e504:	48 8d 15 10 08 00 00 	lea    rdx,[rip+0x810]        # ed1b <sc_default_f5_reduce>
    e50b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e50f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e513:	48 8d 15 a8 12 00 00 	lea    rdx,[rip+0x12a8]        # f7c2 <sc_default_f5_split_in_ext_stem>
    e51a:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e51e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e522:	48 8d 15 a4 18 00 00 	lea    rdx,[rip+0x18a4]        # fdcd <sc_default_f5_split_in_ext_stem1>
    e529:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e52d:	e9 dc 02 00 00       	jmp    e80e <init_sc_wrapper+0x46f>
    e532:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e536:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    e53a:	48 85 c0             	test   rax,rax
    e53d:	0f 84 cb 02 00 00    	je     e80e <init_sc_wrapper+0x46f>
    e543:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e547:	48 8d 15 58 0c 00 00 	lea    rdx,[rip+0xc58]        # f1a6 <sc_user_f5_reduce_to_ext>
    e54e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e552:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e556:	48 8d 15 57 0f 00 00 	lea    rdx,[rip+0xf57]        # f4b4 <sc_user_f5_reduce_to_stem>
    e55d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e561:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e565:	48 8d 15 53 15 00 00 	lea    rdx,[rip+0x1553]        # fabf <sc_user_f5_split_in_ext_stem>
    e56c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e570:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e574:	48 8d 15 9f 1c 00 00 	lea    rdx,[rip+0x1c9f]        # 1021a <sc_user_f5_split_in_ext_stem1>
    e57b:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e57f:	e9 8a 02 00 00       	jmp    e80e <init_sc_wrapper+0x46f>
    e584:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e588:	48 8b 80 10 01 00 00 	mov    rax,QWORD PTR [rax+0x110]
    e58f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    e593:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e597:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    e59d:	89 c2                	mov    edx,eax
    e59f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e5a3:	89 50 38             	mov    DWORD PTR [rax+0x38],edx
    e5a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e5aa:	48 8b 90 f0 00 00 00 	mov    rdx,QWORD PTR [rax+0xf0]
    e5b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e5b5:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
    e5b9:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    e5be:	0f 84 4d 02 00 00    	je     e811 <init_sc_wrapper+0x472>
    e5c4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e5c8:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    e5ce:	c1 e0 03             	shl    eax,0x3
    e5d1:	89 c7                	mov    edi,eax
    e5d3:	e8 39 07 02 00       	call   2ed11 <vrna_alloc>
    e5d8:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    e5dc:	48 89 42 48          	mov    QWORD PTR [rdx+0x48],rax
    e5e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e5e4:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    e5ea:	c1 e0 03             	shl    eax,0x3
    e5ed:	89 c7                	mov    edi,eax
    e5ef:	e8 1d 07 02 00       	call   2ed11 <vrna_alloc>
    e5f4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    e5f8:	48 89 42 50          	mov    QWORD PTR [rdx+0x50],rax
    e5fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e600:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    e606:	c1 e0 03             	shl    eax,0x3
    e609:	89 c7                	mov    edi,eax
    e60b:	e8 01 07 02 00       	call   2ed11 <vrna_alloc>
    e610:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    e614:	48 89 42 58          	mov    QWORD PTR [rdx+0x58],rax
    e618:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    e61f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    e626:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    e62d:	e9 f6 00 00 00       	jmp    e728 <init_sc_wrapper+0x389>
    e632:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e635:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    e63d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e641:	48 01 d0             	add    rax,rdx
    e644:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e647:	48 85 c0             	test   rax,rax
    e64a:	0f 84 d4 00 00 00    	je     e724 <init_sc_wrapper+0x385>
    e650:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e653:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    e65b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e65f:	48 01 d0             	add    rax,rdx
    e662:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e665:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    e669:	48 8b 52 48          	mov    rdx,QWORD PTR [rdx+0x48]
    e66d:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    e670:	48 c1 e1 03          	shl    rcx,0x3
    e674:	48 01 ca             	add    rdx,rcx
    e677:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    e67b:	48 89 02             	mov    QWORD PTR [rdx],rax
    e67e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e681:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    e689:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e68d:	48 01 d0             	add    rax,rdx
    e690:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e693:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    e697:	48 8b 52 50          	mov    rdx,QWORD PTR [rdx+0x50]
    e69b:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    e69e:	48 c1 e1 03          	shl    rcx,0x3
    e6a2:	48 01 ca             	add    rdx,rcx
    e6a5:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    e6a9:	48 89 02             	mov    QWORD PTR [rdx],rax
    e6ac:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e6af:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    e6b7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e6bb:	48 01 d0             	add    rax,rdx
    e6be:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e6c1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    e6c5:	48 8b 52 58          	mov    rdx,QWORD PTR [rdx+0x58]
    e6c9:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    e6cc:	48 c1 e1 03          	shl    rcx,0x3
    e6d0:	48 01 ca             	add    rdx,rcx
    e6d3:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
    e6d7:	48 89 02             	mov    QWORD PTR [rdx],rax
    e6da:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e6dd:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    e6e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e6e9:	48 01 d0             	add    rax,rdx
    e6ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e6ef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    e6f3:	48 85 c0             	test   rax,rax
    e6f6:	74 07                	je     e6ff <init_sc_wrapper+0x360>
    e6f8:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
    e6ff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e702:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    e70a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    e70e:	48 01 d0             	add    rax,rdx
    e711:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e714:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    e718:	48 85 c0             	test   rax,rax
    e71b:	74 07                	je     e724 <init_sc_wrapper+0x385>
    e71d:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
    e724:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    e728:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e72c:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    e732:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    e735:	0f 82 f7 fe ff ff    	jb     e632 <init_sc_wrapper+0x293>
    e73b:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
    e73f:	0f 84 85 00 00 00    	je     e7ca <init_sc_wrapper+0x42b>
    e745:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    e749:	74 41                	je     e78c <init_sc_wrapper+0x3ed>
    e74b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e74f:	48 8d 15 c4 0c 00 00 	lea    rdx,[rip+0xcc4]        # f41a <sc_user_def_f5_reduce_to_ext_comparative>
    e756:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e75a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e75e:	48 8d 15 c3 0f 00 00 	lea    rdx,[rip+0xfc3]        # f728 <sc_user_def_f5_reduce_to_stem_comparative>
    e765:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e769:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e76d:	48 8d 15 bf 15 00 00 	lea    rdx,[rip+0x15bf]        # fd33 <sc_user_def_f5_split_in_ext_stem_comparative>
    e774:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e778:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e77c:	48 8d 15 0b 1d 00 00 	lea    rdx,[rip+0x1d0b]        # 1048e <sc_user_def_f5_split_in_ext_stem1_comparative>
    e783:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e787:	e9 85 00 00 00       	jmp    e811 <init_sc_wrapper+0x472>
    e78c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e790:	48 8d 15 ba 06 00 00 	lea    rdx,[rip+0x6ba]        # ee51 <sc_default_f5_reduce_comparative>
    e797:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e79b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e79f:	48 8d 15 ab 06 00 00 	lea    rdx,[rip+0x6ab]        # ee51 <sc_default_f5_reduce_comparative>
    e7a6:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e7aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e7ae:	48 8d 15 e4 10 00 00 	lea    rdx,[rip+0x10e4]        # f899 <sc_default_f5_split_in_ext_stem_comparative>
    e7b5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e7b9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e7bd:	48 8d 15 42 17 00 00 	lea    rdx,[rip+0x1742]        # ff06 <sc_default_f5_split_in_ext_stem1_comparative>
    e7c4:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e7c8:	eb 47                	jmp    e811 <init_sc_wrapper+0x472>
    e7ca:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    e7ce:	74 41                	je     e811 <init_sc_wrapper+0x472>
    e7d0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e7d4:	48 8d 15 5e 0a 00 00 	lea    rdx,[rip+0xa5e]        # f239 <sc_user_f5_reduce_to_ext_comparative>
    e7db:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e7df:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e7e3:	48 8d 15 5d 0d 00 00 	lea    rdx,[rip+0xd5d]        # f547 <sc_user_f5_reduce_to_stem_comparative>
    e7ea:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e7ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e7f2:	48 8d 15 59 13 00 00 	lea    rdx,[rip+0x1359]        # fb52 <sc_user_f5_split_in_ext_stem_comparative>
    e7f9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e7fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    e801:	48 8d 15 a5 1a 00 00 	lea    rdx,[rip+0x1aa5]        # 102ad <sc_user_f5_split_in_ext_stem1_comparative>
    e808:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e80c:	eb 03                	jmp    e811 <init_sc_wrapper+0x472>
    e80e:	90                   	nop
    e80f:	eb 01                	jmp    e812 <init_sc_wrapper+0x473>
    e811:	90                   	nop
    e812:	90                   	nop
    e813:	c9                   	leave  
    e814:	c3                   	ret    

000000000000e815 <free_sc_wrapper>:
    e815:	55                   	push   rbp
    e816:	48 89 e5             	mov    rbp,rsp
    e819:	48 83 ec 10          	sub    rsp,0x10
    e81d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    e821:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e825:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    e829:	48 89 c7             	mov    rdi,rax
    e82c:	e8 0f 51 ff ff       	call   3940 <free@plt>
    e831:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e835:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    e839:	48 89 c7             	mov    rdi,rax
    e83c:	e8 ff 50 ff ff       	call   3940 <free@plt>
    e841:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e845:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    e849:	48 89 c7             	mov    rdi,rax
    e84c:	e8 ef 50 ff ff       	call   3940 <free@plt>
    e851:	90                   	nop
    e852:	c9                   	leave  
    e853:	c3                   	ret    

000000000000e854 <init_sc_wrapper_f3>:
    e854:	55                   	push   rbp
    e855:	48 89 e5             	mov    rbp,rsp
    e858:	48 83 ec 40          	sub    rsp,0x40
    e85c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    e860:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    e863:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
    e867:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e86b:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    e86e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e872:	89 10                	mov    DWORD PTR [rax],edx
    e874:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e878:	c7 40 40 01 00 00 00 	mov    DWORD PTR [rax+0x40],0x1
    e87f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e883:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
    e88b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e88f:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    e897:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e89b:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
    e8a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8a7:	48 c7 40 20 00 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
    e8af:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8b3:	48 c7 40 28 00 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
    e8bb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8bf:	48 c7 40 30 00 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
    e8c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8cb:	48 c7 40 38 00 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
    e8d3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8d7:	48 c7 40 50 00 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
    e8df:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8e3:	48 c7 40 58 00 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
    e8eb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e8ef:	48 c7 40 60 00 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
    e8f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e8fb:	8b 00                	mov    eax,DWORD PTR [rax]
    e8fd:	85 c0                	test   eax,eax
    e8ff:	74 0e                	je     e90f <init_sc_wrapper_f3+0xbb>
    e901:	83 f8 01             	cmp    eax,0x1
    e904:	0f 84 41 01 00 00    	je     ea4b <init_sc_wrapper_f3+0x1f7>
    e90a:	e9 ca 03 00 00       	jmp    ecd9 <init_sc_wrapper_f3+0x485>
    e90f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e913:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
    e91a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e91e:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    e923:	0f 84 ac 03 00 00    	je     ecd5 <init_sc_wrapper_f3+0x481>
    e929:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e92d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
    e931:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e935:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
    e939:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e93d:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
    e941:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e945:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
    e949:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e94d:	48 8b 50 68          	mov    rdx,QWORD PTR [rax+0x68]
    e951:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e955:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
    e959:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e95d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    e961:	48 85 c0             	test   rax,rax
    e964:	0f 84 8f 00 00 00    	je     e9f9 <init_sc_wrapper_f3+0x1a5>
    e96a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e96e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    e972:	48 85 c0             	test   rax,rax
    e975:	74 41                	je     e9b8 <init_sc_wrapper_f3+0x164>
    e977:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e97b:	48 8d 15 4b 0a 00 00 	lea    rdx,[rip+0xa4b]        # f3cd <sc_user_def_f3_reduce_to_ext>
    e982:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e986:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e98a:	48 8d 15 4a 0d 00 00 	lea    rdx,[rip+0xd4a]        # f6db <sc_user_def_f3_reduce_to_stem>
    e991:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e995:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e999:	48 8d 15 46 13 00 00 	lea    rdx,[rip+0x1346]        # fce6 <sc_user_def_f3_split_in_stem_ext>
    e9a0:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e9a4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e9a8:	48 8d 15 92 1a 00 00 	lea    rdx,[rip+0x1a92]        # 10441 <sc_user_def_f3_split_in_stem_ext1>
    e9af:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    e9b3:	e9 1d 03 00 00       	jmp    ecd5 <init_sc_wrapper_f3+0x481>
    e9b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e9bc:	48 8d 15 e9 03 00 00 	lea    rdx,[rip+0x3e9]        # edac <sc_default_f3_reduce>
    e9c3:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    e9c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e9cb:	48 8d 15 da 03 00 00 	lea    rdx,[rip+0x3da]        # edac <sc_default_f3_reduce>
    e9d2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    e9d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e9da:	48 8d 15 4c 0e 00 00 	lea    rdx,[rip+0xe4c]        # f82d <sc_default_f3_split_in_stem_ext>
    e9e1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    e9e5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    e9e9:	48 8d 15 79 14 00 00 	lea    rdx,[rip+0x1479]        # fe69 <sc_default_f3_split_in_stem_ext1>
    e9f0:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    e9f4:	e9 dc 02 00 00       	jmp    ecd5 <init_sc_wrapper_f3+0x481>
    e9f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e9fd:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    ea01:	48 85 c0             	test   rax,rax
    ea04:	0f 84 cb 02 00 00    	je     ecd5 <init_sc_wrapper_f3+0x481>
    ea0a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ea0e:	48 8d 15 d8 07 00 00 	lea    rdx,[rip+0x7d8]        # f1ed <sc_user_f3_reduce_to_ext>
    ea15:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    ea19:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ea1d:	48 8d 15 d7 0a 00 00 	lea    rdx,[rip+0xad7]        # f4fb <sc_user_f3_reduce_to_stem>
    ea24:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    ea28:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ea2c:	48 8d 15 d3 10 00 00 	lea    rdx,[rip+0x10d3]        # fb06 <sc_user_f3_split_in_stem_ext>
    ea33:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    ea37:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ea3b:	48 8d 15 1f 18 00 00 	lea    rdx,[rip+0x181f]        # 10261 <sc_user_f3_split_in_stem_ext1>
    ea42:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    ea46:	e9 8a 02 00 00       	jmp    ecd5 <init_sc_wrapper_f3+0x481>
    ea4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ea4f:	48 8b 80 10 01 00 00 	mov    rax,QWORD PTR [rax+0x110]
    ea56:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    ea5a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ea5e:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    ea64:	89 c2                	mov    edx,eax
    ea66:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ea6a:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
    ea6d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ea71:	48 8b 90 f0 00 00 00 	mov    rdx,QWORD PTR [rax+0xf0]
    ea78:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ea7c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
    ea80:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    ea85:	0f 84 4d 02 00 00    	je     ecd8 <init_sc_wrapper_f3+0x484>
    ea8b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ea8f:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    ea95:	c1 e0 03             	shl    eax,0x3
    ea98:	89 c7                	mov    edi,eax
    ea9a:	e8 72 02 02 00       	call   2ed11 <vrna_alloc>
    ea9f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    eaa3:	48 89 42 50          	mov    QWORD PTR [rdx+0x50],rax
    eaa7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    eaab:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    eab1:	c1 e0 03             	shl    eax,0x3
    eab4:	89 c7                	mov    edi,eax
    eab6:	e8 56 02 02 00       	call   2ed11 <vrna_alloc>
    eabb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    eabf:	48 89 42 58          	mov    QWORD PTR [rdx+0x58],rax
    eac3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    eac7:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    eacd:	c1 e0 03             	shl    eax,0x3
    ead0:	89 c7                	mov    edi,eax
    ead2:	e8 3a 02 02 00       	call   2ed11 <vrna_alloc>
    ead7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    eadb:	48 89 42 60          	mov    QWORD PTR [rdx+0x60],rax
    eadf:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    eae6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    eaed:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    eaf4:	e9 f6 00 00 00       	jmp    ebef <init_sc_wrapper_f3+0x39b>
    eaf9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    eafc:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    eb04:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    eb08:	48 01 d0             	add    rax,rdx
    eb0b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb0e:	48 85 c0             	test   rax,rax
    eb11:	0f 84 d4 00 00 00    	je     ebeb <init_sc_wrapper_f3+0x397>
    eb17:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    eb1a:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    eb22:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    eb26:	48 01 d0             	add    rax,rdx
    eb29:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb2c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    eb30:	48 8b 52 50          	mov    rdx,QWORD PTR [rdx+0x50]
    eb34:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    eb37:	48 c1 e1 03          	shl    rcx,0x3
    eb3b:	48 01 ca             	add    rdx,rcx
    eb3e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    eb42:	48 89 02             	mov    QWORD PTR [rdx],rax
    eb45:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    eb48:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    eb50:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    eb54:	48 01 d0             	add    rax,rdx
    eb57:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb5a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    eb5e:	48 8b 52 58          	mov    rdx,QWORD PTR [rdx+0x58]
    eb62:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    eb65:	48 c1 e1 03          	shl    rcx,0x3
    eb69:	48 01 ca             	add    rdx,rcx
    eb6c:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    eb70:	48 89 02             	mov    QWORD PTR [rdx],rax
    eb73:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    eb76:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    eb7e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    eb82:	48 01 d0             	add    rax,rdx
    eb85:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb88:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
    eb8c:	48 8b 52 60          	mov    rdx,QWORD PTR [rdx+0x60]
    eb90:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    eb93:	48 c1 e1 03          	shl    rcx,0x3
    eb97:	48 01 ca             	add    rdx,rcx
    eb9a:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
    eb9e:	48 89 02             	mov    QWORD PTR [rdx],rax
    eba1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    eba4:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ebac:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    ebb0:	48 01 d0             	add    rax,rdx
    ebb3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ebb6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    ebba:	48 85 c0             	test   rax,rax
    ebbd:	74 07                	je     ebc6 <init_sc_wrapper_f3+0x372>
    ebbf:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
    ebc6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    ebc9:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ebd1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    ebd5:	48 01 d0             	add    rax,rdx
    ebd8:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ebdb:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    ebdf:	48 85 c0             	test   rax,rax
    ebe2:	74 07                	je     ebeb <init_sc_wrapper_f3+0x397>
    ebe4:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
    ebeb:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    ebef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    ebf3:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
    ebf9:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    ebfc:	0f 82 f7 fe ff ff    	jb     eaf9 <init_sc_wrapper_f3+0x2a5>
    ec02:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
    ec06:	0f 84 85 00 00 00    	je     ec91 <init_sc_wrapper_f3+0x43d>
    ec0c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    ec10:	74 41                	je     ec53 <init_sc_wrapper_f3+0x3ff>
    ec12:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec16:	48 8d 15 4a 08 00 00 	lea    rdx,[rip+0x84a]        # f467 <sc_user_def_f3_reduce_to_ext_comparative>
    ec1d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    ec21:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec25:	48 8d 15 49 0b 00 00 	lea    rdx,[rip+0xb49]        # f775 <sc_user_def_f3_reduce_to_stem_comparative>
    ec2c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    ec30:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec34:	48 8d 15 45 11 00 00 	lea    rdx,[rip+0x1145]        # fd80 <sc_user_def_f3_split_in_stem_ext_comparative>
    ec3b:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    ec3f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec43:	48 8d 15 91 18 00 00 	lea    rdx,[rip+0x1891]        # 104db <sc_user_def_f3_split_in_stem_ext1_comparative>
    ec4a:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    ec4e:	e9 85 00 00 00       	jmp    ecd8 <init_sc_wrapper_f3+0x484>
    ec53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec57:	48 8d 15 76 03 00 00 	lea    rdx,[rip+0x376]        # efd4 <sc_default_f3_reduce_comparative>
    ec5e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    ec62:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec66:	48 8d 15 67 03 00 00 	lea    rdx,[rip+0x367]        # efd4 <sc_default_f3_reduce_comparative>
    ec6d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    ec71:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec75:	48 8d 15 30 0d 00 00 	lea    rdx,[rip+0xd30]        # f9ac <sc_default_f3_split_in_stem_ext_comparative>
    ec7c:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    ec80:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec84:	48 8d 15 05 14 00 00 	lea    rdx,[rip+0x1405]        # 10090 <sc_default_f3_split_in_stem_ext1_comparative>
    ec8b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    ec8f:	eb 47                	jmp    ecd8 <init_sc_wrapper_f3+0x484>
    ec91:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    ec95:	74 41                	je     ecd8 <init_sc_wrapper_f3+0x484>
    ec97:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ec9b:	48 8d 15 38 06 00 00 	lea    rdx,[rip+0x638]        # f2da <sc_user_f3_reduce_to_ext_comparative>
    eca2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
    eca6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ecaa:	48 8d 15 37 09 00 00 	lea    rdx,[rip+0x937]        # f5e8 <sc_user_f3_reduce_to_stem_comparative>
    ecb1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
    ecb5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ecb9:	48 8d 15 33 0f 00 00 	lea    rdx,[rip+0xf33]        # fbf3 <sc_user_f3_split_in_stem_ext_comparative>
    ecc0:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
    ecc4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ecc8:	48 8d 15 7f 16 00 00 	lea    rdx,[rip+0x167f]        # 1034e <sc_user_f3_split_in_stem_ext1_comparative>
    eccf:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    ecd3:	eb 03                	jmp    ecd8 <init_sc_wrapper_f3+0x484>
    ecd5:	90                   	nop
    ecd6:	eb 01                	jmp    ecd9 <init_sc_wrapper_f3+0x485>
    ecd8:	90                   	nop
    ecd9:	90                   	nop
    ecda:	c9                   	leave  
    ecdb:	c3                   	ret    

000000000000ecdc <free_sc_wrapper_f3>:
    ecdc:	55                   	push   rbp
    ecdd:	48 89 e5             	mov    rbp,rsp
    ece0:	48 83 ec 10          	sub    rsp,0x10
    ece4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    ece8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ecec:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    ecf0:	48 89 c7             	mov    rdi,rax
    ecf3:	e8 48 4c ff ff       	call   3940 <free@plt>
    ecf8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ecfc:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    ed00:	48 89 c7             	mov    rdi,rax
    ed03:	e8 38 4c ff ff       	call   3940 <free@plt>
    ed08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ed0c:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
    ed10:	48 89 c7             	mov    rdi,rax
    ed13:	e8 28 4c ff ff       	call   3940 <free@plt>
    ed18:	90                   	nop
    ed19:	c9                   	leave  
    ed1a:	c3                   	ret    

000000000000ed1b <sc_default_f5_reduce>:
    ed1b:	f3 0f 1e fa          	endbr64 
    ed1f:	55                   	push   rbp
    ed20:	48 89 e5             	mov    rbp,rsp
    ed23:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    ed26:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    ed29:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    ed2c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    ed30:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ed34:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ed37:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    ed3b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    ed42:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    ed45:	83 e8 01             	sub    eax,0x1
    ed48:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    ed4b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    ed4e:	83 c0 01             	add    eax,0x1
    ed51:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    ed54:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ed57:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
    ed5a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    ed5d:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    ed61:	74 1a                	je     ed7d <sc_default_f5_reduce+0x62>
    ed63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ed67:	48 83 c0 08          	add    rax,0x8
    ed6b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ed6e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    ed71:	48 c1 e2 02          	shl    rdx,0x2
    ed75:	48 01 d0             	add    rax,rdx
    ed78:	8b 00                	mov    eax,DWORD PTR [rax]
    ed7a:	01 45 e8             	add    DWORD PTR [rbp-0x18],eax
    ed7d:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    ed81:	74 24                	je     eda7 <sc_default_f5_reduce+0x8c>
    ed83:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    ed86:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ed8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ed92:	48 01 d0             	add    rax,rdx
    ed95:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ed98:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    ed9b:	48 c1 e2 02          	shl    rdx,0x2
    ed9f:	48 01 d0             	add    rax,rdx
    eda2:	8b 00                	mov    eax,DWORD PTR [rax]
    eda4:	01 45 e8             	add    DWORD PTR [rbp-0x18],eax
    eda7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    edaa:	5d                   	pop    rbp
    edab:	c3                   	ret    

000000000000edac <sc_default_f3_reduce>:
    edac:	f3 0f 1e fa          	endbr64 
    edb0:	55                   	push   rbp
    edb1:	48 89 e5             	mov    rbp,rsp
    edb4:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    edb7:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    edba:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    edbd:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    edc1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    edc5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    edc9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    edcd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    edd4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    edd7:	2b 45 dc             	sub    eax,DWORD PTR [rbp-0x24]
    edda:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    eddd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    ede0:	83 c0 01             	add    eax,0x1
    ede3:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    ede6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    edea:	8b 10                	mov    edx,DWORD PTR [rax]
    edec:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    edef:	29 c2                	sub    edx,eax
    edf1:	89 d0                	mov    eax,edx
    edf3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    edf6:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    edfa:	74 26                	je     ee22 <sc_default_f3_reduce+0x76>
    edfc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    edff:	48 98                	cdqe   
    ee01:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ee09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ee0d:	48 01 d0             	add    rax,rdx
    ee10:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ee13:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    ee16:	48 c1 e2 02          	shl    rdx,0x2
    ee1a:	48 01 d0             	add    rax,rdx
    ee1d:	8b 00                	mov    eax,DWORD PTR [rax]
    ee1f:	01 45 e8             	add    DWORD PTR [rbp-0x18],eax
    ee22:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    ee26:	74 24                	je     ee4c <sc_default_f3_reduce+0xa0>
    ee28:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    ee2b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ee33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ee37:	48 01 d0             	add    rax,rdx
    ee3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ee3d:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    ee40:	48 c1 e2 02          	shl    rdx,0x2
    ee44:	48 01 d0             	add    rax,rdx
    ee47:	8b 00                	mov    eax,DWORD PTR [rax]
    ee49:	01 45 e8             	add    DWORD PTR [rbp-0x18],eax
    ee4c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    ee4f:	5d                   	pop    rbp
    ee50:	c3                   	ret    

000000000000ee51 <sc_default_f5_reduce_comparative>:
    ee51:	f3 0f 1e fa          	endbr64 
    ee55:	55                   	push   rbp
    ee56:	48 89 e5             	mov    rbp,rsp
    ee59:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
    ee5c:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
    ee5f:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
    ee62:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    ee66:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    ee6a:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    ee6e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    ee72:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    ee76:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
    ee7a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    ee7e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    ee85:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    ee8c:	e9 2e 01 00 00       	jmp    efbf <sc_default_f5_reduce_comparative+0x16e>
    ee91:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ee94:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ee9c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    eea0:	48 01 d0             	add    rax,rdx
    eea3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eea6:	48 85 c0             	test   rax,rax
    eea9:	0f 84 0c 01 00 00    	je     efbb <sc_default_f5_reduce_comparative+0x16a>
    eeaf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    eeb2:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    eeba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    eebe:	48 01 d0             	add    rax,rdx
    eec1:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eec4:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
    eec7:	48 63 d2             	movsxd rdx,edx
    eeca:	48 c1 e2 02          	shl    rdx,0x2
    eece:	48 83 ea 04          	sub    rdx,0x4
    eed2:	48 01 d0             	add    rax,rdx
    eed5:	8b 00                	mov    eax,DWORD PTR [rax]
    eed7:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    eeda:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    eedd:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    eee5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    eee9:	48 01 d0             	add    rax,rdx
    eeec:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eeef:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
    eef2:	48 63 d2             	movsxd rdx,edx
    eef5:	48 c1 e2 02          	shl    rdx,0x2
    eef9:	48 01 d0             	add    rax,rdx
    eefc:	8b 00                	mov    eax,DWORD PTR [rax]
    eefe:	83 c0 01             	add    eax,0x1
    ef01:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    ef04:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ef07:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ef0f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ef13:	48 01 d0             	add    rax,rdx
    ef16:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef19:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    ef1c:	48 63 d2             	movsxd rdx,edx
    ef1f:	48 c1 e2 02          	shl    rdx,0x2
    ef23:	48 01 d0             	add    rax,rdx
    ef26:	8b 10                	mov    edx,DWORD PTR [rax]
    ef28:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ef2b:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
    ef33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ef37:	48 01 c8             	add    rax,rcx
    ef3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef3d:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
    ef40:	48 63 c9             	movsxd rcx,ecx
    ef43:	48 c1 e1 02          	shl    rcx,0x2
    ef47:	48 01 c8             	add    rax,rcx
    ef4a:	8b 00                	mov    eax,DWORD PTR [rax]
    ef4c:	29 c2                	sub    edx,eax
    ef4e:	89 d0                	mov    eax,edx
    ef50:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    ef53:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    ef57:	74 2b                	je     ef84 <sc_default_f5_reduce_comparative+0x133>
    ef59:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ef5c:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ef64:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    ef68:	48 01 d0             	add    rax,rdx
    ef6b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef6e:	48 83 c0 08          	add    rax,0x8
    ef72:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef75:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    ef78:	48 c1 e2 02          	shl    rdx,0x2
    ef7c:	48 01 d0             	add    rax,rdx
    ef7f:	8b 00                	mov    eax,DWORD PTR [rax]
    ef81:	01 45 e0             	add    DWORD PTR [rbp-0x20],eax
    ef84:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    ef88:	74 31                	je     efbb <sc_default_f5_reduce_comparative+0x16a>
    ef8a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ef8d:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ef95:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    ef99:	48 01 d0             	add    rax,rdx
    ef9c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef9f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    efa2:	48 c1 e2 03          	shl    rdx,0x3
    efa6:	48 01 d0             	add    rax,rdx
    efa9:	48 8b 00             	mov    rax,QWORD PTR [rax]
    efac:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    efaf:	48 c1 e2 02          	shl    rdx,0x2
    efb3:	48 01 d0             	add    rax,rdx
    efb6:	8b 00                	mov    eax,DWORD PTR [rax]
    efb8:	01 45 e0             	add    DWORD PTR [rbp-0x20],eax
    efbb:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    efbf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    efc3:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
    efc6:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    efc9:	0f 82 c2 fe ff ff    	jb     ee91 <sc_default_f5_reduce_comparative+0x40>
    efcf:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    efd2:	5d                   	pop    rbp
    efd3:	c3                   	ret    

000000000000efd4 <sc_default_f3_reduce_comparative>:
    efd4:	f3 0f 1e fa          	endbr64 
    efd8:	55                   	push   rbp
    efd9:	48 89 e5             	mov    rbp,rsp
    efdc:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
    efdf:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
    efe2:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
    efe5:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    efe9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    efed:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    eff1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    eff5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    eff9:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    effd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f001:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    f008:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f00f:	e9 7d 01 00 00       	jmp    f191 <sc_default_f3_reduce_comparative+0x1bd>
    f014:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f017:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f01f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    f023:	48 01 d0             	add    rax,rdx
    f026:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f029:	48 85 c0             	test   rax,rax
    f02c:	0f 84 5b 01 00 00    	je     f18d <sc_default_f3_reduce_comparative+0x1b9>
    f032:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f035:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f03d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f041:	48 01 d0             	add    rax,rdx
    f044:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f047:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
    f04a:	48 63 d2             	movsxd rdx,edx
    f04d:	48 c1 e2 02          	shl    rdx,0x2
    f051:	48 01 d0             	add    rax,rdx
    f054:	8b 10                	mov    edx,DWORD PTR [rax]
    f056:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f059:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
    f061:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f065:	48 01 c8             	add    rax,rcx
    f068:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f06b:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
    f06e:	48 63 c9             	movsxd rcx,ecx
    f071:	48 c1 e1 02          	shl    rcx,0x2
    f075:	48 01 c8             	add    rax,rcx
    f078:	8b 00                	mov    eax,DWORD PTR [rax]
    f07a:	29 c2                	sub    edx,eax
    f07c:	89 d0                	mov    eax,edx
    f07e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    f081:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f084:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f08c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f090:	48 01 d0             	add    rax,rdx
    f093:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f096:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
    f099:	48 63 d2             	movsxd rdx,edx
    f09c:	48 c1 e2 02          	shl    rdx,0x2
    f0a0:	48 01 d0             	add    rax,rdx
    f0a3:	8b 00                	mov    eax,DWORD PTR [rax]
    f0a5:	83 c0 01             	add    eax,0x1
    f0a8:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    f0ab:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f0ae:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f0b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f0ba:	48 01 d0             	add    rax,rdx
    f0bd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    f0c0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    f0c4:	8b 00                	mov    eax,DWORD PTR [rax]
    f0c6:	89 c0                	mov    eax,eax
    f0c8:	48 c1 e0 02          	shl    rax,0x2
    f0cc:	48 01 d0             	add    rax,rdx
    f0cf:	8b 10                	mov    edx,DWORD PTR [rax]
    f0d1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f0d4:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
    f0dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f0e0:	48 01 c8             	add    rax,rcx
    f0e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f0e6:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
    f0e9:	48 63 c9             	movsxd rcx,ecx
    f0ec:	48 c1 e1 02          	shl    rcx,0x2
    f0f0:	48 01 c8             	add    rax,rcx
    f0f3:	8b 00                	mov    eax,DWORD PTR [rax]
    f0f5:	29 c2                	sub    edx,eax
    f0f7:	89 d0                	mov    eax,edx
    f0f9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    f0fc:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    f100:	74 54                	je     f156 <sc_default_f3_reduce_comparative+0x182>
    f102:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f105:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f10d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    f111:	48 01 d0             	add    rax,rdx
    f114:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f117:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    f11a:	48 8d 0c d5 00 00 00 00 	lea    rcx,[rdx*8+0x0]
    f122:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    f126:	48 01 ca             	add    rdx,rcx
    f129:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
    f12c:	8b 4d cc             	mov    ecx,DWORD PTR [rbp-0x34]
    f12f:	48 63 c9             	movsxd rcx,ecx
    f132:	48 c1 e1 02          	shl    rcx,0x2
    f136:	48 01 ca             	add    rdx,rcx
    f139:	8b 12                	mov    edx,DWORD PTR [rdx]
    f13b:	89 d2                	mov    edx,edx
    f13d:	48 c1 e2 03          	shl    rdx,0x3
    f141:	48 01 d0             	add    rax,rdx
    f144:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f147:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f14a:	48 c1 e2 02          	shl    rdx,0x2
    f14e:	48 01 d0             	add    rax,rdx
    f151:	8b 00                	mov    eax,DWORD PTR [rax]
    f153:	01 45 e0             	add    DWORD PTR [rbp-0x20],eax
    f156:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    f15a:	74 31                	je     f18d <sc_default_f3_reduce_comparative+0x1b9>
    f15c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f15f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f167:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    f16b:	48 01 d0             	add    rax,rdx
    f16e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f171:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f174:	48 c1 e2 03          	shl    rdx,0x3
    f178:	48 01 d0             	add    rax,rdx
    f17b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f17e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    f181:	48 c1 e2 02          	shl    rdx,0x2
    f185:	48 01 d0             	add    rax,rdx
    f188:	8b 00                	mov    eax,DWORD PTR [rax]
    f18a:	01 45 e0             	add    DWORD PTR [rbp-0x20],eax
    f18d:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    f191:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    f195:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
    f198:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    f19b:	0f 82 73 fe ff ff    	jb     f014 <sc_default_f3_reduce_comparative+0x40>
    f1a1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f1a4:	5d                   	pop    rbp
    f1a5:	c3                   	ret    

000000000000f1a6 <sc_user_f5_reduce_to_ext>:
    f1a6:	f3 0f 1e fa          	endbr64 
    f1aa:	55                   	push   rbp
    f1ab:	48 89 e5             	mov    rbp,rsp
    f1ae:	48 83 ec 20          	sub    rsp,0x20
    f1b2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    f1b5:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    f1b8:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    f1bb:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    f1bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f1c3:	4c 8b 50 28          	mov    r10,QWORD PTR [rax+0x28]
    f1c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f1cb:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
    f1cf:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    f1d2:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f1d5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f1d8:	49 89 f1             	mov    r9,rsi
    f1db:	41 b8 0c 00 00 00    	mov    r8d,0xc
    f1e1:	89 c6                	mov    esi,eax
    f1e3:	bf 01 00 00 00       	mov    edi,0x1
    f1e8:	41 ff d2             	call   r10
    f1eb:	c9                   	leave  
    f1ec:	c3                   	ret    

000000000000f1ed <sc_user_f3_reduce_to_ext>:
    f1ed:	f3 0f 1e fa          	endbr64 
    f1f1:	55                   	push   rbp
    f1f2:	48 89 e5             	mov    rbp,rsp
    f1f5:	48 83 ec 20          	sub    rsp,0x20
    f1f9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    f1fc:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    f1ff:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    f202:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    f206:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f20a:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
    f20e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f212:	48 8b 70 38          	mov    rsi,QWORD PTR [rax+0x38]
    f216:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f21a:	8b 00                	mov    eax,DWORD PTR [rax]
    f21c:	89 c7                	mov    edi,eax
    f21e:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    f221:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f224:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f227:	49 89 f1             	mov    r9,rsi
    f22a:	41 b8 0c 00 00 00    	mov    r8d,0xc
    f230:	89 fe                	mov    esi,edi
    f232:	89 c7                	mov    edi,eax
    f234:	41 ff d2             	call   r10
    f237:	c9                   	leave  
    f238:	c3                   	ret    

000000000000f239 <sc_user_f5_reduce_to_ext_comparative>:
    f239:	f3 0f 1e fa          	endbr64 
    f23d:	55                   	push   rbp
    f23e:	48 89 e5             	mov    rbp,rsp
    f241:	48 83 ec 30          	sub    rsp,0x30
    f245:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f248:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f24b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f24e:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f252:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    f259:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    f260:	eb 67                	jmp    f2c9 <sc_user_f5_reduce_to_ext_comparative+0x90>
    f262:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f266:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    f26a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f26d:	48 c1 e2 03          	shl    rdx,0x3
    f271:	48 01 d0             	add    rax,rdx
    f274:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f277:	48 85 c0             	test   rax,rax
    f27a:	74 49                	je     f2c5 <sc_user_f5_reduce_to_ext_comparative+0x8c>
    f27c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f280:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    f284:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f287:	48 c1 e2 03          	shl    rdx,0x3
    f28b:	48 01 d0             	add    rax,rdx
    f28e:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    f291:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f295:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    f299:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f29c:	48 c1 e2 03          	shl    rdx,0x3
    f2a0:	48 01 d0             	add    rax,rdx
    f2a3:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    f2a6:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    f2a9:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f2ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f2af:	49 89 f1             	mov    r9,rsi
    f2b2:	41 b8 0c 00 00 00    	mov    r8d,0xc
    f2b8:	89 c6                	mov    esi,eax
    f2ba:	bf 01 00 00 00       	mov    edi,0x1
    f2bf:	41 ff d2             	call   r10
    f2c2:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
    f2c5:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    f2c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2cd:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
    f2d0:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    f2d3:	72 8d                	jb     f262 <sc_user_f5_reduce_to_ext_comparative+0x29>
    f2d5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f2d8:	c9                   	leave  
    f2d9:	c3                   	ret    

000000000000f2da <sc_user_f3_reduce_to_ext_comparative>:
    f2da:	f3 0f 1e fa          	endbr64 
    f2de:	55                   	push   rbp
    f2df:	48 89 e5             	mov    rbp,rsp
    f2e2:	48 83 ec 30          	sub    rsp,0x30
    f2e6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f2e9:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f2ec:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f2ef:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f2f3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    f2fa:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    f301:	eb 6c                	jmp    f36f <sc_user_f3_reduce_to_ext_comparative+0x95>
    f303:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f307:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    f30b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f30e:	48 c1 e2 03          	shl    rdx,0x3
    f312:	48 01 d0             	add    rax,rdx
    f315:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f318:	48 85 c0             	test   rax,rax
    f31b:	74 4e                	je     f36b <sc_user_f3_reduce_to_ext_comparative+0x91>
    f31d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f321:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    f325:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f328:	48 c1 e2 03          	shl    rdx,0x3
    f32c:	48 01 d0             	add    rax,rdx
    f32f:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    f332:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f336:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
    f33a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f33d:	48 c1 e2 03          	shl    rdx,0x3
    f341:	48 01 d0             	add    rax,rdx
    f344:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    f347:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f34b:	8b 00                	mov    eax,DWORD PTR [rax]
    f34d:	89 c7                	mov    edi,eax
    f34f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    f352:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f355:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f358:	49 89 f1             	mov    r9,rsi
    f35b:	41 b8 0c 00 00 00    	mov    r8d,0xc
    f361:	89 fe                	mov    esi,edi
    f363:	89 c7                	mov    edi,eax
    f365:	41 ff d2             	call   r10
    f368:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
    f36b:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    f36f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f373:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
    f376:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    f379:	72 88                	jb     f303 <sc_user_f3_reduce_to_ext_comparative+0x29>
    f37b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f37e:	c9                   	leave  
    f37f:	c3                   	ret    

000000000000f380 <sc_user_def_f5_reduce_to_ext>:
    f380:	f3 0f 1e fa          	endbr64 
    f384:	55                   	push   rbp
    f385:	48 89 e5             	mov    rbp,rsp
    f388:	53                   	push   rbx
    f389:	48 83 ec 28          	sub    rsp,0x28
    f38d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f390:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f393:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f396:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f39a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f39e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f3a1:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f3a4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f3a7:	89 c7                	mov    edi,eax
    f3a9:	e8 6d f9 ff ff       	call   ed1b <sc_default_f5_reduce>
    f3ae:	89 c3                	mov    ebx,eax
    f3b0:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f3b4:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f3b7:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f3ba:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f3bd:	89 c7                	mov    edi,eax
    f3bf:	e8 e2 fd ff ff       	call   f1a6 <sc_user_f5_reduce_to_ext>
    f3c4:	01 d8                	add    eax,ebx
    f3c6:	48 83 c4 28          	add    rsp,0x28
    f3ca:	5b                   	pop    rbx
    f3cb:	5d                   	pop    rbp
    f3cc:	c3                   	ret    

000000000000f3cd <sc_user_def_f3_reduce_to_ext>:
    f3cd:	f3 0f 1e fa          	endbr64 
    f3d1:	55                   	push   rbp
    f3d2:	48 89 e5             	mov    rbp,rsp
    f3d5:	53                   	push   rbx
    f3d6:	48 83 ec 28          	sub    rsp,0x28
    f3da:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f3dd:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f3e0:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f3e3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f3e7:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f3eb:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f3ee:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f3f1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f3f4:	89 c7                	mov    edi,eax
    f3f6:	e8 b1 f9 ff ff       	call   edac <sc_default_f3_reduce>
    f3fb:	89 c3                	mov    ebx,eax
    f3fd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f401:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f404:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f407:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f40a:	89 c7                	mov    edi,eax
    f40c:	e8 dc fd ff ff       	call   f1ed <sc_user_f3_reduce_to_ext>
    f411:	01 d8                	add    eax,ebx
    f413:	48 83 c4 28          	add    rsp,0x28
    f417:	5b                   	pop    rbx
    f418:	5d                   	pop    rbp
    f419:	c3                   	ret    

000000000000f41a <sc_user_def_f5_reduce_to_ext_comparative>:
    f41a:	f3 0f 1e fa          	endbr64 
    f41e:	55                   	push   rbp
    f41f:	48 89 e5             	mov    rbp,rsp
    f422:	53                   	push   rbx
    f423:	48 83 ec 28          	sub    rsp,0x28
    f427:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f42a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f42d:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f430:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f434:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f438:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f43b:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f43e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f441:	89 c7                	mov    edi,eax
    f443:	e8 09 fa ff ff       	call   ee51 <sc_default_f5_reduce_comparative>
    f448:	89 c3                	mov    ebx,eax
    f44a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f44e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f451:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f454:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f457:	89 c7                	mov    edi,eax
    f459:	e8 db fd ff ff       	call   f239 <sc_user_f5_reduce_to_ext_comparative>
    f45e:	01 d8                	add    eax,ebx
    f460:	48 83 c4 28          	add    rsp,0x28
    f464:	5b                   	pop    rbx
    f465:	5d                   	pop    rbp
    f466:	c3                   	ret    

000000000000f467 <sc_user_def_f3_reduce_to_ext_comparative>:
    f467:	f3 0f 1e fa          	endbr64 
    f46b:	55                   	push   rbp
    f46c:	48 89 e5             	mov    rbp,rsp
    f46f:	53                   	push   rbx
    f470:	48 83 ec 28          	sub    rsp,0x28
    f474:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f477:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f47a:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f47d:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f481:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f485:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f488:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f48b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f48e:	89 c7                	mov    edi,eax
    f490:	e8 3f fb ff ff       	call   efd4 <sc_default_f3_reduce_comparative>
    f495:	89 c3                	mov    ebx,eax
    f497:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f49b:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f49e:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f4a1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f4a4:	89 c7                	mov    edi,eax
    f4a6:	e8 2f fe ff ff       	call   f2da <sc_user_f3_reduce_to_ext_comparative>
    f4ab:	01 d8                	add    eax,ebx
    f4ad:	48 83 c4 28          	add    rsp,0x28
    f4b1:	5b                   	pop    rbx
    f4b2:	5d                   	pop    rbp
    f4b3:	c3                   	ret    

000000000000f4b4 <sc_user_f5_reduce_to_stem>:
    f4b4:	f3 0f 1e fa          	endbr64 
    f4b8:	55                   	push   rbp
    f4b9:	48 89 e5             	mov    rbp,rsp
    f4bc:	48 83 ec 20          	sub    rsp,0x20
    f4c0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    f4c3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    f4c6:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    f4c9:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    f4cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f4d1:	4c 8b 50 28          	mov    r10,QWORD PTR [rax+0x28]
    f4d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f4d9:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
    f4dd:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    f4e0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f4e3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f4e6:	49 89 f1             	mov    r9,rsi
    f4e9:	41 b8 0e 00 00 00    	mov    r8d,0xe
    f4ef:	89 c6                	mov    esi,eax
    f4f1:	bf 01 00 00 00       	mov    edi,0x1
    f4f6:	41 ff d2             	call   r10
    f4f9:	c9                   	leave  
    f4fa:	c3                   	ret    

000000000000f4fb <sc_user_f3_reduce_to_stem>:
    f4fb:	f3 0f 1e fa          	endbr64 
    f4ff:	55                   	push   rbp
    f500:	48 89 e5             	mov    rbp,rsp
    f503:	48 83 ec 20          	sub    rsp,0x20
    f507:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    f50a:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    f50d:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    f510:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    f514:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f518:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
    f51c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f520:	48 8b 70 38          	mov    rsi,QWORD PTR [rax+0x38]
    f524:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    f528:	8b 00                	mov    eax,DWORD PTR [rax]
    f52a:	89 c7                	mov    edi,eax
    f52c:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    f52f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f532:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f535:	49 89 f1             	mov    r9,rsi
    f538:	41 b8 0e 00 00 00    	mov    r8d,0xe
    f53e:	89 fe                	mov    esi,edi
    f540:	89 c7                	mov    edi,eax
    f542:	41 ff d2             	call   r10
    f545:	c9                   	leave  
    f546:	c3                   	ret    

000000000000f547 <sc_user_f5_reduce_to_stem_comparative>:
    f547:	f3 0f 1e fa          	endbr64 
    f54b:	55                   	push   rbp
    f54c:	48 89 e5             	mov    rbp,rsp
    f54f:	48 83 ec 30          	sub    rsp,0x30
    f553:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f556:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f559:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f55c:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f560:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    f567:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    f56e:	eb 67                	jmp    f5d7 <sc_user_f5_reduce_to_stem_comparative+0x90>
    f570:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f574:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    f578:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f57b:	48 c1 e2 03          	shl    rdx,0x3
    f57f:	48 01 d0             	add    rax,rdx
    f582:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f585:	48 85 c0             	test   rax,rax
    f588:	74 49                	je     f5d3 <sc_user_f5_reduce_to_stem_comparative+0x8c>
    f58a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f58e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    f592:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f595:	48 c1 e2 03          	shl    rdx,0x3
    f599:	48 01 d0             	add    rax,rdx
    f59c:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    f59f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f5a3:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    f5a7:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f5aa:	48 c1 e2 03          	shl    rdx,0x3
    f5ae:	48 01 d0             	add    rax,rdx
    f5b1:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    f5b4:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    f5b7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f5ba:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f5bd:	49 89 f1             	mov    r9,rsi
    f5c0:	41 b8 0e 00 00 00    	mov    r8d,0xe
    f5c6:	89 c6                	mov    esi,eax
    f5c8:	bf 01 00 00 00       	mov    edi,0x1
    f5cd:	41 ff d2             	call   r10
    f5d0:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
    f5d3:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    f5d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f5db:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
    f5de:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    f5e1:	72 8d                	jb     f570 <sc_user_f5_reduce_to_stem_comparative+0x29>
    f5e3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f5e6:	c9                   	leave  
    f5e7:	c3                   	ret    

000000000000f5e8 <sc_user_f3_reduce_to_stem_comparative>:
    f5e8:	f3 0f 1e fa          	endbr64 
    f5ec:	55                   	push   rbp
    f5ed:	48 89 e5             	mov    rbp,rsp
    f5f0:	48 83 ec 30          	sub    rsp,0x30
    f5f4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f5f7:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f5fa:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f5fd:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f601:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    f608:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    f60f:	eb 6c                	jmp    f67d <sc_user_f3_reduce_to_stem_comparative+0x95>
    f611:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f615:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    f619:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f61c:	48 c1 e2 03          	shl    rdx,0x3
    f620:	48 01 d0             	add    rax,rdx
    f623:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f626:	48 85 c0             	test   rax,rax
    f629:	74 4e                	je     f679 <sc_user_f3_reduce_to_stem_comparative+0x91>
    f62b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f62f:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    f633:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f636:	48 c1 e2 03          	shl    rdx,0x3
    f63a:	48 01 d0             	add    rax,rdx
    f63d:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    f640:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f644:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
    f648:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    f64b:	48 c1 e2 03          	shl    rdx,0x3
    f64f:	48 01 d0             	add    rax,rdx
    f652:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    f655:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f659:	8b 00                	mov    eax,DWORD PTR [rax]
    f65b:	89 c7                	mov    edi,eax
    f65d:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    f660:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f663:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f666:	49 89 f1             	mov    r9,rsi
    f669:	41 b8 0e 00 00 00    	mov    r8d,0xe
    f66f:	89 fe                	mov    esi,edi
    f671:	89 c7                	mov    edi,eax
    f673:	41 ff d2             	call   r10
    f676:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
    f679:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    f67d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f681:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
    f684:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    f687:	72 88                	jb     f611 <sc_user_f3_reduce_to_stem_comparative+0x29>
    f689:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f68c:	c9                   	leave  
    f68d:	c3                   	ret    

000000000000f68e <sc_user_def_f5_reduce_to_stem>:
    f68e:	f3 0f 1e fa          	endbr64 
    f692:	55                   	push   rbp
    f693:	48 89 e5             	mov    rbp,rsp
    f696:	53                   	push   rbx
    f697:	48 83 ec 28          	sub    rsp,0x28
    f69b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f69e:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f6a1:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f6a4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f6a8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f6ac:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f6af:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f6b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f6b5:	89 c7                	mov    edi,eax
    f6b7:	e8 5f f6 ff ff       	call   ed1b <sc_default_f5_reduce>
    f6bc:	89 c3                	mov    ebx,eax
    f6be:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f6c2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f6c5:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f6c8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f6cb:	89 c7                	mov    edi,eax
    f6cd:	e8 e2 fd ff ff       	call   f4b4 <sc_user_f5_reduce_to_stem>
    f6d2:	01 d8                	add    eax,ebx
    f6d4:	48 83 c4 28          	add    rsp,0x28
    f6d8:	5b                   	pop    rbx
    f6d9:	5d                   	pop    rbp
    f6da:	c3                   	ret    

000000000000f6db <sc_user_def_f3_reduce_to_stem>:
    f6db:	f3 0f 1e fa          	endbr64 
    f6df:	55                   	push   rbp
    f6e0:	48 89 e5             	mov    rbp,rsp
    f6e3:	53                   	push   rbx
    f6e4:	48 83 ec 28          	sub    rsp,0x28
    f6e8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f6eb:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f6ee:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f6f1:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f6f5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f6f9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f6fc:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f6ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f702:	89 c7                	mov    edi,eax
    f704:	e8 a3 f6 ff ff       	call   edac <sc_default_f3_reduce>
    f709:	89 c3                	mov    ebx,eax
    f70b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f70f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f712:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f715:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f718:	89 c7                	mov    edi,eax
    f71a:	e8 dc fd ff ff       	call   f4fb <sc_user_f3_reduce_to_stem>
    f71f:	01 d8                	add    eax,ebx
    f721:	48 83 c4 28          	add    rsp,0x28
    f725:	5b                   	pop    rbx
    f726:	5d                   	pop    rbp
    f727:	c3                   	ret    

000000000000f728 <sc_user_def_f5_reduce_to_stem_comparative>:
    f728:	f3 0f 1e fa          	endbr64 
    f72c:	55                   	push   rbp
    f72d:	48 89 e5             	mov    rbp,rsp
    f730:	53                   	push   rbx
    f731:	48 83 ec 28          	sub    rsp,0x28
    f735:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f738:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f73b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f73e:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f742:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f746:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f749:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f74c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f74f:	89 c7                	mov    edi,eax
    f751:	e8 fb f6 ff ff       	call   ee51 <sc_default_f5_reduce_comparative>
    f756:	89 c3                	mov    ebx,eax
    f758:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f75c:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f75f:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f762:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f765:	89 c7                	mov    edi,eax
    f767:	e8 db fd ff ff       	call   f547 <sc_user_f5_reduce_to_stem_comparative>
    f76c:	01 d8                	add    eax,ebx
    f76e:	48 83 c4 28          	add    rsp,0x28
    f772:	5b                   	pop    rbx
    f773:	5d                   	pop    rbp
    f774:	c3                   	ret    

000000000000f775 <sc_user_def_f3_reduce_to_stem_comparative>:
    f775:	f3 0f 1e fa          	endbr64 
    f779:	55                   	push   rbp
    f77a:	48 89 e5             	mov    rbp,rsp
    f77d:	53                   	push   rbx
    f77e:	48 83 ec 28          	sub    rsp,0x28
    f782:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    f785:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    f788:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    f78b:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    f78f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f793:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f796:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f799:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f79c:	89 c7                	mov    edi,eax
    f79e:	e8 31 f8 ff ff       	call   efd4 <sc_default_f3_reduce_comparative>
    f7a3:	89 c3                	mov    ebx,eax
    f7a5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f7a9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    f7ac:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    f7af:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f7b2:	89 c7                	mov    edi,eax
    f7b4:	e8 2f fe ff ff       	call   f5e8 <sc_user_f3_reduce_to_stem_comparative>
    f7b9:	01 d8                	add    eax,ebx
    f7bb:	48 83 c4 28          	add    rsp,0x28
    f7bf:	5b                   	pop    rbx
    f7c0:	5d                   	pop    rbp
    f7c1:	c3                   	ret    

000000000000f7c2 <sc_default_f5_split_in_ext_stem>:
    f7c2:	f3 0f 1e fa          	endbr64 
    f7c6:	55                   	push   rbp
    f7c7:	48 89 e5             	mov    rbp,rsp
    f7ca:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    f7cd:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    f7d0:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    f7d3:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    f7d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f7db:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f7de:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f7e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    f7e9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    f7ec:	83 c0 01             	add    eax,0x1
    f7ef:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    f7f2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    f7f5:	2b 45 d8             	sub    eax,DWORD PTR [rbp-0x28]
    f7f8:	83 e8 01             	sub    eax,0x1
    f7fb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    f7fe:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    f802:	74 24                	je     f828 <sc_default_f5_split_in_ext_stem+0x66>
    f804:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    f807:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f80f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f813:	48 01 d0             	add    rax,rdx
    f816:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f819:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    f81c:	48 c1 e2 02          	shl    rdx,0x2
    f820:	48 01 d0             	add    rax,rdx
    f823:	8b 00                	mov    eax,DWORD PTR [rax]
    f825:	01 45 ec             	add    DWORD PTR [rbp-0x14],eax
    f828:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f82b:	5d                   	pop    rbp
    f82c:	c3                   	ret    

000000000000f82d <sc_default_f3_split_in_stem_ext>:
    f82d:	f3 0f 1e fa          	endbr64 
    f831:	55                   	push   rbp
    f832:	48 89 e5             	mov    rbp,rsp
    f835:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    f838:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    f83b:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    f83e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    f842:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f846:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    f84a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f84e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    f855:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    f858:	83 c0 01             	add    eax,0x1
    f85b:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    f85e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    f861:	2b 45 d8             	sub    eax,DWORD PTR [rbp-0x28]
    f864:	83 e8 01             	sub    eax,0x1
    f867:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    f86a:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    f86e:	74 24                	je     f894 <sc_default_f3_split_in_stem_ext+0x67>
    f870:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    f873:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f87b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f87f:	48 01 d0             	add    rax,rdx
    f882:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f885:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    f888:	48 c1 e2 02          	shl    rdx,0x2
    f88c:	48 01 d0             	add    rax,rdx
    f88f:	8b 00                	mov    eax,DWORD PTR [rax]
    f891:	01 45 ec             	add    DWORD PTR [rbp-0x14],eax
    f894:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f897:	5d                   	pop    rbp
    f898:	c3                   	ret    

000000000000f899 <sc_default_f5_split_in_ext_stem_comparative>:
    f899:	f3 0f 1e fa          	endbr64 
    f89d:	55                   	push   rbp
    f89e:	48 89 e5             	mov    rbp,rsp
    f8a1:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    f8a4:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    f8a7:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    f8aa:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    f8ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f8b2:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    f8b6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    f8ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f8be:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
    f8c2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f8c6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    f8cd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    f8d4:	e9 be 00 00 00       	jmp    f997 <sc_default_f5_split_in_ext_stem_comparative+0xfe>
    f8d9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f8dc:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f8e4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    f8e8:	48 01 d0             	add    rax,rdx
    f8eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f8ee:	48 85 c0             	test   rax,rax
    f8f1:	0f 84 9c 00 00 00    	je     f993 <sc_default_f5_split_in_ext_stem_comparative+0xfa>
    f8f7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f8fa:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f902:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f906:	48 01 d0             	add    rax,rdx
    f909:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f90c:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    f90f:	48 63 d2             	movsxd rdx,edx
    f912:	48 c1 e2 02          	shl    rdx,0x2
    f916:	48 01 d0             	add    rax,rdx
    f919:	8b 00                	mov    eax,DWORD PTR [rax]
    f91b:	83 c0 01             	add    eax,0x1
    f91e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    f921:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    f924:	48 98                	cdqe   
    f926:	48 c1 e0 03          	shl    rax,0x3
    f92a:	48 8d 50 f8          	lea    rdx,[rax-0x8]
    f92e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f932:	48 01 d0             	add    rax,rdx
    f935:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    f938:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    f93b:	48 98                	cdqe   
    f93d:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
    f945:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f949:	48 01 c8             	add    rax,rcx
    f94c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f94f:	48 29 c2             	sub    rdx,rax
    f952:	48 89 d0             	mov    rax,rdx
    f955:	48 c1 f8 02          	sar    rax,0x2
    f959:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    f95c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    f960:	74 31                	je     f993 <sc_default_f5_split_in_ext_stem_comparative+0xfa>
    f962:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f965:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f96d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    f971:	48 01 d0             	add    rax,rdx
    f974:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f977:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f97a:	48 c1 e2 03          	shl    rdx,0x3
    f97e:	48 01 d0             	add    rax,rdx
    f981:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f984:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    f987:	48 c1 e2 02          	shl    rdx,0x2
    f98b:	48 01 d0             	add    rax,rdx
    f98e:	8b 00                	mov    eax,DWORD PTR [rax]
    f990:	01 45 e4             	add    DWORD PTR [rbp-0x1c],eax
    f993:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
    f997:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f99b:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
    f99e:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
    f9a1:	0f 82 32 ff ff ff    	jb     f8d9 <sc_default_f5_split_in_ext_stem_comparative+0x40>
    f9a7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    f9aa:	5d                   	pop    rbp
    f9ab:	c3                   	ret    

000000000000f9ac <sc_default_f3_split_in_stem_ext_comparative>:
    f9ac:	f3 0f 1e fa          	endbr64 
    f9b0:	55                   	push   rbp
    f9b1:	48 89 e5             	mov    rbp,rsp
    f9b4:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    f9b7:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    f9ba:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    f9bd:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    f9c1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9c5:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    f9c9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    f9cd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f9d1:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    f9d5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f9d9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    f9e0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
    f9e7:	e9 be 00 00 00       	jmp    faaa <sc_default_f3_split_in_stem_ext_comparative+0xfe>
    f9ec:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f9ef:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    f9f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    f9fb:	48 01 d0             	add    rax,rdx
    f9fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fa01:	48 85 c0             	test   rax,rax
    fa04:	0f 84 9c 00 00 00    	je     faa6 <sc_default_f3_split_in_stem_ext_comparative+0xfa>
    fa0a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    fa0d:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    fa15:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa19:	48 01 d0             	add    rax,rdx
    fa1c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fa1f:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    fa22:	48 63 d2             	movsxd rdx,edx
    fa25:	48 c1 e2 02          	shl    rdx,0x2
    fa29:	48 01 d0             	add    rax,rdx
    fa2c:	8b 00                	mov    eax,DWORD PTR [rax]
    fa2e:	83 c0 01             	add    eax,0x1
    fa31:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    fa34:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    fa37:	48 98                	cdqe   
    fa39:	48 c1 e0 03          	shl    rax,0x3
    fa3d:	48 8d 50 f8          	lea    rdx,[rax-0x8]
    fa41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa45:	48 01 d0             	add    rax,rdx
    fa48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    fa4b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    fa4e:	48 98                	cdqe   
    fa50:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
    fa58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa5c:	48 01 c8             	add    rax,rcx
    fa5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fa62:	48 29 c2             	sub    rdx,rax
    fa65:	48 89 d0             	mov    rax,rdx
    fa68:	48 c1 f8 02          	sar    rax,0x2
    fa6c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    fa6f:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    fa73:	74 31                	je     faa6 <sc_default_f3_split_in_stem_ext_comparative+0xfa>
    fa75:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    fa78:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    fa80:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    fa84:	48 01 d0             	add    rax,rdx
    fa87:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fa8a:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    fa8d:	48 c1 e2 03          	shl    rdx,0x3
    fa91:	48 01 d0             	add    rax,rdx
    fa94:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fa97:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    fa9a:	48 c1 e2 02          	shl    rdx,0x2
    fa9e:	48 01 d0             	add    rax,rdx
    faa1:	8b 00                	mov    eax,DWORD PTR [rax]
    faa3:	01 45 e4             	add    DWORD PTR [rbp-0x1c],eax
    faa6:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
    faaa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    faae:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
    fab1:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
    fab4:	0f 82 32 ff ff ff    	jb     f9ec <sc_default_f3_split_in_stem_ext_comparative+0x40>
    faba:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    fabd:	5d                   	pop    rbp
    fabe:	c3                   	ret    

000000000000fabf <sc_user_f5_split_in_ext_stem>:
    fabf:	f3 0f 1e fa          	endbr64 
    fac3:	55                   	push   rbp
    fac4:	48 89 e5             	mov    rbp,rsp
    fac7:	48 83 ec 20          	sub    rsp,0x20
    facb:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    face:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    fad1:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    fad4:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    fad8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    fadc:	4c 8b 50 28          	mov    r10,QWORD PTR [rax+0x28]
    fae0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    fae4:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
    fae8:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    faeb:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    faee:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    faf1:	49 89 f1             	mov    r9,rsi
    faf4:	41 b8 12 00 00 00    	mov    r8d,0x12
    fafa:	89 c6                	mov    esi,eax
    fafc:	bf 01 00 00 00       	mov    edi,0x1
    fb01:	41 ff d2             	call   r10
    fb04:	c9                   	leave  
    fb05:	c3                   	ret    

000000000000fb06 <sc_user_f3_split_in_stem_ext>:
    fb06:	f3 0f 1e fa          	endbr64 
    fb0a:	55                   	push   rbp
    fb0b:	48 89 e5             	mov    rbp,rsp
    fb0e:	48 83 ec 20          	sub    rsp,0x20
    fb12:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    fb15:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    fb18:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    fb1b:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
    fb1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    fb23:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
    fb27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    fb2b:	48 8b 70 38          	mov    rsi,QWORD PTR [rax+0x38]
    fb2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    fb33:	8b 00                	mov    eax,DWORD PTR [rax]
    fb35:	89 c7                	mov    edi,eax
    fb37:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
    fb3a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fb3d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    fb40:	49 89 f1             	mov    r9,rsi
    fb43:	41 b8 10 00 00 00    	mov    r8d,0x10
    fb49:	89 fe                	mov    esi,edi
    fb4b:	89 c7                	mov    edi,eax
    fb4d:	41 ff d2             	call   r10
    fb50:	c9                   	leave  
    fb51:	c3                   	ret    

000000000000fb52 <sc_user_f5_split_in_ext_stem_comparative>:
    fb52:	f3 0f 1e fa          	endbr64 
    fb56:	55                   	push   rbp
    fb57:	48 89 e5             	mov    rbp,rsp
    fb5a:	48 83 ec 30          	sub    rsp,0x30
    fb5e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    fb61:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    fb64:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    fb67:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    fb6b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    fb72:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    fb79:	eb 67                	jmp    fbe2 <sc_user_f5_split_in_ext_stem_comparative+0x90>
    fb7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fb7f:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    fb83:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fb86:	48 c1 e2 03          	shl    rdx,0x3
    fb8a:	48 01 d0             	add    rax,rdx
    fb8d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fb90:	48 85 c0             	test   rax,rax
    fb93:	74 49                	je     fbde <sc_user_f5_split_in_ext_stem_comparative+0x8c>
    fb95:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fb99:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
    fb9d:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fba0:	48 c1 e2 03          	shl    rdx,0x3
    fba4:	48 01 d0             	add    rax,rdx
    fba7:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    fbaa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fbae:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    fbb2:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fbb5:	48 c1 e2 03          	shl    rdx,0x3
    fbb9:	48 01 d0             	add    rax,rdx
    fbbc:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    fbbf:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    fbc2:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    fbc5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fbc8:	49 89 f1             	mov    r9,rsi
    fbcb:	41 b8 12 00 00 00    	mov    r8d,0x12
    fbd1:	89 c6                	mov    esi,eax
    fbd3:	bf 01 00 00 00       	mov    edi,0x1
    fbd8:	41 ff d2             	call   r10
    fbdb:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
    fbde:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    fbe2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fbe6:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
    fbe9:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    fbec:	72 8d                	jb     fb7b <sc_user_f5_split_in_ext_stem_comparative+0x29>
    fbee:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    fbf1:	c9                   	leave  
    fbf2:	c3                   	ret    

000000000000fbf3 <sc_user_f3_split_in_stem_ext_comparative>:
    fbf3:	f3 0f 1e fa          	endbr64 
    fbf7:	55                   	push   rbp
    fbf8:	48 89 e5             	mov    rbp,rsp
    fbfb:	48 83 ec 30          	sub    rsp,0x30
    fbff:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    fc02:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    fc05:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    fc08:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    fc0c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    fc13:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    fc1a:	eb 6c                	jmp    fc88 <sc_user_f3_split_in_stem_ext_comparative+0x95>
    fc1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fc20:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    fc24:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fc27:	48 c1 e2 03          	shl    rdx,0x3
    fc2b:	48 01 d0             	add    rax,rdx
    fc2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fc31:	48 85 c0             	test   rax,rax
    fc34:	74 4e                	je     fc84 <sc_user_f3_split_in_stem_ext_comparative+0x91>
    fc36:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fc3a:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
    fc3e:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fc41:	48 c1 e2 03          	shl    rdx,0x3
    fc45:	48 01 d0             	add    rax,rdx
    fc48:	4c 8b 10             	mov    r10,QWORD PTR [rax]
    fc4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fc4f:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
    fc53:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    fc56:	48 c1 e2 03          	shl    rdx,0x3
    fc5a:	48 01 d0             	add    rax,rdx
    fc5d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    fc60:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fc64:	8b 00                	mov    eax,DWORD PTR [rax]
    fc66:	89 c7                	mov    edi,eax
    fc68:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
    fc6b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    fc6e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fc71:	49 89 f1             	mov    r9,rsi
    fc74:	41 b8 10 00 00 00    	mov    r8d,0x10
    fc7a:	89 fe                	mov    esi,edi
    fc7c:	89 c7                	mov    edi,eax
    fc7e:	41 ff d2             	call   r10
    fc81:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
    fc84:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
    fc88:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    fc8c:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
    fc8f:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    fc92:	72 88                	jb     fc1c <sc_user_f3_split_in_stem_ext_comparative+0x29>
    fc94:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    fc97:	c9                   	leave  
    fc98:	c3                   	ret    

000000000000fc99 <sc_user_def_f5_split_in_ext_stem>:
    fc99:	f3 0f 1e fa          	endbr64 
    fc9d:	55                   	push   rbp
    fc9e:	48 89 e5             	mov    rbp,rsp
    fca1:	53                   	push   rbx
    fca2:	48 83 ec 28          	sub    rsp,0x28
    fca6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    fca9:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    fcac:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    fcaf:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    fcb3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fcb7:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fcba:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fcbd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fcc0:	89 c7                	mov    edi,eax
    fcc2:	e8 fb fa ff ff       	call   f7c2 <sc_default_f5_split_in_ext_stem>
    fcc7:	89 c3                	mov    ebx,eax
    fcc9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fccd:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fcd0:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fcd3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fcd6:	89 c7                	mov    edi,eax
    fcd8:	e8 e2 fd ff ff       	call   fabf <sc_user_f5_split_in_ext_stem>
    fcdd:	01 d8                	add    eax,ebx
    fcdf:	48 83 c4 28          	add    rsp,0x28
    fce3:	5b                   	pop    rbx
    fce4:	5d                   	pop    rbp
    fce5:	c3                   	ret    

000000000000fce6 <sc_user_def_f3_split_in_stem_ext>:
    fce6:	f3 0f 1e fa          	endbr64 
    fcea:	55                   	push   rbp
    fceb:	48 89 e5             	mov    rbp,rsp
    fcee:	53                   	push   rbx
    fcef:	48 83 ec 28          	sub    rsp,0x28
    fcf3:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    fcf6:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    fcf9:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    fcfc:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    fd00:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fd04:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fd07:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fd0a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fd0d:	89 c7                	mov    edi,eax
    fd0f:	e8 19 fb ff ff       	call   f82d <sc_default_f3_split_in_stem_ext>
    fd14:	89 c3                	mov    ebx,eax
    fd16:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fd1a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fd1d:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fd20:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fd23:	89 c7                	mov    edi,eax
    fd25:	e8 dc fd ff ff       	call   fb06 <sc_user_f3_split_in_stem_ext>
    fd2a:	01 d8                	add    eax,ebx
    fd2c:	48 83 c4 28          	add    rsp,0x28
    fd30:	5b                   	pop    rbx
    fd31:	5d                   	pop    rbp
    fd32:	c3                   	ret    

000000000000fd33 <sc_user_def_f5_split_in_ext_stem_comparative>:
    fd33:	f3 0f 1e fa          	endbr64 
    fd37:	55                   	push   rbp
    fd38:	48 89 e5             	mov    rbp,rsp
    fd3b:	53                   	push   rbx
    fd3c:	48 83 ec 28          	sub    rsp,0x28
    fd40:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    fd43:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    fd46:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    fd49:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    fd4d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fd51:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fd54:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fd57:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fd5a:	89 c7                	mov    edi,eax
    fd5c:	e8 38 fb ff ff       	call   f899 <sc_default_f5_split_in_ext_stem_comparative>
    fd61:	89 c3                	mov    ebx,eax
    fd63:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fd67:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fd6a:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fd6d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fd70:	89 c7                	mov    edi,eax
    fd72:	e8 db fd ff ff       	call   fb52 <sc_user_f5_split_in_ext_stem_comparative>
    fd77:	01 d8                	add    eax,ebx
    fd79:	48 83 c4 28          	add    rsp,0x28
    fd7d:	5b                   	pop    rbx
    fd7e:	5d                   	pop    rbp
    fd7f:	c3                   	ret    

000000000000fd80 <sc_user_def_f3_split_in_stem_ext_comparative>:
    fd80:	f3 0f 1e fa          	endbr64 
    fd84:	55                   	push   rbp
    fd85:	48 89 e5             	mov    rbp,rsp
    fd88:	53                   	push   rbx
    fd89:	48 83 ec 28          	sub    rsp,0x28
    fd8d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    fd90:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
    fd93:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
    fd96:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
    fd9a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fd9e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fda1:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fda4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fda7:	89 c7                	mov    edi,eax
    fda9:	e8 fe fb ff ff       	call   f9ac <sc_default_f3_split_in_stem_ext_comparative>
    fdae:	89 c3                	mov    ebx,eax
    fdb0:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    fdb4:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fdb7:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
    fdba:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    fdbd:	89 c7                	mov    edi,eax
    fdbf:	e8 2f fe ff ff       	call   fbf3 <sc_user_f3_split_in_stem_ext_comparative>
    fdc4:	01 d8                	add    eax,ebx
    fdc6:	48 83 c4 28          	add    rsp,0x28
    fdca:	5b                   	pop    rbx
    fdcb:	5d                   	pop    rbp
    fdcc:	c3                   	ret    

000000000000fdcd <sc_default_f5_split_in_ext_stem1>:
    fdcd:	f3 0f 1e fa          	endbr64 
    fdd1:	55                   	push   rbp
    fdd2:	48 89 e5             	mov    rbp,rsp
    fdd5:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    fdd8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    fddb:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    fdde:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    fde2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fde6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fde9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    fded:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    fdf4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    fdf7:	83 c0 01             	add    eax,0x1
    fdfa:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    fdfd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    fe00:	2b 45 d8             	sub    eax,DWORD PTR [rbp-0x28]
    fe03:	83 e8 01             	sub    eax,0x1
    fe06:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    fe09:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe0c:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    fe0f:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
    fe16:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    fe1a:	74 24                	je     fe40 <sc_default_f5_split_in_ext_stem1+0x73>
    fe1c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    fe1f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    fe27:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fe2b:	48 01 d0             	add    rax,rdx
    fe2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fe31:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    fe34:	48 c1 e2 02          	shl    rdx,0x2
    fe38:	48 01 d0             	add    rax,rdx
    fe3b:	8b 00                	mov    eax,DWORD PTR [rax]
    fe3d:	01 45 e4             	add    DWORD PTR [rbp-0x1c],eax
    fe40:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    fe43:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    fe4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fe4f:	48 01 d0             	add    rax,rdx
    fe52:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fe55:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    fe58:	48 c1 e2 02          	shl    rdx,0x2
    fe5c:	48 01 d0             	add    rax,rdx
    fe5f:	8b 00                	mov    eax,DWORD PTR [rax]
    fe61:	01 45 e4             	add    DWORD PTR [rbp-0x1c],eax
    fe64:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    fe67:	5d                   	pop    rbp
    fe68:	c3                   	ret    

000000000000fe69 <sc_default_f3_split_in_stem_ext1>:
    fe69:	f3 0f 1e fa          	endbr64 
    fe6d:	55                   	push   rbp
    fe6e:	48 89 e5             	mov    rbp,rsp
    fe71:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
    fe74:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
    fe77:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
    fe7a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
    fe7e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fe82:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    fe86:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    fe8a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    fe91:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    fe94:	83 c0 01             	add    eax,0x1
    fe97:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    fe9a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    fe9d:	2b 45 d8             	sub    eax,DWORD PTR [rbp-0x28]
    fea0:	83 e8 01             	sub    eax,0x1
    fea3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    fea6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fea9:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    feac:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
    feb3:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    feb7:	74 24                	je     fedd <sc_default_f3_split_in_stem_ext1+0x74>
    feb9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    febc:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    fec4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fec8:	48 01 d0             	add    rax,rdx
    fecb:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fece:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    fed1:	48 c1 e2 02          	shl    rdx,0x2
    fed5:	48 01 d0             	add    rax,rdx
    fed8:	8b 00                	mov    eax,DWORD PTR [rax]
    feda:	01 45 e4             	add    DWORD PTR [rbp-0x1c],eax
    fedd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    fee0:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    fee8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    feec:	48 01 d0             	add    rax,rdx
    feef:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fef2:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    fef5:	48 c1 e2 02          	shl    rdx,0x2
    fef9:	48 01 d0             	add    rax,rdx
    fefc:	8b 00                	mov    eax,DWORD PTR [rax]
    fefe:	01 45 e4             	add    DWORD PTR [rbp-0x1c],eax
    ff01:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    ff04:	5d                   	pop    rbp
    ff05:	c3                   	ret    

000000000000ff06 <sc_default_f5_split_in_ext_stem1_comparative>:
    ff06:	f3 0f 1e fa          	endbr64 
    ff0a:	55                   	push   rbp
    ff0b:	48 89 e5             	mov    rbp,rsp
    ff0e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
    ff11:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
    ff14:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
    ff17:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
    ff1b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    ff1f:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
    ff23:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    ff27:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    ff2e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    ff32:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
    ff36:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    ff3a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
    ff41:	e9 35 01 00 00       	jmp    1007b <sc_default_f5_split_in_ext_stem1_comparative+0x175>
    ff46:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    ff49:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ff51:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    ff55:	48 01 d0             	add    rax,rdx
    ff58:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ff5b:	48 85 c0             	test   rax,rax
    ff5e:	0f 84 13 01 00 00    	je     10077 <sc_default_f5_split_in_ext_stem1_comparative+0x171>
    ff64:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    ff67:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ff6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ff73:	48 01 d0             	add    rax,rdx
    ff76:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ff79:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
    ff7c:	48 63 d2             	movsxd rdx,edx
    ff7f:	48 c1 e2 02          	shl    rdx,0x2
    ff83:	48 01 d0             	add    rax,rdx
    ff86:	8b 00                	mov    eax,DWORD PTR [rax]
    ff88:	83 c0 01             	add    eax,0x1
    ff8b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    ff8e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    ff91:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ff99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ff9d:	48 01 d0             	add    rax,rdx
    ffa0:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ffa3:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
    ffa6:	48 63 d2             	movsxd rdx,edx
    ffa9:	48 c1 e2 02          	shl    rdx,0x2
    ffad:	48 83 ea 04          	sub    rdx,0x4
    ffb1:	48 01 d0             	add    rax,rdx
    ffb4:	8b 10                	mov    edx,DWORD PTR [rax]
    ffb6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    ffb9:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
    ffc1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    ffc5:	48 01 c8             	add    rax,rcx
    ffc8:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ffcb:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
    ffce:	48 63 c9             	movsxd rcx,ecx
    ffd1:	48 c1 e1 02          	shl    rcx,0x2
    ffd5:	48 01 c8             	add    rax,rcx
    ffd8:	8b 00                	mov    eax,DWORD PTR [rax]
    ffda:	29 c2                	sub    edx,eax
    ffdc:	89 d0                	mov    eax,edx
    ffde:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    ffe1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    ffe4:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
    ffec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fff0:	48 01 d0             	add    rax,rdx
    fff3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fff6:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    fff9:	48 63 d2             	movsxd rdx,edx
    fffc:	48 c1 e2 02          	shl    rdx,0x2
   10000:	48 01 d0             	add    rax,rdx
   10003:	8b 00                	mov    eax,DWORD PTR [rax]
   10005:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   10008:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
   1000f:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   10013:	74 31                	je     10046 <sc_default_f5_split_in_ext_stem1_comparative+0x140>
   10015:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   10018:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   10020:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   10024:	48 01 d0             	add    rax,rdx
   10027:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1002a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   1002d:	48 c1 e2 03          	shl    rdx,0x3
   10031:	48 01 d0             	add    rax,rdx
   10034:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10037:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   1003a:	48 c1 e2 02          	shl    rdx,0x2
   1003e:	48 01 d0             	add    rax,rdx
   10041:	8b 00                	mov    eax,DWORD PTR [rax]
   10043:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   10046:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   10049:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   10051:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   10055:	48 01 d0             	add    rax,rdx
   10058:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1005b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   1005e:	48 c1 e2 03          	shl    rdx,0x3
   10062:	48 01 d0             	add    rax,rdx
   10065:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10068:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   1006b:	48 c1 e2 02          	shl    rdx,0x2
   1006f:	48 01 d0             	add    rax,rdx
   10072:	8b 00                	mov    eax,DWORD PTR [rax]
   10074:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   10077:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   1007b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1007f:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   10082:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
   10085:	0f 82 bb fe ff ff    	jb     ff46 <sc_default_f5_split_in_ext_stem1_comparative+0x40>
   1008b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1008e:	5d                   	pop    rbp
   1008f:	c3                   	ret    

0000000000010090 <sc_default_f3_split_in_stem_ext1_comparative>:
   10090:	f3 0f 1e fa          	endbr64 
   10094:	55                   	push   rbp
   10095:	48 89 e5             	mov    rbp,rsp
   10098:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
   1009b:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
   1009e:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
   100a1:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
   100a5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   100a9:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   100ad:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   100b1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   100b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   100bc:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
   100c0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   100c4:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   100cb:	e9 35 01 00 00       	jmp    10205 <sc_default_f3_split_in_stem_ext1_comparative+0x175>
   100d0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   100d3:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   100db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   100df:	48 01 d0             	add    rax,rdx
   100e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   100e5:	48 85 c0             	test   rax,rax
   100e8:	0f 84 13 01 00 00    	je     10201 <sc_default_f3_split_in_stem_ext1_comparative+0x171>
   100ee:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   100f1:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   100f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   100fd:	48 01 d0             	add    rax,rdx
   10100:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10103:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
   10106:	48 63 d2             	movsxd rdx,edx
   10109:	48 c1 e2 02          	shl    rdx,0x2
   1010d:	48 01 d0             	add    rax,rdx
   10110:	8b 00                	mov    eax,DWORD PTR [rax]
   10112:	83 c0 01             	add    eax,0x1
   10115:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   10118:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1011b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   10123:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10127:	48 01 d0             	add    rax,rdx
   1012a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1012d:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   10130:	48 63 d2             	movsxd rdx,edx
   10133:	48 c1 e2 02          	shl    rdx,0x2
   10137:	48 83 ea 04          	sub    rdx,0x4
   1013b:	48 01 d0             	add    rax,rdx
   1013e:	8b 10                	mov    edx,DWORD PTR [rax]
   10140:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   10143:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   1014b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1014f:	48 01 c8             	add    rax,rcx
   10152:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10155:	8b 4d c8             	mov    ecx,DWORD PTR [rbp-0x38]
   10158:	48 63 c9             	movsxd rcx,ecx
   1015b:	48 c1 e1 02          	shl    rcx,0x2
   1015f:	48 01 c8             	add    rax,rcx
   10162:	8b 00                	mov    eax,DWORD PTR [rax]
   10164:	29 c2                	sub    edx,eax
   10166:	89 d0                	mov    eax,edx
   10168:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1016b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1016e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   10176:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1017a:	48 01 d0             	add    rax,rdx
   1017d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10180:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   10183:	48 63 d2             	movsxd rdx,edx
   10186:	48 c1 e2 02          	shl    rdx,0x2
   1018a:	48 01 d0             	add    rax,rdx
   1018d:	8b 00                	mov    eax,DWORD PTR [rax]
   1018f:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   10192:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
   10199:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   1019d:	74 31                	je     101d0 <sc_default_f3_split_in_stem_ext1_comparative+0x140>
   1019f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   101a2:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   101aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   101ae:	48 01 d0             	add    rax,rdx
   101b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   101b4:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   101b7:	48 c1 e2 03          	shl    rdx,0x3
   101bb:	48 01 d0             	add    rax,rdx
   101be:	48 8b 00             	mov    rax,QWORD PTR [rax]
   101c1:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   101c4:	48 c1 e2 02          	shl    rdx,0x2
   101c8:	48 01 d0             	add    rax,rdx
   101cb:	8b 00                	mov    eax,DWORD PTR [rax]
   101cd:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   101d0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   101d3:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   101db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   101df:	48 01 d0             	add    rax,rdx
   101e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   101e5:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   101e8:	48 c1 e2 03          	shl    rdx,0x3
   101ec:	48 01 d0             	add    rax,rdx
   101ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
   101f2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   101f5:	48 c1 e2 02          	shl    rdx,0x2
   101f9:	48 01 d0             	add    rax,rdx
   101fc:	8b 00                	mov    eax,DWORD PTR [rax]
   101fe:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   10201:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   10205:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   10209:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
   1020c:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
   1020f:	0f 82 bb fe ff ff    	jb     100d0 <sc_default_f3_split_in_stem_ext1_comparative+0x40>
   10215:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   10218:	5d                   	pop    rbp
   10219:	c3                   	ret    

000000000001021a <sc_user_f5_split_in_ext_stem1>:
   1021a:	f3 0f 1e fa          	endbr64 
   1021e:	55                   	push   rbp
   1021f:	48 89 e5             	mov    rbp,rsp
   10222:	48 83 ec 20          	sub    rsp,0x20
   10226:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   10229:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   1022c:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   1022f:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
   10233:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10237:	4c 8b 50 28          	mov    r10,QWORD PTR [rax+0x28]
   1023b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1023f:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
   10243:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
   10246:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   10249:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1024c:	49 89 f1             	mov    r9,rsi
   1024f:	41 b8 13 00 00 00    	mov    r8d,0x13
   10255:	89 c6                	mov    esi,eax
   10257:	bf 01 00 00 00       	mov    edi,0x1
   1025c:	41 ff d2             	call   r10
   1025f:	c9                   	leave  
   10260:	c3                   	ret    

0000000000010261 <sc_user_f3_split_in_stem_ext1>:
   10261:	f3 0f 1e fa          	endbr64 
   10265:	55                   	push   rbp
   10266:	48 89 e5             	mov    rbp,rsp
   10269:	48 83 ec 20          	sub    rsp,0x20
   1026d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   10270:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   10273:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   10276:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
   1027a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1027e:	4c 8b 50 30          	mov    r10,QWORD PTR [rax+0x30]
   10282:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10286:	48 8b 70 38          	mov    rsi,QWORD PTR [rax+0x38]
   1028a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1028e:	8b 00                	mov    eax,DWORD PTR [rax]
   10290:	89 c7                	mov    edi,eax
   10292:	8b 4d f4             	mov    ecx,DWORD PTR [rbp-0xc]
   10295:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   10298:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1029b:	49 89 f1             	mov    r9,rsi
   1029e:	41 b8 14 00 00 00    	mov    r8d,0x14
   102a4:	89 fe                	mov    esi,edi
   102a6:	89 c7                	mov    edi,eax
   102a8:	41 ff d2             	call   r10
   102ab:	c9                   	leave  
   102ac:	c3                   	ret    

00000000000102ad <sc_user_f5_split_in_ext_stem1_comparative>:
   102ad:	f3 0f 1e fa          	endbr64 
   102b1:	55                   	push   rbp
   102b2:	48 89 e5             	mov    rbp,rsp
   102b5:	48 83 ec 30          	sub    rsp,0x30
   102b9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   102bc:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   102bf:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   102c2:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   102c6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   102cd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   102d4:	eb 67                	jmp    1033d <sc_user_f5_split_in_ext_stem1_comparative+0x90>
   102d6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   102da:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   102de:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   102e1:	48 c1 e2 03          	shl    rdx,0x3
   102e5:	48 01 d0             	add    rax,rdx
   102e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   102eb:	48 85 c0             	test   rax,rax
   102ee:	74 49                	je     10339 <sc_user_f5_split_in_ext_stem1_comparative+0x8c>
   102f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   102f4:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   102f8:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   102fb:	48 c1 e2 03          	shl    rdx,0x3
   102ff:	48 01 d0             	add    rax,rdx
   10302:	4c 8b 10             	mov    r10,QWORD PTR [rax]
   10305:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   10309:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
   1030d:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   10310:	48 c1 e2 03          	shl    rdx,0x3
   10314:	48 01 d0             	add    rax,rdx
   10317:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   1031a:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   1031d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   10320:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   10323:	49 89 f1             	mov    r9,rsi
   10326:	41 b8 13 00 00 00    	mov    r8d,0x13
   1032c:	89 c6                	mov    esi,eax
   1032e:	bf 01 00 00 00       	mov    edi,0x1
   10333:	41 ff d2             	call   r10
   10336:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   10339:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   1033d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   10341:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   10344:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   10347:	72 8d                	jb     102d6 <sc_user_f5_split_in_ext_stem1_comparative+0x29>
   10349:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1034c:	c9                   	leave  
   1034d:	c3                   	ret    

000000000001034e <sc_user_f3_split_in_stem_ext1_comparative>:
   1034e:	f3 0f 1e fa          	endbr64 
   10352:	55                   	push   rbp
   10353:	48 89 e5             	mov    rbp,rsp
   10356:	48 83 ec 30          	sub    rsp,0x30
   1035a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   1035d:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   10360:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   10363:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   10367:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1036e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   10375:	eb 6c                	jmp    103e3 <sc_user_f3_split_in_stem_ext1_comparative+0x95>
   10377:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1037b:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
   1037f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   10382:	48 c1 e2 03          	shl    rdx,0x3
   10386:	48 01 d0             	add    rax,rdx
   10389:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1038c:	48 85 c0             	test   rax,rax
   1038f:	74 4e                	je     103df <sc_user_f3_split_in_stem_ext1_comparative+0x91>
   10391:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   10395:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
   10399:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   1039c:	48 c1 e2 03          	shl    rdx,0x3
   103a0:	48 01 d0             	add    rax,rdx
   103a3:	4c 8b 10             	mov    r10,QWORD PTR [rax]
   103a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   103aa:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   103ae:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   103b1:	48 c1 e2 03          	shl    rdx,0x3
   103b5:	48 01 d0             	add    rax,rdx
   103b8:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   103bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   103bf:	8b 00                	mov    eax,DWORD PTR [rax]
   103c1:	89 c7                	mov    edi,eax
   103c3:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   103c6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   103c9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   103cc:	49 89 f1             	mov    r9,rsi
   103cf:	41 b8 14 00 00 00    	mov    r8d,0x14
   103d5:	89 fe                	mov    esi,edi
   103d7:	89 c7                	mov    edi,eax
   103d9:	41 ff d2             	call   r10
   103dc:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   103df:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   103e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   103e7:	8b 40 40             	mov    eax,DWORD PTR [rax+0x40]
   103ea:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   103ed:	72 88                	jb     10377 <sc_user_f3_split_in_stem_ext1_comparative+0x29>
   103ef:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   103f2:	c9                   	leave  
   103f3:	c3                   	ret    

00000000000103f4 <sc_user_def_f5_split_in_ext_stem1>:
   103f4:	f3 0f 1e fa          	endbr64 
   103f8:	55                   	push   rbp
   103f9:	48 89 e5             	mov    rbp,rsp
   103fc:	53                   	push   rbx
   103fd:	48 83 ec 28          	sub    rsp,0x28
   10401:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   10404:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   10407:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   1040a:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   1040e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   10412:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   10415:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   10418:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1041b:	89 c7                	mov    edi,eax
   1041d:	e8 ab f9 ff ff       	call   fdcd <sc_default_f5_split_in_ext_stem1>
   10422:	89 c3                	mov    ebx,eax
   10424:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   10428:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   1042b:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   1042e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   10431:	89 c7                	mov    edi,eax
   10433:	e8 e2 fd ff ff       	call   1021a <sc_user_f5_split_in_ext_stem1>
   10438:	01 d8                	add    eax,ebx
   1043a:	48 83 c4 28          	add    rsp,0x28
   1043e:	5b                   	pop    rbx
   1043f:	5d                   	pop    rbp
   10440:	c3                   	ret    

0000000000010441 <sc_user_def_f3_split_in_stem_ext1>:
   10441:	f3 0f 1e fa          	endbr64 
   10445:	55                   	push   rbp
   10446:	48 89 e5             	mov    rbp,rsp
   10449:	53                   	push   rbx
   1044a:	48 83 ec 28          	sub    rsp,0x28
   1044e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   10451:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   10454:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   10457:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   1045b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   1045f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   10462:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   10465:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   10468:	89 c7                	mov    edi,eax
   1046a:	e8 fa f9 ff ff       	call   fe69 <sc_default_f3_split_in_stem_ext1>
   1046f:	89 c3                	mov    ebx,eax
   10471:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   10475:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   10478:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   1047b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1047e:	89 c7                	mov    edi,eax
   10480:	e8 dc fd ff ff       	call   10261 <sc_user_f3_split_in_stem_ext1>
   10485:	01 d8                	add    eax,ebx
   10487:	48 83 c4 28          	add    rsp,0x28
   1048b:	5b                   	pop    rbx
   1048c:	5d                   	pop    rbp
   1048d:	c3                   	ret    

000000000001048e <sc_user_def_f5_split_in_ext_stem1_comparative>:
   1048e:	f3 0f 1e fa          	endbr64 
   10492:	55                   	push   rbp
   10493:	48 89 e5             	mov    rbp,rsp
   10496:	53                   	push   rbx
   10497:	48 83 ec 28          	sub    rsp,0x28
   1049b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   1049e:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   104a1:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   104a4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   104a8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   104ac:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   104af:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   104b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   104b5:	89 c7                	mov    edi,eax
   104b7:	e8 4a fa ff ff       	call   ff06 <sc_default_f5_split_in_ext_stem1_comparative>
   104bc:	89 c3                	mov    ebx,eax
   104be:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   104c2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   104c5:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   104c8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   104cb:	89 c7                	mov    edi,eax
   104cd:	e8 db fd ff ff       	call   102ad <sc_user_f5_split_in_ext_stem1_comparative>
   104d2:	01 d8                	add    eax,ebx
   104d4:	48 83 c4 28          	add    rsp,0x28
   104d8:	5b                   	pop    rbx
   104d9:	5d                   	pop    rbp
   104da:	c3                   	ret    

00000000000104db <sc_user_def_f3_split_in_stem_ext1_comparative>:
   104db:	f3 0f 1e fa          	endbr64 
   104df:	55                   	push   rbp
   104e0:	48 89 e5             	mov    rbp,rsp
   104e3:	53                   	push   rbx
   104e4:	48 83 ec 28          	sub    rsp,0x28
   104e8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   104eb:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   104ee:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   104f1:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   104f5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   104f9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   104fc:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   104ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   10502:	89 c7                	mov    edi,eax
   10504:	e8 87 fb ff ff       	call   10090 <sc_default_f3_split_in_stem_ext1_comparative>
   10509:	89 c3                	mov    ebx,eax
   1050b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   1050f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   10512:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   10515:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   10518:	89 c7                	mov    edi,eax
   1051a:	e8 2f fe ff ff       	call   1034e <sc_user_f3_split_in_stem_ext1_comparative>
   1051f:	01 d8                	add    eax,ebx
   10521:	48 83 c4 28          	add    rsp,0x28
   10525:	5b                   	pop    rbx
   10526:	5d                   	pop    rbp
   10527:	c3                   	ret    

0000000000010528 <vrna_E_ext_loop_5>:
   10528:	f3 0f 1e fa          	endbr64 
   1052c:	55                   	push   rbp
   1052d:	48 89 e5             	mov    rbp,rsp
   10530:	53                   	push   rbx
   10531:	48 81 ec 08 01 00 00 	sub    rsp,0x108
   10538:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
   1053f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   10548:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1054c:	31 c0                	xor    eax,eax
   1054e:	48 83 bd f8 fe ff ff 00 	cmp    QWORD PTR [rbp-0x108],0x0
   10556:	0f 84 4d 08 00 00    	je     10da9 <vrna_E_ext_loop_5+0x881>
   1055c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10563:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   10566:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
   1056c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10573:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   10577:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1057b:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
   10582:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10589:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   1058d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
   10594:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   1059b:	8b 80 ac 35 03 00    	mov    eax,DWORD PTR [rax+0x335ac]
   105a1:	89 85 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],eax
   105a7:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   105ae:	8b 80 c8 35 03 00    	mov    eax,DWORD PTR [rax+0x335c8]
   105b4:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   105ba:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   105c1:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   105c7:	89 85 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],eax
   105cd:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   105d4:	48 8b 80 a8 00 00 00 	mov    rax,QWORD PTR [rax+0xa8]
   105db:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
   105e2:	48 8d 95 40 ff ff ff 	lea    rdx,[rbp-0xc0]
   105e9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   105f0:	48 89 d6             	mov    rsi,rdx
   105f3:	48 89 c7             	mov    rdi,rax
   105f6:	e8 4f dc ff ff       	call   e24a <prepare_hc_default>
   105fb:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   10602:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   10606:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1060d:	48 89 d6             	mov    rsi,rdx
   10610:	48 89 c7             	mov    rdi,rax
   10613:	e8 87 dd ff ff       	call   e39f <init_sc_wrapper>
   10618:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   1061f:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   10625:	c7 85 08 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x1
   1062f:	eb 4e                	jmp    1067f <vrna_E_ext_loop_5+0x157>
   10631:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10637:	48 98                	cdqe   
   10639:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10641:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10648:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1064c:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   10650:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   10657:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   1065e:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   10664:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1066b:	49 89 f8             	mov    r8,rdi
   1066e:	48 89 c7             	mov    rdi,rax
   10671:	e8 4b 16 00 00       	call   11cc1 <reduce_f5_up>
   10676:	89 03                	mov    DWORD PTR [rbx],eax
   10678:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   1067f:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   10685:	83 c0 01             	add    eax,0x1
   10688:	39 85 08 ff ff ff    	cmp    DWORD PTR [rbp-0xf8],eax
   1068e:	7e a1                	jle    10631 <vrna_E_ext_loop_5+0x109>
   10690:	48 83 bd 30 ff ff ff 00 	cmp    QWORD PTR [rbp-0xd0],0x0
   10698:	0f 84 b9 00 00 00    	je     10757 <vrna_E_ext_loop_5+0x22f>
   1069e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   106a5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   106a9:	48 85 c0             	test   rax,rax
   106ac:	0f 84 a5 00 00 00    	je     10757 <vrna_E_ext_loop_5+0x22f>
   106b2:	c7 85 08 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x1
   106bc:	e9 81 00 00 00       	jmp    10742 <vrna_E_ext_loop_5+0x21a>
   106c1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   106c8:	4c 8b 40 08          	mov    r8,QWORD PTR [rax+0x8]
   106cc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   106d3:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
   106d7:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   106dd:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   106e4:	be 01 00 00 00       	mov    esi,0x1
   106e9:	48 89 c7             	mov    rdi,rax
   106ec:	41 ff d0             	call   r8
   106ef:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   106f5:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   106fb:	48 98                	cdqe   
   106fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10705:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   1070c:	48 01 d0             	add    rax,rdx
   1070f:	8b 00                	mov    eax,DWORD PTR [rax]
   10711:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10717:	48 63 d2             	movsxd rdx,edx
   1071a:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10722:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10729:	48 01 ca             	add    rdx,rcx
   1072c:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10732:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10739:	89 02                	mov    DWORD PTR [rdx],eax
   1073b:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   10742:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   10748:	83 c0 01             	add    eax,0x1
   1074b:	39 85 08 ff ff ff    	cmp    DWORD PTR [rbp-0xf8],eax
   10751:	0f 8e 6a ff ff ff    	jle    106c1 <vrna_E_ext_loop_5+0x199>
   10757:	83 bd 10 ff ff ff 00 	cmp    DWORD PTR [rbp-0xf0],0x0
   1075e:	0f 84 13 02 00 00    	je     10977 <vrna_E_ext_loop_5+0x44f>
   10764:	83 bd 10 ff ff ff 02 	cmp    DWORD PTR [rbp-0xf0],0x2
   1076b:	0f 85 0c 04 00 00    	jne    10b7d <vrna_E_ext_loop_5+0x655>
   10771:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   10777:	83 c0 02             	add    eax,0x2
   1077a:	89 85 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],eax
   10780:	e9 db 01 00 00       	jmp    10960 <vrna_E_ext_loop_5+0x438>
   10785:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   1078b:	48 98                	cdqe   
   1078d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10795:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   1079c:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   107a0:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   107a4:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   107ab:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   107b2:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   107b8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   107bf:	49 89 f8             	mov    r8,rdi
   107c2:	48 89 c7             	mov    rdi,rax
   107c5:	e8 f7 14 00 00       	call   11cc1 <reduce_f5_up>
   107ca:	89 03                	mov    DWORD PTR [rbx],eax
   107cc:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   107d0:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   107d7:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   107de:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   107e4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   107eb:	49 89 f8             	mov    r8,rdi
   107ee:	48 89 c7             	mov    rdi,rax
   107f1:	e8 c2 0e 00 00       	call   116b8 <decompose_f5_ext_stem_d2>
   107f6:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   107fc:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10802:	48 98                	cdqe   
   10804:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1080c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10813:	48 01 d0             	add    rax,rdx
   10816:	8b 00                	mov    eax,DWORD PTR [rax]
   10818:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   1081e:	48 63 d2             	movsxd rdx,edx
   10821:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10829:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10830:	48 01 ca             	add    rdx,rcx
   10833:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10839:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10840:	89 02                	mov    DWORD PTR [rdx],eax
   10842:	83 bd 14 ff ff ff 00 	cmp    DWORD PTR [rbp-0xec],0x0
   10849:	74 76                	je     108c1 <vrna_E_ext_loop_5+0x399>
   1084b:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   1084f:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   10856:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   1085d:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   10863:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1086a:	49 89 f8             	mov    r8,rdi
   1086d:	48 89 c7             	mov    rdi,rax
   10870:	e8 68 7e 00 00       	call   186dd <add_f5_gquad>
   10875:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   1087b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10881:	48 98                	cdqe   
   10883:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1088b:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10892:	48 01 d0             	add    rax,rdx
   10895:	8b 00                	mov    eax,DWORD PTR [rax]
   10897:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   1089d:	48 63 d2             	movsxd rdx,edx
   108a0:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   108a8:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   108af:	48 01 ca             	add    rdx,rcx
   108b2:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   108b8:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   108bf:	89 02                	mov    DWORD PTR [rdx],eax
   108c1:	48 83 bd 30 ff ff ff 00 	cmp    QWORD PTR [rbp-0xd0],0x0
   108c9:	0f 84 8a 00 00 00    	je     10959 <vrna_E_ext_loop_5+0x431>
   108cf:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   108d6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   108da:	48 85 c0             	test   rax,rax
   108dd:	74 7a                	je     10959 <vrna_E_ext_loop_5+0x431>
   108df:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   108e6:	4c 8b 40 08          	mov    r8,QWORD PTR [rax+0x8]
   108ea:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   108f1:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
   108f5:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   108fb:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10902:	be 01 00 00 00       	mov    esi,0x1
   10907:	48 89 c7             	mov    rdi,rax
   1090a:	41 ff d0             	call   r8
   1090d:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10913:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10919:	48 98                	cdqe   
   1091b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10923:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   1092a:	48 01 d0             	add    rax,rdx
   1092d:	8b 00                	mov    eax,DWORD PTR [rax]
   1092f:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10935:	48 63 d2             	movsxd rdx,edx
   10938:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10940:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10947:	48 01 ca             	add    rdx,rcx
   1094a:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10950:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10957:	89 02                	mov    DWORD PTR [rdx],eax
   10959:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   10960:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10966:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
   1096c:	0f 8e 13 fe ff ff    	jle    10785 <vrna_E_ext_loop_5+0x25d>
   10972:	e9 08 04 00 00       	jmp    10d7f <vrna_E_ext_loop_5+0x857>
   10977:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   1097d:	83 c0 02             	add    eax,0x2
   10980:	89 85 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],eax
   10986:	e9 db 01 00 00       	jmp    10b66 <vrna_E_ext_loop_5+0x63e>
   1098b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10991:	48 98                	cdqe   
   10993:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1099b:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   109a2:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   109a6:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   109aa:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   109b1:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   109b8:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   109be:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   109c5:	49 89 f8             	mov    r8,rdi
   109c8:	48 89 c7             	mov    rdi,rax
   109cb:	e8 f1 12 00 00       	call   11cc1 <reduce_f5_up>
   109d0:	89 03                	mov    DWORD PTR [rbx],eax
   109d2:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   109d6:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   109dd:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   109e4:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   109ea:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   109f1:	49 89 f8             	mov    r8,rdi
   109f4:	48 89 c7             	mov    rdi,rax
   109f7:	e8 6e 0b 00 00       	call   1156a <decompose_f5_ext_stem_d0>
   109fc:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10a02:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10a08:	48 98                	cdqe   
   10a0a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10a12:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10a19:	48 01 d0             	add    rax,rdx
   10a1c:	8b 00                	mov    eax,DWORD PTR [rax]
   10a1e:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10a24:	48 63 d2             	movsxd rdx,edx
   10a27:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10a2f:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10a36:	48 01 ca             	add    rdx,rcx
   10a39:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10a3f:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10a46:	89 02                	mov    DWORD PTR [rdx],eax
   10a48:	83 bd 14 ff ff ff 00 	cmp    DWORD PTR [rbp-0xec],0x0
   10a4f:	74 76                	je     10ac7 <vrna_E_ext_loop_5+0x59f>
   10a51:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   10a55:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   10a5c:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   10a63:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   10a69:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10a70:	49 89 f8             	mov    r8,rdi
   10a73:	48 89 c7             	mov    rdi,rax
   10a76:	e8 62 7c 00 00       	call   186dd <add_f5_gquad>
   10a7b:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10a81:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10a87:	48 98                	cdqe   
   10a89:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10a91:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10a98:	48 01 d0             	add    rax,rdx
   10a9b:	8b 00                	mov    eax,DWORD PTR [rax]
   10a9d:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10aa3:	48 63 d2             	movsxd rdx,edx
   10aa6:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10aae:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10ab5:	48 01 ca             	add    rdx,rcx
   10ab8:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10abe:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10ac5:	89 02                	mov    DWORD PTR [rdx],eax
   10ac7:	48 83 bd 30 ff ff ff 00 	cmp    QWORD PTR [rbp-0xd0],0x0
   10acf:	0f 84 8a 00 00 00    	je     10b5f <vrna_E_ext_loop_5+0x637>
   10ad5:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   10adc:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   10ae0:	48 85 c0             	test   rax,rax
   10ae3:	74 7a                	je     10b5f <vrna_E_ext_loop_5+0x637>
   10ae5:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   10aec:	4c 8b 40 08          	mov    r8,QWORD PTR [rax+0x8]
   10af0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   10af7:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
   10afb:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10b01:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10b08:	be 01 00 00 00       	mov    esi,0x1
   10b0d:	48 89 c7             	mov    rdi,rax
   10b10:	41 ff d0             	call   r8
   10b13:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10b19:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10b1f:	48 98                	cdqe   
   10b21:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10b29:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10b30:	48 01 d0             	add    rax,rdx
   10b33:	8b 00                	mov    eax,DWORD PTR [rax]
   10b35:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10b3b:	48 63 d2             	movsxd rdx,edx
   10b3e:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10b46:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10b4d:	48 01 ca             	add    rdx,rcx
   10b50:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10b56:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10b5d:	89 02                	mov    DWORD PTR [rdx],eax
   10b5f:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   10b66:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10b6c:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
   10b72:	0f 8e 13 fe ff ff    	jle    1098b <vrna_E_ext_loop_5+0x463>
   10b78:	e9 02 02 00 00       	jmp    10d7f <vrna_E_ext_loop_5+0x857>
   10b7d:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   10b83:	83 c0 02             	add    eax,0x2
   10b86:	89 85 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],eax
   10b8c:	e9 db 01 00 00       	jmp    10d6c <vrna_E_ext_loop_5+0x844>
   10b91:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10b97:	48 98                	cdqe   
   10b99:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10ba1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10ba8:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   10bac:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   10bb0:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   10bb7:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   10bbe:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   10bc4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10bcb:	49 89 f8             	mov    r8,rdi
   10bce:	48 89 c7             	mov    rdi,rax
   10bd1:	e8 eb 10 00 00       	call   11cc1 <reduce_f5_up>
   10bd6:	89 03                	mov    DWORD PTR [rbx],eax
   10bd8:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   10bdc:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   10be3:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   10bea:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   10bf0:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10bf7:	49 89 f8             	mov    r8,rdi
   10bfa:	48 89 c7             	mov    rdi,rax
   10bfd:	e8 04 0c 00 00       	call   11806 <decompose_f5_ext_stem_d1>
   10c02:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10c08:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10c0e:	48 98                	cdqe   
   10c10:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10c18:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10c1f:	48 01 d0             	add    rax,rdx
   10c22:	8b 00                	mov    eax,DWORD PTR [rax]
   10c24:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10c2a:	48 63 d2             	movsxd rdx,edx
   10c2d:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10c35:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10c3c:	48 01 ca             	add    rdx,rcx
   10c3f:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10c45:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10c4c:	89 02                	mov    DWORD PTR [rdx],eax
   10c4e:	83 bd 14 ff ff ff 00 	cmp    DWORD PTR [rbp-0xec],0x0
   10c55:	74 76                	je     10ccd <vrna_E_ext_loop_5+0x7a5>
   10c57:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
   10c5b:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   10c62:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   10c69:	8b b5 08 ff ff ff    	mov    esi,DWORD PTR [rbp-0xf8]
   10c6f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10c76:	49 89 f8             	mov    r8,rdi
   10c79:	48 89 c7             	mov    rdi,rax
   10c7c:	e8 5c 7a 00 00       	call   186dd <add_f5_gquad>
   10c81:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10c87:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10c8d:	48 98                	cdqe   
   10c8f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10c97:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10c9e:	48 01 d0             	add    rax,rdx
   10ca1:	8b 00                	mov    eax,DWORD PTR [rax]
   10ca3:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10ca9:	48 63 d2             	movsxd rdx,edx
   10cac:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10cb4:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10cbb:	48 01 ca             	add    rdx,rcx
   10cbe:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10cc4:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10ccb:	89 02                	mov    DWORD PTR [rdx],eax
   10ccd:	48 83 bd 30 ff ff ff 00 	cmp    QWORD PTR [rbp-0xd0],0x0
   10cd5:	0f 84 8a 00 00 00    	je     10d65 <vrna_E_ext_loop_5+0x83d>
   10cdb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   10ce2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   10ce6:	48 85 c0             	test   rax,rax
   10ce9:	74 7a                	je     10d65 <vrna_E_ext_loop_5+0x83d>
   10ceb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   10cf2:	4c 8b 40 08          	mov    r8,QWORD PTR [rax+0x8]
   10cf6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
   10cfd:	48 8b 48 58          	mov    rcx,QWORD PTR [rax+0x58]
   10d01:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10d07:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   10d0e:	be 01 00 00 00       	mov    esi,0x1
   10d13:	48 89 c7             	mov    rdi,rax
   10d16:	41 ff d0             	call   r8
   10d19:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
   10d1f:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10d25:	48 98                	cdqe   
   10d27:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10d2f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10d36:	48 01 d0             	add    rax,rdx
   10d39:	8b 00                	mov    eax,DWORD PTR [rax]
   10d3b:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
   10d41:	48 63 d2             	movsxd rdx,edx
   10d44:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   10d4c:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
   10d53:	48 01 ca             	add    rdx,rcx
   10d56:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   10d5c:	0f 4e 85 1c ff ff ff 	cmovle eax,DWORD PTR [rbp-0xe4]
   10d63:	89 02                	mov    DWORD PTR [rdx],eax
   10d65:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   10d6c:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   10d72:	3b 85 0c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xf4]
   10d78:	0f 8e 13 fe ff ff    	jle    10b91 <vrna_E_ext_loop_5+0x669>
   10d7e:	90                   	nop
   10d7f:	48 8d 45 80          	lea    rax,[rbp-0x80]
   10d83:	48 89 c7             	mov    rdi,rax
   10d86:	e8 8a da ff ff       	call   e815 <free_sc_wrapper>
   10d8b:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   10d91:	48 98                	cdqe   
   10d93:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   10d9b:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
   10da2:	48 01 d0             	add    rax,rdx
   10da5:	8b 00                	mov    eax,DWORD PTR [rax]
   10da7:	eb 05                	jmp    10dae <vrna_E_ext_loop_5+0x886>
   10da9:	b8 80 96 98 00       	mov    eax,0x989680
   10dae:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   10db2:	64 48 33 1c 25 28 00 00 00 	xor    rbx,QWORD PTR fs:0x28
   10dbb:	74 05                	je     10dc2 <vrna_E_ext_loop_5+0x89a>
   10dbd:	e8 2e 2b ff ff       	call   38f0 <__stack_chk_fail@plt>
   10dc2:	48 81 c4 08 01 00 00 	add    rsp,0x108
   10dc9:	5b                   	pop    rbx
   10dca:	5d                   	pop    rbp
   10dcb:	c3                   	ret    

0000000000010dcc <vrna_E_ext_loop_3>:
   10dcc:	f3 0f 1e fa          	endbr64 
   10dd0:	55                   	push   rbp
   10dd1:	48 89 e5             	mov    rbp,rsp
   10dd4:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   10ddb:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   10de2:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
   10de8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   10df1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   10df5:	31 c0                	xor    eax,eax
   10df7:	48 83 bd 18 ff ff ff 00 	cmp    QWORD PTR [rbp-0xe8],0x0
   10dff:	0f 84 1b 02 00 00    	je     11020 <vrna_E_ext_loop_3+0x254>
   10e05:	c7 85 28 ff ff ff 80 96 98 00 	mov    DWORD PTR [rbp-0xd8],0x989680
   10e0f:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10e16:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   10e1a:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   10e21:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   10e28:	48 05 98 35 03 00    	add    rax,0x33598
   10e2e:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   10e35:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   10e3c:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   10e3f:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
   10e45:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   10e4c:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   10e4f:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   10e55:	48 8d 95 50 ff ff ff 	lea    rdx,[rbp-0xb0]
   10e5c:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10e63:	48 89 d6             	mov    rsi,rdx
   10e66:	48 89 c7             	mov    rdi,rax
   10e69:	e8 a2 d4 ff ff       	call   e310 <prepare_hc_default_window>
   10e6e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   10e75:	48 8d 55 90          	lea    rdx,[rbp-0x70]
   10e79:	8b 8d 14 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xec]
   10e7f:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10e86:	89 ce                	mov    esi,ecx
   10e88:	48 89 c7             	mov    rdi,rax
   10e8b:	e8 c4 d9 ff ff       	call   e854 <init_sc_wrapper_f3>
   10e90:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
   10e94:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
   10e9b:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   10ea2:	8b b5 14 ff ff ff    	mov    esi,DWORD PTR [rbp-0xec]
   10ea8:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10eaf:	49 89 f8             	mov    r8,rdi
   10eb2:	48 89 c7             	mov    rdi,rax
   10eb5:	e8 2a 10 00 00       	call   11ee4 <reduce_f3_up>
   10eba:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
   10ec0:	83 bd 2c ff ff ff 00 	cmp    DWORD PTR [rbp-0xd4],0x0
   10ec7:	74 0e                	je     10ed7 <vrna_E_ext_loop_3+0x10b>
   10ec9:	83 bd 2c ff ff ff 02 	cmp    DWORD PTR [rbp-0xd4],0x2
   10ed0:	74 53                	je     10f25 <vrna_E_ext_loop_3+0x159>
   10ed2:	e9 99 00 00 00       	jmp    10f70 <vrna_E_ext_loop_3+0x1a4>
   10ed7:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
   10edb:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
   10ee2:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   10ee9:	8b b5 14 ff ff ff    	mov    esi,DWORD PTR [rbp-0xec]
   10eef:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10ef6:	49 89 f8             	mov    r8,rdi
   10ef9:	48 89 c7             	mov    rdi,rax
   10efc:	e8 e3 06 00 00       	call   115e4 <decompose_f3_ext_stem_d0>
   10f01:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
   10f07:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   10f0d:	39 85 34 ff ff ff    	cmp    DWORD PTR [rbp-0xcc],eax
   10f13:	0f 4e 85 34 ff ff ff 	cmovle eax,DWORD PTR [rbp-0xcc]
   10f1a:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
   10f20:	e9 95 00 00 00       	jmp    10fba <vrna_E_ext_loop_3+0x1ee>
   10f25:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
   10f29:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
   10f30:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   10f37:	8b b5 14 ff ff ff    	mov    esi,DWORD PTR [rbp-0xec]
   10f3d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10f44:	49 89 f8             	mov    r8,rdi
   10f47:	48 89 c7             	mov    rdi,rax
   10f4a:	e8 e3 07 00 00       	call   11732 <decompose_f3_ext_stem_d2>
   10f4f:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
   10f55:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   10f5b:	39 85 34 ff ff ff    	cmp    DWORD PTR [rbp-0xcc],eax
   10f61:	0f 4e 85 34 ff ff ff 	cmovle eax,DWORD PTR [rbp-0xcc]
   10f68:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
   10f6e:	eb 4a                	jmp    10fba <vrna_E_ext_loop_3+0x1ee>
   10f70:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
   10f74:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
   10f7b:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   10f82:	8b b5 14 ff ff ff    	mov    esi,DWORD PTR [rbp-0xec]
   10f88:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10f8f:	49 89 f8             	mov    r8,rdi
   10f92:	48 89 c7             	mov    rdi,rax
   10f95:	e8 2f 0a 00 00       	call   119c9 <decompose_f3_ext_stem_d1>
   10f9a:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
   10fa0:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   10fa6:	39 85 34 ff ff ff    	cmp    DWORD PTR [rbp-0xcc],eax
   10fac:	0f 4e 85 34 ff ff ff 	cmovle eax,DWORD PTR [rbp-0xcc]
   10fb3:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
   10fb9:	90                   	nop
   10fba:	83 bd 30 ff ff ff 00 	cmp    DWORD PTR [rbp-0xd0],0x0
   10fc1:	74 49                	je     1100c <vrna_E_ext_loop_3+0x240>
   10fc3:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
   10fc7:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
   10fce:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   10fd5:	8b b5 14 ff ff ff    	mov    esi,DWORD PTR [rbp-0xec]
   10fdb:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   10fe2:	49 89 f8             	mov    r8,rdi
   10fe5:	48 89 c7             	mov    rdi,rax
   10fe8:	e8 3e 78 00 00       	call   1882b <add_f3_gquad>
   10fed:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
   10ff3:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   10ff9:	39 85 34 ff ff ff    	cmp    DWORD PTR [rbp-0xcc],eax
   10fff:	0f 4e 85 34 ff ff ff 	cmovle eax,DWORD PTR [rbp-0xcc]
   11006:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
   1100c:	48 8d 45 90          	lea    rax,[rbp-0x70]
   11010:	48 89 c7             	mov    rdi,rax
   11013:	e8 c4 dc ff ff       	call   ecdc <free_sc_wrapper_f3>
   11018:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   1101e:	eb 05                	jmp    11025 <vrna_E_ext_loop_3+0x259>
   11020:	b8 80 96 98 00       	mov    eax,0x989680
   11025:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   11029:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   11032:	74 05                	je     11039 <vrna_E_ext_loop_3+0x26d>
   11034:	e8 b7 28 ff ff       	call   38f0 <__stack_chk_fail@plt>
   11039:	c9                   	leave  
   1103a:	c3                   	ret    

000000000001103b <vrna_E_ext_stem>:
   1103b:	f3 0f 1e fa          	endbr64 
   1103f:	55                   	push   rbp
   11040:	48 89 e5             	mov    rbp,rsp
   11043:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   11046:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   11049:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   1104c:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   11050:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   11057:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   1105b:	78 4d                	js     110aa <vrna_E_ext_stem+0x6f>
   1105d:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   11061:	78 47                	js     110aa <vrna_E_ext_stem+0x6f>
   11063:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
   11067:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1106a:	48 63 f8             	movsxd rdi,eax
   1106d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   11070:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   11073:	48 63 c8             	movsxd rcx,eax
   11076:	48 89 d0             	mov    rax,rdx
   11079:	48 c1 e0 02          	shl    rax,0x2
   1107d:	48 01 d0             	add    rax,rdx
   11080:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11088:	48 01 d0             	add    rax,rdx
   1108b:	48 89 ca             	mov    rdx,rcx
   1108e:	48 c1 e2 02          	shl    rdx,0x2
   11092:	48 01 ca             	add    rdx,rcx
   11095:	48 01 d0             	add    rax,rdx
   11098:	48 01 f8             	add    rax,rdi
   1109b:	48 05 9c 00 00 00    	add    rax,0x9c
   110a1:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
   110a5:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   110a8:	eb 5c                	jmp    11106 <vrna_E_ext_stem+0xcb>
   110aa:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   110ae:	78 29                	js     110d9 <vrna_E_ext_stem+0x9e>
   110b0:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   110b4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   110b7:	48 63 f0             	movsxd rsi,eax
   110ba:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   110bd:	48 89 d0             	mov    rax,rdx
   110c0:	48 c1 e0 02          	shl    rax,0x2
   110c4:	48 01 d0             	add    rax,rdx
   110c7:	48 01 f0             	add    rax,rsi
   110ca:	48 05 4c 05 00 00    	add    rax,0x54c
   110d0:	8b 44 81 08          	mov    eax,DWORD PTR [rcx+rax*4+0x8]
   110d4:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   110d7:	eb 2d                	jmp    11106 <vrna_E_ext_stem+0xcb>
   110d9:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   110dd:	78 27                	js     11106 <vrna_E_ext_stem+0xcb>
   110df:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   110e3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   110e6:	48 63 f0             	movsxd rsi,eax
   110e9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   110ec:	48 89 d0             	mov    rax,rdx
   110ef:	48 c1 e0 02          	shl    rax,0x2
   110f3:	48 01 d0             	add    rax,rdx
   110f6:	48 01 f0             	add    rax,rsi
   110f9:	48 05 74 05 00 00    	add    rax,0x574
   110ff:	8b 44 81 08          	mov    eax,DWORD PTR [rcx+rax*4+0x8]
   11103:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   11106:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
   1110a:	76 0d                	jbe    11119 <vrna_E_ext_stem+0xde>
   1110c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11110:	8b 80 d4 1d 03 00    	mov    eax,DWORD PTR [rax+0x31dd4]
   11116:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   11119:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1111c:	5d                   	pop    rbp
   1111d:	c3                   	ret    

000000000001111e <vrna_E_ext_loop>:
   1111e:	f3 0f 1e fa          	endbr64 
   11122:	55                   	push   rbp
   11123:	48 89 e5             	mov    rbp,rsp
   11126:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
   1112d:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
   11134:	89 b5 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],esi
   1113a:	89 95 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],edx
   11140:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   11149:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1114d:	31 c0                	xor    eax,eax
   1114f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   11156:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   1115d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   11161:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   11168:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   1116c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   11170:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   11177:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   1117e:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   11182:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   11189:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   1118d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   11191:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   11195:	48 05 98 35 03 00    	add    rax,0x33598
   1119b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   1119f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   111a6:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   111ad:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   111b1:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   111b5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   111bc:	48 89 d6             	mov    rsi,rdx
   111bf:	48 89 c7             	mov    rdi,rax
   111c2:	e8 83 d0 ff ff       	call   e24a <prepare_hc_default>
   111c7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   111cb:	c7 85 7c ff ff ff 80 96 98 00 	mov    DWORD PTR [rbp-0x84],0x989680
   111d5:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   111db:	48 98                	cdqe   
   111dd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   111e5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   111e9:	48 01 d0             	add    rax,rdx
   111ec:	8b 10                	mov    edx,DWORD PTR [rax]
   111ee:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   111f4:	01 d0                	add    eax,edx
   111f6:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   111f9:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   111fd:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   11200:	48 89 d6             	mov    rsi,rdx
   11203:	89 c7                	mov    edi,eax
   11205:	e8 81 f7 01 00       	call   3098b <vrna_get_ptype>
   1120a:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   1120d:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
   11211:	8b 8d 60 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa0]
   11217:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   1121d:	8b b5 60 ff ff ff    	mov    esi,DWORD PTR [rbp-0xa0]
   11223:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11229:	4c 8b 55 b8          	mov    r10,QWORD PTR [rbp-0x48]
   1122d:	49 89 f9             	mov    r9,rdi
   11230:	41 b8 0e 00 00 00    	mov    r8d,0xe
   11236:	89 c7                	mov    edi,eax
   11238:	41 ff d2             	call   r10
   1123b:	84 c0                	test   al,al
   1123d:	0f 84 cd 00 00 00    	je     11310 <vrna_E_ext_loop+0x1f2>
   11243:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   11247:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   1124a:	83 f8 02             	cmp    eax,0x2
   1124d:	75 4f                	jne    1129e <vrna_E_ext_loop+0x180>
   1124f:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   11255:	48 98                	cdqe   
   11257:	48 83 c0 01          	add    rax,0x1
   1125b:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1125f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   11263:	48 01 d0             	add    rax,rdx
   11266:	0f b7 00             	movzx  eax,WORD PTR [rax]
   11269:	0f bf d0             	movsx  edx,ax
   1126c:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11272:	48 98                	cdqe   
   11274:	48 01 c0             	add    rax,rax
   11277:	48 8d 48 fe          	lea    rcx,[rax-0x2]
   1127b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   1127f:	48 01 c8             	add    rax,rcx
   11282:	0f b7 00             	movzx  eax,WORD PTR [rax]
   11285:	0f bf f0             	movsx  esi,ax
   11288:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   1128c:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   1128f:	89 c7                	mov    edi,eax
   11291:	e8 a5 fd ff ff       	call   1103b <vrna_E_ext_stem>
   11296:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   1129c:	eb 22                	jmp    112c0 <vrna_E_ext_loop+0x1a2>
   1129e:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   112a2:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   112a5:	48 89 d1             	mov    rcx,rdx
   112a8:	ba ff ff ff ff       	mov    edx,0xffffffff
   112ad:	be ff ff ff ff       	mov    esi,0xffffffff
   112b2:	89 c7                	mov    edi,eax
   112b4:	e8 82 fd ff ff       	call   1103b <vrna_E_ext_stem>
   112b9:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   112bf:	90                   	nop
   112c0:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   112c5:	74 49                	je     11310 <vrna_E_ext_loop+0x1f2>
   112c7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   112cb:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   112cf:	48 85 c0             	test   rax,rax
   112d2:	74 3c                	je     11310 <vrna_E_ext_loop+0x1f2>
   112d4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   112d8:	4c 8b 50 50          	mov    r10,QWORD PTR [rax+0x50]
   112dc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   112e0:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
   112e4:	8b 8d 60 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa0]
   112ea:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   112f0:	8b b5 60 ff ff ff    	mov    esi,DWORD PTR [rbp-0xa0]
   112f6:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   112fc:	49 89 f9             	mov    r9,rdi
   112ff:	41 b8 0e 00 00 00    	mov    r8d,0xe
   11305:	89 c7                	mov    edi,eax
   11307:	41 ff d2             	call   r10
   1130a:	01 85 7c ff ff ff    	add    DWORD PTR [rbp-0x84],eax
   11310:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   11314:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   11317:	83 e0 01             	and    eax,0x1
   1131a:	85 c0                	test   eax,eax
   1131c:	0f 84 2c 02 00 00    	je     1154e <vrna_E_ext_loop+0x430>
   11322:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   11328:	48 98                	cdqe   
   1132a:	48 c1 e0 02          	shl    rax,0x2
   1132e:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   11332:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   11336:	48 01 d0             	add    rax,rdx
   11339:	8b 10                	mov    edx,DWORD PTR [rax]
   1133b:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11341:	01 d0                	add    eax,edx
   11343:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   11346:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   1134c:	8d 48 ff             	lea    ecx,[rax-0x1]
   1134f:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
   11353:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   11359:	8b b5 60 ff ff ff    	mov    esi,DWORD PTR [rbp-0xa0]
   1135f:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11365:	4c 8b 55 b8          	mov    r10,QWORD PTR [rbp-0x48]
   11369:	49 89 f9             	mov    r9,rdi
   1136c:	41 b8 0e 00 00 00    	mov    r8d,0xe
   11372:	89 c7                	mov    edi,eax
   11374:	41 ff d2             	call   r10
   11377:	84 c0                	test   al,al
   11379:	0f 84 b2 00 00 00    	je     11431 <vrna_E_ext_loop+0x313>
   1137f:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   11383:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   11386:	48 89 d6             	mov    rsi,rdx
   11389:	89 c7                	mov    edi,eax
   1138b:	e8 fb f5 01 00       	call   3098b <vrna_get_ptype>
   11390:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   11393:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   11399:	48 98                	cdqe   
   1139b:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1139f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   113a3:	48 01 d0             	add    rax,rdx
   113a6:	0f b7 00             	movzx  eax,WORD PTR [rax]
   113a9:	0f bf d0             	movsx  edx,ax
   113ac:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   113b0:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   113b3:	be ff ff ff ff       	mov    esi,0xffffffff
   113b8:	89 c7                	mov    edi,eax
   113ba:	e8 7c fc ff ff       	call   1103b <vrna_E_ext_stem>
   113bf:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   113c5:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   113ca:	74 4c                	je     11418 <vrna_E_ext_loop+0x2fa>
   113cc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   113d0:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   113d4:	48 85 c0             	test   rax,rax
   113d7:	74 3f                	je     11418 <vrna_E_ext_loop+0x2fa>
   113d9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   113dd:	4c 8b 50 50          	mov    r10,QWORD PTR [rax+0x50]
   113e1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   113e5:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
   113e9:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   113ef:	8d 48 ff             	lea    ecx,[rax-0x1]
   113f2:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   113f8:	8b b5 60 ff ff ff    	mov    esi,DWORD PTR [rbp-0xa0]
   113fe:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11404:	49 89 f9             	mov    r9,rdi
   11407:	41 b8 0e 00 00 00    	mov    r8d,0xe
   1140d:	89 c7                	mov    edi,eax
   1140f:	41 ff d2             	call   r10
   11412:	01 85 78 ff ff ff    	add    DWORD PTR [rbp-0x88],eax
   11418:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1141e:	39 85 78 ff ff ff    	cmp    DWORD PTR [rbp-0x88],eax
   11424:	0f 4e 85 78 ff ff ff 	cmovle eax,DWORD PTR [rbp-0x88]
   1142b:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   11431:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   11437:	48 98                	cdqe   
   11439:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11441:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   11445:	48 01 d0             	add    rax,rdx
   11448:	8b 10                	mov    edx,DWORD PTR [rax]
   1144a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11450:	01 d0                	add    eax,edx
   11452:	83 c0 01             	add    eax,0x1
   11455:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   11458:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1145e:	8d 78 01             	lea    edi,[rax+0x1]
   11461:	48 8d 4d c0          	lea    rcx,[rbp-0x40]
   11465:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   1146b:	8b b5 60 ff ff ff    	mov    esi,DWORD PTR [rbp-0xa0]
   11471:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11477:	4c 8b 55 b8          	mov    r10,QWORD PTR [rbp-0x48]
   1147b:	49 89 c9             	mov    r9,rcx
   1147e:	41 b8 0e 00 00 00    	mov    r8d,0xe
   11484:	89 d1                	mov    ecx,edx
   11486:	89 fa                	mov    edx,edi
   11488:	89 c7                	mov    edi,eax
   1148a:	41 ff d2             	call   r10
   1148d:	84 c0                	test   al,al
   1148f:	0f 84 b9 00 00 00    	je     1154e <vrna_E_ext_loop+0x430>
   11495:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   11499:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   1149c:	48 89 d6             	mov    rsi,rdx
   1149f:	89 c7                	mov    edi,eax
   114a1:	e8 e5 f4 01 00       	call   3098b <vrna_get_ptype>
   114a6:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   114a9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   114af:	48 98                	cdqe   
   114b1:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   114b5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   114b9:	48 01 d0             	add    rax,rdx
   114bc:	0f b7 00             	movzx  eax,WORD PTR [rax]
   114bf:	0f bf f0             	movsx  esi,ax
   114c2:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   114c6:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   114c9:	48 89 d1             	mov    rcx,rdx
   114cc:	ba ff ff ff ff       	mov    edx,0xffffffff
   114d1:	89 c7                	mov    edi,eax
   114d3:	e8 63 fb ff ff       	call   1103b <vrna_E_ext_stem>
   114d8:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   114de:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   114e3:	74 50                	je     11535 <vrna_E_ext_loop+0x417>
   114e5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   114e9:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   114ed:	48 85 c0             	test   rax,rax
   114f0:	74 43                	je     11535 <vrna_E_ext_loop+0x417>
   114f2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   114f6:	4c 8b 50 50          	mov    r10,QWORD PTR [rax+0x50]
   114fa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   114fe:	48 8b 48 68          	mov    rcx,QWORD PTR [rax+0x68]
   11502:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   11508:	8d 78 01             	lea    edi,[rax+0x1]
   1150b:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   11511:	8b b5 60 ff ff ff    	mov    esi,DWORD PTR [rbp-0xa0]
   11517:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1151d:	49 89 c9             	mov    r9,rcx
   11520:	41 b8 0e 00 00 00    	mov    r8d,0xe
   11526:	89 d1                	mov    ecx,edx
   11528:	89 fa                	mov    edx,edi
   1152a:	89 c7                	mov    edi,eax
   1152c:	41 ff d2             	call   r10
   1152f:	01 85 78 ff ff ff    	add    DWORD PTR [rbp-0x88],eax
   11535:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1153b:	39 85 78 ff ff ff    	cmp    DWORD PTR [rbp-0x88],eax
   11541:	0f 4e 85 78 ff ff ff 	cmovle eax,DWORD PTR [rbp-0x88]
   11548:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   1154e:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   11554:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
   11558:	64 48 33 3c 25 28 00 00 00 	xor    rdi,QWORD PTR fs:0x28
   11561:	74 05                	je     11568 <vrna_E_ext_loop+0x44a>
   11563:	e8 88 23 ff ff       	call   38f0 <__stack_chk_fail@plt>
   11568:	c9                   	leave  
   11569:	c3                   	ret    

000000000001156a <decompose_f5_ext_stem_d0>:
   1156a:	55                   	push   rbp
   1156b:	48 89 e5             	mov    rbp,rsp
   1156e:	48 83 ec 40          	sub    rsp,0x40
   11572:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   11576:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   11579:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1157d:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   11581:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   11585:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   11589:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1158d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   11591:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
   11594:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11598:	49 89 f8             	mov    r8,rdi
   1159b:	48 89 c7             	mov    rdi,rax
   1159e:	e8 79 0b 00 00       	call   1211c <get_stem_contributions_d0>
   115a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   115a7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   115ab:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   115ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   115b2:	89 ce                	mov    esi,ecx
   115b4:	48 89 c7             	mov    rdi,rax
   115b7:	e8 ca 73 00 00       	call   18986 <decompose_f5_ext_stem>
   115bc:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   115bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   115c3:	48 83 c0 04          	add    rax,0x4
   115c7:	8b 00                	mov    eax,DWORD PTR [rax]
   115c9:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   115cc:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   115d0:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   115d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   115d7:	48 89 c7             	mov    rdi,rax
   115da:	e8 61 23 ff ff       	call   3940 <free@plt>
   115df:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   115e2:	c9                   	leave  
   115e3:	c3                   	ret    

00000000000115e4 <decompose_f3_ext_stem_d0>:
   115e4:	55                   	push   rbp
   115e5:	48 89 e5             	mov    rbp,rsp
   115e8:	48 83 ec 50          	sub    rsp,0x50
   115ec:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   115f0:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   115f3:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   115f7:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   115fb:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   115ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11603:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   11606:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   11609:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1160d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   11613:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11616:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   1161a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1161e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   11622:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11625:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11629:	49 89 f8             	mov    r8,rdi
   1162c:	48 89 c7             	mov    rdi,rax
   1162f:	e8 20 11 00 00       	call   12754 <f3_get_stem_contributions_d0>
   11634:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11638:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   1163b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1163e:	01 d0                	add    eax,edx
   11640:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   11643:	7f 08                	jg     1164d <decompose_f3_ext_stem_d0+0x69>
   11645:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11648:	83 e8 01             	sub    eax,0x1
   1164b:	eb 08                	jmp    11655 <decompose_f3_ext_stem_d0+0x71>
   1164d:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11650:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11653:	01 d0                	add    eax,edx
   11655:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   11659:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   1165c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
   11660:	48 89 d1             	mov    rcx,rdx
   11663:	89 c2                	mov    edx,eax
   11665:	e8 89 73 00 00       	call   189f3 <decompose_f3_ext_stem>
   1166a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1166d:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11670:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11673:	01 d0                	add    eax,edx
   11675:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   11678:	7f 20                	jg     1169a <decompose_f3_ext_stem_d0+0xb6>
   1167a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1167d:	48 98                	cdqe   
   1167f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11687:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1168b:	48 01 d0             	add    rax,rdx
   1168e:	8b 00                	mov    eax,DWORD PTR [rax]
   11690:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11693:	0f 4e 45 ec          	cmovle eax,DWORD PTR [rbp-0x14]
   11697:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1169a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1169d:	48 98                	cdqe   
   1169f:	48 c1 e0 02          	shl    rax,0x2
   116a3:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
   116a7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   116ab:	48 89 c7             	mov    rdi,rax
   116ae:	e8 8d 22 ff ff       	call   3940 <free@plt>
   116b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   116b6:	c9                   	leave  
   116b7:	c3                   	ret    

00000000000116b8 <decompose_f5_ext_stem_d2>:
   116b8:	55                   	push   rbp
   116b9:	48 89 e5             	mov    rbp,rsp
   116bc:	48 83 ec 40          	sub    rsp,0x40
   116c0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   116c4:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   116c7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   116cb:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   116cf:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   116d3:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   116d7:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   116db:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   116df:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
   116e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   116e6:	49 89 f8             	mov    r8,rdi
   116e9:	48 89 c7             	mov    rdi,rax
   116ec:	e8 34 17 00 00       	call   12e25 <get_stem_contributions_d2>
   116f1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   116f5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   116f9:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   116fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11700:	89 ce                	mov    esi,ecx
   11702:	48 89 c7             	mov    rdi,rax
   11705:	e8 7c 72 00 00       	call   18986 <decompose_f5_ext_stem>
   1170a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1170d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11711:	48 83 c0 04          	add    rax,0x4
   11715:	8b 00                	mov    eax,DWORD PTR [rax]
   11717:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   1171a:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   1171e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11721:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11725:	48 89 c7             	mov    rdi,rax
   11728:	e8 13 22 ff ff       	call   3940 <free@plt>
   1172d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11730:	c9                   	leave  
   11731:	c3                   	ret    

0000000000011732 <decompose_f3_ext_stem_d2>:
   11732:	55                   	push   rbp
   11733:	48 89 e5             	mov    rbp,rsp
   11736:	48 83 ec 50          	sub    rsp,0x50
   1173a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1173e:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   11741:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   11745:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   11749:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   1174d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11751:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   11754:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   11757:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1175b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   11761:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11764:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   11768:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1176c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   11770:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11773:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11777:	49 89 f8             	mov    r8,rdi
   1177a:	48 89 c7             	mov    rdi,rax
   1177d:	e8 ce 21 00 00       	call   13950 <f3_get_stem_contributions_d2>
   11782:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11786:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11789:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1178c:	01 d0                	add    eax,edx
   1178e:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   11791:	7f 08                	jg     1179b <decompose_f3_ext_stem_d2+0x69>
   11793:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11796:	83 e8 01             	sub    eax,0x1
   11799:	eb 08                	jmp    117a3 <decompose_f3_ext_stem_d2+0x71>
   1179b:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   1179e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   117a1:	01 d0                	add    eax,edx
   117a3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   117a7:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   117aa:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
   117ae:	48 89 d1             	mov    rcx,rdx
   117b1:	89 c2                	mov    edx,eax
   117b3:	e8 3b 72 00 00       	call   189f3 <decompose_f3_ext_stem>
   117b8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   117bb:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   117be:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   117c1:	01 d0                	add    eax,edx
   117c3:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   117c6:	7f 20                	jg     117e8 <decompose_f3_ext_stem_d2+0xb6>
   117c8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   117cb:	48 98                	cdqe   
   117cd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   117d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   117d9:	48 01 d0             	add    rax,rdx
   117dc:	8b 00                	mov    eax,DWORD PTR [rax]
   117de:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   117e1:	0f 4e 45 ec          	cmovle eax,DWORD PTR [rbp-0x14]
   117e5:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   117e8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   117eb:	48 98                	cdqe   
   117ed:	48 c1 e0 02          	shl    rax,0x2
   117f1:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
   117f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   117f9:	48 89 c7             	mov    rdi,rax
   117fc:	e8 3f 21 ff ff       	call   3940 <free@plt>
   11801:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11804:	c9                   	leave  
   11805:	c3                   	ret    

0000000000011806 <decompose_f5_ext_stem_d1>:
   11806:	55                   	push   rbp
   11807:	48 89 e5             	mov    rbp,rsp
   1180a:	48 83 ec 40          	sub    rsp,0x40
   1180e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   11812:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   11815:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   11819:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1181d:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   11821:	c7 45 f0 80 96 98 00 	mov    DWORD PTR [rbp-0x10],0x989680
   11828:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   1182c:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   11830:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   11834:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
   11837:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1183b:	49 89 f8             	mov    r8,rdi
   1183e:	48 89 c7             	mov    rdi,rax
   11841:	e8 d6 08 00 00       	call   1211c <get_stem_contributions_d0>
   11846:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1184a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1184e:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   11851:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11855:	89 ce                	mov    esi,ecx
   11857:	48 89 c7             	mov    rdi,rax
   1185a:	e8 27 71 00 00       	call   18986 <decompose_f5_ext_stem>
   1185f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11862:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11866:	48 83 c0 04          	add    rax,0x4
   1186a:	8b 00                	mov    eax,DWORD PTR [rax]
   1186c:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   1186f:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   11873:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11876:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1187a:	48 89 c7             	mov    rdi,rax
   1187d:	e8 be 20 ff ff       	call   3940 <free@plt>
   11882:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11885:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   11888:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   1188c:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1188f:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   11893:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   11897:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1189b:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
   1189e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   118a2:	49 89 f8             	mov    r8,rdi
   118a5:	48 89 c7             	mov    rdi,rax
   118a8:	e8 42 2c 00 00       	call   144ef <f5_get_stem_contributions_d5>
   118ad:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   118b1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   118b5:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   118b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   118bc:	89 ce                	mov    esi,ecx
   118be:	48 89 c7             	mov    rdi,rax
   118c1:	e8 c0 70 00 00       	call   18986 <decompose_f5_ext_stem>
   118c6:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   118c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   118cd:	48 83 c0 04          	add    rax,0x4
   118d1:	8b 00                	mov    eax,DWORD PTR [rax]
   118d3:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   118d6:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   118da:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   118dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   118e1:	48 89 c7             	mov    rdi,rax
   118e4:	e8 57 20 ff ff       	call   3940 <free@plt>
   118e9:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   118ec:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   118ef:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   118f3:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   118f6:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   118fa:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   118fe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   11902:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
   11905:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11909:	49 89 f8             	mov    r8,rdi
   1190c:	48 89 c7             	mov    rdi,rax
   1190f:	e8 cc 40 00 00       	call   159e0 <f5_get_stem_contributions_d3>
   11914:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11918:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1191c:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   1191f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11923:	89 ce                	mov    esi,ecx
   11925:	48 89 c7             	mov    rdi,rax
   11928:	e8 59 70 00 00       	call   18986 <decompose_f5_ext_stem>
   1192d:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11930:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11934:	48 83 c0 04          	add    rax,0x4
   11938:	8b 00                	mov    eax,DWORD PTR [rax]
   1193a:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   1193d:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   11941:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11944:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11948:	48 89 c7             	mov    rdi,rax
   1194b:	e8 f0 1f ff ff       	call   3940 <free@plt>
   11950:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11953:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   11956:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   1195a:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1195d:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   11961:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   11965:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   11969:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
   1196c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11970:	49 89 f8             	mov    r8,rdi
   11973:	48 89 c7             	mov    rdi,rax
   11976:	e8 74 55 00 00       	call   16eef <f5_get_stem_contributions_d53>
   1197b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1197f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   11983:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   11986:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1198a:	89 ce                	mov    esi,ecx
   1198c:	48 89 c7             	mov    rdi,rax
   1198f:	e8 f2 6f 00 00       	call   18986 <decompose_f5_ext_stem>
   11994:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11997:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1199b:	48 83 c0 04          	add    rax,0x4
   1199f:	8b 00                	mov    eax,DWORD PTR [rax]
   119a1:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   119a4:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   119a8:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   119ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   119af:	48 89 c7             	mov    rdi,rax
   119b2:	e8 89 1f ff ff       	call   3940 <free@plt>
   119b7:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   119ba:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   119bd:	0f 4e 45 f4          	cmovle eax,DWORD PTR [rbp-0xc]
   119c1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   119c4:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   119c7:	c9                   	leave  
   119c8:	c3                   	ret    

00000000000119c9 <decompose_f3_ext_stem_d1>:
   119c9:	55                   	push   rbp
   119ca:	48 89 e5             	mov    rbp,rsp
   119cd:	48 83 ec 50          	sub    rsp,0x50
   119d1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   119d5:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   119d8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   119dc:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   119e0:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   119e4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   119e8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   119eb:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   119ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   119f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   119f8:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   119fb:	c7 45 f4 80 96 98 00 	mov    DWORD PTR [rbp-0xc],0x989680
   11a02:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   11a06:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   11a0a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   11a0e:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11a11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11a15:	49 89 f8             	mov    r8,rdi
   11a18:	48 89 c7             	mov    rdi,rax
   11a1b:	e8 34 0d 00 00       	call   12754 <f3_get_stem_contributions_d0>
   11a20:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11a24:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11a27:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11a2a:	01 d0                	add    eax,edx
   11a2c:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11a2f:	7f 08                	jg     11a39 <decompose_f3_ext_stem_d1+0x70>
   11a31:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11a34:	83 e8 01             	sub    eax,0x1
   11a37:	eb 08                	jmp    11a41 <decompose_f3_ext_stem_d1+0x78>
   11a39:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11a3c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11a3f:	01 d0                	add    eax,edx
   11a41:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   11a45:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11a48:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
   11a4c:	48 89 d1             	mov    rcx,rdx
   11a4f:	89 c2                	mov    edx,eax
   11a51:	e8 9d 6f 00 00       	call   189f3 <decompose_f3_ext_stem>
   11a56:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11a59:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11a5c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11a5f:	01 d0                	add    eax,edx
   11a61:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11a64:	7f 20                	jg     11a86 <decompose_f3_ext_stem_d1+0xbd>
   11a66:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11a69:	48 98                	cdqe   
   11a6b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11a73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11a77:	48 01 d0             	add    rax,rdx
   11a7a:	8b 00                	mov    eax,DWORD PTR [rax]
   11a7c:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11a7f:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11a83:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11a86:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   11a89:	48 98                	cdqe   
   11a8b:	48 c1 e0 02          	shl    rax,0x2
   11a8f:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
   11a93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11a97:	48 89 c7             	mov    rdi,rax
   11a9a:	e8 a1 1e ff ff       	call   3940 <free@plt>
   11a9f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11aa2:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11aa5:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11aa9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11aac:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   11ab0:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   11ab4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   11ab8:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11abb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11abf:	49 89 f8             	mov    r8,rdi
   11ac2:	48 89 c7             	mov    rdi,rax
   11ac5:	e8 21 34 00 00       	call   14eeb <f3_get_stem_contributions_d3>
   11aca:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11ace:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11ad1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11ad4:	01 d0                	add    eax,edx
   11ad6:	83 c0 01             	add    eax,0x1
   11ad9:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11adc:	7f 08                	jg     11ae6 <decompose_f3_ext_stem_d1+0x11d>
   11ade:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11ae1:	83 e8 01             	sub    eax,0x1
   11ae4:	eb 0b                	jmp    11af1 <decompose_f3_ext_stem_d1+0x128>
   11ae6:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11ae9:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11aec:	01 d0                	add    eax,edx
   11aee:	83 c0 01             	add    eax,0x1
   11af1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   11af5:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11af8:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
   11afc:	48 89 d1             	mov    rcx,rdx
   11aff:	89 c2                	mov    edx,eax
   11b01:	e8 ed 6e 00 00       	call   189f3 <decompose_f3_ext_stem>
   11b06:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11b09:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11b0c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11b0f:	01 d0                	add    eax,edx
   11b11:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11b14:	7f 20                	jg     11b36 <decompose_f3_ext_stem_d1+0x16d>
   11b16:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11b19:	48 98                	cdqe   
   11b1b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11b23:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11b27:	48 01 d0             	add    rax,rdx
   11b2a:	8b 00                	mov    eax,DWORD PTR [rax]
   11b2c:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11b2f:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11b33:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11b36:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   11b39:	48 98                	cdqe   
   11b3b:	48 c1 e0 02          	shl    rax,0x2
   11b3f:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
   11b43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11b47:	48 89 c7             	mov    rdi,rax
   11b4a:	e8 f1 1d ff ff       	call   3940 <free@plt>
   11b4f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11b52:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11b55:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11b59:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11b5c:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   11b60:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   11b64:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   11b68:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11b6b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11b6f:	49 89 f8             	mov    r8,rdi
   11b72:	48 89 c7             	mov    rdi,rax
   11b75:	e8 99 48 00 00       	call   16413 <f3_get_stem_contributions_d5>
   11b7a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11b7e:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11b81:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11b84:	01 d0                	add    eax,edx
   11b86:	83 c0 01             	add    eax,0x1
   11b89:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11b8c:	7f 08                	jg     11b96 <decompose_f3_ext_stem_d1+0x1cd>
   11b8e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11b91:	83 e8 01             	sub    eax,0x1
   11b94:	eb 0b                	jmp    11ba1 <decompose_f3_ext_stem_d1+0x1d8>
   11b96:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11b99:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11b9c:	01 d0                	add    eax,edx
   11b9e:	83 c0 01             	add    eax,0x1
   11ba1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   11ba5:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11ba8:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
   11bac:	48 89 d1             	mov    rcx,rdx
   11baf:	89 c2                	mov    edx,eax
   11bb1:	e8 3d 6e 00 00       	call   189f3 <decompose_f3_ext_stem>
   11bb6:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11bb9:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11bbc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11bbf:	01 d0                	add    eax,edx
   11bc1:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11bc4:	7f 20                	jg     11be6 <decompose_f3_ext_stem_d1+0x21d>
   11bc6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11bc9:	48 98                	cdqe   
   11bcb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11bd3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11bd7:	48 01 d0             	add    rax,rdx
   11bda:	8b 00                	mov    eax,DWORD PTR [rax]
   11bdc:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11bdf:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11be3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11be6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   11be9:	48 98                	cdqe   
   11beb:	48 c1 e0 02          	shl    rax,0x2
   11bef:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
   11bf3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11bf7:	48 89 c7             	mov    rdi,rax
   11bfa:	e8 41 1d ff ff       	call   3940 <free@plt>
   11bff:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11c02:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11c05:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11c09:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11c0c:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   11c10:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   11c14:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   11c18:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11c1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11c1f:	49 89 f8             	mov    r8,rdi
   11c22:	48 89 c7             	mov    rdi,rax
   11c25:	e8 57 5e 00 00       	call   17a81 <f3_get_stem_contributions_d53>
   11c2a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   11c2e:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11c31:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11c34:	01 d0                	add    eax,edx
   11c36:	83 c0 01             	add    eax,0x1
   11c39:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11c3c:	7f 08                	jg     11c46 <decompose_f3_ext_stem_d1+0x27d>
   11c3e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11c41:	83 e8 01             	sub    eax,0x1
   11c44:	eb 0b                	jmp    11c51 <decompose_f3_ext_stem_d1+0x288>
   11c46:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11c49:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11c4c:	01 d0                	add    eax,edx
   11c4e:	83 c0 01             	add    eax,0x1
   11c51:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   11c55:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
   11c58:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
   11c5c:	48 89 d1             	mov    rcx,rdx
   11c5f:	89 c2                	mov    edx,eax
   11c61:	e8 8d 6d 00 00       	call   189f3 <decompose_f3_ext_stem>
   11c66:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11c69:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   11c6c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   11c6f:	01 d0                	add    eax,edx
   11c71:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   11c74:	7f 20                	jg     11c96 <decompose_f3_ext_stem_d1+0x2cd>
   11c76:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   11c79:	48 98                	cdqe   
   11c7b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11c83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11c87:	48 01 d0             	add    rax,rdx
   11c8a:	8b 00                	mov    eax,DWORD PTR [rax]
   11c8c:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11c8f:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11c93:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11c96:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   11c99:	48 98                	cdqe   
   11c9b:	48 c1 e0 02          	shl    rax,0x2
   11c9f:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
   11ca3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   11ca7:	48 89 c7             	mov    rdi,rax
   11caa:	e8 91 1c ff ff       	call   3940 <free@plt>
   11caf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11cb2:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   11cb5:	0f 4e 45 e8          	cmovle eax,DWORD PTR [rbp-0x18]
   11cb9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   11cbc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   11cbf:	c9                   	leave  
   11cc0:	c3                   	ret    

0000000000011cc1 <reduce_f5_up>:
   11cc1:	55                   	push   rbp
   11cc2:	48 89 e5             	mov    rbp,rsp
   11cc5:	53                   	push   rbx
   11cc6:	48 83 ec 68          	sub    rsp,0x68
   11cca:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   11cce:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
   11cd1:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   11cd5:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
   11cd9:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
   11cdd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   11ce1:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   11ce5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   11ce9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   11ced:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   11cf1:	48 8b 80 a0 00 00 00 	mov    rax,QWORD PTR [rax+0xa0]
   11cf8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   11cfc:	c7 45 cc 80 96 98 00 	mov    DWORD PTR [rbp-0x34],0x989680
   11d03:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   11d07:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   11d0b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   11d0f:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11d12:	48 98                	cdqe   
   11d14:	48 c1 e0 02          	shl    rax,0x2
   11d18:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   11d1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11d20:	48 01 d0             	add    rax,rdx
   11d23:	8b 00                	mov    eax,DWORD PTR [rax]
   11d25:	3d 80 96 98 00       	cmp    eax,0x989680
   11d2a:	74 72                	je     11d9e <reduce_f5_up+0xdd>
   11d2c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11d2f:	8d 50 ff             	lea    edx,[rax-0x1]
   11d32:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   11d36:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11d39:	4c 8b 55 a8          	mov    r10,QWORD PTR [rbp-0x58]
   11d3d:	49 89 c9             	mov    r9,rcx
   11d40:	41 b8 0c 00 00 00    	mov    r8d,0xc
   11d46:	89 d1                	mov    ecx,edx
   11d48:	ba 01 00 00 00       	mov    edx,0x1
   11d4d:	89 c6                	mov    esi,eax
   11d4f:	bf 01 00 00 00       	mov    edi,0x1
   11d54:	41 ff d2             	call   r10
   11d57:	84 c0                	test   al,al
   11d59:	74 43                	je     11d9e <reduce_f5_up+0xdd>
   11d5b:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11d5e:	48 98                	cdqe   
   11d60:	48 c1 e0 02          	shl    rax,0x2
   11d64:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   11d68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11d6c:	48 01 d0             	add    rax,rdx
   11d6f:	8b 00                	mov    eax,DWORD PTR [rax]
   11d71:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   11d74:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   11d79:	74 23                	je     11d9e <reduce_f5_up+0xdd>
   11d7b:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11d7e:	8d 70 ff             	lea    esi,[rax-0x1]
   11d81:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   11d85:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11d88:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
   11d8c:	48 89 d1             	mov    rcx,rdx
   11d8f:	89 f2                	mov    edx,esi
   11d91:	be 01 00 00 00       	mov    esi,0x1
   11d96:	89 c7                	mov    edi,eax
   11d98:	41 ff d0             	call   r8
   11d9b:	01 45 cc             	add    DWORD PTR [rbp-0x34],eax
   11d9e:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   11da3:	0f 84 31 01 00 00    	je     11eda <reduce_f5_up+0x219>
   11da9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11dad:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   11db1:	48 85 c0             	test   rax,rax
   11db4:	0f 84 20 01 00 00    	je     11eda <reduce_f5_up+0x219>
   11dba:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
   11dc1:	e9 05 01 00 00       	jmp    11ecb <reduce_f5_up+0x20a>
   11dc6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11dca:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   11dce:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
   11dd1:	48 63 d2             	movsxd rdx,edx
   11dd4:	48 c1 e2 02          	shl    rdx,0x2
   11dd8:	48 01 d0             	add    rax,rdx
   11ddb:	8b 00                	mov    eax,DWORD PTR [rax]
   11ddd:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
   11de0:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11de3:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   11de6:	85 c0                	test   eax,eax
   11de8:	0f 88 d9 00 00 00    	js     11ec7 <reduce_f5_up+0x206>
   11dee:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11df1:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   11df4:	48 98                	cdqe   
   11df6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11dfe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11e02:	48 01 d0             	add    rax,rdx
   11e05:	8b 00                	mov    eax,DWORD PTR [rax]
   11e07:	3d 80 96 98 00       	cmp    eax,0x989680
   11e0c:	0f 84 b5 00 00 00    	je     11ec7 <reduce_f5_up+0x206>
   11e12:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11e15:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   11e18:	89 c2                	mov    edx,eax
   11e1a:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   11e1e:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11e21:	4c 8b 55 a8          	mov    r10,QWORD PTR [rbp-0x58]
   11e25:	49 89 c9             	mov    r9,rcx
   11e28:	41 b8 0c 00 00 00    	mov    r8d,0xc
   11e2e:	89 d1                	mov    ecx,edx
   11e30:	ba 01 00 00 00       	mov    edx,0x1
   11e35:	89 c6                	mov    esi,eax
   11e37:	bf 01 00 00 00       	mov    edi,0x1
   11e3c:	41 ff d2             	call   r10
   11e3f:	84 c0                	test   al,al
   11e41:	0f 84 80 00 00 00    	je     11ec7 <reduce_f5_up+0x206>
   11e47:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11e4a:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   11e4d:	48 98                	cdqe   
   11e4f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11e57:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11e5b:	48 01 d0             	add    rax,rdx
   11e5e:	8b 18                	mov    ebx,DWORD PTR [rax]
   11e60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11e64:	4c 8b 48 50          	mov    r9,QWORD PTR [rax+0x50]
   11e68:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11e6c:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
   11e70:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11e73:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   11e76:	8d 70 01             	lea    esi,[rax+0x1]
   11e79:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   11e7c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   11e80:	49 89 c8             	mov    r8,rcx
   11e83:	b9 11 00 00 00       	mov    ecx,0x11
   11e88:	48 89 c7             	mov    rdi,rax
   11e8b:	41 ff d1             	call   r9
   11e8e:	01 d8                	add    eax,ebx
   11e90:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   11e93:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   11e98:	74 20                	je     11eba <reduce_f5_up+0x1f9>
   11e9a:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11e9d:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   11ea0:	89 c2                	mov    edx,eax
   11ea2:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
   11ea6:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11ea9:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
   11ead:	be 01 00 00 00       	mov    esi,0x1
   11eb2:	89 c7                	mov    edi,eax
   11eb4:	41 ff d0             	call   r8
   11eb7:	01 45 d0             	add    DWORD PTR [rbp-0x30],eax
   11eba:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   11ebd:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
   11ec0:	0f 4e 45 d0          	cmovle eax,DWORD PTR [rbp-0x30]
   11ec4:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   11ec7:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
   11ecb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11ecf:	8b 00                	mov    eax,DWORD PTR [rax]
   11ed1:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
   11ed4:	0f 8c ec fe ff ff    	jl     11dc6 <reduce_f5_up+0x105>
   11eda:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   11edd:	48 83 c4 68          	add    rsp,0x68
   11ee1:	5b                   	pop    rbx
   11ee2:	5d                   	pop    rbp
   11ee3:	c3                   	ret    

0000000000011ee4 <reduce_f3_up>:
   11ee4:	55                   	push   rbp
   11ee5:	48 89 e5             	mov    rbp,rsp
   11ee8:	53                   	push   rbx
   11ee9:	48 83 ec 68          	sub    rsp,0x68
   11eed:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   11ef1:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
   11ef4:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   11ef8:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
   11efc:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
   11f00:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   11f04:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   11f07:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   11f0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   11f0e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   11f12:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   11f16:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   11f1a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   11f1e:	48 8b 80 a0 00 00 00 	mov    rax,QWORD PTR [rax+0xa0]
   11f25:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   11f29:	c7 45 c8 80 96 98 00 	mov    DWORD PTR [rbp-0x38],0x989680
   11f30:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   11f34:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   11f38:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   11f3c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11f3f:	48 98                	cdqe   
   11f41:	48 83 c0 01          	add    rax,0x1
   11f45:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11f4d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11f51:	48 01 d0             	add    rax,rdx
   11f54:	8b 00                	mov    eax,DWORD PTR [rax]
   11f56:	3d 80 96 98 00       	cmp    eax,0x989680
   11f5b:	74 6d                	je     11fca <reduce_f3_up+0xe6>
   11f5d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11f60:	8d 78 01             	lea    edi,[rax+0x1]
   11f63:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   11f67:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   11f6a:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
   11f6d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11f70:	4c 8b 55 a8          	mov    r10,QWORD PTR [rbp-0x58]
   11f74:	49 89 c9             	mov    r9,rcx
   11f77:	41 b8 0c 00 00 00    	mov    r8d,0xc
   11f7d:	89 d1                	mov    ecx,edx
   11f7f:	89 fa                	mov    edx,edi
   11f81:	89 c7                	mov    edi,eax
   11f83:	41 ff d2             	call   r10
   11f86:	84 c0                	test   al,al
   11f88:	74 40                	je     11fca <reduce_f3_up+0xe6>
   11f8a:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11f8d:	48 98                	cdqe   
   11f8f:	48 83 c0 01          	add    rax,0x1
   11f93:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   11f9b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11f9f:	48 01 d0             	add    rax,rdx
   11fa2:	8b 00                	mov    eax,DWORD PTR [rax]
   11fa4:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
   11fa7:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   11fac:	74 1c                	je     11fca <reduce_f3_up+0xe6>
   11fae:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11fb1:	8d 70 01             	lea    esi,[rax+0x1]
   11fb4:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
   11fb8:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   11fbb:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   11fbe:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
   11fc2:	89 c7                	mov    edi,eax
   11fc4:	41 ff d0             	call   r8
   11fc7:	01 45 c8             	add    DWORD PTR [rbp-0x38],eax
   11fca:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   11fcf:	0f 84 3d 01 00 00    	je     12112 <reduce_f3_up+0x22e>
   11fd5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11fd9:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   11fdd:	48 85 c0             	test   rax,rax
   11fe0:	0f 84 2c 01 00 00    	je     12112 <reduce_f3_up+0x22e>
   11fe6:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
   11fed:	e9 11 01 00 00       	jmp    12103 <reduce_f3_up+0x21f>
   11ff2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11ff6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   11ffa:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   11ffd:	48 63 d2             	movsxd rdx,edx
   12000:	48 c1 e2 02          	shl    rdx,0x2
   12004:	48 01 d0             	add    rax,rdx
   12007:	8b 00                	mov    eax,DWORD PTR [rax]
   12009:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
   1200c:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1200f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   12012:	01 d0                	add    eax,edx
   12014:	83 e8 01             	sub    eax,0x1
   12017:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
   1201a:	0f 8c df 00 00 00    	jl     120ff <reduce_f3_up+0x21b>
   12020:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   12023:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   12026:	01 d0                	add    eax,edx
   12028:	48 98                	cdqe   
   1202a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12032:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12036:	48 01 d0             	add    rax,rdx
   12039:	8b 00                	mov    eax,DWORD PTR [rax]
   1203b:	3d 80 96 98 00       	cmp    eax,0x989680
   12040:	0f 84 b9 00 00 00    	je     120ff <reduce_f3_up+0x21b>
   12046:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   12049:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1204c:	01 d0                	add    eax,edx
   1204e:	8d 78 ff             	lea    edi,[rax-0x1]
   12051:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   12055:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   12058:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
   1205b:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   1205e:	4c 8b 55 a8          	mov    r10,QWORD PTR [rbp-0x58]
   12062:	49 89 c9             	mov    r9,rcx
   12065:	41 b8 0c 00 00 00    	mov    r8d,0xc
   1206b:	89 d1                	mov    ecx,edx
   1206d:	89 fa                	mov    edx,edi
   1206f:	89 c7                	mov    edi,eax
   12071:	41 ff d2             	call   r10
   12074:	84 c0                	test   al,al
   12076:	0f 84 83 00 00 00    	je     120ff <reduce_f3_up+0x21b>
   1207c:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1207f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   12082:	01 d0                	add    eax,edx
   12084:	48 98                	cdqe   
   12086:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1208e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12092:	48 01 d0             	add    rax,rdx
   12095:	8b 18                	mov    ebx,DWORD PTR [rax]
   12097:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1209b:	4c 8b 48 50          	mov    r9,QWORD PTR [rax+0x50]
   1209f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   120a3:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
   120a7:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   120aa:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   120ad:	01 d0                	add    eax,edx
   120af:	8d 50 ff             	lea    edx,[rax-0x1]
   120b2:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   120b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   120b9:	49 89 c8             	mov    r8,rcx
   120bc:	b9 11 00 00 00       	mov    ecx,0x11
   120c1:	48 89 c7             	mov    rdi,rax
   120c4:	41 ff d1             	call   r9
   120c7:	01 d8                	add    eax,ebx
   120c9:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   120cc:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   120d1:	74 1f                	je     120f2 <reduce_f3_up+0x20e>
   120d3:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   120d6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   120d9:	8d 34 02             	lea    esi,[rdx+rax*1]
   120dc:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
   120e0:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   120e3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   120e6:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
   120ea:	89 c7                	mov    edi,eax
   120ec:	41 ff d0             	call   r8
   120ef:	01 45 cc             	add    DWORD PTR [rbp-0x34],eax
   120f2:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
   120f5:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
   120f8:	0f 4e 45 cc          	cmovle eax,DWORD PTR [rbp-0x34]
   120fc:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
   120ff:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
   12103:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   12107:	8b 00                	mov    eax,DWORD PTR [rax]
   12109:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
   1210c:	0f 8c e0 fe ff ff    	jl     11ff2 <reduce_f3_up+0x10e>
   12112:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
   12115:	48 83 c4 68          	add    rsp,0x68
   12119:	5b                   	pop    rbx
   1211a:	5d                   	pop    rbp
   1211b:	c3                   	ret    

000000000001211c <get_stem_contributions_d0>:
   1211c:	55                   	push   rbp
   1211d:	48 89 e5             	mov    rbp,rsp
   12120:	48 81 ec 90 00 00 00 	sub    rsp,0x90
   12127:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   1212b:	89 75 94             	mov    DWORD PTR [rbp-0x6c],esi
   1212e:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
   12132:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
   12136:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
   1213d:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   12140:	48 98                	cdqe   
   12142:	c1 e0 02             	shl    eax,0x2
   12145:	89 c7                	mov    edi,eax
   12147:	e8 c5 cb 01 00       	call   2ed11 <vrna_alloc>
   1214c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   12150:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   12154:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   12158:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1215c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   12160:	48 05 98 35 03 00    	add    rax,0x33598
   12166:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1216a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1216e:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   12172:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   12176:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1217a:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   1217e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   12182:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   12186:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1218a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   12190:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   12193:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   12196:	48 98                	cdqe   
   12198:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   121a0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   121a4:	48 01 d0             	add    rax,rdx
   121a7:	8b 10                	mov    edx,DWORD PTR [rax]
   121a9:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   121ac:	01 d0                	add    eax,edx
   121ae:	2b 45 ac             	sub    eax,DWORD PTR [rbp-0x54]
   121b1:	83 e8 01             	sub    eax,0x1
   121b4:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   121b7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   121bb:	8b 00                	mov    eax,DWORD PTR [rax]
   121bd:	85 c0                	test   eax,eax
   121bf:	75 0d                	jne    121ce <get_stem_contributions_d0+0xb2>
   121c1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   121c5:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   121cc:	eb 05                	jmp    121d3 <get_stem_contributions_d0+0xb7>
   121ce:	b8 00 00 00 00       	mov    eax,0x0
   121d3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   121d7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   121db:	8b 00                	mov    eax,DWORD PTR [rax]
   121dd:	85 c0                	test   eax,eax
   121df:	74 0c                	je     121ed <get_stem_contributions_d0+0xd1>
   121e1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   121e5:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   121eb:	eb 05                	jmp    121f2 <get_stem_contributions_d0+0xd6>
   121ed:	b8 01 00 00 00       	mov    eax,0x1
   121f2:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   121f5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   121f9:	8b 00                	mov    eax,DWORD PTR [rax]
   121fb:	85 c0                	test   eax,eax
   121fd:	74 0d                	je     1220c <get_stem_contributions_d0+0xf0>
   121ff:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   12203:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   1220a:	eb 05                	jmp    12211 <get_stem_contributions_d0+0xf5>
   1220c:	b8 00 00 00 00       	mov    eax,0x0
   12211:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   12215:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1221c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   12220:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   12224:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1222b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1222f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   12233:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   12237:	8b 00                	mov    eax,DWORD PTR [rax]
   12239:	85 c0                	test   eax,eax
   1223b:	74 0e                	je     1224b <get_stem_contributions_d0+0x12f>
   1223d:	83 f8 01             	cmp    eax,0x1
   12240:	0f 84 27 01 00 00    	je     1236d <get_stem_contributions_d0+0x251>
   12246:	e9 a4 02 00 00       	jmp    124ef <get_stem_contributions_d0+0x3d3>
   1224b:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1224e:	2b 45 ac             	sub    eax,DWORD PTR [rbp-0x54]
   12251:	83 e8 01             	sub    eax,0x1
   12254:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12257:	e9 02 01 00 00       	jmp    1235e <get_stem_contributions_d0+0x242>
   1225c:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1225f:	48 98                	cdqe   
   12261:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12269:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1226d:	48 01 d0             	add    rax,rdx
   12270:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12276:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   12279:	48 98                	cdqe   
   1227b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12283:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12287:	48 01 d0             	add    rax,rdx
   1228a:	8b 00                	mov    eax,DWORD PTR [rax]
   1228c:	3d 80 96 98 00       	cmp    eax,0x989680
   12291:	0f 84 bf 00 00 00    	je     12356 <get_stem_contributions_d0+0x23a>
   12297:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1229a:	8d 70 ff             	lea    esi,[rax-0x1]
   1229d:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   122a1:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   122a4:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   122a7:	4c 8b 55 88          	mov    r10,QWORD PTR [rbp-0x78]
   122ab:	49 89 c9             	mov    r9,rcx
   122ae:	41 b8 12 00 00 00    	mov    r8d,0x12
   122b4:	89 d1                	mov    ecx,edx
   122b6:	89 f2                	mov    edx,esi
   122b8:	89 c6                	mov    esi,eax
   122ba:	bf 01 00 00 00       	mov    edi,0x1
   122bf:	41 ff d2             	call   r10
   122c2:	84 c0                	test   al,al
   122c4:	0f 84 8c 00 00 00    	je     12356 <get_stem_contributions_d0+0x23a>
   122ca:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   122cd:	48 98                	cdqe   
   122cf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   122d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   122db:	48 01 d0             	add    rax,rdx
   122de:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   122e1:	48 63 d2             	movsxd rdx,edx
   122e4:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   122ec:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   122f0:	48 01 ca             	add    rdx,rcx
   122f3:	8b 00                	mov    eax,DWORD PTR [rax]
   122f5:	89 02                	mov    DWORD PTR [rdx],eax
   122f7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   122fb:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   122fe:	48 89 d6             	mov    rsi,rdx
   12301:	89 c7                	mov    edi,eax
   12303:	e8 83 e6 01 00       	call   3098b <vrna_get_ptype>
   12308:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   1230b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1230f:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   12312:	48 89 d1             	mov    rcx,rdx
   12315:	ba ff ff ff ff       	mov    edx,0xffffffff
   1231a:	be ff ff ff ff       	mov    esi,0xffffffff
   1231f:	89 c7                	mov    edi,eax
   12321:	e8 15 ed ff ff       	call   1103b <vrna_E_ext_stem>
   12326:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   12329:	48 63 d2             	movsxd rdx,edx
   1232c:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   12334:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12338:	48 01 ca             	add    rdx,rcx
   1233b:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1233d:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   12340:	48 63 d2             	movsxd rdx,edx
   12343:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1234b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1234f:	48 01 f2             	add    rdx,rsi
   12352:	01 c8                	add    eax,ecx
   12354:	89 02                	mov    DWORD PTR [rdx],eax
   12356:	83 6d a4 01          	sub    DWORD PTR [rbp-0x5c],0x1
   1235a:	83 6d a8 01          	sub    DWORD PTR [rbp-0x58],0x1
   1235e:	83 7d a4 01          	cmp    DWORD PTR [rbp-0x5c],0x1
   12362:	0f 8f f4 fe ff ff    	jg     1225c <get_stem_contributions_d0+0x140>
   12368:	e9 82 01 00 00       	jmp    124ef <get_stem_contributions_d0+0x3d3>
   1236d:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   12370:	2b 45 ac             	sub    eax,DWORD PTR [rbp-0x54]
   12373:	83 e8 01             	sub    eax,0x1
   12376:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12379:	e9 66 01 00 00       	jmp    124e4 <get_stem_contributions_d0+0x3c8>
   1237e:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   12381:	48 98                	cdqe   
   12383:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1238b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1238f:	48 01 d0             	add    rax,rdx
   12392:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12398:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   1239b:	48 98                	cdqe   
   1239d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   123a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   123a9:	48 01 d0             	add    rax,rdx
   123ac:	8b 00                	mov    eax,DWORD PTR [rax]
   123ae:	3d 80 96 98 00       	cmp    eax,0x989680
   123b3:	0f 84 23 01 00 00    	je     124dc <get_stem_contributions_d0+0x3c0>
   123b9:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   123bc:	8d 70 ff             	lea    esi,[rax-0x1]
   123bf:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   123c3:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   123c6:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   123c9:	4c 8b 55 88          	mov    r10,QWORD PTR [rbp-0x78]
   123cd:	49 89 c9             	mov    r9,rcx
   123d0:	41 b8 12 00 00 00    	mov    r8d,0x12
   123d6:	89 d1                	mov    ecx,edx
   123d8:	89 f2                	mov    edx,esi
   123da:	89 c6                	mov    esi,eax
   123dc:	bf 01 00 00 00       	mov    edi,0x1
   123e1:	41 ff d2             	call   r10
   123e4:	84 c0                	test   al,al
   123e6:	0f 84 f0 00 00 00    	je     124dc <get_stem_contributions_d0+0x3c0>
   123ec:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   123ef:	48 98                	cdqe   
   123f1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   123f9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   123fd:	48 01 d0             	add    rax,rdx
   12400:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   12403:	48 63 d2             	movsxd rdx,edx
   12406:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1240e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12412:	48 01 ca             	add    rdx,rcx
   12415:	8b 00                	mov    eax,DWORD PTR [rax]
   12417:	89 02                	mov    DWORD PTR [rdx],eax
   12419:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   12420:	e9 ab 00 00 00       	jmp    124d0 <get_stem_contributions_d0+0x3b4>
   12425:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   12428:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   12430:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   12434:	48 01 d0             	add    rax,rdx
   12437:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1243a:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1243d:	48 63 d2             	movsxd rdx,edx
   12440:	48 01 d2             	add    rdx,rdx
   12443:	48 01 d0             	add    rax,rdx
   12446:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12449:	0f bf c8             	movsx  ecx,ax
   1244c:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1244f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   12457:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1245b:	48 01 d0             	add    rax,rdx
   1245e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12461:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   12464:	48 63 d2             	movsxd rdx,edx
   12467:	48 01 d2             	add    rdx,rdx
   1246a:	48 01 d0             	add    rax,rdx
   1246d:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12470:	98                   	cwde   
   12471:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   12475:	89 ce                	mov    esi,ecx
   12477:	89 c7                	mov    edi,eax
   12479:	e8 ba e4 01 00       	call   30938 <vrna_get_ptype_md>
   1247e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   12481:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   12485:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   12488:	48 89 d1             	mov    rcx,rdx
   1248b:	ba ff ff ff ff       	mov    edx,0xffffffff
   12490:	be ff ff ff ff       	mov    esi,0xffffffff
   12495:	89 c7                	mov    edi,eax
   12497:	e8 9f eb ff ff       	call   1103b <vrna_E_ext_stem>
   1249c:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1249f:	48 63 d2             	movsxd rdx,edx
   124a2:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   124aa:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   124ae:	48 01 ca             	add    rdx,rcx
   124b1:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   124b3:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   124b6:	48 63 d2             	movsxd rdx,edx
   124b9:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   124c1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   124c5:	48 01 f2             	add    rdx,rsi
   124c8:	01 c8                	add    eax,ecx
   124ca:	89 02                	mov    DWORD PTR [rdx],eax
   124cc:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   124d0:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   124d3:	3b 45 b0             	cmp    eax,DWORD PTR [rbp-0x50]
   124d6:	0f 82 49 ff ff ff    	jb     12425 <get_stem_contributions_d0+0x309>
   124dc:	83 6d a4 01          	sub    DWORD PTR [rbp-0x5c],0x1
   124e0:	83 6d a8 01          	sub    DWORD PTR [rbp-0x58],0x1
   124e4:	83 7d a4 01          	cmp    DWORD PTR [rbp-0x5c],0x1
   124e8:	0f 8f 90 fe ff ff    	jg     1237e <get_stem_contributions_d0+0x262>
   124ee:	90                   	nop
   124ef:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   124f4:	0f 84 81 00 00 00    	je     1257b <get_stem_contributions_d0+0x45f>
   124fa:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   124fd:	2b 45 ac             	sub    eax,DWORD PTR [rbp-0x54]
   12500:	83 e8 01             	sub    eax,0x1
   12503:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12506:	eb 6d                	jmp    12575 <get_stem_contributions_d0+0x459>
   12508:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1250b:	48 98                	cdqe   
   1250d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12515:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   12519:	48 01 d0             	add    rax,rdx
   1251c:	8b 00                	mov    eax,DWORD PTR [rax]
   1251e:	3d 80 96 98 00       	cmp    eax,0x989680
   12523:	74 4c                	je     12571 <get_stem_contributions_d0+0x455>
   12525:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   12528:	8d 70 ff             	lea    esi,[rax-0x1]
   1252b:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
   12532:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   12535:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   12538:	4c 8b 45 f0          	mov    r8,QWORD PTR [rbp-0x10]
   1253c:	89 c7                	mov    edi,eax
   1253e:	41 ff d0             	call   r8
   12541:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   12544:	48 63 d2             	movsxd rdx,edx
   12547:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1254f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12553:	48 01 ca             	add    rdx,rcx
   12556:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   12558:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1255b:	48 63 d2             	movsxd rdx,edx
   1255e:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   12566:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1256a:	48 01 f2             	add    rdx,rsi
   1256d:	01 c8                	add    eax,ecx
   1256f:	89 02                	mov    DWORD PTR [rdx],eax
   12571:	83 6d a4 01          	sub    DWORD PTR [rbp-0x5c],0x1
   12575:	83 7d a4 01          	cmp    DWORD PTR [rbp-0x5c],0x1
   12579:	7f 8d                	jg     12508 <get_stem_contributions_d0+0x3ec>
   1257b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1257f:	48 83 c0 04          	add    rax,0x4
   12583:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12589:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1258c:	48 98                	cdqe   
   1258e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12596:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1259a:	48 01 d0             	add    rax,rdx
   1259d:	8b 00                	mov    eax,DWORD PTR [rax]
   1259f:	83 c0 01             	add    eax,0x1
   125a2:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   125a5:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   125a8:	48 98                	cdqe   
   125aa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   125b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   125b6:	48 01 d0             	add    rax,rdx
   125b9:	8b 00                	mov    eax,DWORD PTR [rax]
   125bb:	3d 80 96 98 00       	cmp    eax,0x989680
   125c0:	0f 84 88 01 00 00    	je     1274e <get_stem_contributions_d0+0x632>
   125c6:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   125ca:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   125cd:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   125d0:	4c 8b 55 88          	mov    r10,QWORD PTR [rbp-0x78]
   125d4:	49 89 c9             	mov    r9,rcx
   125d7:	41 b8 0e 00 00 00    	mov    r8d,0xe
   125dd:	89 d1                	mov    ecx,edx
   125df:	ba 01 00 00 00       	mov    edx,0x1
   125e4:	89 c6                	mov    esi,eax
   125e6:	bf 01 00 00 00       	mov    edi,0x1
   125eb:	41 ff d2             	call   r10
   125ee:	84 c0                	test   al,al
   125f0:	0f 84 58 01 00 00    	je     1274e <get_stem_contributions_d0+0x632>
   125f6:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   125f9:	48 98                	cdqe   
   125fb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12603:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12607:	48 01 d0             	add    rax,rdx
   1260a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1260e:	48 83 c2 04          	add    rdx,0x4
   12612:	8b 00                	mov    eax,DWORD PTR [rax]
   12614:	89 02                	mov    DWORD PTR [rdx],eax
   12616:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1261a:	8b 00                	mov    eax,DWORD PTR [rax]
   1261c:	85 c0                	test   eax,eax
   1261e:	74 0a                	je     1262a <get_stem_contributions_d0+0x50e>
   12620:	83 f8 01             	cmp    eax,0x1
   12623:	74 4f                	je     12674 <get_stem_contributions_d0+0x558>
   12625:	e9 ec 00 00 00       	jmp    12716 <get_stem_contributions_d0+0x5fa>
   1262a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1262e:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   12631:	48 89 d6             	mov    rsi,rdx
   12634:	89 c7                	mov    edi,eax
   12636:	e8 50 e3 01 00       	call   3098b <vrna_get_ptype>
   1263b:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   1263e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   12642:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   12645:	48 89 d1             	mov    rcx,rdx
   12648:	ba ff ff ff ff       	mov    edx,0xffffffff
   1264d:	be ff ff ff ff       	mov    esi,0xffffffff
   12652:	89 c7                	mov    edi,eax
   12654:	e8 e2 e9 ff ff       	call   1103b <vrna_E_ext_stem>
   12659:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1265d:	48 83 c2 04          	add    rdx,0x4
   12661:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   12663:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12667:	48 83 c2 04          	add    rdx,0x4
   1266b:	01 c8                	add    eax,ecx
   1266d:	89 02                	mov    DWORD PTR [rdx],eax
   1266f:	e9 a2 00 00 00       	jmp    12716 <get_stem_contributions_d0+0x5fa>
   12674:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1267b:	e9 89 00 00 00       	jmp    12709 <get_stem_contributions_d0+0x5ed>
   12680:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   12683:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1268b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1268f:	48 01 d0             	add    rax,rdx
   12692:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12695:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   12698:	48 63 d2             	movsxd rdx,edx
   1269b:	48 01 d2             	add    rdx,rdx
   1269e:	48 01 d0             	add    rax,rdx
   126a1:	0f b7 00             	movzx  eax,WORD PTR [rax]
   126a4:	0f bf c8             	movsx  ecx,ax
   126a7:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   126aa:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   126b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   126b6:	48 01 d0             	add    rax,rdx
   126b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   126bc:	48 83 c0 02          	add    rax,0x2
   126c0:	0f b7 00             	movzx  eax,WORD PTR [rax]
   126c3:	98                   	cwde   
   126c4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   126c8:	89 ce                	mov    esi,ecx
   126ca:	89 c7                	mov    edi,eax
   126cc:	e8 67 e2 01 00       	call   30938 <vrna_get_ptype_md>
   126d1:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   126d4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   126d8:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   126db:	48 89 d1             	mov    rcx,rdx
   126de:	ba ff ff ff ff       	mov    edx,0xffffffff
   126e3:	be ff ff ff ff       	mov    esi,0xffffffff
   126e8:	89 c7                	mov    edi,eax
   126ea:	e8 4c e9 ff ff       	call   1103b <vrna_E_ext_stem>
   126ef:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   126f3:	48 83 c2 04          	add    rdx,0x4
   126f7:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   126f9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   126fd:	48 83 c2 04          	add    rdx,0x4
   12701:	01 c8                	add    eax,ecx
   12703:	89 02                	mov    DWORD PTR [rdx],eax
   12705:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   12709:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1270c:	3b 45 b0             	cmp    eax,DWORD PTR [rbp-0x50]
   1270f:	0f 82 6b ff ff ff    	jb     12680 <get_stem_contributions_d0+0x564>
   12715:	90                   	nop
   12716:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1271b:	74 31                	je     1274e <get_stem_contributions_d0+0x632>
   1271d:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
   12724:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   12727:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1272a:	4c 8b 45 f8          	mov    r8,QWORD PTR [rbp-0x8]
   1272e:	be 01 00 00 00       	mov    esi,0x1
   12733:	89 c7                	mov    edi,eax
   12735:	41 ff d0             	call   r8
   12738:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1273c:	48 83 c2 04          	add    rdx,0x4
   12740:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   12742:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12746:	48 83 c2 04          	add    rdx,0x4
   1274a:	01 c8                	add    eax,ecx
   1274c:	89 02                	mov    DWORD PTR [rdx],eax
   1274e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   12752:	c9                   	leave  
   12753:	c3                   	ret    

0000000000012754 <f3_get_stem_contributions_d0>:
   12754:	55                   	push   rbp
   12755:	48 89 e5             	mov    rbp,rsp
   12758:	53                   	push   rbx
   12759:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
   12760:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
   12767:	89 b5 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],esi
   1276d:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
   12774:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
   1277b:	4c 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],r8
   12782:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12789:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1278c:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   1278f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12796:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   1279c:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   1279f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   127a6:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   127aa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   127ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   127b2:	48 05 98 35 03 00    	add    rax,0x33598
   127b8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   127bc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   127c3:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   127c7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   127cb:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   127d1:	48 63 d2             	movsxd rdx,edx
   127d4:	48 c1 e2 03          	shl    rdx,0x3
   127d8:	48 01 d0             	add    rax,rdx
   127db:	48 8b 00             	mov    rax,QWORD PTR [rax]
   127de:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   127e2:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   127e8:	48 98                	cdqe   
   127ea:	48 c1 e0 02          	shl    rax,0x2
   127ee:	48 f7 d8             	neg    rax
   127f1:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   127f5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   127f9:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   127ff:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   12802:	48 c7 45 a8 00 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
   1280a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12811:	8b 00                	mov    eax,DWORD PTR [rax]
   12813:	85 c0                	test   eax,eax
   12815:	75 10                	jne    12827 <f3_get_stem_contributions_d0+0xd3>
   12817:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1281e:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   12825:	eb 05                	jmp    1282c <f3_get_stem_contributions_d0+0xd8>
   12827:	b8 00 00 00 00       	mov    eax,0x0
   1282c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   12830:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12837:	8b 00                	mov    eax,DWORD PTR [rax]
   12839:	85 c0                	test   eax,eax
   1283b:	74 0f                	je     1284c <f3_get_stem_contributions_d0+0xf8>
   1283d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12844:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   1284a:	eb 05                	jmp    12851 <f3_get_stem_contributions_d0+0xfd>
   1284c:	b8 01 00 00 00       	mov    eax,0x1
   12851:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   12854:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1285b:	8b 00                	mov    eax,DWORD PTR [rax]
   1285d:	85 c0                	test   eax,eax
   1285f:	74 10                	je     12871 <f3_get_stem_contributions_d0+0x11d>
   12861:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12868:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   1286f:	eb 05                	jmp    12876 <f3_get_stem_contributions_d0+0x122>
   12871:	b8 00 00 00 00       	mov    eax,0x0
   12876:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1287a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1287d:	83 c0 06             	add    eax,0x6
   12880:	48 98                	cdqe   
   12882:	c1 e0 02             	shl    eax,0x2
   12885:	89 c7                	mov    edi,eax
   12887:	e8 85 c4 01 00       	call   2ed11 <vrna_alloc>
   1288c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   12890:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12896:	48 98                	cdqe   
   12898:	48 c1 e0 02          	shl    rax,0x2
   1289c:	48 f7 d8             	neg    rax
   1289f:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
   128a3:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   128aa:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   128ae:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   128b2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   128b9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   128bd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   128c1:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   128c7:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   128ca:	01 d0                	add    eax,edx
   128cc:	89 c2                	mov    edx,eax
   128ce:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   128d1:	83 e8 01             	sub    eax,0x1
   128d4:	39 c2                	cmp    edx,eax
   128d6:	0f 46 c2             	cmovbe eax,edx
   128d9:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   128dc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   128e3:	8b 00                	mov    eax,DWORD PTR [rax]
   128e5:	85 c0                	test   eax,eax
   128e7:	74 0e                	je     128f7 <f3_get_stem_contributions_d0+0x1a3>
   128e9:	83 f8 01             	cmp    eax,0x1
   128ec:	0f 84 00 01 00 00    	je     129f2 <f3_get_stem_contributions_d0+0x29e>
   128f2:	e9 9e 02 00 00       	jmp    12b95 <f3_get_stem_contributions_d0+0x441>
   128f7:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   128fd:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   12900:	01 d0                	add    eax,edx
   12902:	83 c0 01             	add    eax,0x1
   12905:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   12908:	e9 d4 00 00 00       	jmp    129e1 <f3_get_stem_contributions_d0+0x28d>
   1290d:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12910:	48 98                	cdqe   
   12912:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1291a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1291e:	48 01 d0             	add    rax,rdx
   12921:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12927:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1292a:	48 98                	cdqe   
   1292c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12934:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   12938:	48 01 d0             	add    rax,rdx
   1293b:	8b 00                	mov    eax,DWORD PTR [rax]
   1293d:	3d 80 96 98 00       	cmp    eax,0x989680
   12942:	0f 84 95 00 00 00    	je     129dd <f3_get_stem_contributions_d0+0x289>
   12948:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1294b:	8d 48 01             	lea    ecx,[rax+0x1]
   1294e:	8b 75 90             	mov    esi,DWORD PTR [rbp-0x70]
   12951:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
   12958:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   1295b:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12961:	4c 8b 95 68 ff ff ff 	mov    r10,QWORD PTR [rbp-0x98]
   12968:	49 89 f9             	mov    r9,rdi
   1296b:	41 b8 10 00 00 00    	mov    r8d,0x10
   12971:	89 c7                	mov    edi,eax
   12973:	41 ff d2             	call   r10
   12976:	84 c0                	test   al,al
   12978:	74 63                	je     129dd <f3_get_stem_contributions_d0+0x289>
   1297a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1297e:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
   12981:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12987:	89 ce                	mov    esi,ecx
   12989:	89 c7                	mov    edi,eax
   1298b:	e8 32 e0 01 00       	call   309c2 <vrna_get_ptype_window>
   12990:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12993:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12996:	48 98                	cdqe   
   12998:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   129a0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   129a4:	48 01 d0             	add    rax,rdx
   129a7:	8b 18                	mov    ebx,DWORD PTR [rax]
   129a9:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   129ad:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   129b0:	48 89 d1             	mov    rcx,rdx
   129b3:	ba ff ff ff ff       	mov    edx,0xffffffff
   129b8:	be ff ff ff ff       	mov    esi,0xffffffff
   129bd:	89 c7                	mov    edi,eax
   129bf:	e8 77 e6 ff ff       	call   1103b <vrna_E_ext_stem>
   129c4:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   129c7:	48 63 d2             	movsxd rdx,edx
   129ca:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   129d2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   129d6:	48 01 ca             	add    rdx,rcx
   129d9:	01 d8                	add    eax,ebx
   129db:	89 02                	mov    DWORD PTR [rdx],eax
   129dd:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   129e1:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   129e4:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   129e7:	0f 8e 20 ff ff ff    	jle    1290d <f3_get_stem_contributions_d0+0x1b9>
   129ed:	e9 a3 01 00 00       	jmp    12b95 <f3_get_stem_contributions_d0+0x441>
   129f2:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
   129f5:	01 c0                	add    eax,eax
   129f7:	89 c7                	mov    edi,eax
   129f9:	e8 13 c3 01 00       	call   2ed11 <vrna_alloc>
   129fe:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   12a02:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   12a09:	eb 3c                	jmp    12a47 <f3_get_stem_contributions_d0+0x2f3>
   12a0b:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12a0e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   12a16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   12a1a:	48 01 d0             	add    rax,rdx
   12a1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12a20:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   12a26:	48 63 d2             	movsxd rdx,edx
   12a29:	48 01 d2             	add    rdx,rdx
   12a2c:	48 01 d0             	add    rax,rdx
   12a2f:	8b 55 84             	mov    edx,DWORD PTR [rbp-0x7c]
   12a32:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   12a36:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   12a3a:	48 01 ca             	add    rdx,rcx
   12a3d:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12a40:	66 89 02             	mov    WORD PTR [rdx],ax
   12a43:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   12a47:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12a4a:	3b 45 9c             	cmp    eax,DWORD PTR [rbp-0x64]
   12a4d:	72 bc                	jb     12a0b <f3_get_stem_contributions_d0+0x2b7>
   12a4f:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   12a55:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   12a58:	01 d0                	add    eax,edx
   12a5a:	83 c0 01             	add    eax,0x1
   12a5d:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   12a60:	e9 23 01 00 00       	jmp    12b88 <f3_get_stem_contributions_d0+0x434>
   12a65:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12a68:	48 98                	cdqe   
   12a6a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12a72:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12a76:	48 01 d0             	add    rax,rdx
   12a79:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12a7f:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12a82:	48 98                	cdqe   
   12a84:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12a8c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   12a90:	48 01 d0             	add    rax,rdx
   12a93:	8b 00                	mov    eax,DWORD PTR [rax]
   12a95:	3d 80 96 98 00       	cmp    eax,0x989680
   12a9a:	0f 84 e4 00 00 00    	je     12b84 <f3_get_stem_contributions_d0+0x430>
   12aa0:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12aa3:	8d 48 01             	lea    ecx,[rax+0x1]
   12aa6:	8b 75 90             	mov    esi,DWORD PTR [rbp-0x70]
   12aa9:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
   12ab0:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   12ab3:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12ab9:	4c 8b 95 68 ff ff ff 	mov    r10,QWORD PTR [rbp-0x98]
   12ac0:	49 89 f9             	mov    r9,rdi
   12ac3:	41 b8 10 00 00 00    	mov    r8d,0x10
   12ac9:	89 c7                	mov    edi,eax
   12acb:	41 ff d2             	call   r10
   12ace:	84 c0                	test   al,al
   12ad0:	0f 84 ae 00 00 00    	je     12b84 <f3_get_stem_contributions_d0+0x430>
   12ad6:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12ad9:	48 98                	cdqe   
   12adb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12ae3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   12ae7:	48 01 d0             	add    rax,rdx
   12aea:	8b 00                	mov    eax,DWORD PTR [rax]
   12aec:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   12aef:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   12af6:	eb 6b                	jmp    12b63 <f3_get_stem_contributions_d0+0x40f>
   12af8:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12afb:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   12b03:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   12b07:	48 01 d0             	add    rax,rdx
   12b0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12b0d:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   12b10:	48 63 d2             	movsxd rdx,edx
   12b13:	48 01 d2             	add    rdx,rdx
   12b16:	48 01 d0             	add    rax,rdx
   12b19:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12b1c:	0f bf c8             	movsx  ecx,ax
   12b1f:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12b22:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   12b26:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   12b2a:	48 01 d0             	add    rax,rdx
   12b2d:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12b30:	98                   	cwde   
   12b31:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12b35:	89 ce                	mov    esi,ecx
   12b37:	89 c7                	mov    edi,eax
   12b39:	e8 fa dd 01 00       	call   30938 <vrna_get_ptype_md>
   12b3e:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12b41:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   12b45:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   12b48:	48 89 d1             	mov    rcx,rdx
   12b4b:	ba ff ff ff ff       	mov    edx,0xffffffff
   12b50:	be ff ff ff ff       	mov    esi,0xffffffff
   12b55:	89 c7                	mov    edi,eax
   12b57:	e8 df e4 ff ff       	call   1103b <vrna_E_ext_stem>
   12b5c:	01 45 88             	add    DWORD PTR [rbp-0x78],eax
   12b5f:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   12b63:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12b66:	3b 45 9c             	cmp    eax,DWORD PTR [rbp-0x64]
   12b69:	72 8d                	jb     12af8 <f3_get_stem_contributions_d0+0x3a4>
   12b6b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12b6e:	48 98                	cdqe   
   12b70:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12b78:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12b7c:	48 01 c2             	add    rdx,rax
   12b7f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   12b82:	89 02                	mov    DWORD PTR [rdx],eax
   12b84:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   12b88:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12b8b:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   12b8e:	0f 8e d1 fe ff ff    	jle    12a65 <f3_get_stem_contributions_d0+0x311>
   12b94:	90                   	nop
   12b95:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   12b9a:	0f 84 90 00 00 00    	je     12c30 <f3_get_stem_contributions_d0+0x4dc>
   12ba0:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   12ba6:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   12ba9:	01 d0                	add    eax,edx
   12bab:	83 c0 01             	add    eax,0x1
   12bae:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   12bb1:	eb 75                	jmp    12c28 <f3_get_stem_contributions_d0+0x4d4>
   12bb3:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12bb6:	48 98                	cdqe   
   12bb8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12bc0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12bc4:	48 01 d0             	add    rax,rdx
   12bc7:	8b 00                	mov    eax,DWORD PTR [rax]
   12bc9:	3d 80 96 98 00       	cmp    eax,0x989680
   12bce:	74 54                	je     12c24 <f3_get_stem_contributions_d0+0x4d0>
   12bd0:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12bd3:	8d 78 01             	lea    edi,[rax+0x1]
   12bd6:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
   12bdd:	8b 75 8c             	mov    esi,DWORD PTR [rbp-0x74]
   12be0:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12be6:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
   12bea:	48 89 d1             	mov    rcx,rdx
   12bed:	89 fa                	mov    edx,edi
   12bef:	89 c7                	mov    edi,eax
   12bf1:	41 ff d0             	call   r8
   12bf4:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   12bf7:	48 63 d2             	movsxd rdx,edx
   12bfa:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   12c02:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   12c06:	48 01 ca             	add    rdx,rcx
   12c09:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   12c0b:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   12c0e:	48 63 d2             	movsxd rdx,edx
   12c11:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   12c19:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   12c1d:	48 01 f2             	add    rdx,rsi
   12c20:	01 c8                	add    eax,ecx
   12c22:	89 02                	mov    DWORD PTR [rdx],eax
   12c24:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   12c28:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12c2b:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   12c2e:	7e 83                	jle    12bb3 <f3_get_stem_contributions_d0+0x45f>
   12c30:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   12c36:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   12c39:	01 d0                	add    eax,edx
   12c3b:	39 45 90             	cmp    DWORD PTR [rbp-0x70],eax
   12c3e:	0f 87 a1 01 00 00    	ja     12de5 <f3_get_stem_contributions_d0+0x691>
   12c44:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   12c47:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   12c4a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12c4d:	48 98                	cdqe   
   12c4f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12c57:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12c5b:	48 01 d0             	add    rax,rdx
   12c5e:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12c64:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12c67:	48 98                	cdqe   
   12c69:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12c71:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   12c75:	48 01 d0             	add    rax,rdx
   12c78:	8b 00                	mov    eax,DWORD PTR [rax]
   12c7a:	3d 80 96 98 00       	cmp    eax,0x989680
   12c7f:	0f 84 86 01 00 00    	je     12e0b <f3_get_stem_contributions_d0+0x6b7>
   12c85:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
   12c8c:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
   12c8f:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   12c95:	8b 75 8c             	mov    esi,DWORD PTR [rbp-0x74]
   12c98:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12c9e:	4c 8b 95 68 ff ff ff 	mov    r10,QWORD PTR [rbp-0x98]
   12ca5:	49 89 f9             	mov    r9,rdi
   12ca8:	41 b8 0e 00 00 00    	mov    r8d,0xe
   12cae:	89 c7                	mov    edi,eax
   12cb0:	41 ff d2             	call   r10
   12cb3:	84 c0                	test   al,al
   12cb5:	0f 84 50 01 00 00    	je     12e0b <f3_get_stem_contributions_d0+0x6b7>
   12cbb:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12cbe:	48 98                	cdqe   
   12cc0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12cc8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   12ccc:	48 01 d0             	add    rax,rdx
   12ccf:	8b 00                	mov    eax,DWORD PTR [rax]
   12cd1:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   12cd4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12cdb:	8b 00                	mov    eax,DWORD PTR [rax]
   12cdd:	85 c0                	test   eax,eax
   12cdf:	74 0a                	je     12ceb <f3_get_stem_contributions_d0+0x597>
   12ce1:	83 f8 01             	cmp    eax,0x1
   12ce4:	74 3e                	je     12d24 <f3_get_stem_contributions_d0+0x5d0>
   12ce6:	e9 b6 00 00 00       	jmp    12da1 <f3_get_stem_contributions_d0+0x64d>
   12ceb:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   12cef:	8b 4d 8c             	mov    ecx,DWORD PTR [rbp-0x74]
   12cf2:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12cf8:	89 ce                	mov    esi,ecx
   12cfa:	89 c7                	mov    edi,eax
   12cfc:	e8 c1 dc 01 00       	call   309c2 <vrna_get_ptype_window>
   12d01:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12d04:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   12d08:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   12d0b:	48 89 d1             	mov    rcx,rdx
   12d0e:	ba ff ff ff ff       	mov    edx,0xffffffff
   12d13:	be ff ff ff ff       	mov    esi,0xffffffff
   12d18:	89 c7                	mov    edi,eax
   12d1a:	e8 1c e3 ff ff       	call   1103b <vrna_E_ext_stem>
   12d1f:	01 45 88             	add    DWORD PTR [rbp-0x78],eax
   12d22:	eb 7d                	jmp    12da1 <f3_get_stem_contributions_d0+0x64d>
   12d24:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   12d2b:	eb 6b                	jmp    12d98 <f3_get_stem_contributions_d0+0x644>
   12d2d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12d30:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   12d38:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   12d3c:	48 01 d0             	add    rax,rdx
   12d3f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12d42:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   12d45:	48 63 d2             	movsxd rdx,edx
   12d48:	48 01 d2             	add    rdx,rdx
   12d4b:	48 01 d0             	add    rax,rdx
   12d4e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12d51:	0f bf c8             	movsx  ecx,ax
   12d54:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12d57:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   12d5b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   12d5f:	48 01 d0             	add    rax,rdx
   12d62:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12d65:	98                   	cwde   
   12d66:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   12d6a:	89 ce                	mov    esi,ecx
   12d6c:	89 c7                	mov    edi,eax
   12d6e:	e8 c5 db 01 00       	call   30938 <vrna_get_ptype_md>
   12d73:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   12d76:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   12d7a:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   12d7d:	48 89 d1             	mov    rcx,rdx
   12d80:	ba ff ff ff ff       	mov    edx,0xffffffff
   12d85:	be ff ff ff ff       	mov    esi,0xffffffff
   12d8a:	89 c7                	mov    edi,eax
   12d8c:	e8 aa e2 ff ff       	call   1103b <vrna_E_ext_stem>
   12d91:	01 45 88             	add    DWORD PTR [rbp-0x78],eax
   12d94:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   12d98:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   12d9b:	3b 45 9c             	cmp    eax,DWORD PTR [rbp-0x64]
   12d9e:	72 8d                	jb     12d2d <f3_get_stem_contributions_d0+0x5d9>
   12da0:	90                   	nop
   12da1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   12da6:	74 22                	je     12dca <f3_get_stem_contributions_d0+0x676>
   12da8:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
   12daf:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   12db2:	8b b5 74 ff ff ff    	mov    esi,DWORD PTR [rbp-0x8c]
   12db8:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   12dbe:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
   12dc2:	89 c7                	mov    edi,eax
   12dc4:	41 ff d0             	call   r8
   12dc7:	01 45 88             	add    DWORD PTR [rbp-0x78],eax
   12dca:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   12dcd:	48 98                	cdqe   
   12dcf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12dd7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12ddb:	48 01 c2             	add    rdx,rax
   12dde:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   12de1:	89 02                	mov    DWORD PTR [rdx],eax
   12de3:	eb 26                	jmp    12e0b <f3_get_stem_contributions_d0+0x6b7>
   12de5:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   12deb:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   12dee:	01 d0                	add    eax,edx
   12df0:	48 98                	cdqe   
   12df2:	48 83 c0 01          	add    rax,0x1
   12df6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12dfe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12e02:	48 01 d0             	add    rax,rdx
   12e05:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12e0b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   12e0f:	48 89 c7             	mov    rdi,rax
   12e12:	e8 29 0b ff ff       	call   3940 <free@plt>
   12e17:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   12e1b:	48 81 c4 a8 00 00 00 	add    rsp,0xa8
   12e22:	5b                   	pop    rbx
   12e23:	5d                   	pop    rbp
   12e24:	c3                   	ret    

0000000000012e25 <get_stem_contributions_d2>:
   12e25:	55                   	push   rbp
   12e26:	48 89 e5             	mov    rbp,rsp
   12e29:	53                   	push   rbx
   12e2a:	48 81 ec e8 00 00 00 	sub    rsp,0xe8
   12e31:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
   12e38:	89 b5 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],esi
   12e3e:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
   12e45:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
   12e4c:	4c 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],r8
   12e53:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12e59:	48 98                	cdqe   
   12e5b:	c1 e0 02             	shl    eax,0x2
   12e5e:	89 c7                	mov    edi,eax
   12e60:	e8 ac be 01 00       	call   2ed11 <vrna_alloc>
   12e65:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
   12e6c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12e73:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   12e76:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   12e7c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12e83:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   12e87:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   12e8b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   12e8f:	48 05 98 35 03 00    	add    rax,0x33598
   12e95:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   12e99:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12ea0:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   12ea4:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   12ea8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12eaf:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   12eb3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   12eb7:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   12ebb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   12ebf:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   12ec5:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   12ecb:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12ed1:	48 98                	cdqe   
   12ed3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12edb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   12edf:	48 01 d0             	add    rax,rdx
   12ee2:	8b 10                	mov    edx,DWORD PTR [rax]
   12ee4:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12eea:	01 d0                	add    eax,edx
   12eec:	2b 85 60 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa0]
   12ef2:	83 e8 01             	sub    eax,0x1
   12ef5:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   12efb:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   12f02:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   12f06:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   12f0a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   12f11:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   12f15:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   12f19:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12f20:	8b 00                	mov    eax,DWORD PTR [rax]
   12f22:	85 c0                	test   eax,eax
   12f24:	74 0e                	je     12f34 <get_stem_contributions_d2+0x10f>
   12f26:	83 f8 01             	cmp    eax,0x1
   12f29:	0f 84 bd 03 00 00    	je     132ec <get_stem_contributions_d2+0x4c7>
   12f2f:	e9 0b 0a 00 00       	jmp    1393f <get_stem_contributions_d2+0xb1a>
   12f34:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12f3b:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   12f42:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   12f46:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   12f4d:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   12f54:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   12f58:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12f5e:	48 63 d0             	movsxd rdx,eax
   12f61:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   12f67:	48 98                	cdqe   
   12f69:	48 29 c2             	sub    rdx,rax
   12f6c:	48 89 d0             	mov    rax,rdx
   12f6f:	48 01 c0             	add    rax,rax
   12f72:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   12f76:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   12f7a:	48 01 d0             	add    rax,rdx
   12f7d:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   12f84:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12f8a:	3b 85 5c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa4]
   12f90:	7d 1c                	jge    12fae <get_stem_contributions_d2+0x189>
   12f92:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12f98:	48 98                	cdqe   
   12f9a:	48 83 c0 01          	add    rax,0x1
   12f9e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   12fa2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   12fa6:	48 01 d0             	add    rax,rdx
   12fa9:	0f b7 00             	movzx  eax,WORD PTR [rax]
   12fac:	eb 05                	jmp    12fb3 <get_stem_contributions_d2+0x18e>
   12fae:	b8 ff ff ff ff       	mov    eax,0xffffffff
   12fb3:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
   12fba:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   12fc0:	2b 85 60 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa0]
   12fc6:	83 e8 01             	sub    eax,0x1
   12fc9:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
   12fcf:	e9 0f 01 00 00       	jmp    130e3 <get_stem_contributions_d2+0x2be>
   12fd4:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   12fda:	48 98                	cdqe   
   12fdc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   12fe4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   12feb:	48 01 d0             	add    rax,rdx
   12fee:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   12ff4:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   12ffa:	48 98                	cdqe   
   12ffc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13004:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13008:	48 01 d0             	add    rax,rdx
   1300b:	8b 00                	mov    eax,DWORD PTR [rax]
   1300d:	3d 80 96 98 00       	cmp    eax,0x989680
   13012:	0f 84 b5 00 00 00    	je     130cd <get_stem_contributions_d2+0x2a8>
   13018:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1301e:	8d 70 ff             	lea    esi,[rax-0x1]
   13021:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
   13028:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1302e:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13034:	4c 8b 95 28 ff ff ff 	mov    r10,QWORD PTR [rbp-0xd8]
   1303b:	49 89 c9             	mov    r9,rcx
   1303e:	41 b8 12 00 00 00    	mov    r8d,0x12
   13044:	89 d1                	mov    ecx,edx
   13046:	89 f2                	mov    edx,esi
   13048:	89 c6                	mov    esi,eax
   1304a:	bf 01 00 00 00       	mov    edi,0x1
   1304f:	41 ff d2             	call   r10
   13052:	84 c0                	test   al,al
   13054:	74 77                	je     130cd <get_stem_contributions_d2+0x2a8>
   13056:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1305a:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13060:	48 89 d6             	mov    rsi,rdx
   13063:	89 c7                	mov    edi,eax
   13065:	e8 21 d9 01 00       	call   3098b <vrna_get_ptype>
   1306a:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   13070:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13076:	48 98                	cdqe   
   13078:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13080:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13084:	48 01 d0             	add    rax,rdx
   13087:	8b 18                	mov    ebx,DWORD PTR [rax]
   13089:	0f bf 95 4e ff ff ff 	movsx  edx,WORD PTR [rbp-0xb2]
   13090:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   13097:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1309a:	0f bf f0             	movsx  esi,ax
   1309d:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   130a1:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   130a7:	89 c7                	mov    edi,eax
   130a9:	e8 8d df ff ff       	call   1103b <vrna_E_ext_stem>
   130ae:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   130b4:	48 63 d2             	movsxd rdx,edx
   130b7:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   130bf:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   130c6:	48 01 ca             	add    rdx,rcx
   130c9:	01 d8                	add    eax,ebx
   130cb:	89 02                	mov    DWORD PTR [rdx],eax
   130cd:	83 ad 54 ff ff ff 01 	sub    DWORD PTR [rbp-0xac],0x1
   130d4:	83 ad 58 ff ff ff 01 	sub    DWORD PTR [rbp-0xa8],0x1
   130db:	48 83 ad 70 ff ff ff 02 	sub    QWORD PTR [rbp-0x90],0x2
   130e3:	83 bd 54 ff ff ff 01 	cmp    DWORD PTR [rbp-0xac],0x1
   130ea:	0f 8f e4 fe ff ff    	jg     12fd4 <get_stem_contributions_d2+0x1af>
   130f0:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   130f5:	0f 84 b2 00 00 00    	je     131ad <get_stem_contributions_d2+0x388>
   130fb:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13101:	2b 85 60 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa0]
   13107:	83 e8 01             	sub    eax,0x1
   1310a:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
   13110:	e9 8b 00 00 00       	jmp    131a0 <get_stem_contributions_d2+0x37b>
   13115:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1311b:	48 98                	cdqe   
   1311d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13125:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1312c:	48 01 d0             	add    rax,rdx
   1312f:	8b 00                	mov    eax,DWORD PTR [rax]
   13131:	3d 80 96 98 00       	cmp    eax,0x989680
   13136:	74 61                	je     13199 <get_stem_contributions_d2+0x374>
   13138:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1313e:	8d 70 ff             	lea    esi,[rax-0x1]
   13141:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   13148:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1314e:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13154:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   13158:	89 c7                	mov    edi,eax
   1315a:	41 ff d0             	call   r8
   1315d:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   13163:	48 63 d2             	movsxd rdx,edx
   13166:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1316e:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13175:	48 01 ca             	add    rdx,rcx
   13178:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1317a:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   13180:	48 63 d2             	movsxd rdx,edx
   13183:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1318b:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13192:	48 01 f2             	add    rdx,rsi
   13195:	01 c8                	add    eax,ecx
   13197:	89 02                	mov    DWORD PTR [rdx],eax
   13199:	83 ad 54 ff ff ff 01 	sub    DWORD PTR [rbp-0xac],0x1
   131a0:	83 bd 54 ff ff ff 01 	cmp    DWORD PTR [rbp-0xac],0x1
   131a7:	0f 8f 68 ff ff ff    	jg     13115 <get_stem_contributions_d2+0x2f0>
   131ad:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   131b4:	48 83 c0 04          	add    rax,0x4
   131b8:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   131be:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   131c4:	48 98                	cdqe   
   131c6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   131ce:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   131d2:	48 01 d0             	add    rax,rdx
   131d5:	8b 00                	mov    eax,DWORD PTR [rax]
   131d7:	83 c0 01             	add    eax,0x1
   131da:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   131e0:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   131e6:	48 98                	cdqe   
   131e8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   131f0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   131f4:	48 01 d0             	add    rax,rdx
   131f7:	8b 00                	mov    eax,DWORD PTR [rax]
   131f9:	3d 80 96 98 00       	cmp    eax,0x989680
   131fe:	0f 84 3a 07 00 00    	je     1393e <get_stem_contributions_d2+0xb19>
   13204:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
   1320b:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   13211:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13217:	4c 8b 95 28 ff ff ff 	mov    r10,QWORD PTR [rbp-0xd8]
   1321e:	49 89 c9             	mov    r9,rcx
   13221:	41 b8 0e 00 00 00    	mov    r8d,0xe
   13227:	89 d1                	mov    ecx,edx
   13229:	ba 01 00 00 00       	mov    edx,0x1
   1322e:	89 c6                	mov    esi,eax
   13230:	bf 01 00 00 00       	mov    edi,0x1
   13235:	41 ff d2             	call   r10
   13238:	84 c0                	test   al,al
   1323a:	0f 84 fe 06 00 00    	je     1393e <get_stem_contributions_d2+0xb19>
   13240:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   13244:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   1324a:	48 89 d6             	mov    rsi,rdx
   1324d:	89 c7                	mov    edi,eax
   1324f:	e8 37 d7 01 00       	call   3098b <vrna_get_ptype>
   13254:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   1325a:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13260:	48 98                	cdqe   
   13262:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1326a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1326e:	48 01 d0             	add    rax,rdx
   13271:	8b 18                	mov    ebx,DWORD PTR [rax]
   13273:	0f bf 95 4e ff ff ff 	movsx  edx,WORD PTR [rbp-0xb2]
   1327a:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   1327e:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13284:	be ff ff ff ff       	mov    esi,0xffffffff
   13289:	89 c7                	mov    edi,eax
   1328b:	e8 ab dd ff ff       	call   1103b <vrna_E_ext_stem>
   13290:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13297:	48 83 c2 04          	add    rdx,0x4
   1329b:	01 d8                	add    eax,ebx
   1329d:	89 02                	mov    DWORD PTR [rdx],eax
   1329f:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   132a4:	0f 84 94 06 00 00    	je     1393e <get_stem_contributions_d2+0xb19>
   132aa:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   132b1:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   132b7:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   132bd:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   132c1:	be 01 00 00 00       	mov    esi,0x1
   132c6:	89 c7                	mov    edi,eax
   132c8:	41 ff d0             	call   r8
   132cb:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   132d2:	48 83 c2 04          	add    rdx,0x4
   132d6:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   132d8:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   132df:	48 83 c2 04          	add    rdx,0x4
   132e3:	01 c8                	add    eax,ecx
   132e5:	89 02                	mov    DWORD PTR [rdx],eax
   132e7:	e9 52 06 00 00       	jmp    1393e <get_stem_contributions_d2+0xb19>
   132ec:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   132f3:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   132f9:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   132ff:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   13306:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   1330d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   13311:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   13318:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   1331f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   13323:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1332a:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
   13331:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   13335:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1333c:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   13343:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   13347:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1334d:	01 c0                	add    eax,eax
   1334f:	89 c7                	mov    edi,eax
   13351:	e8 bb b9 01 00       	call   2ed11 <vrna_alloc>
   13356:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1335a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13360:	01 c0                	add    eax,eax
   13362:	89 c7                	mov    edi,eax
   13364:	e8 a8 b9 01 00       	call   2ed11 <vrna_alloc>
   13369:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   1336d:	c7 85 50 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xb0],0x0
   13377:	e9 e2 00 00 00       	jmp    1345e <get_stem_contributions_d2+0x639>
   1337c:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13382:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1338a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1338e:	48 01 d0             	add    rax,rdx
   13391:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13394:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   1339a:	48 63 d2             	movsxd rdx,edx
   1339d:	48 c1 e2 02          	shl    rdx,0x2
   133a1:	48 01 d0             	add    rax,rdx
   133a4:	8b 10                	mov    edx,DWORD PTR [rax]
   133a6:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   133ac:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   133b4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   133b8:	48 01 c8             	add    rax,rcx
   133bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   133be:	8b 8d 5c ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa4]
   133c4:	48 63 c9             	movsxd rcx,ecx
   133c7:	48 c1 e1 02          	shl    rcx,0x2
   133cb:	48 01 c8             	add    rax,rcx
   133ce:	8b 00                	mov    eax,DWORD PTR [rax]
   133d0:	39 c2                	cmp    edx,eax
   133d2:	73 2c                	jae    13400 <get_stem_contributions_d2+0x5db>
   133d4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   133da:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   133e2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   133e6:	48 01 d0             	add    rax,rdx
   133e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   133ec:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   133f2:	48 63 d2             	movsxd rdx,edx
   133f5:	48 01 d2             	add    rdx,rdx
   133f8:	48 01 d0             	add    rax,rdx
   133fb:	0f b7 00             	movzx  eax,WORD PTR [rax]
   133fe:	eb 05                	jmp    13405 <get_stem_contributions_d2+0x5e0>
   13400:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13405:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
   1340b:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   1340f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   13413:	48 01 ca             	add    rdx,rcx
   13416:	66 89 02             	mov    WORD PTR [rdx],ax
   13419:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   1341f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   13427:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1342b:	48 01 d0             	add    rax,rdx
   1342e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13431:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   13437:	48 63 d2             	movsxd rdx,edx
   1343a:	48 01 d2             	add    rdx,rdx
   1343d:	48 01 d0             	add    rax,rdx
   13440:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
   13446:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   1344a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1344e:	48 01 ca             	add    rdx,rcx
   13451:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13454:	66 89 02             	mov    WORD PTR [rdx],ax
   13457:	83 85 50 ff ff ff 01 	add    DWORD PTR [rbp-0xb0],0x1
   1345e:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13464:	3b 85 64 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x9c]
   1346a:	0f 82 0c ff ff ff    	jb     1337c <get_stem_contributions_d2+0x557>
   13470:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13476:	2b 85 60 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa0]
   1347c:	83 e8 01             	sub    eax,0x1
   1347f:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
   13485:	e9 18 02 00 00       	jmp    136a2 <get_stem_contributions_d2+0x87d>
   1348a:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   13490:	48 98                	cdqe   
   13492:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1349a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   134a1:	48 01 d0             	add    rax,rdx
   134a4:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   134aa:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   134b0:	48 98                	cdqe   
   134b2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   134ba:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   134be:	48 01 d0             	add    rax,rdx
   134c1:	8b 00                	mov    eax,DWORD PTR [rax]
   134c3:	3d 80 96 98 00       	cmp    eax,0x989680
   134c8:	0f 84 c6 01 00 00    	je     13694 <get_stem_contributions_d2+0x86f>
   134ce:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   134d4:	8d 70 ff             	lea    esi,[rax-0x1]
   134d7:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
   134de:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   134e4:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   134ea:	4c 8b 95 28 ff ff ff 	mov    r10,QWORD PTR [rbp-0xd8]
   134f1:	49 89 c9             	mov    r9,rcx
   134f4:	41 b8 12 00 00 00    	mov    r8d,0x12
   134fa:	89 d1                	mov    ecx,edx
   134fc:	89 f2                	mov    edx,esi
   134fe:	89 c6                	mov    esi,eax
   13500:	bf 01 00 00 00       	mov    edi,0x1
   13505:	41 ff d2             	call   r10
   13508:	84 c0                	test   al,al
   1350a:	0f 84 84 01 00 00    	je     13694 <get_stem_contributions_d2+0x86f>
   13510:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13516:	48 98                	cdqe   
   13518:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13520:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13524:	48 01 d0             	add    rax,rdx
   13527:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1352d:	48 63 d2             	movsxd rdx,edx
   13530:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   13538:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   1353f:	48 01 ca             	add    rdx,rcx
   13542:	8b 00                	mov    eax,DWORD PTR [rax]
   13544:	89 02                	mov    DWORD PTR [rdx],eax
   13546:	c7 85 50 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xb0],0x0
   13550:	e9 2d 01 00 00       	jmp    13682 <get_stem_contributions_d2+0x85d>
   13555:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   1355b:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1355f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13563:	48 01 d0             	add    rax,rdx
   13566:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13569:	0f bf c8             	movsx  ecx,ax
   1356c:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13572:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1357a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1357e:	48 01 d0             	add    rax,rdx
   13581:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13584:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1358a:	48 63 d2             	movsxd rdx,edx
   1358d:	48 01 d2             	add    rdx,rdx
   13590:	48 01 d0             	add    rax,rdx
   13593:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13596:	98                   	cwde   
   13597:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   1359b:	89 ce                	mov    esi,ecx
   1359d:	89 c7                	mov    edi,eax
   1359f:	e8 94 d3 01 00       	call   30938 <vrna_get_ptype_md>
   135a4:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   135aa:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   135b0:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   135b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   135bc:	48 01 d0             	add    rax,rdx
   135bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   135c2:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   135c8:	48 63 d2             	movsxd rdx,edx
   135cb:	48 c1 e2 02          	shl    rdx,0x2
   135cf:	48 01 d0             	add    rax,rdx
   135d2:	8b 00                	mov    eax,DWORD PTR [rax]
   135d4:	83 f8 01             	cmp    eax,0x1
   135d7:	76 2d                	jbe    13606 <get_stem_contributions_d2+0x7e1>
   135d9:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   135df:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   135e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   135eb:	48 01 d0             	add    rax,rdx
   135ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
   135f1:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   135f7:	48 63 d2             	movsxd rdx,edx
   135fa:	48 01 d2             	add    rdx,rdx
   135fd:	48 01 d0             	add    rax,rdx
   13600:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13603:	98                   	cwde   
   13604:	eb 05                	jmp    1360b <get_stem_contributions_d2+0x7e6>
   13606:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1360b:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   13611:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13617:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1361b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1361f:	48 01 d0             	add    rax,rdx
   13622:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13625:	0f bf d0             	movsx  edx,ax
   13628:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   1362c:	8b b5 6c ff ff ff    	mov    esi,DWORD PTR [rbp-0x94]
   13632:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13638:	89 c7                	mov    edi,eax
   1363a:	e8 fc d9 ff ff       	call   1103b <vrna_E_ext_stem>
   1363f:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   13645:	48 63 d2             	movsxd rdx,edx
   13648:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   13650:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13657:	48 01 ca             	add    rdx,rcx
   1365a:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1365c:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   13662:	48 63 d2             	movsxd rdx,edx
   13665:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1366d:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13674:	48 01 f2             	add    rdx,rsi
   13677:	01 c8                	add    eax,ecx
   13679:	89 02                	mov    DWORD PTR [rdx],eax
   1367b:	83 85 50 ff ff ff 01 	add    DWORD PTR [rbp-0xb0],0x1
   13682:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13688:	3b 85 64 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x9c]
   1368e:	0f 82 c1 fe ff ff    	jb     13555 <get_stem_contributions_d2+0x730>
   13694:	83 ad 54 ff ff ff 01 	sub    DWORD PTR [rbp-0xac],0x1
   1369b:	83 ad 58 ff ff ff 01 	sub    DWORD PTR [rbp-0xa8],0x1
   136a2:	83 bd 54 ff ff ff 01 	cmp    DWORD PTR [rbp-0xac],0x1
   136a9:	0f 8f db fd ff ff    	jg     1348a <get_stem_contributions_d2+0x665>
   136af:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   136b4:	0f 84 b2 00 00 00    	je     1376c <get_stem_contributions_d2+0x947>
   136ba:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   136c0:	2b 85 60 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa0]
   136c6:	83 e8 01             	sub    eax,0x1
   136c9:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
   136cf:	e9 8b 00 00 00       	jmp    1375f <get_stem_contributions_d2+0x93a>
   136d4:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   136da:	48 98                	cdqe   
   136dc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   136e4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   136eb:	48 01 d0             	add    rax,rdx
   136ee:	8b 00                	mov    eax,DWORD PTR [rax]
   136f0:	3d 80 96 98 00       	cmp    eax,0x989680
   136f5:	74 61                	je     13758 <get_stem_contributions_d2+0x933>
   136f7:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   136fd:	8d 70 ff             	lea    esi,[rax-0x1]
   13700:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   13707:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1370d:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13713:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   13717:	89 c7                	mov    edi,eax
   13719:	41 ff d0             	call   r8
   1371c:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   13722:	48 63 d2             	movsxd rdx,edx
   13725:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1372d:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13734:	48 01 ca             	add    rdx,rcx
   13737:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   13739:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1373f:	48 63 d2             	movsxd rdx,edx
   13742:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1374a:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   13751:	48 01 f2             	add    rdx,rsi
   13754:	01 c8                	add    eax,ecx
   13756:	89 02                	mov    DWORD PTR [rdx],eax
   13758:	83 ad 54 ff ff ff 01 	sub    DWORD PTR [rbp-0xac],0x1
   1375f:	83 bd 54 ff ff ff 01 	cmp    DWORD PTR [rbp-0xac],0x1
   13766:	0f 8f 68 ff ff ff    	jg     136d4 <get_stem_contributions_d2+0x8af>
   1376c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   13773:	48 83 c0 04          	add    rax,0x4
   13777:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   1377d:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   13783:	48 98                	cdqe   
   13785:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1378d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   13791:	48 01 d0             	add    rax,rdx
   13794:	8b 00                	mov    eax,DWORD PTR [rax]
   13796:	83 c0 01             	add    eax,0x1
   13799:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   1379f:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   137a5:	48 98                	cdqe   
   137a7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   137af:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   137b3:	48 01 d0             	add    rax,rdx
   137b6:	8b 00                	mov    eax,DWORD PTR [rax]
   137b8:	3d 80 96 98 00       	cmp    eax,0x989680
   137bd:	0f 84 61 01 00 00    	je     13924 <get_stem_contributions_d2+0xaff>
   137c3:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
   137ca:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   137d0:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   137d6:	4c 8b 95 28 ff ff ff 	mov    r10,QWORD PTR [rbp-0xd8]
   137dd:	49 89 c9             	mov    r9,rcx
   137e0:	41 b8 0e 00 00 00    	mov    r8d,0xe
   137e6:	89 d1                	mov    ecx,edx
   137e8:	ba 01 00 00 00       	mov    edx,0x1
   137ed:	89 c6                	mov    esi,eax
   137ef:	bf 01 00 00 00       	mov    edi,0x1
   137f4:	41 ff d2             	call   r10
   137f7:	84 c0                	test   al,al
   137f9:	0f 84 25 01 00 00    	je     13924 <get_stem_contributions_d2+0xaff>
   137ff:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13805:	48 98                	cdqe   
   13807:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1380f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13813:	48 01 d0             	add    rax,rdx
   13816:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   1381d:	48 83 c2 04          	add    rdx,0x4
   13821:	8b 00                	mov    eax,DWORD PTR [rax]
   13823:	89 02                	mov    DWORD PTR [rdx],eax
   13825:	c7 85 50 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xb0],0x0
   1382f:	e9 9a 00 00 00       	jmp    138ce <get_stem_contributions_d2+0xaa9>
   13834:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   1383a:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1383e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13842:	48 01 d0             	add    rax,rdx
   13845:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13848:	0f bf c8             	movsx  ecx,ax
   1384b:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13851:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   13859:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1385d:	48 01 d0             	add    rax,rdx
   13860:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13863:	48 83 c0 02          	add    rax,0x2
   13867:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1386a:	98                   	cwde   
   1386b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   1386f:	89 ce                	mov    esi,ecx
   13871:	89 c7                	mov    edi,eax
   13873:	e8 c0 d0 01 00       	call   30938 <vrna_get_ptype_md>
   13878:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   1387e:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   13884:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   13888:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1388c:	48 01 d0             	add    rax,rdx
   1388f:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13892:	0f bf d0             	movsx  edx,ax
   13895:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   13899:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   1389f:	be ff ff ff ff       	mov    esi,0xffffffff
   138a4:	89 c7                	mov    edi,eax
   138a6:	e8 90 d7 ff ff       	call   1103b <vrna_E_ext_stem>
   138ab:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   138b2:	48 83 c2 04          	add    rdx,0x4
   138b6:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   138b8:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   138bf:	48 83 c2 04          	add    rdx,0x4
   138c3:	01 c8                	add    eax,ecx
   138c5:	89 02                	mov    DWORD PTR [rdx],eax
   138c7:	83 85 50 ff ff ff 01 	add    DWORD PTR [rbp-0xb0],0x1
   138ce:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   138d4:	3b 85 64 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x9c]
   138da:	0f 82 54 ff ff ff    	jb     13834 <get_stem_contributions_d2+0xa0f>
   138e0:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   138e5:	74 3d                	je     13924 <get_stem_contributions_d2+0xaff>
   138e7:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   138ee:	8b 95 34 ff ff ff    	mov    edx,DWORD PTR [rbp-0xcc]
   138f4:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   138fa:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   138fe:	be 01 00 00 00       	mov    esi,0x1
   13903:	89 c7                	mov    edi,eax
   13905:	41 ff d0             	call   r8
   13908:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   1390f:	48 83 c2 04          	add    rdx,0x4
   13913:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   13915:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   1391c:	48 83 c2 04          	add    rdx,0x4
   13920:	01 c8                	add    eax,ecx
   13922:	89 02                	mov    DWORD PTR [rdx],eax
   13924:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   13928:	48 89 c7             	mov    rdi,rax
   1392b:	e8 10 00 ff ff       	call   3940 <free@plt>
   13930:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13934:	48 89 c7             	mov    rdi,rax
   13937:	e8 04 00 ff ff       	call   3940 <free@plt>
   1393c:	eb 01                	jmp    1393f <get_stem_contributions_d2+0xb1a>
   1393e:	90                   	nop
   1393f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   13946:	48 81 c4 e8 00 00 00 	add    rsp,0xe8
   1394d:	5b                   	pop    rbx
   1394e:	5d                   	pop    rbp
   1394f:	c3                   	ret    

0000000000013950 <f3_get_stem_contributions_d2>:
   13950:	55                   	push   rbp
   13951:	48 89 e5             	mov    rbp,rsp
   13954:	53                   	push   rbx
   13955:	48 81 ec d8 00 00 00 	sub    rsp,0xd8
   1395c:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
   13963:	89 b5 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],esi
   13969:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
   13970:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
   13977:	4c 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r8
   1397e:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13985:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   13988:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   1398e:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13995:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   1399b:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   139a1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   139a8:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   139ac:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   139b0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   139b4:	48 05 98 35 03 00    	add    rax,0x33598
   139ba:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   139be:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   139c5:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   139c9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   139cd:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   139d3:	48 63 d2             	movsxd rdx,edx
   139d6:	48 c1 e2 03          	shl    rdx,0x3
   139da:	48 01 d0             	add    rax,rdx
   139dd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   139e0:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   139e4:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   139ea:	48 98                	cdqe   
   139ec:	48 c1 e0 02          	shl    rax,0x2
   139f0:	48 f7 d8             	neg    rax
   139f3:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
   139f7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   139fb:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   13a01:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   13a07:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13a0d:	83 c0 06             	add    eax,0x6
   13a10:	48 98                	cdqe   
   13a12:	c1 e0 02             	shl    eax,0x2
   13a15:	89 c7                	mov    edi,eax
   13a17:	e8 f5 b2 01 00       	call   2ed11 <vrna_alloc>
   13a1c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   13a20:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13a26:	48 98                	cdqe   
   13a28:	48 c1 e0 02          	shl    rax,0x2
   13a2c:	48 f7 d8             	neg    rax
   13a2f:	48 01 45 98          	add    QWORD PTR [rbp-0x68],rax
   13a33:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   13a3a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   13a3e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   13a42:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   13a49:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   13a4d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   13a51:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a58:	8b 00                	mov    eax,DWORD PTR [rax]
   13a5a:	85 c0                	test   eax,eax
   13a5c:	74 0e                	je     13a6c <f3_get_stem_contributions_d2+0x11c>
   13a5e:	83 f8 01             	cmp    eax,0x1
   13a61:	0f 84 18 04 00 00    	je     13e7f <f3_get_stem_contributions_d2+0x52f>
   13a67:	e9 75 0a 00 00       	jmp    144e1 <f3_get_stem_contributions_d2+0xb91>
   13a6c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a73:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   13a7a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   13a7e:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a85:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   13a8c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   13a90:	83 bd 44 ff ff ff 01 	cmp    DWORD PTR [rbp-0xbc],0x1
   13a97:	7e 1b                	jle    13ab4 <f3_get_stem_contributions_d2+0x164>
   13a99:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13a9f:	48 98                	cdqe   
   13aa1:	48 01 c0             	add    rax,rax
   13aa4:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   13aa8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13aac:	48 01 d0             	add    rax,rdx
   13aaf:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13ab2:	eb 05                	jmp    13ab9 <f3_get_stem_contributions_d2+0x169>
   13ab4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13ab9:	66 89 85 5a ff ff ff 	mov    WORD PTR [rbp-0xa6],ax
   13ac0:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13ac6:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13acc:	01 c2                	add    edx,eax
   13ace:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13ad4:	39 c2                	cmp    edx,eax
   13ad6:	7c 0b                	jl     13ae3 <f3_get_stem_contributions_d2+0x193>
   13ad8:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13ade:	83 e8 01             	sub    eax,0x1
   13ae1:	eb 0e                	jmp    13af1 <f3_get_stem_contributions_d2+0x1a1>
   13ae3:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13ae9:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13aef:	01 d0                	add    eax,edx
   13af1:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   13af7:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13afd:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   13b03:	01 d0                	add    eax,edx
   13b05:	83 c0 01             	add    eax,0x1
   13b08:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   13b0e:	e9 1b 01 00 00       	jmp    13c2e <f3_get_stem_contributions_d2+0x2de>
   13b13:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13b19:	48 98                	cdqe   
   13b1b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13b23:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13b27:	48 01 d0             	add    rax,rdx
   13b2a:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   13b30:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13b36:	48 98                	cdqe   
   13b38:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13b40:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   13b44:	48 01 d0             	add    rax,rdx
   13b47:	8b 00                	mov    eax,DWORD PTR [rax]
   13b49:	3d 80 96 98 00       	cmp    eax,0x989680
   13b4e:	0f 84 d3 00 00 00    	je     13c27 <f3_get_stem_contributions_d2+0x2d7>
   13b54:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13b5a:	8d 48 01             	lea    ecx,[rax+0x1]
   13b5d:	8b b5 68 ff ff ff    	mov    esi,DWORD PTR [rbp-0x98]
   13b63:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   13b6a:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13b70:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13b76:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   13b7d:	49 89 f9             	mov    r9,rdi
   13b80:	41 b8 10 00 00 00    	mov    r8d,0x10
   13b86:	89 c7                	mov    edi,eax
   13b88:	41 ff d2             	call   r10
   13b8b:	84 c0                	test   al,al
   13b8d:	0f 84 94 00 00 00    	je     13c27 <f3_get_stem_contributions_d2+0x2d7>
   13b93:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   13b97:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
   13b9d:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13ba3:	89 ce                	mov    esi,ecx
   13ba5:	89 c7                	mov    edi,eax
   13ba7:	e8 16 ce 01 00       	call   309c2 <vrna_get_ptype_window>
   13bac:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   13bb2:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13bb8:	48 98                	cdqe   
   13bba:	48 83 c0 01          	add    rax,0x1
   13bbe:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   13bc2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13bc6:	48 01 d0             	add    rax,rdx
   13bc9:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13bcc:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
   13bd3:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13bd9:	48 98                	cdqe   
   13bdb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13be3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   13be7:	48 01 d0             	add    rax,rdx
   13bea:	8b 18                	mov    ebx,DWORD PTR [rax]
   13bec:	0f bf 95 58 ff ff ff 	movsx  edx,WORD PTR [rbp-0xa8]
   13bf3:	0f bf b5 5a ff ff ff 	movsx  esi,WORD PTR [rbp-0xa6]
   13bfa:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   13bfe:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   13c04:	89 c7                	mov    edi,eax
   13c06:	e8 30 d4 ff ff       	call   1103b <vrna_E_ext_stem>
   13c0b:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13c11:	48 63 d2             	movsxd rdx,edx
   13c14:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   13c1c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   13c20:	48 01 ca             	add    rdx,rcx
   13c23:	01 d8                	add    eax,ebx
   13c25:	89 02                	mov    DWORD PTR [rdx],eax
   13c27:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   13c2e:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13c34:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   13c3a:	0f 8e d3 fe ff ff    	jle    13b13 <f3_get_stem_contributions_d2+0x1c3>
   13c40:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   13c45:	0f 84 b5 00 00 00    	je     13d00 <f3_get_stem_contributions_d2+0x3b0>
   13c4b:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13c51:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   13c57:	01 d0                	add    eax,edx
   13c59:	83 c0 01             	add    eax,0x1
   13c5c:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   13c62:	e9 87 00 00 00       	jmp    13cee <f3_get_stem_contributions_d2+0x39e>
   13c67:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13c6d:	48 98                	cdqe   
   13c6f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13c77:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13c7b:	48 01 d0             	add    rax,rdx
   13c7e:	8b 00                	mov    eax,DWORD PTR [rax]
   13c80:	3d 80 96 98 00       	cmp    eax,0x989680
   13c85:	74 60                	je     13ce7 <f3_get_stem_contributions_d2+0x397>
   13c87:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13c8d:	8d 78 01             	lea    edi,[rax+0x1]
   13c90:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   13c97:	8b b5 64 ff ff ff    	mov    esi,DWORD PTR [rbp-0x9c]
   13c9d:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13ca3:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   13ca7:	48 89 d1             	mov    rcx,rdx
   13caa:	89 fa                	mov    edx,edi
   13cac:	89 c7                	mov    edi,eax
   13cae:	41 ff d0             	call   r8
   13cb1:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13cb7:	48 63 d2             	movsxd rdx,edx
   13cba:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   13cc2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   13cc6:	48 01 ca             	add    rdx,rcx
   13cc9:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   13ccb:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13cd1:	48 63 d2             	movsxd rdx,edx
   13cd4:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   13cdc:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   13ce0:	48 01 f2             	add    rdx,rsi
   13ce3:	01 c8                	add    eax,ecx
   13ce5:	89 02                	mov    DWORD PTR [rdx],eax
   13ce7:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   13cee:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13cf4:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   13cfa:	0f 8e 67 ff ff ff    	jle    13c67 <f3_get_stem_contributions_d2+0x317>
   13d00:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13d06:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13d0c:	01 d0                	add    eax,edx
   13d0e:	39 85 68 ff ff ff    	cmp    DWORD PTR [rbp-0x98],eax
   13d14:	0f 87 c6 07 00 00    	ja     144e0 <f3_get_stem_contributions_d2+0xb90>
   13d1a:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13d20:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   13d26:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13d2c:	48 98                	cdqe   
   13d2e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13d36:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   13d3a:	48 01 d0             	add    rax,rdx
   13d3d:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   13d43:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13d49:	48 98                	cdqe   
   13d4b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13d53:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   13d57:	48 01 d0             	add    rax,rdx
   13d5a:	8b 00                	mov    eax,DWORD PTR [rax]
   13d5c:	3d 80 96 98 00       	cmp    eax,0x989680
   13d61:	0f 84 79 07 00 00    	je     144e0 <f3_get_stem_contributions_d2+0xb90>
   13d67:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   13d6e:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
   13d74:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13d7a:	8b b5 64 ff ff ff    	mov    esi,DWORD PTR [rbp-0x9c]
   13d80:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13d86:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   13d8d:	49 89 f9             	mov    r9,rdi
   13d90:	41 b8 0e 00 00 00    	mov    r8d,0xe
   13d96:	89 c7                	mov    edi,eax
   13d98:	41 ff d2             	call   r10
   13d9b:	84 c0                	test   al,al
   13d9d:	0f 84 3d 07 00 00    	je     144e0 <f3_get_stem_contributions_d2+0xb90>
   13da3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   13da7:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
   13dad:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13db3:	89 ce                	mov    esi,ecx
   13db5:	89 c7                	mov    edi,eax
   13db7:	e8 06 cc 01 00       	call   309c2 <vrna_get_ptype_window>
   13dbc:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   13dc2:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   13dc8:	48 98                	cdqe   
   13dca:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   13dd2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   13dd6:	48 01 d0             	add    rax,rdx
   13dd9:	8b 18                	mov    ebx,DWORD PTR [rax]
   13ddb:	0f bf b5 5a ff ff ff 	movsx  esi,WORD PTR [rbp-0xa6]
   13de2:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   13de6:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   13dec:	48 89 d1             	mov    rcx,rdx
   13def:	ba ff ff ff ff       	mov    edx,0xffffffff
   13df4:	89 c7                	mov    edi,eax
   13df6:	e8 40 d2 ff ff       	call   1103b <vrna_E_ext_stem>
   13dfb:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13e01:	48 63 d2             	movsxd rdx,edx
   13e04:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   13e0c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   13e10:	48 01 ca             	add    rdx,rcx
   13e13:	01 d8                	add    eax,ebx
   13e15:	89 02                	mov    DWORD PTR [rdx],eax
   13e17:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   13e1c:	0f 84 be 06 00 00    	je     144e0 <f3_get_stem_contributions_d2+0xb90>
   13e22:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
   13e29:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13e2f:	8b b5 44 ff ff ff    	mov    esi,DWORD PTR [rbp-0xbc]
   13e35:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   13e3b:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   13e3f:	89 c7                	mov    edi,eax
   13e41:	41 ff d0             	call   r8
   13e44:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13e4a:	48 63 d2             	movsxd rdx,edx
   13e4d:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   13e55:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   13e59:	48 01 ca             	add    rdx,rcx
   13e5c:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   13e5e:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13e64:	48 63 d2             	movsxd rdx,edx
   13e67:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   13e6f:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   13e73:	48 01 f2             	add    rdx,rsi
   13e76:	01 c8                	add    eax,ecx
   13e78:	89 02                	mov    DWORD PTR [rdx],eax
   13e7a:	e9 61 06 00 00       	jmp    144e0 <f3_get_stem_contributions_d2+0xb90>
   13e7f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13e86:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   13e8c:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   13e92:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13e99:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   13ea0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   13ea4:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13eab:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   13eb2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   13eb6:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13ebd:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
   13ec4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   13ec8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13ecf:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   13ed6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   13eda:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13ee0:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13ee6:	01 c2                	add    edx,eax
   13ee8:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13eee:	39 c2                	cmp    edx,eax
   13ef0:	7c 0b                	jl     13efd <f3_get_stem_contributions_d2+0x5ad>
   13ef2:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13ef8:	83 e8 01             	sub    eax,0x1
   13efb:	eb 0e                	jmp    13f0b <f3_get_stem_contributions_d2+0x5bb>
   13efd:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13f03:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13f09:	01 d0                	add    eax,edx
   13f0b:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   13f11:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   13f17:	01 c0                	add    eax,eax
   13f19:	89 c7                	mov    edi,eax
   13f1b:	e8 f1 ad 01 00       	call   2ed11 <vrna_alloc>
   13f20:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   13f24:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   13f2a:	01 c0                	add    eax,eax
   13f2c:	89 c7                	mov    edi,eax
   13f2e:	e8 de ad 01 00       	call   2ed11 <vrna_alloc>
   13f33:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   13f37:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   13f41:	e9 b9 00 00 00       	jmp    13fff <f3_get_stem_contributions_d2+0x6af>
   13f46:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   13f4c:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   13f54:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   13f58:	48 01 d0             	add    rax,rdx
   13f5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13f5e:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13f64:	48 63 d2             	movsxd rdx,edx
   13f67:	48 c1 e2 02          	shl    rdx,0x2
   13f6b:	48 01 d0             	add    rax,rdx
   13f6e:	8b 00                	mov    eax,DWORD PTR [rax]
   13f70:	83 f8 01             	cmp    eax,0x1
   13f73:	76 2c                	jbe    13fa1 <f3_get_stem_contributions_d2+0x651>
   13f75:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   13f7b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   13f83:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   13f87:	48 01 d0             	add    rax,rdx
   13f8a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13f8d:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13f93:	48 63 d2             	movsxd rdx,edx
   13f96:	48 01 d2             	add    rdx,rdx
   13f99:	48 01 d0             	add    rax,rdx
   13f9c:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13f9f:	eb 05                	jmp    13fa6 <f3_get_stem_contributions_d2+0x656>
   13fa1:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13fa6:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   13fac:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   13fb0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   13fb4:	48 01 ca             	add    rdx,rcx
   13fb7:	66 89 02             	mov    WORD PTR [rdx],ax
   13fba:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   13fc0:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   13fc8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   13fcc:	48 01 d0             	add    rax,rdx
   13fcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13fd2:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   13fd8:	48 63 d2             	movsxd rdx,edx
   13fdb:	48 01 d2             	add    rdx,rdx
   13fde:	48 01 d0             	add    rax,rdx
   13fe1:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   13fe7:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   13feb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   13fef:	48 01 ca             	add    rdx,rcx
   13ff2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   13ff5:	66 89 02             	mov    WORD PTR [rdx],ax
   13ff8:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   13fff:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   14005:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   1400b:	0f 82 35 ff ff ff    	jb     13f46 <f3_get_stem_contributions_d2+0x5f6>
   14011:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   14017:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1401d:	01 d0                	add    eax,edx
   1401f:	83 c0 01             	add    eax,0x1
   14022:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   14028:	e9 04 02 00 00       	jmp    14231 <f3_get_stem_contributions_d2+0x8e1>
   1402d:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14033:	48 98                	cdqe   
   14035:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1403d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   14041:	48 01 d0             	add    rax,rdx
   14044:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   1404a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14050:	48 98                	cdqe   
   14052:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1405a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   1405e:	48 01 d0             	add    rax,rdx
   14061:	8b 00                	mov    eax,DWORD PTR [rax]
   14063:	3d 80 96 98 00       	cmp    eax,0x989680
   14068:	0f 84 bc 01 00 00    	je     1422a <f3_get_stem_contributions_d2+0x8da>
   1406e:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14074:	8d 48 01             	lea    ecx,[rax+0x1]
   14077:	8b b5 68 ff ff ff    	mov    esi,DWORD PTR [rbp-0x98]
   1407d:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   14084:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   1408a:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   14090:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   14097:	49 89 f9             	mov    r9,rdi
   1409a:	41 b8 10 00 00 00    	mov    r8d,0x10
   140a0:	89 c7                	mov    edi,eax
   140a2:	41 ff d2             	call   r10
   140a5:	84 c0                	test   al,al
   140a7:	0f 84 7d 01 00 00    	je     1422a <f3_get_stem_contributions_d2+0x8da>
   140ad:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   140b3:	48 98                	cdqe   
   140b5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   140bd:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   140c1:	48 01 d0             	add    rax,rdx
   140c4:	8b 00                	mov    eax,DWORD PTR [rax]
   140c6:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   140cc:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   140d6:	e9 1e 01 00 00       	jmp    141f9 <f3_get_stem_contributions_d2+0x8a9>
   140db:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   140e1:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   140e9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   140ed:	48 01 d0             	add    rax,rdx
   140f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   140f3:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   140f9:	48 63 d2             	movsxd rdx,edx
   140fc:	48 01 d2             	add    rdx,rdx
   140ff:	48 01 d0             	add    rax,rdx
   14102:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14105:	0f bf c8             	movsx  ecx,ax
   14108:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1410e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   14112:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14116:	48 01 d0             	add    rax,rdx
   14119:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1411c:	98                   	cwde   
   1411d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14121:	89 ce                	mov    esi,ecx
   14123:	89 c7                	mov    edi,eax
   14125:	e8 0e c8 01 00       	call   30938 <vrna_get_ptype_md>
   1412a:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   14130:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   14136:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1413e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   14142:	48 01 d0             	add    rax,rdx
   14145:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14148:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   1414e:	48 63 d2             	movsxd rdx,edx
   14151:	48 c1 e2 02          	shl    rdx,0x2
   14155:	48 01 d0             	add    rax,rdx
   14158:	8b 10                	mov    edx,DWORD PTR [rax]
   1415a:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   14160:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   14168:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1416c:	48 01 c8             	add    rax,rcx
   1416f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14172:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
   14178:	48 c1 e1 02          	shl    rcx,0x2
   1417c:	48 01 c8             	add    rax,rcx
   1417f:	8b 00                	mov    eax,DWORD PTR [rax]
   14181:	39 c2                	cmp    edx,eax
   14183:	73 2c                	jae    141b1 <f3_get_stem_contributions_d2+0x861>
   14185:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1418b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14193:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   14197:	48 01 d0             	add    rax,rdx
   1419a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1419d:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   141a3:	48 63 d2             	movsxd rdx,edx
   141a6:	48 01 d2             	add    rdx,rdx
   141a9:	48 01 d0             	add    rax,rdx
   141ac:	0f b7 00             	movzx  eax,WORD PTR [rax]
   141af:	eb 05                	jmp    141b6 <f3_get_stem_contributions_d2+0x866>
   141b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
   141b6:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
   141bd:	0f bf 95 58 ff ff ff 	movsx  edx,WORD PTR [rbp-0xa8]
   141c4:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   141ca:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
   141ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   141d2:	48 01 c8             	add    rax,rcx
   141d5:	0f b7 00             	movzx  eax,WORD PTR [rax]
   141d8:	0f bf f0             	movsx  esi,ax
   141db:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   141df:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   141e5:	89 c7                	mov    edi,eax
   141e7:	e8 4f ce ff ff       	call   1103b <vrna_E_ext_stem>
   141ec:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   141f2:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   141f9:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   141ff:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   14205:	0f 82 d0 fe ff ff    	jb     140db <f3_get_stem_contributions_d2+0x78b>
   1420b:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14211:	48 98                	cdqe   
   14213:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1421b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1421f:	48 01 c2             	add    rdx,rax
   14222:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   14228:	89 02                	mov    DWORD PTR [rdx],eax
   1422a:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   14231:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14237:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   1423d:	0f 8e ea fd ff ff    	jle    1402d <f3_get_stem_contributions_d2+0x6dd>
   14243:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   14248:	0f 84 b5 00 00 00    	je     14303 <f3_get_stem_contributions_d2+0x9b3>
   1424e:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   14254:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1425a:	01 d0                	add    eax,edx
   1425c:	83 c0 01             	add    eax,0x1
   1425f:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   14265:	e9 87 00 00 00       	jmp    142f1 <f3_get_stem_contributions_d2+0x9a1>
   1426a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14270:	48 98                	cdqe   
   14272:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1427a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1427e:	48 01 d0             	add    rax,rdx
   14281:	8b 00                	mov    eax,DWORD PTR [rax]
   14283:	3d 80 96 98 00       	cmp    eax,0x989680
   14288:	74 60                	je     142ea <f3_get_stem_contributions_d2+0x99a>
   1428a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14290:	8d 78 01             	lea    edi,[rax+0x1]
   14293:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   1429a:	8b b5 64 ff ff ff    	mov    esi,DWORD PTR [rbp-0x9c]
   142a0:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   142a6:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   142aa:	48 89 d1             	mov    rcx,rdx
   142ad:	89 fa                	mov    edx,edi
   142af:	89 c7                	mov    edi,eax
   142b1:	41 ff d0             	call   r8
   142b4:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   142ba:	48 63 d2             	movsxd rdx,edx
   142bd:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   142c5:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   142c9:	48 01 ca             	add    rdx,rcx
   142cc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   142ce:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   142d4:	48 63 d2             	movsxd rdx,edx
   142d7:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   142df:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   142e3:	48 01 f2             	add    rdx,rsi
   142e6:	01 c8                	add    eax,ecx
   142e8:	89 02                	mov    DWORD PTR [rdx],eax
   142ea:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   142f1:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   142f7:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   142fd:	0f 8e 67 ff ff ff    	jle    1426a <f3_get_stem_contributions_d2+0x91a>
   14303:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   14309:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1430f:	01 d0                	add    eax,edx
   14311:	39 85 68 ff ff ff    	cmp    DWORD PTR [rbp-0x98],eax
   14317:	0f 87 a9 01 00 00    	ja     144c6 <f3_get_stem_contributions_d2+0xb76>
   1431d:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14323:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   14329:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1432f:	48 98                	cdqe   
   14331:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14339:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1433d:	48 01 d0             	add    rax,rdx
   14340:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   14346:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1434c:	48 98                	cdqe   
   1434e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14356:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   1435a:	48 01 d0             	add    rax,rdx
   1435d:	8b 00                	mov    eax,DWORD PTR [rax]
   1435f:	3d 80 96 98 00       	cmp    eax,0x989680
   14364:	0f 84 5c 01 00 00    	je     144c6 <f3_get_stem_contributions_d2+0xb76>
   1436a:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   14371:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
   14377:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   1437d:	8b b5 64 ff ff ff    	mov    esi,DWORD PTR [rbp-0x9c]
   14383:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   14389:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   14390:	49 89 f9             	mov    r9,rdi
   14393:	41 b8 0e 00 00 00    	mov    r8d,0xe
   14399:	89 c7                	mov    edi,eax
   1439b:	41 ff d2             	call   r10
   1439e:	84 c0                	test   al,al
   143a0:	0f 84 20 01 00 00    	je     144c6 <f3_get_stem_contributions_d2+0xb76>
   143a6:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   143ac:	48 98                	cdqe   
   143ae:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   143b6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   143ba:	48 01 d0             	add    rax,rdx
   143bd:	8b 00                	mov    eax,DWORD PTR [rax]
   143bf:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   143c5:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   143cf:	e9 92 00 00 00       	jmp    14466 <f3_get_stem_contributions_d2+0xb16>
   143d4:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   143da:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   143e2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   143e6:	48 01 d0             	add    rax,rdx
   143e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   143ec:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   143f2:	48 63 d2             	movsxd rdx,edx
   143f5:	48 01 d2             	add    rdx,rdx
   143f8:	48 01 d0             	add    rax,rdx
   143fb:	0f b7 00             	movzx  eax,WORD PTR [rax]
   143fe:	0f bf c8             	movsx  ecx,ax
   14401:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   14407:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1440b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1440f:	48 01 d0             	add    rax,rdx
   14412:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14415:	98                   	cwde   
   14416:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   1441a:	89 ce                	mov    esi,ecx
   1441c:	89 c7                	mov    edi,eax
   1441e:	e8 15 c5 01 00       	call   30938 <vrna_get_ptype_md>
   14423:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   14429:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1442f:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   14433:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   14437:	48 01 d0             	add    rax,rdx
   1443a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1443d:	0f bf f0             	movsx  esi,ax
   14440:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   14444:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1444a:	48 89 d1             	mov    rcx,rdx
   1444d:	ba ff ff ff ff       	mov    edx,0xffffffff
   14452:	89 c7                	mov    edi,eax
   14454:	e8 e2 cb ff ff       	call   1103b <vrna_E_ext_stem>
   14459:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   1445f:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   14466:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1446c:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   14472:	0f 82 5c ff ff ff    	jb     143d4 <f3_get_stem_contributions_d2+0xa84>
   14478:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   1447d:	74 28                	je     144a7 <f3_get_stem_contributions_d2+0xb57>
   1447f:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
   14486:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   1448c:	8b b5 44 ff ff ff    	mov    esi,DWORD PTR [rbp-0xbc]
   14492:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   14498:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   1449c:	89 c7                	mov    edi,eax
   1449e:	41 ff d0             	call   r8
   144a1:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   144a7:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   144ad:	48 98                	cdqe   
   144af:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   144b7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   144bb:	48 01 c2             	add    rdx,rax
   144be:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   144c4:	89 02                	mov    DWORD PTR [rdx],eax
   144c6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   144ca:	48 89 c7             	mov    rdi,rax
   144cd:	e8 6e f4 fe ff       	call   3940 <free@plt>
   144d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   144d6:	48 89 c7             	mov    rdi,rax
   144d9:	e8 62 f4 fe ff       	call   3940 <free@plt>
   144de:	eb 01                	jmp    144e1 <f3_get_stem_contributions_d2+0xb91>
   144e0:	90                   	nop
   144e1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   144e5:	48 81 c4 d8 00 00 00 	add    rsp,0xd8
   144ec:	5b                   	pop    rbx
   144ed:	5d                   	pop    rbp
   144ee:	c3                   	ret    

00000000000144ef <f5_get_stem_contributions_d5>:
   144ef:	55                   	push   rbp
   144f0:	48 89 e5             	mov    rbp,rsp
   144f3:	53                   	push   rbx
   144f4:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
   144fb:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
   14502:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
   14508:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   1450f:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
   14516:	4c 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r8
   1451d:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14523:	48 98                	cdqe   
   14525:	c1 e0 02             	shl    eax,0x2
   14528:	89 c7                	mov    edi,eax
   1452a:	e8 e2 a7 01 00       	call   2ed11 <vrna_alloc>
   1452f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   14533:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1453a:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   1453e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   14542:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   14546:	48 05 98 35 03 00    	add    rax,0x33598
   1454c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   14550:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14557:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   1455b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   1455f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14566:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   1456a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1456e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   14572:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   14576:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   1457c:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   14582:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14588:	48 98                	cdqe   
   1458a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14592:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   14596:	48 01 d0             	add    rax,rdx
   14599:	8b 10                	mov    edx,DWORD PTR [rax]
   1459b:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   145a1:	01 d0                	add    eax,edx
   145a3:	2b 85 70 ff ff ff    	sub    eax,DWORD PTR [rbp-0x90]
   145a9:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   145af:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   145b6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   145ba:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   145be:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   145c5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   145c9:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   145cd:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   145d4:	8b 00                	mov    eax,DWORD PTR [rax]
   145d6:	85 c0                	test   eax,eax
   145d8:	74 0e                	je     145e8 <f5_get_stem_contributions_d5+0xf9>
   145da:	83 f8 01             	cmp    eax,0x1
   145dd:	0f 84 75 03 00 00    	je     14958 <f5_get_stem_contributions_d5+0x469>
   145e3:	e9 f5 08 00 00       	jmp    14edd <f5_get_stem_contributions_d5+0x9ee>
   145e8:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   145ef:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   145f6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   145fa:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14601:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   14608:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1460c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14612:	48 63 d0             	movsxd rdx,eax
   14615:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1461b:	48 98                	cdqe   
   1461d:	48 29 c2             	sub    rdx,rax
   14620:	48 89 d0             	mov    rax,rdx
   14623:	48 01 c0             	add    rax,rax
   14626:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   1462a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1462e:	48 01 d0             	add    rax,rdx
   14631:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   14635:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1463b:	2b 85 70 ff ff ff    	sub    eax,DWORD PTR [rbp-0x90]
   14641:	83 e8 01             	sub    eax,0x1
   14644:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   1464a:	e9 03 01 00 00       	jmp    14752 <f5_get_stem_contributions_d5+0x263>
   1464f:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14655:	48 98                	cdqe   
   14657:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1465f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14663:	48 01 d0             	add    rax,rdx
   14666:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   1466c:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   14672:	48 98                	cdqe   
   14674:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1467c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   14680:	48 01 d0             	add    rax,rdx
   14683:	8b 00                	mov    eax,DWORD PTR [rax]
   14685:	3d 80 96 98 00       	cmp    eax,0x989680
   1468a:	0f 84 af 00 00 00    	je     1473f <f5_get_stem_contributions_d5+0x250>
   14690:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14696:	8d 48 01             	lea    ecx,[rax+0x1]
   14699:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   1469f:	8d 50 ff             	lea    edx,[rax-0x1]
   146a2:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
   146a9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   146af:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   146b6:	49 89 f1             	mov    r9,rsi
   146b9:	41 b8 12 00 00 00    	mov    r8d,0x12
   146bf:	89 c6                	mov    esi,eax
   146c1:	bf 01 00 00 00       	mov    edi,0x1
   146c6:	41 ff d2             	call   r10
   146c9:	84 c0                	test   al,al
   146cb:	74 72                	je     1473f <f5_get_stem_contributions_d5+0x250>
   146cd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   146d1:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   146d7:	48 89 d6             	mov    rsi,rdx
   146da:	89 c7                	mov    edi,eax
   146dc:	e8 aa c2 01 00       	call   3098b <vrna_get_ptype>
   146e1:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   146e7:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   146ed:	48 98                	cdqe   
   146ef:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   146f7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   146fb:	48 01 d0             	add    rax,rdx
   146fe:	8b 18                	mov    ebx,DWORD PTR [rax]
   14700:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   14704:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14707:	0f bf f0             	movsx  esi,ax
   1470a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   1470e:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   14714:	48 89 d1             	mov    rcx,rdx
   14717:	ba ff ff ff ff       	mov    edx,0xffffffff
   1471c:	89 c7                	mov    edi,eax
   1471e:	e8 18 c9 ff ff       	call   1103b <vrna_E_ext_stem>
   14723:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14729:	48 63 d2             	movsxd rdx,edx
   1472c:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   14734:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14738:	48 01 ca             	add    rdx,rcx
   1473b:	01 d8                	add    eax,ebx
   1473d:	89 02                	mov    DWORD PTR [rdx],eax
   1473f:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   14746:	83 ad 6c ff ff ff 01 	sub    DWORD PTR [rbp-0x94],0x1
   1474d:	48 83 6d 80 02       	sub    QWORD PTR [rbp-0x80],0x2
   14752:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   14759:	0f 8f f0 fe ff ff    	jg     1464f <f5_get_stem_contributions_d5+0x160>
   1475f:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   14764:	0f 84 b1 00 00 00    	je     1481b <f5_get_stem_contributions_d5+0x32c>
   1476a:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14770:	2b 85 70 ff ff ff    	sub    eax,DWORD PTR [rbp-0x90]
   14776:	83 e8 01             	sub    eax,0x1
   14779:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   1477f:	e9 8a 00 00 00       	jmp    1480e <f5_get_stem_contributions_d5+0x31f>
   14784:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   1478a:	48 98                	cdqe   
   1478c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14794:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14798:	48 01 d0             	add    rax,rdx
   1479b:	8b 00                	mov    eax,DWORD PTR [rax]
   1479d:	3d 80 96 98 00       	cmp    eax,0x989680
   147a2:	74 63                	je     14807 <f5_get_stem_contributions_d5+0x318>
   147a4:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   147aa:	8d 78 01             	lea    edi,[rax+0x1]
   147ad:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   147b3:	8d 70 ff             	lea    esi,[rax-0x1]
   147b6:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   147bd:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   147c3:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   147c7:	48 89 d1             	mov    rcx,rdx
   147ca:	89 fa                	mov    edx,edi
   147cc:	89 c7                	mov    edi,eax
   147ce:	41 ff d0             	call   r8
   147d1:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   147d7:	48 63 d2             	movsxd rdx,edx
   147da:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   147e2:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   147e6:	48 01 ca             	add    rdx,rcx
   147e9:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   147eb:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   147f1:	48 63 d2             	movsxd rdx,edx
   147f4:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   147fc:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14800:	48 01 f2             	add    rdx,rsi
   14803:	01 c8                	add    eax,ecx
   14805:	89 02                	mov    DWORD PTR [rdx],eax
   14807:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   1480e:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   14815:	0f 8f 69 ff ff ff    	jg     14784 <f5_get_stem_contributions_d5+0x295>
   1481b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   1481f:	48 83 c0 04          	add    rax,0x4
   14823:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   14829:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1482f:	48 98                	cdqe   
   14831:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14839:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1483d:	48 01 d0             	add    rax,rdx
   14840:	8b 00                	mov    eax,DWORD PTR [rax]
   14842:	83 c0 02             	add    eax,0x2
   14845:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   1484b:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   14851:	48 98                	cdqe   
   14853:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1485b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1485f:	48 01 d0             	add    rax,rdx
   14862:	8b 00                	mov    eax,DWORD PTR [rax]
   14864:	3d 80 96 98 00       	cmp    eax,0x989680
   14869:	0f 84 6d 06 00 00    	je     14edc <f5_get_stem_contributions_d5+0x9ed>
   1486f:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   14876:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1487c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14882:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   14889:	49 89 c9             	mov    r9,rcx
   1488c:	41 b8 0e 00 00 00    	mov    r8d,0xe
   14892:	89 d1                	mov    ecx,edx
   14894:	ba 02 00 00 00       	mov    edx,0x2
   14899:	89 c6                	mov    esi,eax
   1489b:	bf 01 00 00 00       	mov    edi,0x1
   148a0:	41 ff d2             	call   r10
   148a3:	84 c0                	test   al,al
   148a5:	0f 84 31 06 00 00    	je     14edc <f5_get_stem_contributions_d5+0x9ed>
   148ab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   148af:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   148b5:	48 89 d6             	mov    rsi,rdx
   148b8:	89 c7                	mov    edi,eax
   148ba:	e8 cc c0 01 00       	call   3098b <vrna_get_ptype>
   148bf:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   148c5:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   148cb:	48 98                	cdqe   
   148cd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   148d5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   148d9:	48 01 d0             	add    rax,rdx
   148dc:	8b 18                	mov    ebx,DWORD PTR [rax]
   148de:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   148e2:	48 83 c0 02          	add    rax,0x2
   148e6:	0f b7 00             	movzx  eax,WORD PTR [rax]
   148e9:	0f bf f0             	movsx  esi,ax
   148ec:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   148f0:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   148f6:	48 89 d1             	mov    rcx,rdx
   148f9:	ba ff ff ff ff       	mov    edx,0xffffffff
   148fe:	89 c7                	mov    edi,eax
   14900:	e8 36 c7 ff ff       	call   1103b <vrna_E_ext_stem>
   14905:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14909:	48 83 c2 04          	add    rdx,0x4
   1490d:	01 d8                	add    eax,ebx
   1490f:	89 02                	mov    DWORD PTR [rdx],eax
   14911:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
   14916:	0f 84 c0 05 00 00    	je     14edc <f5_get_stem_contributions_d5+0x9ed>
   1491c:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
   14923:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   14929:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1492f:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
   14933:	be 02 00 00 00       	mov    esi,0x2
   14938:	89 c7                	mov    edi,eax
   1493a:	41 ff d0             	call   r8
   1493d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14941:	48 83 c2 04          	add    rdx,0x4
   14945:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   14947:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   1494b:	48 83 c2 04          	add    rdx,0x4
   1494f:	01 c8                	add    eax,ecx
   14951:	89 02                	mov    DWORD PTR [rdx],eax
   14953:	e9 84 05 00 00       	jmp    14edc <f5_get_stem_contributions_d5+0x9ed>
   14958:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1495f:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   14965:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   1496b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14972:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   14979:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1497d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14984:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   1498b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1498f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14996:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   1499d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   149a1:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   149a7:	01 c0                	add    eax,eax
   149a9:	89 c7                	mov    edi,eax
   149ab:	e8 61 a3 01 00       	call   2ed11 <vrna_alloc>
   149b0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   149b4:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   149be:	eb 45                	jmp    14a05 <f5_get_stem_contributions_d5+0x516>
   149c0:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   149c6:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   149ce:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   149d2:	48 01 d0             	add    rax,rdx
   149d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   149d8:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   149de:	48 63 d2             	movsxd rdx,edx
   149e1:	48 01 d2             	add    rdx,rdx
   149e4:	48 01 d0             	add    rax,rdx
   149e7:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   149ed:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   149f1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   149f5:	48 01 ca             	add    rdx,rcx
   149f8:	0f b7 00             	movzx  eax,WORD PTR [rax]
   149fb:	66 89 02             	mov    WORD PTR [rdx],ax
   149fe:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   14a05:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14a0b:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   14a11:	72 ad                	jb     149c0 <f5_get_stem_contributions_d5+0x4d1>
   14a13:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14a19:	2b 85 70 ff ff ff    	sub    eax,DWORD PTR [rbp-0x90]
   14a1f:	83 e8 01             	sub    eax,0x1
   14a22:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   14a28:	e9 ec 01 00 00       	jmp    14c19 <f5_get_stem_contributions_d5+0x72a>
   14a2d:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14a33:	48 98                	cdqe   
   14a35:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14a3d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14a41:	48 01 d0             	add    rax,rdx
   14a44:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   14a4a:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   14a50:	48 98                	cdqe   
   14a52:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14a5a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   14a5e:	48 01 d0             	add    rax,rdx
   14a61:	8b 00                	mov    eax,DWORD PTR [rax]
   14a63:	3d 80 96 98 00       	cmp    eax,0x989680
   14a68:	0f 84 9d 01 00 00    	je     14c0b <f5_get_stem_contributions_d5+0x71c>
   14a6e:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14a74:	8d 48 01             	lea    ecx,[rax+0x1]
   14a77:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14a7d:	8d 50 ff             	lea    edx,[rax-0x1]
   14a80:	48 8b b5 40 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc0]
   14a87:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14a8d:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   14a94:	49 89 f1             	mov    r9,rsi
   14a97:	41 b8 12 00 00 00    	mov    r8d,0x12
   14a9d:	89 c6                	mov    esi,eax
   14a9f:	bf 01 00 00 00       	mov    edi,0x1
   14aa4:	41 ff d2             	call   r10
   14aa7:	84 c0                	test   al,al
   14aa9:	0f 84 5c 01 00 00    	je     14c0b <f5_get_stem_contributions_d5+0x71c>
   14aaf:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   14ab5:	48 98                	cdqe   
   14ab7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14abf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   14ac3:	48 01 d0             	add    rax,rdx
   14ac6:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14acc:	48 63 d2             	movsxd rdx,edx
   14acf:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   14ad7:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14adb:	48 01 ca             	add    rdx,rcx
   14ade:	8b 00                	mov    eax,DWORD PTR [rax]
   14ae0:	89 02                	mov    DWORD PTR [rdx],eax
   14ae2:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   14aec:	e9 08 01 00 00       	jmp    14bf9 <f5_get_stem_contributions_d5+0x70a>
   14af1:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14af7:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   14afb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14aff:	48 01 d0             	add    rax,rdx
   14b02:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14b05:	0f bf c8             	movsx  ecx,ax
   14b08:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14b0e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14b16:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   14b1a:	48 01 d0             	add    rax,rdx
   14b1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14b20:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14b26:	48 63 d2             	movsxd rdx,edx
   14b29:	48 83 c2 01          	add    rdx,0x1
   14b2d:	48 01 d2             	add    rdx,rdx
   14b30:	48 01 d0             	add    rax,rdx
   14b33:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14b36:	98                   	cwde   
   14b37:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   14b3b:	89 ce                	mov    esi,ecx
   14b3d:	89 c7                	mov    edi,eax
   14b3f:	e8 f4 bd 01 00       	call   30938 <vrna_get_ptype_md>
   14b44:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   14b4a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14b50:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14b58:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   14b5c:	48 01 d0             	add    rax,rdx
   14b5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14b62:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14b68:	48 63 d2             	movsxd rdx,edx
   14b6b:	48 83 c2 01          	add    rdx,0x1
   14b6f:	48 c1 e2 02          	shl    rdx,0x2
   14b73:	48 01 d0             	add    rax,rdx
   14b76:	8b 00                	mov    eax,DWORD PTR [rax]
   14b78:	83 f8 01             	cmp    eax,0x1
   14b7b:	76 31                	jbe    14bae <f5_get_stem_contributions_d5+0x6bf>
   14b7d:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14b83:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14b8b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   14b8f:	48 01 d0             	add    rax,rdx
   14b92:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14b95:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14b9b:	48 63 d2             	movsxd rdx,edx
   14b9e:	48 83 c2 01          	add    rdx,0x1
   14ba2:	48 01 d2             	add    rdx,rdx
   14ba5:	48 01 d0             	add    rax,rdx
   14ba8:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14bab:	98                   	cwde   
   14bac:	eb 05                	jmp    14bb3 <f5_get_stem_contributions_d5+0x6c4>
   14bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
   14bb3:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   14bb9:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14bbf:	48 98                	cdqe   
   14bc1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14bc9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14bcd:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   14bd1:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   14bd5:	8b b5 7c ff ff ff    	mov    esi,DWORD PTR [rbp-0x84]
   14bdb:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   14be1:	48 89 d1             	mov    rcx,rdx
   14be4:	ba ff ff ff ff       	mov    edx,0xffffffff
   14be9:	89 c7                	mov    edi,eax
   14beb:	e8 4b c4 ff ff       	call   1103b <vrna_E_ext_stem>
   14bf0:	89 03                	mov    DWORD PTR [rbx],eax
   14bf2:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   14bf9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14bff:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   14c05:	0f 82 e6 fe ff ff    	jb     14af1 <f5_get_stem_contributions_d5+0x602>
   14c0b:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   14c12:	83 ad 6c ff ff ff 01 	sub    DWORD PTR [rbp-0x94],0x1
   14c19:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   14c20:	0f 8f 07 fe ff ff    	jg     14a2d <f5_get_stem_contributions_d5+0x53e>
   14c26:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   14c2b:	0f 84 b1 00 00 00    	je     14ce2 <f5_get_stem_contributions_d5+0x7f3>
   14c31:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14c37:	2b 85 70 ff ff ff    	sub    eax,DWORD PTR [rbp-0x90]
   14c3d:	83 e8 01             	sub    eax,0x1
   14c40:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   14c46:	e9 8a 00 00 00       	jmp    14cd5 <f5_get_stem_contributions_d5+0x7e6>
   14c4b:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14c51:	48 98                	cdqe   
   14c53:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14c5b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14c5f:	48 01 d0             	add    rax,rdx
   14c62:	8b 00                	mov    eax,DWORD PTR [rax]
   14c64:	3d 80 96 98 00       	cmp    eax,0x989680
   14c69:	74 63                	je     14cce <f5_get_stem_contributions_d5+0x7df>
   14c6b:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14c71:	8d 78 01             	lea    edi,[rax+0x1]
   14c74:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14c7a:	8d 70 ff             	lea    esi,[rax-0x1]
   14c7d:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   14c84:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14c8a:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   14c8e:	48 89 d1             	mov    rcx,rdx
   14c91:	89 fa                	mov    edx,edi
   14c93:	89 c7                	mov    edi,eax
   14c95:	41 ff d0             	call   r8
   14c98:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14c9e:	48 63 d2             	movsxd rdx,edx
   14ca1:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   14ca9:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14cad:	48 01 ca             	add    rdx,rcx
   14cb0:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   14cb2:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   14cb8:	48 63 d2             	movsxd rdx,edx
   14cbb:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   14cc3:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14cc7:	48 01 f2             	add    rdx,rsi
   14cca:	01 c8                	add    eax,ecx
   14ccc:	89 02                	mov    DWORD PTR [rdx],eax
   14cce:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   14cd5:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   14cdc:	0f 8f 69 ff ff ff    	jg     14c4b <f5_get_stem_contributions_d5+0x75c>
   14ce2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14ce6:	48 83 c0 04          	add    rax,0x4
   14cea:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   14cf0:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14cf6:	48 98                	cdqe   
   14cf8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14d00:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   14d04:	48 01 d0             	add    rax,rdx
   14d07:	8b 00                	mov    eax,DWORD PTR [rax]
   14d09:	83 c0 02             	add    eax,0x2
   14d0c:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   14d12:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   14d18:	48 98                	cdqe   
   14d1a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14d22:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   14d26:	48 01 d0             	add    rax,rdx
   14d29:	8b 00                	mov    eax,DWORD PTR [rax]
   14d2b:	3d 80 96 98 00       	cmp    eax,0x989680
   14d30:	0f 84 98 01 00 00    	je     14ece <f5_get_stem_contributions_d5+0x9df>
   14d36:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   14d3d:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   14d43:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14d49:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   14d50:	49 89 c9             	mov    r9,rcx
   14d53:	41 b8 0e 00 00 00    	mov    r8d,0xe
   14d59:	89 d1                	mov    ecx,edx
   14d5b:	ba 02 00 00 00       	mov    edx,0x2
   14d60:	89 c6                	mov    esi,eax
   14d62:	bf 01 00 00 00       	mov    edi,0x1
   14d67:	41 ff d2             	call   r10
   14d6a:	84 c0                	test   al,al
   14d6c:	0f 84 5c 01 00 00    	je     14ece <f5_get_stem_contributions_d5+0x9df>
   14d72:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   14d78:	48 98                	cdqe   
   14d7a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14d82:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   14d86:	48 01 d0             	add    rax,rdx
   14d89:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14d8d:	48 83 c2 04          	add    rdx,0x4
   14d91:	8b 00                	mov    eax,DWORD PTR [rax]
   14d93:	89 02                	mov    DWORD PTR [rdx],eax
   14d95:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   14d9f:	e9 da 00 00 00       	jmp    14e7e <f5_get_stem_contributions_d5+0x98f>
   14da4:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14daa:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   14dae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14db2:	48 01 d0             	add    rax,rdx
   14db5:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14db8:	0f bf c8             	movsx  ecx,ax
   14dbb:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14dc1:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14dc9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   14dcd:	48 01 d0             	add    rax,rdx
   14dd0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14dd3:	48 83 c0 04          	add    rax,0x4
   14dd7:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14dda:	98                   	cwde   
   14ddb:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   14ddf:	89 ce                	mov    esi,ecx
   14de1:	89 c7                	mov    edi,eax
   14de3:	e8 50 bb 01 00       	call   30938 <vrna_get_ptype_md>
   14de8:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   14dee:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14df4:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14dfc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   14e00:	48 01 d0             	add    rax,rdx
   14e03:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14e06:	48 83 c0 08          	add    rax,0x8
   14e0a:	8b 00                	mov    eax,DWORD PTR [rax]
   14e0c:	83 f8 01             	cmp    eax,0x1
   14e0f:	76 22                	jbe    14e33 <f5_get_stem_contributions_d5+0x944>
   14e11:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14e17:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   14e1f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   14e23:	48 01 d0             	add    rax,rdx
   14e26:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14e29:	48 83 c0 04          	add    rax,0x4
   14e2d:	0f b7 00             	movzx  eax,WORD PTR [rax]
   14e30:	98                   	cwde   
   14e31:	eb 05                	jmp    14e38 <f5_get_stem_contributions_d5+0x949>
   14e33:	b8 ff ff ff ff       	mov    eax,0xffffffff
   14e38:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   14e3e:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   14e44:	48 98                	cdqe   
   14e46:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14e4e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14e52:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   14e56:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   14e5a:	8b b5 7c ff ff ff    	mov    esi,DWORD PTR [rbp-0x84]
   14e60:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   14e66:	48 89 d1             	mov    rcx,rdx
   14e69:	ba ff ff ff ff       	mov    edx,0xffffffff
   14e6e:	89 c7                	mov    edi,eax
   14e70:	e8 c6 c1 ff ff       	call   1103b <vrna_E_ext_stem>
   14e75:	89 03                	mov    DWORD PTR [rbx],eax
   14e77:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   14e7e:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   14e84:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   14e8a:	0f 82 14 ff ff ff    	jb     14da4 <f5_get_stem_contributions_d5+0x8b5>
   14e90:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
   14e95:	74 37                	je     14ece <f5_get_stem_contributions_d5+0x9df>
   14e97:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
   14e9e:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   14ea4:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14eaa:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
   14eae:	be 02 00 00 00       	mov    esi,0x2
   14eb3:	89 c7                	mov    edi,eax
   14eb5:	41 ff d0             	call   r8
   14eb8:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14ebc:	48 83 c2 04          	add    rdx,0x4
   14ec0:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   14ec2:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   14ec6:	48 83 c2 04          	add    rdx,0x4
   14eca:	01 c8                	add    eax,ecx
   14ecc:	89 02                	mov    DWORD PTR [rdx],eax
   14ece:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14ed2:	48 89 c7             	mov    rdi,rax
   14ed5:	e8 66 ea fe ff       	call   3940 <free@plt>
   14eda:	eb 01                	jmp    14edd <f5_get_stem_contributions_d5+0x9ee>
   14edc:	90                   	nop
   14edd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   14ee1:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
   14ee8:	5b                   	pop    rbx
   14ee9:	5d                   	pop    rbp
   14eea:	c3                   	ret    

0000000000014eeb <f3_get_stem_contributions_d3>:
   14eeb:	55                   	push   rbp
   14eec:	48 89 e5             	mov    rbp,rsp
   14eef:	53                   	push   rbx
   14ef0:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
   14ef7:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
   14efe:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
   14f04:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   14f0b:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
   14f12:	4c 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r8
   14f19:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14f20:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   14f23:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   14f29:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14f30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   14f36:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   14f3c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14f43:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   14f47:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   14f4b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   14f4f:	48 05 98 35 03 00    	add    rax,0x33598
   14f55:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   14f59:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14f60:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   14f64:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   14f68:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   14f6e:	48 63 d2             	movsxd rdx,edx
   14f71:	48 c1 e2 03          	shl    rdx,0x3
   14f75:	48 01 d0             	add    rax,rdx
   14f78:	48 8b 00             	mov    rax,QWORD PTR [rax]
   14f7b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   14f7f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14f85:	48 98                	cdqe   
   14f87:	48 c1 e0 02          	shl    rax,0x2
   14f8b:	48 f7 d8             	neg    rax
   14f8e:	48 01 45 a0          	add    QWORD PTR [rbp-0x60],rax
   14f92:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   14f96:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   14f9c:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   14f9f:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   14fa5:	83 c0 06             	add    eax,0x6
   14fa8:	48 98                	cdqe   
   14faa:	c1 e0 02             	shl    eax,0x2
   14fad:	89 c7                	mov    edi,eax
   14faf:	e8 5d 9d 01 00       	call   2ed11 <vrna_alloc>
   14fb4:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   14fb8:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   14fbe:	48 98                	cdqe   
   14fc0:	48 c1 e0 02          	shl    rax,0x2
   14fc4:	48 f7 d8             	neg    rax
   14fc7:	48 01 45 a8          	add    QWORD PTR [rbp-0x58],rax
   14fcb:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   14fd2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   14fd6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   14fda:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   14fe1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   14fe5:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   14fe9:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   14ff0:	8b 00                	mov    eax,DWORD PTR [rax]
   14ff2:	85 c0                	test   eax,eax
   14ff4:	74 0e                	je     15004 <f3_get_stem_contributions_d3+0x119>
   14ff6:	83 f8 01             	cmp    eax,0x1
   14ff9:	0f 84 c9 03 00 00    	je     153c8 <f3_get_stem_contributions_d3+0x4dd>
   14fff:	e9 ce 09 00 00       	jmp    159d2 <f3_get_stem_contributions_d3+0xae7>
   15004:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1500b:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   15012:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   15016:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1501d:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   15024:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   15028:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1502e:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   15034:	01 d0                	add    eax,edx
   15036:	83 c0 01             	add    eax,0x1
   15039:	39 85 78 ff ff ff    	cmp    DWORD PTR [rbp-0x88],eax
   1503f:	7f 0b                	jg     1504c <f3_get_stem_contributions_d3+0x161>
   15041:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   15047:	83 e8 01             	sub    eax,0x1
   1504a:	eb 11                	jmp    1505d <f3_get_stem_contributions_d3+0x172>
   1504c:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15052:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   15058:	01 d0                	add    eax,edx
   1505a:	83 c0 01             	add    eax,0x1
   1505d:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   15060:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15066:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   15069:	01 d0                	add    eax,edx
   1506b:	83 c0 01             	add    eax,0x1
   1506e:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   15074:	e9 0a 01 00 00       	jmp    15183 <f3_get_stem_contributions_d3+0x298>
   15079:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1507f:	48 98                	cdqe   
   15081:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15089:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1508d:	48 01 d0             	add    rax,rdx
   15090:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   15096:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1509c:	48 98                	cdqe   
   1509e:	48 c1 e0 02          	shl    rax,0x2
   150a2:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   150a6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   150aa:	48 01 d0             	add    rax,rdx
   150ad:	8b 00                	mov    eax,DWORD PTR [rax]
   150af:	3d 80 96 98 00       	cmp    eax,0x989680
   150b4:	0f 84 c2 00 00 00    	je     1517c <f3_get_stem_contributions_d3+0x291>
   150ba:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   150c0:	8d 48 01             	lea    ecx,[rax+0x1]
   150c3:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   150c9:	8d 50 ff             	lea    edx,[rax-0x1]
   150cc:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
   150d3:	8b b5 78 ff ff ff    	mov    esi,DWORD PTR [rbp-0x88]
   150d9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   150df:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   150e6:	49 89 f9             	mov    r9,rdi
   150e9:	41 b8 10 00 00 00    	mov    r8d,0x10
   150ef:	89 c7                	mov    edi,eax
   150f1:	41 ff d2             	call   r10
   150f4:	84 c0                	test   al,al
   150f6:	0f 84 80 00 00 00    	je     1517c <f3_get_stem_contributions_d3+0x291>
   150fc:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15102:	8d 48 ff             	lea    ecx,[rax-0x1]
   15105:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   15109:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1510f:	89 ce                	mov    esi,ecx
   15111:	89 c7                	mov    edi,eax
   15113:	e8 aa b8 01 00       	call   309c2 <vrna_get_ptype_window>
   15118:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   1511b:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15121:	48 98                	cdqe   
   15123:	48 c1 e0 02          	shl    rax,0x2
   15127:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   1512b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1512f:	48 01 d0             	add    rax,rdx
   15132:	8b 18                	mov    ebx,DWORD PTR [rax]
   15134:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1513a:	48 98                	cdqe   
   1513c:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   15140:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   15144:	48 01 d0             	add    rax,rdx
   15147:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1514a:	0f bf d0             	movsx  edx,ax
   1514d:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
   15151:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15154:	be ff ff ff ff       	mov    esi,0xffffffff
   15159:	89 c7                	mov    edi,eax
   1515b:	e8 db be ff ff       	call   1103b <vrna_E_ext_stem>
   15160:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15166:	48 63 d2             	movsxd rdx,edx
   15169:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   15171:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   15175:	48 01 ca             	add    rdx,rcx
   15178:	01 d8                	add    eax,ebx
   1517a:	89 02                	mov    DWORD PTR [rdx],eax
   1517c:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   15183:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15189:	3b 45 88             	cmp    eax,DWORD PTR [rbp-0x78]
   1518c:	0f 8e e7 fe ff ff    	jle    15079 <f3_get_stem_contributions_d3+0x18e>
   15192:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   15197:	0f 84 b2 00 00 00    	je     1524f <f3_get_stem_contributions_d3+0x364>
   1519d:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   151a3:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   151a6:	01 d0                	add    eax,edx
   151a8:	83 c0 01             	add    eax,0x1
   151ab:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   151b1:	e9 8a 00 00 00       	jmp    15240 <f3_get_stem_contributions_d3+0x355>
   151b6:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   151bc:	48 98                	cdqe   
   151be:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   151c6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   151ca:	48 01 d0             	add    rax,rdx
   151cd:	8b 00                	mov    eax,DWORD PTR [rax]
   151cf:	3d 80 96 98 00       	cmp    eax,0x989680
   151d4:	74 63                	je     15239 <f3_get_stem_contributions_d3+0x34e>
   151d6:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   151dc:	8d 78 01             	lea    edi,[rax+0x1]
   151df:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   151e5:	8d 70 ff             	lea    esi,[rax-0x1]
   151e8:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   151ef:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   151f5:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   151f9:	48 89 d1             	mov    rcx,rdx
   151fc:	89 fa                	mov    edx,edi
   151fe:	89 c7                	mov    edi,eax
   15200:	41 ff d0             	call   r8
   15203:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15209:	48 63 d2             	movsxd rdx,edx
   1520c:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   15214:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   15218:	48 01 ca             	add    rdx,rcx
   1521b:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1521d:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15223:	48 63 d2             	movsxd rdx,edx
   15226:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1522e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   15232:	48 01 f2             	add    rdx,rsi
   15235:	01 c8                	add    eax,ecx
   15237:	89 02                	mov    DWORD PTR [rdx],eax
   15239:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   15240:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15246:	3b 45 88             	cmp    eax,DWORD PTR [rbp-0x78]
   15249:	0f 8e 67 ff ff ff    	jle    151b6 <f3_get_stem_contributions_d3+0x2cb>
   1524f:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15255:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1525b:	01 d0                	add    eax,edx
   1525d:	39 85 78 ff ff ff    	cmp    DWORD PTR [rbp-0x88],eax
   15263:	0f 8f 68 07 00 00    	jg     159d1 <f3_get_stem_contributions_d3+0xae6>
   15269:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1526f:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   15275:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1527b:	48 98                	cdqe   
   1527d:	48 c1 e0 02          	shl    rax,0x2
   15281:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   15285:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   15289:	48 01 d0             	add    rax,rdx
   1528c:	8b 00                	mov    eax,DWORD PTR [rax]
   1528e:	3d 80 96 98 00       	cmp    eax,0x989680
   15293:	0f 84 38 07 00 00    	je     159d1 <f3_get_stem_contributions_d3+0xae6>
   15299:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1529f:	8d 48 ff             	lea    ecx,[rax-0x1]
   152a2:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
   152a9:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   152af:	8b b5 74 ff ff ff    	mov    esi,DWORD PTR [rbp-0x8c]
   152b5:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   152bb:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   152c2:	49 89 f9             	mov    r9,rdi
   152c5:	41 b8 0e 00 00 00    	mov    r8d,0xe
   152cb:	89 c7                	mov    edi,eax
   152cd:	41 ff d2             	call   r10
   152d0:	84 c0                	test   al,al
   152d2:	0f 84 f9 06 00 00    	je     159d1 <f3_get_stem_contributions_d3+0xae6>
   152d8:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   152de:	8d 48 ff             	lea    ecx,[rax-0x1]
   152e1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   152e5:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   152eb:	89 ce                	mov    esi,ecx
   152ed:	89 c7                	mov    edi,eax
   152ef:	e8 ce b6 01 00       	call   309c2 <vrna_get_ptype_window>
   152f4:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   152f7:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   152fd:	48 98                	cdqe   
   152ff:	48 c1 e0 02          	shl    rax,0x2
   15303:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   15307:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1530b:	48 01 d0             	add    rax,rdx
   1530e:	8b 18                	mov    ebx,DWORD PTR [rax]
   15310:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15316:	48 98                	cdqe   
   15318:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1531c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   15320:	48 01 d0             	add    rax,rdx
   15323:	0f b7 00             	movzx  eax,WORD PTR [rax]
   15326:	0f bf d0             	movsx  edx,ax
   15329:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
   1532d:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15330:	be ff ff ff ff       	mov    esi,0xffffffff
   15335:	89 c7                	mov    edi,eax
   15337:	e8 ff bc ff ff       	call   1103b <vrna_E_ext_stem>
   1533c:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15342:	48 63 d2             	movsxd rdx,edx
   15345:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1534d:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   15351:	48 01 ca             	add    rdx,rcx
   15354:	01 d8                	add    eax,ebx
   15356:	89 02                	mov    DWORD PTR [rdx],eax
   15358:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
   1535d:	0f 84 6e 06 00 00    	je     159d1 <f3_get_stem_contributions_d3+0xae6>
   15363:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15369:	8d 78 ff             	lea    edi,[rax-0x1]
   1536c:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   15373:	8b b5 54 ff ff ff    	mov    esi,DWORD PTR [rbp-0xac]
   15379:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1537f:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
   15383:	48 89 d1             	mov    rcx,rdx
   15386:	89 fa                	mov    edx,edi
   15388:	89 c7                	mov    edi,eax
   1538a:	41 ff d0             	call   r8
   1538d:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15393:	48 63 d2             	movsxd rdx,edx
   15396:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1539e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   153a2:	48 01 ca             	add    rdx,rcx
   153a5:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   153a7:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   153ad:	48 63 d2             	movsxd rdx,edx
   153b0:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   153b8:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   153bc:	48 01 f2             	add    rdx,rsi
   153bf:	01 c8                	add    eax,ecx
   153c1:	89 02                	mov    DWORD PTR [rdx],eax
   153c3:	e9 09 06 00 00       	jmp    159d1 <f3_get_stem_contributions_d3+0xae6>
   153c8:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   153cf:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   153d5:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   153d8:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   153df:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   153e6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   153ea:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   153f1:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
   153f8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   153fc:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15403:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   1540a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1540e:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15414:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1541a:	01 d0                	add    eax,edx
   1541c:	83 c0 01             	add    eax,0x1
   1541f:	39 85 78 ff ff ff    	cmp    DWORD PTR [rbp-0x88],eax
   15425:	7f 0b                	jg     15432 <f3_get_stem_contributions_d3+0x547>
   15427:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1542d:	83 e8 01             	sub    eax,0x1
   15430:	eb 11                	jmp    15443 <f3_get_stem_contributions_d3+0x558>
   15432:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15438:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1543e:	01 d0                	add    eax,edx
   15440:	83 c0 01             	add    eax,0x1
   15443:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   15446:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   15449:	01 c0                	add    eax,eax
   1544b:	89 c7                	mov    edi,eax
   1544d:	e8 bf 98 01 00       	call   2ed11 <vrna_alloc>
   15452:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   15456:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   15460:	eb 45                	jmp    154a7 <f3_get_stem_contributions_d3+0x5bc>
   15462:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15468:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   15470:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15474:	48 01 d0             	add    rax,rdx
   15477:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1547a:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15480:	48 63 d2             	movsxd rdx,edx
   15483:	48 01 d2             	add    rdx,rdx
   15486:	48 01 d0             	add    rax,rdx
   15489:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   1548f:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   15493:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   15497:	48 01 ca             	add    rdx,rcx
   1549a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1549d:	66 89 02             	mov    WORD PTR [rdx],ax
   154a0:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   154a7:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   154ad:	3b 45 84             	cmp    eax,DWORD PTR [rbp-0x7c]
   154b0:	72 b0                	jb     15462 <f3_get_stem_contributions_d3+0x577>
   154b2:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   154b8:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   154bb:	01 d0                	add    eax,edx
   154bd:	83 c0 01             	add    eax,0x1
   154c0:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   154c6:	e9 fb 01 00 00       	jmp    156c6 <f3_get_stem_contributions_d3+0x7db>
   154cb:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   154d1:	48 98                	cdqe   
   154d3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   154db:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   154df:	48 01 d0             	add    rax,rdx
   154e2:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   154e8:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   154ee:	48 98                	cdqe   
   154f0:	48 c1 e0 02          	shl    rax,0x2
   154f4:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   154f8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   154fc:	48 01 d0             	add    rax,rdx
   154ff:	8b 00                	mov    eax,DWORD PTR [rax]
   15501:	3d 80 96 98 00       	cmp    eax,0x989680
   15506:	0f 84 b3 01 00 00    	je     156bf <f3_get_stem_contributions_d3+0x7d4>
   1550c:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15512:	8d 48 01             	lea    ecx,[rax+0x1]
   15515:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1551b:	8d 50 ff             	lea    edx,[rax-0x1]
   1551e:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
   15525:	8b b5 78 ff ff ff    	mov    esi,DWORD PTR [rbp-0x88]
   1552b:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15531:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   15538:	49 89 f9             	mov    r9,rdi
   1553b:	41 b8 10 00 00 00    	mov    r8d,0x10
   15541:	89 c7                	mov    edi,eax
   15543:	41 ff d2             	call   r10
   15546:	84 c0                	test   al,al
   15548:	0f 84 71 01 00 00    	je     156bf <f3_get_stem_contributions_d3+0x7d4>
   1554e:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15554:	48 98                	cdqe   
   15556:	48 c1 e0 02          	shl    rax,0x2
   1555a:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   1555e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   15562:	48 01 d0             	add    rax,rdx
   15565:	8b 00                	mov    eax,DWORD PTR [rax]
   15567:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   1556d:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   15577:	e9 15 01 00 00       	jmp    15691 <f3_get_stem_contributions_d3+0x7a6>
   1557c:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15582:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1558a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1558e:	48 01 d0             	add    rax,rdx
   15591:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15594:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   1559a:	48 63 d2             	movsxd rdx,edx
   1559d:	48 01 d2             	add    rdx,rdx
   155a0:	48 83 ea 02          	sub    rdx,0x2
   155a4:	48 01 d0             	add    rax,rdx
   155a7:	0f b7 00             	movzx  eax,WORD PTR [rax]
   155aa:	0f bf c8             	movsx  ecx,ax
   155ad:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   155b3:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   155b7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   155bb:	48 01 d0             	add    rax,rdx
   155be:	0f b7 00             	movzx  eax,WORD PTR [rax]
   155c1:	98                   	cwde   
   155c2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   155c6:	89 ce                	mov    esi,ecx
   155c8:	89 c7                	mov    edi,eax
   155ca:	e8 69 b3 01 00       	call   30938 <vrna_get_ptype_md>
   155cf:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   155d2:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   155d8:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   155e0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   155e4:	48 01 d0             	add    rax,rdx
   155e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   155ea:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   155f0:	48 63 d2             	movsxd rdx,edx
   155f3:	48 c1 e2 02          	shl    rdx,0x2
   155f7:	48 83 ea 04          	sub    rdx,0x4
   155fb:	48 01 d0             	add    rax,rdx
   155fe:	8b 10                	mov    edx,DWORD PTR [rax]
   15600:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15606:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   1560e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15612:	48 01 c8             	add    rax,rcx
   15615:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15618:	8b 8d 78 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x88]
   1561e:	48 63 c9             	movsxd rcx,ecx
   15621:	48 c1 e1 02          	shl    rcx,0x2
   15625:	48 01 c8             	add    rax,rcx
   15628:	8b 00                	mov    eax,DWORD PTR [rax]
   1562a:	39 c2                	cmp    edx,eax
   1562c:	73 30                	jae    1565e <f3_get_stem_contributions_d3+0x773>
   1562e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15634:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1563c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15640:	48 01 d0             	add    rax,rdx
   15643:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15646:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   1564c:	48 63 d2             	movsxd rdx,edx
   1564f:	48 01 d2             	add    rdx,rdx
   15652:	48 83 ea 02          	sub    rdx,0x2
   15656:	48 01 d0             	add    rax,rdx
   15659:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1565c:	eb 05                	jmp    15663 <f3_get_stem_contributions_d3+0x778>
   1565e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   15663:	66 89 85 6a ff ff ff 	mov    WORD PTR [rbp-0x96],ax
   1566a:	0f bf 95 6a ff ff ff 	movsx  edx,WORD PTR [rbp-0x96]
   15671:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
   15675:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15678:	be ff ff ff ff       	mov    esi,0xffffffff
   1567d:	89 c7                	mov    edi,eax
   1567f:	e8 b7 b9 ff ff       	call   1103b <vrna_E_ext_stem>
   15684:	01 85 70 ff ff ff    	add    DWORD PTR [rbp-0x90],eax
   1568a:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   15691:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15697:	3b 45 84             	cmp    eax,DWORD PTR [rbp-0x7c]
   1569a:	0f 82 dc fe ff ff    	jb     1557c <f3_get_stem_contributions_d3+0x691>
   156a0:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   156a6:	48 98                	cdqe   
   156a8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   156b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   156b4:	48 01 c2             	add    rdx,rax
   156b7:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   156bd:	89 02                	mov    DWORD PTR [rdx],eax
   156bf:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   156c6:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   156cc:	3b 45 88             	cmp    eax,DWORD PTR [rbp-0x78]
   156cf:	0f 8e f6 fd ff ff    	jle    154cb <f3_get_stem_contributions_d3+0x5e0>
   156d5:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   156da:	0f 84 b2 00 00 00    	je     15792 <f3_get_stem_contributions_d3+0x8a7>
   156e0:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   156e6:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   156e9:	01 d0                	add    eax,edx
   156eb:	83 c0 01             	add    eax,0x1
   156ee:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   156f4:	e9 8a 00 00 00       	jmp    15783 <f3_get_stem_contributions_d3+0x898>
   156f9:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   156ff:	48 98                	cdqe   
   15701:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15709:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1570d:	48 01 d0             	add    rax,rdx
   15710:	8b 00                	mov    eax,DWORD PTR [rax]
   15712:	3d 80 96 98 00       	cmp    eax,0x989680
   15717:	74 63                	je     1577c <f3_get_stem_contributions_d3+0x891>
   15719:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1571f:	8d 78 01             	lea    edi,[rax+0x1]
   15722:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15728:	8d 70 ff             	lea    esi,[rax-0x1]
   1572b:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   15732:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15738:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   1573c:	48 89 d1             	mov    rcx,rdx
   1573f:	89 fa                	mov    edx,edi
   15741:	89 c7                	mov    edi,eax
   15743:	41 ff d0             	call   r8
   15746:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   1574c:	48 63 d2             	movsxd rdx,edx
   1574f:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   15757:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   1575b:	48 01 ca             	add    rdx,rcx
   1575e:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   15760:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15766:	48 63 d2             	movsxd rdx,edx
   15769:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   15771:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   15775:	48 01 f2             	add    rdx,rsi
   15778:	01 c8                	add    eax,ecx
   1577a:	89 02                	mov    DWORD PTR [rdx],eax
   1577c:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   15783:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15789:	3b 45 88             	cmp    eax,DWORD PTR [rbp-0x78]
   1578c:	0f 8e 67 ff ff ff    	jle    156f9 <f3_get_stem_contributions_d3+0x80e>
   15792:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15798:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1579e:	01 d0                	add    eax,edx
   157a0:	39 85 78 ff ff ff    	cmp    DWORD PTR [rbp-0x88],eax
   157a6:	0f 8f 17 02 00 00    	jg     159c3 <f3_get_stem_contributions_d3+0xad8>
   157ac:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   157b2:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   157b8:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   157be:	48 98                	cdqe   
   157c0:	48 c1 e0 02          	shl    rax,0x2
   157c4:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   157c8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   157cc:	48 01 d0             	add    rax,rdx
   157cf:	8b 00                	mov    eax,DWORD PTR [rax]
   157d1:	3d 80 96 98 00       	cmp    eax,0x989680
   157d6:	0f 84 e7 01 00 00    	je     159c3 <f3_get_stem_contributions_d3+0xad8>
   157dc:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   157e2:	8d 48 ff             	lea    ecx,[rax-0x1]
   157e5:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
   157ec:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   157f2:	8b b5 74 ff ff ff    	mov    esi,DWORD PTR [rbp-0x8c]
   157f8:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   157fe:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   15805:	49 89 f9             	mov    r9,rdi
   15808:	41 b8 0e 00 00 00    	mov    r8d,0xe
   1580e:	89 c7                	mov    edi,eax
   15810:	41 ff d2             	call   r10
   15813:	84 c0                	test   al,al
   15815:	0f 84 a8 01 00 00    	je     159c3 <f3_get_stem_contributions_d3+0xad8>
   1581b:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   15821:	48 98                	cdqe   
   15823:	48 c1 e0 02          	shl    rax,0x2
   15827:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   1582b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1582f:	48 01 d0             	add    rax,rdx
   15832:	8b 00                	mov    eax,DWORD PTR [rax]
   15834:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   1583a:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   15844:	e9 15 01 00 00       	jmp    1595e <f3_get_stem_contributions_d3+0xa73>
   15849:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1584f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   15857:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1585b:	48 01 d0             	add    rax,rdx
   1585e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15861:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15867:	48 63 d2             	movsxd rdx,edx
   1586a:	48 01 d2             	add    rdx,rdx
   1586d:	48 83 ea 02          	sub    rdx,0x2
   15871:	48 01 d0             	add    rax,rdx
   15874:	0f b7 00             	movzx  eax,WORD PTR [rax]
   15877:	0f bf c8             	movsx  ecx,ax
   1587a:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15880:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   15884:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   15888:	48 01 d0             	add    rax,rdx
   1588b:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1588e:	98                   	cwde   
   1588f:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   15893:	89 ce                	mov    esi,ecx
   15895:	89 c7                	mov    edi,eax
   15897:	e8 9c b0 01 00       	call   30938 <vrna_get_ptype_md>
   1589c:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   1589f:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   158a5:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   158ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   158b1:	48 01 d0             	add    rax,rdx
   158b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   158b7:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   158bd:	48 63 d2             	movsxd rdx,edx
   158c0:	48 c1 e2 02          	shl    rdx,0x2
   158c4:	48 83 ea 04          	sub    rdx,0x4
   158c8:	48 01 d0             	add    rax,rdx
   158cb:	8b 10                	mov    edx,DWORD PTR [rax]
   158cd:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   158d3:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   158db:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   158df:	48 01 c8             	add    rax,rcx
   158e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   158e5:	8b 8d 78 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x88]
   158eb:	48 63 c9             	movsxd rcx,ecx
   158ee:	48 c1 e1 02          	shl    rcx,0x2
   158f2:	48 01 c8             	add    rax,rcx
   158f5:	8b 00                	mov    eax,DWORD PTR [rax]
   158f7:	39 c2                	cmp    edx,eax
   158f9:	73 30                	jae    1592b <f3_get_stem_contributions_d3+0xa40>
   158fb:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15901:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   15909:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1590d:	48 01 d0             	add    rax,rdx
   15910:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15913:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [rbp-0x8c]
   15919:	48 63 d2             	movsxd rdx,edx
   1591c:	48 01 d2             	add    rdx,rdx
   1591f:	48 83 ea 02          	sub    rdx,0x2
   15923:	48 01 d0             	add    rax,rdx
   15926:	0f b7 00             	movzx  eax,WORD PTR [rax]
   15929:	eb 05                	jmp    15930 <f3_get_stem_contributions_d3+0xa45>
   1592b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   15930:	66 89 85 6a ff ff ff 	mov    WORD PTR [rbp-0x96],ax
   15937:	0f bf 95 6a ff ff ff 	movsx  edx,WORD PTR [rbp-0x96]
   1593e:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
   15942:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15945:	be ff ff ff ff       	mov    esi,0xffffffff
   1594a:	89 c7                	mov    edi,eax
   1594c:	e8 ea b6 ff ff       	call   1103b <vrna_E_ext_stem>
   15951:	01 85 70 ff ff ff    	add    DWORD PTR [rbp-0x90],eax
   15957:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   1595e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15964:	3b 45 84             	cmp    eax,DWORD PTR [rbp-0x7c]
   15967:	0f 82 dc fe ff ff    	jb     15849 <f3_get_stem_contributions_d3+0x95e>
   1596d:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
   15972:	74 30                	je     159a4 <f3_get_stem_contributions_d3+0xab9>
   15974:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1597a:	8d 78 ff             	lea    edi,[rax-0x1]
   1597d:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   15984:	8b b5 54 ff ff ff    	mov    esi,DWORD PTR [rbp-0xac]
   1598a:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15990:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
   15994:	48 89 d1             	mov    rcx,rdx
   15997:	89 fa                	mov    edx,edi
   15999:	89 c7                	mov    edi,eax
   1599b:	41 ff d0             	call   r8
   1599e:	01 85 70 ff ff ff    	add    DWORD PTR [rbp-0x90],eax
   159a4:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   159aa:	48 98                	cdqe   
   159ac:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   159b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   159b8:	48 01 c2             	add    rdx,rax
   159bb:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   159c1:	89 02                	mov    DWORD PTR [rdx],eax
   159c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   159c7:	48 89 c7             	mov    rdi,rax
   159ca:	e8 71 df fe ff       	call   3940 <free@plt>
   159cf:	eb 01                	jmp    159d2 <f3_get_stem_contributions_d3+0xae7>
   159d1:	90                   	nop
   159d2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   159d6:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
   159dd:	5b                   	pop    rbx
   159de:	5d                   	pop    rbp
   159df:	c3                   	ret    

00000000000159e0 <f5_get_stem_contributions_d3>:
   159e0:	55                   	push   rbp
   159e1:	48 89 e5             	mov    rbp,rsp
   159e4:	53                   	push   rbx
   159e5:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
   159ec:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
   159f3:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
   159f9:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   15a00:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
   15a07:	4c 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r8
   15a0e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15a14:	48 98                	cdqe   
   15a16:	c1 e0 02             	shl    eax,0x2
   15a19:	89 c7                	mov    edi,eax
   15a1b:	e8 f1 92 01 00       	call   2ed11 <vrna_alloc>
   15a20:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   15a24:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15a2b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   15a2e:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   15a34:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15a3b:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   15a3f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   15a43:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   15a47:	48 05 98 35 03 00    	add    rax,0x33598
   15a4d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   15a51:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15a58:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   15a5c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   15a60:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15a67:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   15a6b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   15a6f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   15a73:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   15a77:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   15a7d:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   15a83:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15a89:	48 98                	cdqe   
   15a8b:	48 c1 e0 02          	shl    rax,0x2
   15a8f:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   15a93:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   15a97:	48 01 d0             	add    rax,rdx
   15a9a:	8b 10                	mov    edx,DWORD PTR [rax]
   15a9c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15aa2:	01 d0                	add    eax,edx
   15aa4:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   15aaa:	83 e8 01             	sub    eax,0x1
   15aad:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   15ab3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   15aba:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   15abe:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   15ac2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   15ac9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   15acd:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   15ad1:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15ad8:	8b 00                	mov    eax,DWORD PTR [rax]
   15ada:	85 c0                	test   eax,eax
   15adc:	74 0e                	je     15aec <f5_get_stem_contributions_d3+0x10c>
   15ade:	83 f8 01             	cmp    eax,0x1
   15ae1:	0f 84 58 03 00 00    	je     15e3f <f5_get_stem_contributions_d3+0x45f>
   15ae7:	e9 19 09 00 00       	jmp    16405 <f5_get_stem_contributions_d3+0xa25>
   15aec:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15af3:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   15afa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   15afe:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15b05:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   15b0c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   15b10:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15b16:	48 98                	cdqe   
   15b18:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   15b1c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   15b20:	48 01 d0             	add    rax,rdx
   15b23:	0f b7 00             	movzx  eax,WORD PTR [rax]
   15b26:	66 89 85 62 ff ff ff 	mov    WORD PTR [rbp-0x9e],ax
   15b2d:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15b33:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   15b39:	83 e8 01             	sub    eax,0x1
   15b3c:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   15b42:	e9 f9 00 00 00       	jmp    15c40 <f5_get_stem_contributions_d3+0x260>
   15b47:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   15b4d:	48 98                	cdqe   
   15b4f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15b57:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   15b5b:	48 01 d0             	add    rax,rdx
   15b5e:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   15b64:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15b6a:	48 98                	cdqe   
   15b6c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15b74:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   15b78:	48 01 d0             	add    rax,rdx
   15b7b:	8b 00                	mov    eax,DWORD PTR [rax]
   15b7d:	3d 80 96 98 00       	cmp    eax,0x989680
   15b82:	0f 84 aa 00 00 00    	je     15c32 <f5_get_stem_contributions_d3+0x252>
   15b88:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   15b8e:	8d 70 ff             	lea    esi,[rax-0x1]
   15b91:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   15b98:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   15b9e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15ba4:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   15bab:	49 89 c9             	mov    r9,rcx
   15bae:	41 b8 13 00 00 00    	mov    r8d,0x13
   15bb4:	89 d1                	mov    ecx,edx
   15bb6:	89 f2                	mov    edx,esi
   15bb8:	89 c6                	mov    esi,eax
   15bba:	bf 01 00 00 00       	mov    edi,0x1
   15bbf:	41 ff d2             	call   r10
   15bc2:	84 c0                	test   al,al
   15bc4:	74 6c                	je     15c32 <f5_get_stem_contributions_d3+0x252>
   15bc6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   15bca:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15bd0:	48 89 d6             	mov    rsi,rdx
   15bd3:	89 c7                	mov    edi,eax
   15bd5:	e8 b1 ad 01 00       	call   3098b <vrna_get_ptype>
   15bda:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   15be0:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15be6:	48 98                	cdqe   
   15be8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15bf0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   15bf4:	48 01 d0             	add    rax,rdx
   15bf7:	8b 18                	mov    ebx,DWORD PTR [rax]
   15bf9:	0f bf 95 62 ff ff ff 	movsx  edx,WORD PTR [rbp-0x9e]
   15c00:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
   15c04:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   15c0a:	be ff ff ff ff       	mov    esi,0xffffffff
   15c0f:	89 c7                	mov    edi,eax
   15c11:	e8 25 b4 ff ff       	call   1103b <vrna_E_ext_stem>
   15c16:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   15c1c:	48 63 d2             	movsxd rdx,edx
   15c1f:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   15c27:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   15c2b:	48 01 ca             	add    rdx,rcx
   15c2e:	01 d8                	add    eax,ebx
   15c30:	89 02                	mov    DWORD PTR [rdx],eax
   15c32:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   15c39:	83 ad 6c ff ff ff 01 	sub    DWORD PTR [rbp-0x94],0x1
   15c40:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   15c47:	0f 8f fa fe ff ff    	jg     15b47 <f5_get_stem_contributions_d3+0x167>
   15c4d:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   15c52:	0f 84 a9 00 00 00    	je     15d01 <f5_get_stem_contributions_d3+0x321>
   15c58:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15c5e:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   15c64:	83 e8 01             	sub    eax,0x1
   15c67:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   15c6d:	e9 82 00 00 00       	jmp    15cf4 <f5_get_stem_contributions_d3+0x314>
   15c72:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   15c78:	48 98                	cdqe   
   15c7a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15c82:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   15c86:	48 01 d0             	add    rax,rdx
   15c89:	8b 00                	mov    eax,DWORD PTR [rax]
   15c8b:	3d 80 96 98 00       	cmp    eax,0x989680
   15c90:	74 5b                	je     15ced <f5_get_stem_contributions_d3+0x30d>
   15c92:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   15c98:	8d 70 ff             	lea    esi,[rax-0x1]
   15c9b:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
   15ca2:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   15ca8:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15cae:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   15cb2:	89 c7                	mov    edi,eax
   15cb4:	41 ff d0             	call   r8
   15cb7:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   15cbd:	48 63 d2             	movsxd rdx,edx
   15cc0:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   15cc8:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   15ccc:	48 01 ca             	add    rdx,rcx
   15ccf:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   15cd1:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   15cd7:	48 63 d2             	movsxd rdx,edx
   15cda:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   15ce2:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   15ce6:	48 01 f2             	add    rdx,rsi
   15ce9:	01 c8                	add    eax,ecx
   15ceb:	89 02                	mov    DWORD PTR [rdx],eax
   15ced:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   15cf4:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   15cfb:	0f 8f 71 ff ff ff    	jg     15c72 <f5_get_stem_contributions_d3+0x292>
   15d01:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   15d05:	48 83 c0 04          	add    rax,0x4
   15d09:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   15d0f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15d15:	48 98                	cdqe   
   15d17:	48 c1 e0 02          	shl    rax,0x2
   15d1b:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   15d1f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   15d23:	48 01 d0             	add    rax,rdx
   15d26:	8b 00                	mov    eax,DWORD PTR [rax]
   15d28:	83 c0 01             	add    eax,0x1
   15d2b:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   15d31:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15d37:	48 98                	cdqe   
   15d39:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15d41:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   15d45:	48 01 d0             	add    rax,rdx
   15d48:	8b 00                	mov    eax,DWORD PTR [rax]
   15d4a:	3d 80 96 98 00       	cmp    eax,0x989680
   15d4f:	0f 84 af 06 00 00    	je     16404 <f5_get_stem_contributions_d3+0xa24>
   15d55:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15d5b:	8d 50 ff             	lea    edx,[rax-0x1]
   15d5e:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   15d65:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15d6b:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   15d72:	49 89 c9             	mov    r9,rcx
   15d75:	41 b8 0e 00 00 00    	mov    r8d,0xe
   15d7b:	89 d1                	mov    ecx,edx
   15d7d:	ba 01 00 00 00       	mov    edx,0x1
   15d82:	89 c6                	mov    esi,eax
   15d84:	bf 01 00 00 00       	mov    edi,0x1
   15d89:	41 ff d2             	call   r10
   15d8c:	84 c0                	test   al,al
   15d8e:	0f 84 70 06 00 00    	je     16404 <f5_get_stem_contributions_d3+0xa24>
   15d94:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   15d98:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15d9e:	48 89 d6             	mov    rsi,rdx
   15da1:	89 c7                	mov    edi,eax
   15da3:	e8 e3 ab 01 00       	call   3098b <vrna_get_ptype>
   15da8:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   15dae:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15db4:	48 98                	cdqe   
   15db6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15dbe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   15dc2:	48 01 d0             	add    rax,rdx
   15dc5:	8b 18                	mov    ebx,DWORD PTR [rax]
   15dc7:	0f bf 95 62 ff ff ff 	movsx  edx,WORD PTR [rbp-0x9e]
   15dce:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
   15dd2:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   15dd8:	be ff ff ff ff       	mov    esi,0xffffffff
   15ddd:	89 c7                	mov    edi,eax
   15ddf:	e8 57 b2 ff ff       	call   1103b <vrna_E_ext_stem>
   15de4:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   15de8:	48 83 c2 04          	add    rdx,0x4
   15dec:	01 d8                	add    eax,ebx
   15dee:	89 02                	mov    DWORD PTR [rdx],eax
   15df0:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   15df5:	0f 84 09 06 00 00    	je     16404 <f5_get_stem_contributions_d3+0xa24>
   15dfb:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15e01:	8d 70 ff             	lea    esi,[rax-0x1]
   15e04:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   15e0b:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15e11:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   15e15:	48 89 d1             	mov    rcx,rdx
   15e18:	89 f2                	mov    edx,esi
   15e1a:	be 01 00 00 00       	mov    esi,0x1
   15e1f:	89 c7                	mov    edi,eax
   15e21:	41 ff d0             	call   r8
   15e24:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   15e28:	48 83 c2 04          	add    rdx,0x4
   15e2c:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   15e2e:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   15e32:	48 83 c2 04          	add    rdx,0x4
   15e36:	01 c8                	add    eax,ecx
   15e38:	89 02                	mov    DWORD PTR [rdx],eax
   15e3a:	e9 c5 05 00 00       	jmp    16404 <f5_get_stem_contributions_d3+0xa24>
   15e3f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15e46:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   15e4c:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   15e52:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15e59:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   15e60:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   15e64:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15e6b:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
   15e72:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   15e76:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   15e7d:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   15e84:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   15e88:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   15e8e:	01 c0                	add    eax,eax
   15e90:	89 c7                	mov    edi,eax
   15e92:	e8 7a 8e 01 00       	call   2ed11 <vrna_alloc>
   15e97:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   15e9b:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   15ea1:	01 c0                	add    eax,eax
   15ea3:	89 c7                	mov    edi,eax
   15ea5:	e8 67 8e 01 00       	call   2ed11 <vrna_alloc>
   15eaa:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   15eae:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   15eb8:	e9 eb 00 00 00       	jmp    15fa8 <f5_get_stem_contributions_d3+0x5c8>
   15ebd:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   15ec3:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   15ecb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15ecf:	48 01 d0             	add    rax,rdx
   15ed2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15ed5:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15edb:	48 63 d2             	movsxd rdx,edx
   15ede:	48 c1 e2 02          	shl    rdx,0x2
   15ee2:	48 83 ea 04          	sub    rdx,0x4
   15ee6:	48 01 d0             	add    rax,rdx
   15ee9:	8b 10                	mov    edx,DWORD PTR [rax]
   15eeb:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   15ef1:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   15ef9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15efd:	48 01 c8             	add    rax,rcx
   15f00:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15f03:	8b 8d 70 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x90]
   15f09:	48 c1 e1 02          	shl    rcx,0x2
   15f0d:	48 01 c8             	add    rax,rcx
   15f10:	8b 00                	mov    eax,DWORD PTR [rax]
   15f12:	39 c2                	cmp    edx,eax
   15f14:	73 30                	jae    15f46 <f5_get_stem_contributions_d3+0x566>
   15f16:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   15f1c:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   15f24:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15f28:	48 01 d0             	add    rax,rdx
   15f2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15f2e:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15f34:	48 63 d2             	movsxd rdx,edx
   15f37:	48 01 d2             	add    rdx,rdx
   15f3a:	48 83 ea 02          	sub    rdx,0x2
   15f3e:	48 01 d0             	add    rax,rdx
   15f41:	0f b7 00             	movzx  eax,WORD PTR [rax]
   15f44:	eb 05                	jmp    15f4b <f5_get_stem_contributions_d3+0x56b>
   15f46:	b8 ff ff ff ff       	mov    eax,0xffffffff
   15f4b:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   15f51:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   15f55:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   15f59:	48 01 ca             	add    rdx,rcx
   15f5c:	66 89 02             	mov    WORD PTR [rdx],ax
   15f5f:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   15f65:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   15f6d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15f71:	48 01 d0             	add    rax,rdx
   15f74:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15f77:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   15f7d:	48 63 d2             	movsxd rdx,edx
   15f80:	48 01 d2             	add    rdx,rdx
   15f83:	48 83 ea 02          	sub    rdx,0x2
   15f87:	48 01 d0             	add    rax,rdx
   15f8a:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   15f90:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   15f94:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   15f98:	48 01 ca             	add    rdx,rcx
   15f9b:	0f b7 00             	movzx  eax,WORD PTR [rax]
   15f9e:	66 89 02             	mov    WORD PTR [rdx],ax
   15fa1:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   15fa8:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   15fae:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   15fb4:	0f 82 03 ff ff ff    	jb     15ebd <f5_get_stem_contributions_d3+0x4dd>
   15fba:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15fc0:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   15fc6:	83 e8 01             	sub    eax,0x1
   15fc9:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   15fcf:	e9 a4 01 00 00       	jmp    16178 <f5_get_stem_contributions_d3+0x798>
   15fd4:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   15fda:	48 98                	cdqe   
   15fdc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15fe4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   15fe8:	48 01 d0             	add    rax,rdx
   15feb:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   15ff1:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   15ff7:	48 98                	cdqe   
   15ff9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16001:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16005:	48 01 d0             	add    rax,rdx
   16008:	8b 00                	mov    eax,DWORD PTR [rax]
   1600a:	3d 80 96 98 00       	cmp    eax,0x989680
   1600f:	0f 84 55 01 00 00    	je     1616a <f5_get_stem_contributions_d3+0x78a>
   16015:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   1601b:	8d 70 ff             	lea    esi,[rax-0x1]
   1601e:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   16025:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   1602b:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16031:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   16038:	49 89 c9             	mov    r9,rcx
   1603b:	41 b8 13 00 00 00    	mov    r8d,0x13
   16041:	89 d1                	mov    ecx,edx
   16043:	89 f2                	mov    edx,esi
   16045:	89 c6                	mov    esi,eax
   16047:	bf 01 00 00 00       	mov    edi,0x1
   1604c:	41 ff d2             	call   r10
   1604f:	84 c0                	test   al,al
   16051:	0f 84 13 01 00 00    	je     1616a <f5_get_stem_contributions_d3+0x78a>
   16057:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1605d:	48 98                	cdqe   
   1605f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16067:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1606b:	48 01 d0             	add    rax,rdx
   1606e:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   16074:	48 63 d2             	movsxd rdx,edx
   16077:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1607f:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   16083:	48 01 ca             	add    rdx,rcx
   16086:	8b 00                	mov    eax,DWORD PTR [rax]
   16088:	89 02                	mov    DWORD PTR [rdx],eax
   1608a:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   16094:	e9 bf 00 00 00       	jmp    16158 <f5_get_stem_contributions_d3+0x778>
   16099:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1609f:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   160a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   160a7:	48 01 d0             	add    rax,rdx
   160aa:	0f b7 00             	movzx  eax,WORD PTR [rax]
   160ad:	0f bf c8             	movsx  ecx,ax
   160b0:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   160b6:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   160be:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   160c2:	48 01 d0             	add    rax,rdx
   160c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   160c8:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   160ce:	48 63 d2             	movsxd rdx,edx
   160d1:	48 01 d2             	add    rdx,rdx
   160d4:	48 01 d0             	add    rax,rdx
   160d7:	0f b7 00             	movzx  eax,WORD PTR [rax]
   160da:	98                   	cwde   
   160db:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   160df:	89 ce                	mov    esi,ecx
   160e1:	89 c7                	mov    edi,eax
   160e3:	e8 50 a8 01 00       	call   30938 <vrna_get_ptype_md>
   160e8:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   160ee:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   160f4:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   160f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   160fc:	48 01 d0             	add    rax,rdx
   160ff:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16102:	0f bf d0             	movsx  edx,ax
   16105:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
   16109:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1610f:	be ff ff ff ff       	mov    esi,0xffffffff
   16114:	89 c7                	mov    edi,eax
   16116:	e8 20 af ff ff       	call   1103b <vrna_E_ext_stem>
   1611b:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   16121:	48 63 d2             	movsxd rdx,edx
   16124:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1612c:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   16130:	48 01 ca             	add    rdx,rcx
   16133:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   16135:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   1613b:	48 63 d2             	movsxd rdx,edx
   1613e:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   16146:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   1614a:	48 01 f2             	add    rdx,rsi
   1614d:	01 c8                	add    eax,ecx
   1614f:	89 02                	mov    DWORD PTR [rdx],eax
   16151:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   16158:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1615e:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   16164:	0f 82 2f ff ff ff    	jb     16099 <f5_get_stem_contributions_d3+0x6b9>
   1616a:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   16171:	83 ad 6c ff ff ff 01 	sub    DWORD PTR [rbp-0x94],0x1
   16178:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   1617f:	0f 8f 4f fe ff ff    	jg     15fd4 <f5_get_stem_contributions_d3+0x5f4>
   16185:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   1618a:	0f 84 a9 00 00 00    	je     16239 <f5_get_stem_contributions_d3+0x859>
   16190:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16196:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   1619c:	83 e8 01             	sub    eax,0x1
   1619f:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   161a5:	e9 82 00 00 00       	jmp    1622c <f5_get_stem_contributions_d3+0x84c>
   161aa:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   161b0:	48 98                	cdqe   
   161b2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   161ba:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   161be:	48 01 d0             	add    rax,rdx
   161c1:	8b 00                	mov    eax,DWORD PTR [rax]
   161c3:	3d 80 96 98 00       	cmp    eax,0x989680
   161c8:	74 5b                	je     16225 <f5_get_stem_contributions_d3+0x845>
   161ca:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   161d0:	8d 70 ff             	lea    esi,[rax-0x1]
   161d3:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
   161da:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   161e0:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   161e6:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   161ea:	89 c7                	mov    edi,eax
   161ec:	41 ff d0             	call   r8
   161ef:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   161f5:	48 63 d2             	movsxd rdx,edx
   161f8:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   16200:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   16204:	48 01 ca             	add    rdx,rcx
   16207:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   16209:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   1620f:	48 63 d2             	movsxd rdx,edx
   16212:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1621a:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   1621e:	48 01 f2             	add    rdx,rsi
   16221:	01 c8                	add    eax,ecx
   16223:	89 02                	mov    DWORD PTR [rdx],eax
   16225:	83 ad 68 ff ff ff 01 	sub    DWORD PTR [rbp-0x98],0x1
   1622c:	83 bd 68 ff ff ff 01 	cmp    DWORD PTR [rbp-0x98],0x1
   16233:	0f 8f 71 ff ff ff    	jg     161aa <f5_get_stem_contributions_d3+0x7ca>
   16239:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   1623d:	48 83 c0 04          	add    rax,0x4
   16241:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   16247:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1624d:	48 98                	cdqe   
   1624f:	48 c1 e0 02          	shl    rax,0x2
   16253:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   16257:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1625b:	48 01 d0             	add    rax,rdx
   1625e:	8b 00                	mov    eax,DWORD PTR [rax]
   16260:	83 c0 01             	add    eax,0x1
   16263:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   16269:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1626f:	48 98                	cdqe   
   16271:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16279:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1627d:	48 01 d0             	add    rax,rdx
   16280:	8b 00                	mov    eax,DWORD PTR [rax]
   16282:	3d 80 96 98 00       	cmp    eax,0x989680
   16287:	0f 84 5d 01 00 00    	je     163ea <f5_get_stem_contributions_d3+0xa0a>
   1628d:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16293:	8d 50 ff             	lea    edx,[rax-0x1]
   16296:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   1629d:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   162a3:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   162aa:	49 89 c9             	mov    r9,rcx
   162ad:	41 b8 0e 00 00 00    	mov    r8d,0xe
   162b3:	89 d1                	mov    ecx,edx
   162b5:	ba 01 00 00 00       	mov    edx,0x1
   162ba:	89 c6                	mov    esi,eax
   162bc:	bf 01 00 00 00       	mov    edi,0x1
   162c1:	41 ff d2             	call   r10
   162c4:	84 c0                	test   al,al
   162c6:	0f 84 1e 01 00 00    	je     163ea <f5_get_stem_contributions_d3+0xa0a>
   162cc:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   162d2:	48 98                	cdqe   
   162d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   162dc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   162e0:	48 01 d0             	add    rax,rdx
   162e3:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   162e7:	48 83 c2 04          	add    rdx,0x4
   162eb:	8b 00                	mov    eax,DWORD PTR [rax]
   162ed:	89 02                	mov    DWORD PTR [rdx],eax
   162ef:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   162f9:	e9 94 00 00 00       	jmp    16392 <f5_get_stem_contributions_d3+0x9b2>
   162fe:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16304:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   16308:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1630c:	48 01 d0             	add    rax,rdx
   1630f:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16312:	0f bf c8             	movsx  ecx,ax
   16315:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1631b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   16323:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   16327:	48 01 d0             	add    rax,rdx
   1632a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1632d:	48 83 c0 02          	add    rax,0x2
   16331:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16334:	98                   	cwde   
   16335:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   16339:	89 ce                	mov    esi,ecx
   1633b:	89 c7                	mov    edi,eax
   1633d:	e8 f6 a5 01 00       	call   30938 <vrna_get_ptype_md>
   16342:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   16348:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1634e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   16352:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16356:	48 01 d0             	add    rax,rdx
   16359:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1635c:	0f bf d0             	movsx  edx,ax
   1635f:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
   16363:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   16369:	be ff ff ff ff       	mov    esi,0xffffffff
   1636e:	89 c7                	mov    edi,eax
   16370:	e8 c6 ac ff ff       	call   1103b <vrna_E_ext_stem>
   16375:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   16379:	48 83 c2 04          	add    rdx,0x4
   1637d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1637f:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   16383:	48 83 c2 04          	add    rdx,0x4
   16387:	01 c8                	add    eax,ecx
   16389:	89 02                	mov    DWORD PTR [rdx],eax
   1638b:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   16392:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16398:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   1639e:	0f 82 5a ff ff ff    	jb     162fe <f5_get_stem_contributions_d3+0x91e>
   163a4:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   163a9:	74 3f                	je     163ea <f5_get_stem_contributions_d3+0xa0a>
   163ab:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   163b1:	8d 70 ff             	lea    esi,[rax-0x1]
   163b4:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   163bb:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   163c1:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   163c5:	48 89 d1             	mov    rcx,rdx
   163c8:	89 f2                	mov    edx,esi
   163ca:	be 01 00 00 00       	mov    esi,0x1
   163cf:	89 c7                	mov    edi,eax
   163d1:	41 ff d0             	call   r8
   163d4:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   163d8:	48 83 c2 04          	add    rdx,0x4
   163dc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   163de:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   163e2:	48 83 c2 04          	add    rdx,0x4
   163e6:	01 c8                	add    eax,ecx
   163e8:	89 02                	mov    DWORD PTR [rdx],eax
   163ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   163ee:	48 89 c7             	mov    rdi,rax
   163f1:	e8 4a d5 fe ff       	call   3940 <free@plt>
   163f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   163fa:	48 89 c7             	mov    rdi,rax
   163fd:	e8 3e d5 fe ff       	call   3940 <free@plt>
   16402:	eb 01                	jmp    16405 <f5_get_stem_contributions_d3+0xa25>
   16404:	90                   	nop
   16405:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   16409:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
   16410:	5b                   	pop    rbx
   16411:	5d                   	pop    rbp
   16412:	c3                   	ret    

0000000000016413 <f3_get_stem_contributions_d5>:
   16413:	55                   	push   rbp
   16414:	48 89 e5             	mov    rbp,rsp
   16417:	53                   	push   rbx
   16418:	48 81 ec c8 00 00 00 	sub    rsp,0xc8
   1641f:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
   16426:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
   1642c:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   16433:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
   1643a:	4c 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r8
   16441:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16448:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1644b:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   16451:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16458:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   1645e:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   16464:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1646b:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   1646f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   16473:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   16477:	48 05 98 35 03 00    	add    rax,0x33598
   1647d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   16481:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16488:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   1648c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   16490:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16496:	48 63 d2             	movsxd rdx,edx
   16499:	48 83 c2 01          	add    rdx,0x1
   1649d:	48 c1 e2 03          	shl    rdx,0x3
   164a1:	48 01 d0             	add    rax,rdx
   164a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   164a7:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   164ab:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   164b1:	48 98                	cdqe   
   164b3:	48 c1 e0 02          	shl    rax,0x2
   164b7:	48 c7 c2 fc ff ff ff 	mov    rdx,0xfffffffffffffffc
   164be:	48 29 c2             	sub    rdx,rax
   164c1:	48 89 d0             	mov    rax,rdx
   164c4:	48 01 45 98          	add    QWORD PTR [rbp-0x68],rax
   164c8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   164cc:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   164d2:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   164d8:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   164de:	83 c0 06             	add    eax,0x6
   164e1:	48 98                	cdqe   
   164e3:	c1 e0 02             	shl    eax,0x2
   164e6:	89 c7                	mov    edi,eax
   164e8:	e8 24 88 01 00       	call   2ed11 <vrna_alloc>
   164ed:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   164f1:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   164f7:	48 98                	cdqe   
   164f9:	48 c1 e0 02          	shl    rax,0x2
   164fd:	48 f7 d8             	neg    rax
   16500:	48 01 45 a0          	add    QWORD PTR [rbp-0x60],rax
   16504:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1650b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   1650f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   16513:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1651a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1651e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   16522:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16529:	8b 00                	mov    eax,DWORD PTR [rax]
   1652b:	85 c0                	test   eax,eax
   1652d:	74 0e                	je     1653d <f3_get_stem_contributions_d5+0x12a>
   1652f:	83 f8 01             	cmp    eax,0x1
   16532:	0f 84 e0 03 00 00    	je     16918 <f3_get_stem_contributions_d5+0x505>
   16538:	e9 a4 09 00 00       	jmp    16ee1 <f3_get_stem_contributions_d5+0xace>
   1653d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16544:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   1654b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1654f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16556:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   1655d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   16561:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16567:	48 98                	cdqe   
   16569:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1656d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   16571:	48 01 d0             	add    rax,rdx
   16574:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16577:	66 89 85 62 ff ff ff 	mov    WORD PTR [rbp-0x9e],ax
   1657e:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16584:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1658a:	01 d0                	add    eax,edx
   1658c:	83 c0 01             	add    eax,0x1
   1658f:	39 85 70 ff ff ff    	cmp    DWORD PTR [rbp-0x90],eax
   16595:	7f 0b                	jg     165a2 <f3_get_stem_contributions_d5+0x18f>
   16597:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1659d:	83 e8 01             	sub    eax,0x1
   165a0:	eb 11                	jmp    165b3 <f3_get_stem_contributions_d5+0x1a0>
   165a2:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   165a8:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   165ae:	01 d0                	add    eax,edx
   165b0:	83 c0 01             	add    eax,0x1
   165b3:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   165b6:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   165bc:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   165c2:	01 d0                	add    eax,edx
   165c4:	83 c0 01             	add    eax,0x1
   165c7:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   165cd:	e9 f4 00 00 00       	jmp    166c6 <f3_get_stem_contributions_d5+0x2b3>
   165d2:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   165d8:	48 98                	cdqe   
   165da:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   165e2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   165e6:	48 01 d0             	add    rax,rdx
   165e9:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   165ef:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   165f5:	48 98                	cdqe   
   165f7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   165ff:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   16603:	48 01 d0             	add    rax,rdx
   16606:	8b 00                	mov    eax,DWORD PTR [rax]
   16608:	3d 80 96 98 00       	cmp    eax,0x989680
   1660d:	0f 84 ac 00 00 00    	je     166bf <f3_get_stem_contributions_d5+0x2ac>
   16613:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16619:	8d 48 01             	lea    ecx,[rax+0x1]
   1661c:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
   16623:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16629:	8b b5 70 ff ff ff    	mov    esi,DWORD PTR [rbp-0x90]
   1662f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16635:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   1663c:	49 89 f9             	mov    r9,rdi
   1663f:	41 b8 14 00 00 00    	mov    r8d,0x14
   16645:	89 c7                	mov    edi,eax
   16647:	41 ff d2             	call   r10
   1664a:	84 c0                	test   al,al
   1664c:	74 71                	je     166bf <f3_get_stem_contributions_d5+0x2ac>
   1664e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16654:	8d 48 01             	lea    ecx,[rax+0x1]
   16657:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1665b:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16661:	89 c6                	mov    esi,eax
   16663:	89 cf                	mov    edi,ecx
   16665:	e8 58 a3 01 00       	call   309c2 <vrna_get_ptype_window>
   1666a:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   1666d:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16673:	48 98                	cdqe   
   16675:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1667d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   16681:	48 01 d0             	add    rax,rdx
   16684:	8b 18                	mov    ebx,DWORD PTR [rax]
   16686:	0f bf b5 62 ff ff ff 	movsx  esi,WORD PTR [rbp-0x9e]
   1668d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   16691:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   16694:	48 89 d1             	mov    rcx,rdx
   16697:	ba ff ff ff ff       	mov    edx,0xffffffff
   1669c:	89 c7                	mov    edi,eax
   1669e:	e8 98 a9 ff ff       	call   1103b <vrna_E_ext_stem>
   166a3:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   166a9:	48 63 d2             	movsxd rdx,edx
   166ac:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   166b4:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   166b8:	48 01 ca             	add    rdx,rcx
   166bb:	01 d8                	add    eax,ebx
   166bd:	89 02                	mov    DWORD PTR [rdx],eax
   166bf:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   166c6:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   166cc:	3b 45 80             	cmp    eax,DWORD PTR [rbp-0x80]
   166cf:	0f 8e fd fe ff ff    	jle    165d2 <f3_get_stem_contributions_d5+0x1bf>
   166d5:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   166da:	0f 84 b2 00 00 00    	je     16792 <f3_get_stem_contributions_d5+0x37f>
   166e0:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   166e6:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   166ec:	01 d0                	add    eax,edx
   166ee:	83 c0 01             	add    eax,0x1
   166f1:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   166f7:	e9 87 00 00 00       	jmp    16783 <f3_get_stem_contributions_d5+0x370>
   166fc:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16702:	48 98                	cdqe   
   16704:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1670c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16710:	48 01 d0             	add    rax,rdx
   16713:	8b 00                	mov    eax,DWORD PTR [rax]
   16715:	3d 80 96 98 00       	cmp    eax,0x989680
   1671a:	74 60                	je     1677c <f3_get_stem_contributions_d5+0x369>
   1671c:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16722:	8d 78 01             	lea    edi,[rax+0x1]
   16725:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   1672c:	8b b5 6c ff ff ff    	mov    esi,DWORD PTR [rbp-0x94]
   16732:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16738:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   1673c:	48 89 d1             	mov    rcx,rdx
   1673f:	89 fa                	mov    edx,edi
   16741:	89 c7                	mov    edi,eax
   16743:	41 ff d0             	call   r8
   16746:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   1674c:	48 63 d2             	movsxd rdx,edx
   1674f:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   16757:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   1675b:	48 01 ca             	add    rdx,rcx
   1675e:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   16760:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16766:	48 63 d2             	movsxd rdx,edx
   16769:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   16771:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   16775:	48 01 f2             	add    rdx,rsi
   16778:	01 c8                	add    eax,ecx
   1677a:	89 02                	mov    DWORD PTR [rdx],eax
   1677c:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   16783:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16789:	3b 45 80             	cmp    eax,DWORD PTR [rbp-0x80]
   1678c:	0f 8e 6a ff ff ff    	jle    166fc <f3_get_stem_contributions_d5+0x2e9>
   16792:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16798:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1679e:	01 d0                	add    eax,edx
   167a0:	39 85 70 ff ff ff    	cmp    DWORD PTR [rbp-0x90],eax
   167a6:	0f 8f 34 07 00 00    	jg     16ee0 <f3_get_stem_contributions_d5+0xacd>
   167ac:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   167b2:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   167b8:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   167be:	48 98                	cdqe   
   167c0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   167c8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   167cc:	48 01 d0             	add    rax,rdx
   167cf:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   167d5:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   167db:	48 98                	cdqe   
   167dd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   167e5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   167e9:	48 01 d0             	add    rax,rdx
   167ec:	8b 00                	mov    eax,DWORD PTR [rax]
   167ee:	3d 80 96 98 00       	cmp    eax,0x989680
   167f3:	0f 84 e7 06 00 00    	je     16ee0 <f3_get_stem_contributions_d5+0xacd>
   167f9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   167ff:	8d 78 01             	lea    edi,[rax+0x1]
   16802:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   16809:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   1680f:	8b b5 6c ff ff ff    	mov    esi,DWORD PTR [rbp-0x94]
   16815:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1681b:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   16822:	49 89 c9             	mov    r9,rcx
   16825:	41 b8 0e 00 00 00    	mov    r8d,0xe
   1682b:	89 d1                	mov    ecx,edx
   1682d:	89 fa                	mov    edx,edi
   1682f:	89 c7                	mov    edi,eax
   16831:	41 ff d2             	call   r10
   16834:	84 c0                	test   al,al
   16836:	0f 84 a4 06 00 00    	je     16ee0 <f3_get_stem_contributions_d5+0xacd>
   1683c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16842:	8d 48 01             	lea    ecx,[rax+0x1]
   16845:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16849:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1684f:	89 c6                	mov    esi,eax
   16851:	89 cf                	mov    edi,ecx
   16853:	e8 6a a1 01 00       	call   309c2 <vrna_get_ptype_window>
   16858:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   1685b:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16861:	48 98                	cdqe   
   16863:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1686b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1686f:	48 01 d0             	add    rax,rdx
   16872:	8b 18                	mov    ebx,DWORD PTR [rax]
   16874:	0f bf b5 62 ff ff ff 	movsx  esi,WORD PTR [rbp-0x9e]
   1687b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   1687f:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   16882:	48 89 d1             	mov    rcx,rdx
   16885:	ba ff ff ff ff       	mov    edx,0xffffffff
   1688a:	89 c7                	mov    edi,eax
   1688c:	e8 aa a7 ff ff       	call   1103b <vrna_E_ext_stem>
   16891:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16897:	48 63 d2             	movsxd rdx,edx
   1689a:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   168a2:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   168a6:	48 01 ca             	add    rdx,rcx
   168a9:	01 d8                	add    eax,ebx
   168ab:	89 02                	mov    DWORD PTR [rdx],eax
   168ad:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   168b2:	0f 84 28 06 00 00    	je     16ee0 <f3_get_stem_contributions_d5+0xacd>
   168b8:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   168be:	8d 70 01             	lea    esi,[rax+0x1]
   168c1:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
   168c8:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   168ce:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   168d4:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   168d8:	89 c7                	mov    edi,eax
   168da:	41 ff d0             	call   r8
   168dd:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   168e3:	48 63 d2             	movsxd rdx,edx
   168e6:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   168ee:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   168f2:	48 01 ca             	add    rdx,rcx
   168f5:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   168f7:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   168fd:	48 63 d2             	movsxd rdx,edx
   16900:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   16908:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   1690c:	48 01 f2             	add    rdx,rsi
   1690f:	01 c8                	add    eax,ecx
   16911:	89 02                	mov    DWORD PTR [rdx],eax
   16913:	e9 c8 05 00 00       	jmp    16ee0 <f3_get_stem_contributions_d5+0xacd>
   16918:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1691f:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   16925:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   1692b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16932:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   16939:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   1693d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16944:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   1694b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1694f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   16956:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   1695d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   16961:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16967:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1696d:	01 d0                	add    eax,edx
   1696f:	83 c0 01             	add    eax,0x1
   16972:	39 85 70 ff ff ff    	cmp    DWORD PTR [rbp-0x90],eax
   16978:	7f 0b                	jg     16985 <f3_get_stem_contributions_d5+0x572>
   1697a:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   16980:	83 e8 01             	sub    eax,0x1
   16983:	eb 11                	jmp    16996 <f3_get_stem_contributions_d5+0x583>
   16985:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   1698b:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   16991:	01 d0                	add    eax,edx
   16993:	83 c0 01             	add    eax,0x1
   16996:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   16999:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   1699f:	01 c0                	add    eax,eax
   169a1:	89 c7                	mov    edi,eax
   169a3:	e8 69 83 01 00       	call   2ed11 <vrna_alloc>
   169a8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   169ac:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   169b2:	01 c0                	add    eax,eax
   169b4:	89 c7                	mov    edi,eax
   169b6:	e8 56 83 01 00       	call   2ed11 <vrna_alloc>
   169bb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   169bf:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   169c9:	e9 c5 00 00 00       	jmp    16a93 <f3_get_stem_contributions_d5+0x680>
   169ce:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   169d4:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   169dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   169e0:	48 01 d0             	add    rax,rdx
   169e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   169e6:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   169ec:	48 63 d2             	movsxd rdx,edx
   169ef:	48 83 c2 01          	add    rdx,0x1
   169f3:	48 c1 e2 02          	shl    rdx,0x2
   169f7:	48 01 d0             	add    rax,rdx
   169fa:	8b 00                	mov    eax,DWORD PTR [rax]
   169fc:	83 f8 01             	cmp    eax,0x1
   169ff:	76 30                	jbe    16a31 <f3_get_stem_contributions_d5+0x61e>
   16a01:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16a07:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   16a0f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16a13:	48 01 d0             	add    rax,rdx
   16a16:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16a19:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16a1f:	48 63 d2             	movsxd rdx,edx
   16a22:	48 83 c2 01          	add    rdx,0x1
   16a26:	48 01 d2             	add    rdx,rdx
   16a29:	48 01 d0             	add    rax,rdx
   16a2c:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16a2f:	eb 05                	jmp    16a36 <f3_get_stem_contributions_d5+0x623>
   16a31:	b8 ff ff ff ff       	mov    eax,0xffffffff
   16a36:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   16a3c:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   16a40:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   16a44:	48 01 ca             	add    rdx,rcx
   16a47:	66 89 02             	mov    WORD PTR [rdx],ax
   16a4a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16a50:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   16a58:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   16a5c:	48 01 d0             	add    rax,rdx
   16a5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16a62:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16a68:	48 63 d2             	movsxd rdx,edx
   16a6b:	48 83 c2 01          	add    rdx,0x1
   16a6f:	48 01 d2             	add    rdx,rdx
   16a72:	48 01 d0             	add    rax,rdx
   16a75:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   16a7b:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   16a7f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   16a83:	48 01 ca             	add    rdx,rcx
   16a86:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16a89:	66 89 02             	mov    WORD PTR [rdx],ax
   16a8c:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   16a93:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16a99:	3b 85 7c ff ff ff    	cmp    eax,DWORD PTR [rbp-0x84]
   16a9f:	0f 82 29 ff ff ff    	jb     169ce <f3_get_stem_contributions_d5+0x5bb>
   16aa5:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16aab:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   16ab1:	01 d0                	add    eax,edx
   16ab3:	83 c0 01             	add    eax,0x1
   16ab6:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   16abc:	e9 72 01 00 00       	jmp    16c33 <f3_get_stem_contributions_d5+0x820>
   16ac1:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16ac7:	48 98                	cdqe   
   16ac9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16ad1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16ad5:	48 01 d0             	add    rax,rdx
   16ad8:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   16ade:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16ae4:	48 98                	cdqe   
   16ae6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16aee:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   16af2:	48 01 d0             	add    rax,rdx
   16af5:	8b 00                	mov    eax,DWORD PTR [rax]
   16af7:	3d 80 96 98 00       	cmp    eax,0x989680
   16afc:	0f 84 2a 01 00 00    	je     16c2c <f3_get_stem_contributions_d5+0x819>
   16b02:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16b08:	8d 48 01             	lea    ecx,[rax+0x1]
   16b0b:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
   16b12:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16b18:	8b b5 70 ff ff ff    	mov    esi,DWORD PTR [rbp-0x90]
   16b1e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16b24:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   16b2b:	49 89 f9             	mov    r9,rdi
   16b2e:	41 b8 14 00 00 00    	mov    r8d,0x14
   16b34:	89 c7                	mov    edi,eax
   16b36:	41 ff d2             	call   r10
   16b39:	84 c0                	test   al,al
   16b3b:	0f 84 eb 00 00 00    	je     16c2c <f3_get_stem_contributions_d5+0x819>
   16b41:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16b47:	48 98                	cdqe   
   16b49:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16b51:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   16b55:	48 01 d0             	add    rax,rdx
   16b58:	8b 00                	mov    eax,DWORD PTR [rax]
   16b5a:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   16b60:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   16b6a:	e9 8c 00 00 00       	jmp    16bfb <f3_get_stem_contributions_d5+0x7e8>
   16b6f:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16b75:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   16b7d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   16b81:	48 01 d0             	add    rax,rdx
   16b84:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16b87:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16b8d:	48 63 d2             	movsxd rdx,edx
   16b90:	48 01 d2             	add    rdx,rdx
   16b93:	48 01 d0             	add    rax,rdx
   16b96:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16b99:	0f bf c8             	movsx  ecx,ax
   16b9c:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16ba2:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   16ba6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16baa:	48 01 d0             	add    rax,rdx
   16bad:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16bb0:	98                   	cwde   
   16bb1:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   16bb5:	89 ce                	mov    esi,ecx
   16bb7:	89 c7                	mov    edi,eax
   16bb9:	e8 7a 9d 01 00       	call   30938 <vrna_get_ptype_md>
   16bbe:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   16bc1:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16bc7:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   16bcb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16bcf:	48 01 d0             	add    rax,rdx
   16bd2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16bd5:	0f bf f0             	movsx  esi,ax
   16bd8:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   16bdc:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   16bdf:	48 89 d1             	mov    rcx,rdx
   16be2:	ba ff ff ff ff       	mov    edx,0xffffffff
   16be7:	89 c7                	mov    edi,eax
   16be9:	e8 4d a4 ff ff       	call   1103b <vrna_E_ext_stem>
   16bee:	01 85 68 ff ff ff    	add    DWORD PTR [rbp-0x98],eax
   16bf4:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   16bfb:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16c01:	3b 85 7c ff ff ff    	cmp    eax,DWORD PTR [rbp-0x84]
   16c07:	0f 82 62 ff ff ff    	jb     16b6f <f3_get_stem_contributions_d5+0x75c>
   16c0d:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16c13:	48 98                	cdqe   
   16c15:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16c1d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16c21:	48 01 c2             	add    rdx,rax
   16c24:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   16c2a:	89 02                	mov    DWORD PTR [rdx],eax
   16c2c:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   16c33:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16c39:	3b 45 80             	cmp    eax,DWORD PTR [rbp-0x80]
   16c3c:	0f 8e 7f fe ff ff    	jle    16ac1 <f3_get_stem_contributions_d5+0x6ae>
   16c42:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   16c47:	0f 84 b2 00 00 00    	je     16cff <f3_get_stem_contributions_d5+0x8ec>
   16c4d:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16c53:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   16c59:	01 d0                	add    eax,edx
   16c5b:	83 c0 01             	add    eax,0x1
   16c5e:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   16c64:	e9 87 00 00 00       	jmp    16cf0 <f3_get_stem_contributions_d5+0x8dd>
   16c69:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16c6f:	48 98                	cdqe   
   16c71:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16c79:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16c7d:	48 01 d0             	add    rax,rdx
   16c80:	8b 00                	mov    eax,DWORD PTR [rax]
   16c82:	3d 80 96 98 00       	cmp    eax,0x989680
   16c87:	74 60                	je     16ce9 <f3_get_stem_contributions_d5+0x8d6>
   16c89:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16c8f:	8d 78 01             	lea    edi,[rax+0x1]
   16c92:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   16c99:	8b b5 6c ff ff ff    	mov    esi,DWORD PTR [rbp-0x94]
   16c9f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16ca5:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   16ca9:	48 89 d1             	mov    rcx,rdx
   16cac:	89 fa                	mov    edx,edi
   16cae:	89 c7                	mov    edi,eax
   16cb0:	41 ff d0             	call   r8
   16cb3:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16cb9:	48 63 d2             	movsxd rdx,edx
   16cbc:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   16cc4:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   16cc8:	48 01 ca             	add    rdx,rcx
   16ccb:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   16ccd:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16cd3:	48 63 d2             	movsxd rdx,edx
   16cd6:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   16cde:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   16ce2:	48 01 f2             	add    rdx,rsi
   16ce5:	01 c8                	add    eax,ecx
   16ce7:	89 02                	mov    DWORD PTR [rdx],eax
   16ce9:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   16cf0:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16cf6:	3b 45 80             	cmp    eax,DWORD PTR [rbp-0x80]
   16cf9:	0f 8e 6a ff ff ff    	jle    16c69 <f3_get_stem_contributions_d5+0x856>
   16cff:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   16d05:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   16d0b:	01 d0                	add    eax,edx
   16d0d:	39 85 70 ff ff ff    	cmp    DWORD PTR [rbp-0x90],eax
   16d13:	0f 8f ad 01 00 00    	jg     16ec6 <f3_get_stem_contributions_d5+0xab3>
   16d19:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   16d1f:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   16d25:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16d2b:	48 98                	cdqe   
   16d2d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16d35:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16d39:	48 01 d0             	add    rax,rdx
   16d3c:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   16d42:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16d48:	48 98                	cdqe   
   16d4a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16d52:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   16d56:	48 01 d0             	add    rax,rdx
   16d59:	8b 00                	mov    eax,DWORD PTR [rax]
   16d5b:	3d 80 96 98 00       	cmp    eax,0x989680
   16d60:	0f 84 60 01 00 00    	je     16ec6 <f3_get_stem_contributions_d5+0xab3>
   16d66:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16d6c:	8d 78 01             	lea    edi,[rax+0x1]
   16d6f:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
   16d76:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16d7c:	8b b5 6c ff ff ff    	mov    esi,DWORD PTR [rbp-0x94]
   16d82:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16d88:	4c 8b 95 48 ff ff ff 	mov    r10,QWORD PTR [rbp-0xb8]
   16d8f:	49 89 c9             	mov    r9,rcx
   16d92:	41 b8 0e 00 00 00    	mov    r8d,0xe
   16d98:	89 d1                	mov    ecx,edx
   16d9a:	89 fa                	mov    edx,edi
   16d9c:	89 c7                	mov    edi,eax
   16d9e:	41 ff d2             	call   r10
   16da1:	84 c0                	test   al,al
   16da3:	0f 84 1d 01 00 00    	je     16ec6 <f3_get_stem_contributions_d5+0xab3>
   16da9:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16daf:	48 98                	cdqe   
   16db1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16db9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   16dbd:	48 01 d0             	add    rax,rdx
   16dc0:	8b 00                	mov    eax,DWORD PTR [rax]
   16dc2:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   16dc8:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   16dd2:	e9 8c 00 00 00       	jmp    16e63 <f3_get_stem_contributions_d5+0xa50>
   16dd7:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16ddd:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   16de5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   16de9:	48 01 d0             	add    rax,rdx
   16dec:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16def:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16df5:	48 63 d2             	movsxd rdx,edx
   16df8:	48 01 d2             	add    rdx,rdx
   16dfb:	48 01 d0             	add    rax,rdx
   16dfe:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16e01:	0f bf c8             	movsx  ecx,ax
   16e04:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16e0a:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   16e0e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16e12:	48 01 d0             	add    rax,rdx
   16e15:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16e18:	98                   	cwde   
   16e19:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   16e1d:	89 ce                	mov    esi,ecx
   16e1f:	89 c7                	mov    edi,eax
   16e21:	e8 12 9b 01 00       	call   30938 <vrna_get_ptype_md>
   16e26:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
   16e29:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16e2f:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   16e33:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16e37:	48 01 d0             	add    rax,rdx
   16e3a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16e3d:	0f bf f0             	movsx  esi,ax
   16e40:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   16e44:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   16e47:	48 89 d1             	mov    rcx,rdx
   16e4a:	ba ff ff ff ff       	mov    edx,0xffffffff
   16e4f:	89 c7                	mov    edi,eax
   16e51:	e8 e5 a1 ff ff       	call   1103b <vrna_E_ext_stem>
   16e56:	01 85 68 ff ff ff    	add    DWORD PTR [rbp-0x98],eax
   16e5c:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   16e63:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   16e69:	3b 85 7c ff ff ff    	cmp    eax,DWORD PTR [rbp-0x84]
   16e6f:	0f 82 62 ff ff ff    	jb     16dd7 <f3_get_stem_contributions_d5+0x9c4>
   16e75:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   16e7a:	74 2b                	je     16ea7 <f3_get_stem_contributions_d5+0xa94>
   16e7c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16e82:	8d 70 01             	lea    esi,[rax+0x1]
   16e85:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
   16e8c:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   16e92:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16e98:	4c 8b 45 b0          	mov    r8,QWORD PTR [rbp-0x50]
   16e9c:	89 c7                	mov    edi,eax
   16e9e:	41 ff d0             	call   r8
   16ea1:	01 85 68 ff ff ff    	add    DWORD PTR [rbp-0x98],eax
   16ea7:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   16ead:	48 98                	cdqe   
   16eaf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   16eb7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16ebb:	48 01 c2             	add    rdx,rax
   16ebe:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   16ec4:	89 02                	mov    DWORD PTR [rdx],eax
   16ec6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16eca:	48 89 c7             	mov    rdi,rax
   16ecd:	e8 6e ca fe ff       	call   3940 <free@plt>
   16ed2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16ed6:	48 89 c7             	mov    rdi,rax
   16ed9:	e8 62 ca fe ff       	call   3940 <free@plt>
   16ede:	eb 01                	jmp    16ee1 <f3_get_stem_contributions_d5+0xace>
   16ee0:	90                   	nop
   16ee1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   16ee5:	48 81 c4 c8 00 00 00 	add    rsp,0xc8
   16eec:	5b                   	pop    rbx
   16eed:	5d                   	pop    rbp
   16eee:	c3                   	ret    

0000000000016eef <f5_get_stem_contributions_d53>:
   16eef:	55                   	push   rbp
   16ef0:	48 89 e5             	mov    rbp,rsp
   16ef3:	53                   	push   rbx
   16ef4:	48 81 ec d8 00 00 00 	sub    rsp,0xd8
   16efb:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
   16f02:	89 b5 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],esi
   16f08:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
   16f0f:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
   16f16:	4c 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r8
   16f1d:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   16f23:	48 98                	cdqe   
   16f25:	c1 e0 02             	shl    eax,0x2
   16f28:	89 c7                	mov    edi,eax
   16f2a:	e8 e2 7d 01 00       	call   2ed11 <vrna_alloc>
   16f2f:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
   16f36:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   16f3d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16f40:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   16f46:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   16f4d:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   16f51:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   16f55:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   16f59:	48 05 98 35 03 00    	add    rax,0x33598
   16f5f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   16f63:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   16f6a:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   16f6e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   16f72:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   16f79:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   16f7d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   16f81:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   16f85:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   16f89:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   16f8f:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   16f95:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   16f9b:	48 98                	cdqe   
   16f9d:	48 c1 e0 02          	shl    rax,0x2
   16fa1:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   16fa5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   16fa9:	48 01 d0             	add    rax,rdx
   16fac:	8b 10                	mov    edx,DWORD PTR [rax]
   16fae:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   16fb4:	01 d0                	add    eax,edx
   16fb6:	2b 85 64 ff ff ff    	sub    eax,DWORD PTR [rbp-0x9c]
   16fbc:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   16fc2:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   16fc9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   16fcd:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   16fd1:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   16fd8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   16fdc:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   16fe0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   16fe7:	8b 00                	mov    eax,DWORD PTR [rax]
   16fe9:	85 c0                	test   eax,eax
   16feb:	74 0e                	je     16ffb <f5_get_stem_contributions_d53+0x10c>
   16fed:	83 f8 01             	cmp    eax,0x1
   16ff0:	0f 84 bf 03 00 00    	je     173b5 <f5_get_stem_contributions_d53+0x4c6>
   16ff6:	e9 75 0a 00 00       	jmp    17a70 <f5_get_stem_contributions_d53+0xb81>
   16ffb:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17002:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   17009:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1700d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17014:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   1701b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1701f:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17025:	48 98                	cdqe   
   17027:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1702b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1702f:	48 01 d0             	add    rax,rdx
   17032:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17035:	66 89 85 52 ff ff ff 	mov    WORD PTR [rbp-0xae],ax
   1703c:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17042:	48 63 d0             	movsxd rdx,eax
   17045:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1704b:	48 98                	cdqe   
   1704d:	48 29 c2             	sub    rdx,rax
   17050:	48 89 d0             	mov    rax,rdx
   17053:	48 01 c0             	add    rax,rax
   17056:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   1705a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1705e:	48 01 d0             	add    rax,rdx
   17061:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   17068:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   1706e:	2b 85 64 ff ff ff    	sub    eax,DWORD PTR [rbp-0x9c]
   17074:	83 e8 01             	sub    eax,0x1
   17077:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   1707d:	e9 0e 01 00 00       	jmp    17190 <f5_get_stem_contributions_d53+0x2a1>
   17082:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   17088:	48 98                	cdqe   
   1708a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   17092:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   17099:	48 01 d0             	add    rax,rdx
   1709c:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   170a2:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   170a8:	48 98                	cdqe   
   170aa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   170b2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   170b6:	48 01 d0             	add    rax,rdx
   170b9:	8b 00                	mov    eax,DWORD PTR [rax]
   170bb:	3d 80 96 98 00       	cmp    eax,0x989680
   170c0:	0f 84 b4 00 00 00    	je     1717a <f5_get_stem_contributions_d53+0x28b>
   170c6:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   170cc:	8d 48 01             	lea    ecx,[rax+0x1]
   170cf:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   170d5:	8d 50 ff             	lea    edx,[rax-0x1]
   170d8:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
   170df:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   170e5:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   170ec:	49 89 f1             	mov    r9,rsi
   170ef:	41 b8 13 00 00 00    	mov    r8d,0x13
   170f5:	89 c6                	mov    esi,eax
   170f7:	bf 01 00 00 00       	mov    edi,0x1
   170fc:	41 ff d2             	call   r10
   170ff:	84 c0                	test   al,al
   17101:	74 77                	je     1717a <f5_get_stem_contributions_d53+0x28b>
   17103:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   17107:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1710d:	48 89 d6             	mov    rsi,rdx
   17110:	89 c7                	mov    edi,eax
   17112:	e8 74 98 01 00       	call   3098b <vrna_get_ptype>
   17117:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   1711d:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   17123:	48 98                	cdqe   
   17125:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1712d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   17131:	48 01 d0             	add    rax,rdx
   17134:	8b 18                	mov    ebx,DWORD PTR [rax]
   17136:	0f bf 95 52 ff ff ff 	movsx  edx,WORD PTR [rbp-0xae]
   1713d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   17144:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17147:	0f bf f0             	movsx  esi,ax
   1714a:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   1714e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   17154:	89 c7                	mov    edi,eax
   17156:	e8 e0 9e ff ff       	call   1103b <vrna_E_ext_stem>
   1715b:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17161:	48 63 d2             	movsxd rdx,edx
   17164:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1716c:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17173:	48 01 ca             	add    rdx,rcx
   17176:	01 d8                	add    eax,ebx
   17178:	89 02                	mov    DWORD PTR [rdx],eax
   1717a:	83 ad 58 ff ff ff 01 	sub    DWORD PTR [rbp-0xa8],0x1
   17181:	83 ad 5c ff ff ff 01 	sub    DWORD PTR [rbp-0xa4],0x1
   17188:	48 83 ad 70 ff ff ff 02 	sub    QWORD PTR [rbp-0x90],0x2
   17190:	83 bd 58 ff ff ff 01 	cmp    DWORD PTR [rbp-0xa8],0x1
   17197:	0f 8f e5 fe ff ff    	jg     17082 <f5_get_stem_contributions_d53+0x193>
   1719d:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   171a2:	0f 84 ba 00 00 00    	je     17262 <f5_get_stem_contributions_d53+0x373>
   171a8:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   171ae:	2b 85 64 ff ff ff    	sub    eax,DWORD PTR [rbp-0x9c]
   171b4:	83 e8 01             	sub    eax,0x1
   171b7:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   171bd:	e9 93 00 00 00       	jmp    17255 <f5_get_stem_contributions_d53+0x366>
   171c2:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   171c8:	48 98                	cdqe   
   171ca:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   171d2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   171d9:	48 01 d0             	add    rax,rdx
   171dc:	8b 00                	mov    eax,DWORD PTR [rax]
   171de:	3d 80 96 98 00       	cmp    eax,0x989680
   171e3:	74 69                	je     1724e <f5_get_stem_contributions_d53+0x35f>
   171e5:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   171eb:	8d 78 01             	lea    edi,[rax+0x1]
   171ee:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   171f4:	8d 70 ff             	lea    esi,[rax-0x1]
   171f7:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   171fe:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17204:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   17208:	48 89 d1             	mov    rcx,rdx
   1720b:	89 fa                	mov    edx,edi
   1720d:	89 c7                	mov    edi,eax
   1720f:	41 ff d0             	call   r8
   17212:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17218:	48 63 d2             	movsxd rdx,edx
   1721b:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17223:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   1722a:	48 01 ca             	add    rdx,rcx
   1722d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1722f:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17235:	48 63 d2             	movsxd rdx,edx
   17238:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   17240:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17247:	48 01 f2             	add    rdx,rsi
   1724a:	01 c8                	add    eax,ecx
   1724c:	89 02                	mov    DWORD PTR [rdx],eax
   1724e:	83 ad 58 ff ff ff 01 	sub    DWORD PTR [rbp-0xa8],0x1
   17255:	83 bd 58 ff ff ff 01 	cmp    DWORD PTR [rbp-0xa8],0x1
   1725c:	0f 8f 60 ff ff ff    	jg     171c2 <f5_get_stem_contributions_d53+0x2d3>
   17262:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   17269:	48 83 c0 04          	add    rax,0x4
   1726d:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   17273:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17279:	48 98                	cdqe   
   1727b:	48 c1 e0 02          	shl    rax,0x2
   1727f:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   17283:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   17287:	48 01 d0             	add    rax,rdx
   1728a:	8b 00                	mov    eax,DWORD PTR [rax]
   1728c:	83 c0 02             	add    eax,0x2
   1728f:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   17295:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1729b:	48 98                	cdqe   
   1729d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   172a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   172a9:	48 01 d0             	add    rax,rdx
   172ac:	8b 00                	mov    eax,DWORD PTR [rax]
   172ae:	3d 80 96 98 00       	cmp    eax,0x989680
   172b3:	0f 84 b6 07 00 00    	je     17a6f <f5_get_stem_contributions_d53+0xb80>
   172b9:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   172bf:	8d 50 ff             	lea    edx,[rax-0x1]
   172c2:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
   172c9:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   172cf:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   172d6:	49 89 c9             	mov    r9,rcx
   172d9:	41 b8 0e 00 00 00    	mov    r8d,0xe
   172df:	89 d1                	mov    ecx,edx
   172e1:	ba 02 00 00 00       	mov    edx,0x2
   172e6:	89 c6                	mov    esi,eax
   172e8:	bf 01 00 00 00       	mov    edi,0x1
   172ed:	41 ff d2             	call   r10
   172f0:	84 c0                	test   al,al
   172f2:	0f 84 77 07 00 00    	je     17a6f <f5_get_stem_contributions_d53+0xb80>
   172f8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   172fc:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   17302:	48 89 d6             	mov    rsi,rdx
   17305:	89 c7                	mov    edi,eax
   17307:	e8 7f 96 01 00       	call   3098b <vrna_get_ptype>
   1730c:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   17312:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   17318:	48 98                	cdqe   
   1731a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   17322:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   17326:	48 01 d0             	add    rax,rdx
   17329:	8b 18                	mov    ebx,DWORD PTR [rax]
   1732b:	0f bf 95 52 ff ff ff 	movsx  edx,WORD PTR [rbp-0xae]
   17332:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   17336:	48 83 c0 02          	add    rax,0x2
   1733a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1733d:	0f bf f0             	movsx  esi,ax
   17340:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   17344:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1734a:	89 c7                	mov    edi,eax
   1734c:	e8 ea 9c ff ff       	call   1103b <vrna_E_ext_stem>
   17351:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17358:	48 83 c2 04          	add    rdx,0x4
   1735c:	01 d8                	add    eax,ebx
   1735e:	89 02                	mov    DWORD PTR [rdx],eax
   17360:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   17365:	0f 84 04 07 00 00    	je     17a6f <f5_get_stem_contributions_d53+0xb80>
   1736b:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17371:	8d 70 ff             	lea    esi,[rax-0x1]
   17374:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   1737b:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17381:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   17385:	48 89 d1             	mov    rcx,rdx
   17388:	89 f2                	mov    edx,esi
   1738a:	be 02 00 00 00       	mov    esi,0x2
   1738f:	89 c7                	mov    edi,eax
   17391:	41 ff d0             	call   r8
   17394:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   1739b:	48 83 c2 04          	add    rdx,0x4
   1739f:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   173a1:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   173a8:	48 83 c2 04          	add    rdx,0x4
   173ac:	01 c8                	add    eax,ecx
   173ae:	89 02                	mov    DWORD PTR [rdx],eax
   173b0:	e9 ba 06 00 00       	jmp    17a6f <f5_get_stem_contributions_d53+0xb80>
   173b5:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   173bc:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   173c2:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   173c8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   173cf:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   173d6:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   173da:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   173e1:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   173e8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   173ec:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   173f3:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
   173fa:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   173fe:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17405:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   1740c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   17410:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   17416:	01 c0                	add    eax,eax
   17418:	89 c7                	mov    edi,eax
   1741a:	e8 f2 78 01 00       	call   2ed11 <vrna_alloc>
   1741f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   17423:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   17429:	01 c0                	add    eax,eax
   1742b:	89 c7                	mov    edi,eax
   1742d:	e8 df 78 01 00       	call   2ed11 <vrna_alloc>
   17432:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   17436:	c7 85 54 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xac],0x0
   17440:	e9 eb 00 00 00       	jmp    17530 <f5_get_stem_contributions_d53+0x641>
   17445:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1744b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   17453:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   17457:	48 01 d0             	add    rax,rdx
   1745a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1745d:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17463:	48 63 d2             	movsxd rdx,edx
   17466:	48 c1 e2 02          	shl    rdx,0x2
   1746a:	48 83 ea 04          	sub    rdx,0x4
   1746e:	48 01 d0             	add    rax,rdx
   17471:	8b 10                	mov    edx,DWORD PTR [rax]
   17473:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17479:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   17481:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   17485:	48 01 c8             	add    rax,rcx
   17488:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1748b:	8b 8d 60 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa0]
   17491:	48 c1 e1 02          	shl    rcx,0x2
   17495:	48 01 c8             	add    rax,rcx
   17498:	8b 00                	mov    eax,DWORD PTR [rax]
   1749a:	39 c2                	cmp    edx,eax
   1749c:	73 30                	jae    174ce <f5_get_stem_contributions_d53+0x5df>
   1749e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   174a4:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   174ac:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   174b0:	48 01 d0             	add    rax,rdx
   174b3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   174b6:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   174bc:	48 63 d2             	movsxd rdx,edx
   174bf:	48 01 d2             	add    rdx,rdx
   174c2:	48 83 ea 02          	sub    rdx,0x2
   174c6:	48 01 d0             	add    rax,rdx
   174c9:	0f b7 00             	movzx  eax,WORD PTR [rax]
   174cc:	eb 05                	jmp    174d3 <f5_get_stem_contributions_d53+0x5e4>
   174ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
   174d3:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   174d9:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   174dd:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   174e1:	48 01 ca             	add    rdx,rcx
   174e4:	66 89 02             	mov    WORD PTR [rdx],ax
   174e7:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   174ed:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   174f5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   174f9:	48 01 d0             	add    rax,rdx
   174fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   174ff:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17505:	48 63 d2             	movsxd rdx,edx
   17508:	48 01 d2             	add    rdx,rdx
   1750b:	48 83 ea 02          	sub    rdx,0x2
   1750f:	48 01 d0             	add    rax,rdx
   17512:	8b 95 54 ff ff ff    	mov    edx,DWORD PTR [rbp-0xac]
   17518:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   1751c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   17520:	48 01 ca             	add    rdx,rcx
   17523:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17526:	66 89 02             	mov    WORD PTR [rdx],ax
   17529:	83 85 54 ff ff ff 01 	add    DWORD PTR [rbp-0xac],0x1
   17530:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17536:	3b 85 68 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x98]
   1753c:	0f 82 03 ff ff ff    	jb     17445 <f5_get_stem_contributions_d53+0x556>
   17542:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17548:	2b 85 64 ff ff ff    	sub    eax,DWORD PTR [rbp-0x9c]
   1754e:	83 e8 01             	sub    eax,0x1
   17551:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   17557:	e9 1f 02 00 00       	jmp    1777b <f5_get_stem_contributions_d53+0x88c>
   1755c:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   17562:	48 98                	cdqe   
   17564:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1756c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   17573:	48 01 d0             	add    rax,rdx
   17576:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   1757c:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   17582:	48 98                	cdqe   
   17584:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1758c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   17590:	48 01 d0             	add    rax,rdx
   17593:	8b 00                	mov    eax,DWORD PTR [rax]
   17595:	3d 80 96 98 00       	cmp    eax,0x989680
   1759a:	0f 84 c5 01 00 00    	je     17765 <f5_get_stem_contributions_d53+0x876>
   175a0:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   175a6:	8d 48 01             	lea    ecx,[rax+0x1]
   175a9:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   175af:	8d 50 ff             	lea    edx,[rax-0x1]
   175b2:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
   175b9:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   175bf:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   175c6:	49 89 f1             	mov    r9,rsi
   175c9:	41 b8 13 00 00 00    	mov    r8d,0x13
   175cf:	89 c6                	mov    esi,eax
   175d1:	bf 01 00 00 00       	mov    edi,0x1
   175d6:	41 ff d2             	call   r10
   175d9:	84 c0                	test   al,al
   175db:	0f 84 84 01 00 00    	je     17765 <f5_get_stem_contributions_d53+0x876>
   175e1:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   175e7:	48 98                	cdqe   
   175e9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   175f1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   175f5:	48 01 d0             	add    rax,rdx
   175f8:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   175fe:	48 63 d2             	movsxd rdx,edx
   17601:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17609:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17610:	48 01 ca             	add    rdx,rcx
   17613:	8b 00                	mov    eax,DWORD PTR [rax]
   17615:	89 02                	mov    DWORD PTR [rdx],eax
   17617:	c7 85 54 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xac],0x0
   17621:	e9 2d 01 00 00       	jmp    17753 <f5_get_stem_contributions_d53+0x864>
   17626:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1762c:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   17630:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   17634:	48 01 d0             	add    rax,rdx
   17637:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1763a:	0f bf c8             	movsx  ecx,ax
   1763d:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17643:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1764b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1764f:	48 01 d0             	add    rax,rdx
   17652:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17655:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   1765b:	48 63 d2             	movsxd rdx,edx
   1765e:	48 83 c2 01          	add    rdx,0x1
   17662:	48 01 d2             	add    rdx,rdx
   17665:	48 01 d0             	add    rax,rdx
   17668:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1766b:	98                   	cwde   
   1766c:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   17670:	89 ce                	mov    esi,ecx
   17672:	89 c7                	mov    edi,eax
   17674:	e8 bf 92 01 00       	call   30938 <vrna_get_ptype_md>
   17679:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   1767f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17685:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   17689:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1768d:	48 01 d0             	add    rax,rdx
   17690:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17693:	0f bf d0             	movsx  edx,ax
   17696:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1769c:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   176a4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   176a8:	48 01 c8             	add    rax,rcx
   176ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
   176ae:	8b 8d 58 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa8]
   176b4:	48 63 c9             	movsxd rcx,ecx
   176b7:	48 83 c1 01          	add    rcx,0x1
   176bb:	48 c1 e1 02          	shl    rcx,0x2
   176bf:	48 01 c8             	add    rax,rcx
   176c2:	8b 00                	mov    eax,DWORD PTR [rax]
   176c4:	83 f8 01             	cmp    eax,0x1
   176c7:	76 31                	jbe    176fa <f5_get_stem_contributions_d53+0x80b>
   176c9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   176cf:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   176d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   176db:	48 01 c8             	add    rax,rcx
   176de:	48 8b 00             	mov    rax,QWORD PTR [rax]
   176e1:	8b 8d 58 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xa8]
   176e7:	48 63 c9             	movsxd rcx,ecx
   176ea:	48 83 c1 01          	add    rcx,0x1
   176ee:	48 01 c9             	add    rcx,rcx
   176f1:	48 01 c8             	add    rax,rcx
   176f4:	0f b7 00             	movzx  eax,WORD PTR [rax]
   176f7:	98                   	cwde   
   176f8:	eb 05                	jmp    176ff <f5_get_stem_contributions_d53+0x810>
   176fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
   176ff:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   17703:	8b bd 6c ff ff ff    	mov    edi,DWORD PTR [rbp-0x94]
   17709:	89 c6                	mov    esi,eax
   1770b:	e8 2b 99 ff ff       	call   1103b <vrna_E_ext_stem>
   17710:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17716:	48 63 d2             	movsxd rdx,edx
   17719:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17721:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17728:	48 01 ca             	add    rdx,rcx
   1772b:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1772d:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17733:	48 63 d2             	movsxd rdx,edx
   17736:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1773e:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17745:	48 01 f2             	add    rdx,rsi
   17748:	01 c8                	add    eax,ecx
   1774a:	89 02                	mov    DWORD PTR [rdx],eax
   1774c:	83 85 54 ff ff ff 01 	add    DWORD PTR [rbp-0xac],0x1
   17753:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17759:	3b 85 68 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x98]
   1775f:	0f 82 c1 fe ff ff    	jb     17626 <f5_get_stem_contributions_d53+0x737>
   17765:	83 ad 58 ff ff ff 01 	sub    DWORD PTR [rbp-0xa8],0x1
   1776c:	83 ad 5c ff ff ff 01 	sub    DWORD PTR [rbp-0xa4],0x1
   17773:	48 83 ad 70 ff ff ff 02 	sub    QWORD PTR [rbp-0x90],0x2
   1777b:	83 bd 58 ff ff ff 01 	cmp    DWORD PTR [rbp-0xa8],0x1
   17782:	0f 8f d4 fd ff ff    	jg     1755c <f5_get_stem_contributions_d53+0x66d>
   17788:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   1778d:	0f 84 ba 00 00 00    	je     1784d <f5_get_stem_contributions_d53+0x95e>
   17793:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17799:	2b 85 64 ff ff ff    	sub    eax,DWORD PTR [rbp-0x9c]
   1779f:	83 e8 01             	sub    eax,0x1
   177a2:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   177a8:	e9 93 00 00 00       	jmp    17840 <f5_get_stem_contributions_d53+0x951>
   177ad:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   177b3:	48 98                	cdqe   
   177b5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   177bd:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   177c4:	48 01 d0             	add    rax,rdx
   177c7:	8b 00                	mov    eax,DWORD PTR [rax]
   177c9:	3d 80 96 98 00       	cmp    eax,0x989680
   177ce:	74 69                	je     17839 <f5_get_stem_contributions_d53+0x94a>
   177d0:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   177d6:	8d 78 01             	lea    edi,[rax+0x1]
   177d9:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   177df:	8d 70 ff             	lea    esi,[rax-0x1]
   177e2:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   177e9:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   177ef:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   177f3:	48 89 d1             	mov    rcx,rdx
   177f6:	89 fa                	mov    edx,edi
   177f8:	89 c7                	mov    edi,eax
   177fa:	41 ff d0             	call   r8
   177fd:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17803:	48 63 d2             	movsxd rdx,edx
   17806:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   1780e:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17815:	48 01 ca             	add    rdx,rcx
   17818:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1781a:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   17820:	48 63 d2             	movsxd rdx,edx
   17823:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1782b:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17832:	48 01 f2             	add    rdx,rsi
   17835:	01 c8                	add    eax,ecx
   17837:	89 02                	mov    DWORD PTR [rdx],eax
   17839:	83 ad 58 ff ff ff 01 	sub    DWORD PTR [rbp-0xa8],0x1
   17840:	83 bd 58 ff ff ff 01 	cmp    DWORD PTR [rbp-0xa8],0x1
   17847:	0f 8f 60 ff ff ff    	jg     177ad <f5_get_stem_contributions_d53+0x8be>
   1784d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   17854:	48 83 c0 04          	add    rax,0x4
   17858:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   1785e:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17864:	48 98                	cdqe   
   17866:	48 c1 e0 02          	shl    rax,0x2
   1786a:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   1786e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   17872:	48 01 d0             	add    rax,rdx
   17875:	8b 00                	mov    eax,DWORD PTR [rax]
   17877:	83 c0 02             	add    eax,0x2
   1787a:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   17880:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   17886:	48 98                	cdqe   
   17888:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   17890:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   17894:	48 01 d0             	add    rax,rdx
   17897:	8b 00                	mov    eax,DWORD PTR [rax]
   17899:	3d 80 96 98 00       	cmp    eax,0x989680
   1789e:	0f 84 b1 01 00 00    	je     17a55 <f5_get_stem_contributions_d53+0xb66>
   178a4:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   178aa:	8d 50 ff             	lea    edx,[rax-0x1]
   178ad:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
   178b4:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   178ba:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   178c1:	49 89 c9             	mov    r9,rcx
   178c4:	41 b8 0e 00 00 00    	mov    r8d,0xe
   178ca:	89 d1                	mov    ecx,edx
   178cc:	ba 02 00 00 00       	mov    edx,0x2
   178d1:	89 c6                	mov    esi,eax
   178d3:	bf 01 00 00 00       	mov    edi,0x1
   178d8:	41 ff d2             	call   r10
   178db:	84 c0                	test   al,al
   178dd:	0f 84 72 01 00 00    	je     17a55 <f5_get_stem_contributions_d53+0xb66>
   178e3:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   178e9:	48 98                	cdqe   
   178eb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   178f3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   178f7:	48 01 d0             	add    rax,rdx
   178fa:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17901:	48 83 c2 04          	add    rdx,0x4
   17905:	8b 00                	mov    eax,DWORD PTR [rax]
   17907:	89 02                	mov    DWORD PTR [rdx],eax
   17909:	c7 85 54 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xac],0x0
   17913:	e9 df 00 00 00       	jmp    179f7 <f5_get_stem_contributions_d53+0xb08>
   17918:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1791e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   17922:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   17926:	48 01 d0             	add    rax,rdx
   17929:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1792c:	0f bf c8             	movsx  ecx,ax
   1792f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17935:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1793d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   17941:	48 01 d0             	add    rax,rdx
   17944:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17947:	48 83 c0 04          	add    rax,0x4
   1794b:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1794e:	98                   	cwde   
   1794f:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   17953:	89 ce                	mov    esi,ecx
   17955:	89 c7                	mov    edi,eax
   17957:	e8 dc 8f 01 00       	call   30938 <vrna_get_ptype_md>
   1795c:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   17962:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   17968:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1796c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   17970:	48 01 d0             	add    rax,rdx
   17973:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17976:	0f bf d0             	movsx  edx,ax
   17979:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   1797f:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   17987:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1798b:	48 01 c8             	add    rax,rcx
   1798e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17991:	48 83 c0 08          	add    rax,0x8
   17995:	8b 00                	mov    eax,DWORD PTR [rax]
   17997:	83 f8 01             	cmp    eax,0x1
   1799a:	76 22                	jbe    179be <f5_get_stem_contributions_d53+0xacf>
   1799c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   179a2:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   179aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   179ae:	48 01 c8             	add    rax,rcx
   179b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   179b4:	48 83 c0 04          	add    rax,0x4
   179b8:	0f b7 00             	movzx  eax,WORD PTR [rax]
   179bb:	98                   	cwde   
   179bc:	eb 05                	jmp    179c3 <f5_get_stem_contributions_d53+0xad4>
   179be:	b8 ff ff ff ff       	mov    eax,0xffffffff
   179c3:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   179c7:	8b bd 6c ff ff ff    	mov    edi,DWORD PTR [rbp-0x94]
   179cd:	89 c6                	mov    esi,eax
   179cf:	e8 67 96 ff ff       	call   1103b <vrna_E_ext_stem>
   179d4:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   179db:	48 83 c2 04          	add    rdx,0x4
   179df:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   179e1:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   179e8:	48 83 c2 04          	add    rdx,0x4
   179ec:	01 c8                	add    eax,ecx
   179ee:	89 02                	mov    DWORD PTR [rdx],eax
   179f0:	83 85 54 ff ff ff 01 	add    DWORD PTR [rbp-0xac],0x1
   179f7:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   179fd:	3b 85 68 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x98]
   17a03:	0f 82 0f ff ff ff    	jb     17918 <f5_get_stem_contributions_d53+0xa29>
   17a09:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   17a0e:	74 45                	je     17a55 <f5_get_stem_contributions_d53+0xb66>
   17a10:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17a16:	8d 70 ff             	lea    esi,[rax-0x1]
   17a19:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   17a20:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17a26:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   17a2a:	48 89 d1             	mov    rcx,rdx
   17a2d:	89 f2                	mov    edx,esi
   17a2f:	be 02 00 00 00       	mov    esi,0x2
   17a34:	89 c7                	mov    edi,eax
   17a36:	41 ff d0             	call   r8
   17a39:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17a40:	48 83 c2 04          	add    rdx,0x4
   17a44:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   17a46:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   17a4d:	48 83 c2 04          	add    rdx,0x4
   17a51:	01 c8                	add    eax,ecx
   17a53:	89 02                	mov    DWORD PTR [rdx],eax
   17a55:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   17a59:	48 89 c7             	mov    rdi,rax
   17a5c:	e8 df be fe ff       	call   3940 <free@plt>
   17a61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   17a65:	48 89 c7             	mov    rdi,rax
   17a68:	e8 d3 be fe ff       	call   3940 <free@plt>
   17a6d:	eb 01                	jmp    17a70 <f5_get_stem_contributions_d53+0xb81>
   17a6f:	90                   	nop
   17a70:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   17a77:	48 81 c4 d8 00 00 00 	add    rsp,0xd8
   17a7e:	5b                   	pop    rbx
   17a7f:	5d                   	pop    rbp
   17a80:	c3                   	ret    

0000000000017a81 <f3_get_stem_contributions_d53>:
   17a81:	55                   	push   rbp
   17a82:	48 89 e5             	mov    rbp,rsp
   17a85:	53                   	push   rbx
   17a86:	48 81 ec d8 00 00 00 	sub    rsp,0xd8
   17a8d:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
   17a94:	89 b5 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],esi
   17a9a:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
   17aa1:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
   17aa8:	4c 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r8
   17aaf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17ab6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17ab9:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   17abf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17ac6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   17acc:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   17ad2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17ad9:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   17add:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   17ae1:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   17ae5:	48 05 98 35 03 00    	add    rax,0x33598
   17aeb:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   17aef:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17af6:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   17afa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17afe:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17b04:	48 63 d2             	movsxd rdx,edx
   17b07:	48 83 c2 01          	add    rdx,0x1
   17b0b:	48 c1 e2 03          	shl    rdx,0x3
   17b0f:	48 01 d0             	add    rax,rdx
   17b12:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17b15:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   17b19:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17b1f:	48 98                	cdqe   
   17b21:	48 c1 e0 02          	shl    rax,0x2
   17b25:	48 c7 c2 fc ff ff ff 	mov    rdx,0xfffffffffffffffc
   17b2c:	48 29 c2             	sub    rdx,rax
   17b2f:	48 89 d0             	mov    rax,rdx
   17b32:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
   17b36:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   17b3a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   17b40:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   17b46:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   17b4c:	83 c0 06             	add    eax,0x6
   17b4f:	48 98                	cdqe   
   17b51:	c1 e0 02             	shl    eax,0x2
   17b54:	89 c7                	mov    edi,eax
   17b56:	e8 b6 71 01 00       	call   2ed11 <vrna_alloc>
   17b5b:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   17b5f:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17b65:	48 98                	cdqe   
   17b67:	48 c1 e0 02          	shl    rax,0x2
   17b6b:	48 f7 d8             	neg    rax
   17b6e:	48 01 45 98          	add    QWORD PTR [rbp-0x68],rax
   17b72:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   17b79:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   17b7d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   17b81:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   17b88:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   17b8c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   17b90:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17b97:	8b 00                	mov    eax,DWORD PTR [rax]
   17b99:	85 c0                	test   eax,eax
   17b9b:	74 0e                	je     17bab <f3_get_stem_contributions_d53+0x12a>
   17b9d:	83 f8 01             	cmp    eax,0x1
   17ba0:	0f 84 13 04 00 00    	je     17fb9 <f3_get_stem_contributions_d53+0x538>
   17ba6:	e9 24 0b 00 00       	jmp    186cf <f3_get_stem_contributions_d53+0xc4e>
   17bab:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17bb2:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   17bb9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   17bbd:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17bc4:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   17bcb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   17bcf:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17bd5:	48 98                	cdqe   
   17bd7:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   17bdb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   17bdf:	48 01 d0             	add    rax,rdx
   17be2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17be5:	66 89 85 5a ff ff ff 	mov    WORD PTR [rbp-0xa6],ax
   17bec:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17bf2:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   17bf8:	01 d0                	add    eax,edx
   17bfa:	83 c0 01             	add    eax,0x1
   17bfd:	39 85 68 ff ff ff    	cmp    DWORD PTR [rbp-0x98],eax
   17c03:	7f 0b                	jg     17c10 <f3_get_stem_contributions_d53+0x18f>
   17c05:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   17c0b:	83 e8 01             	sub    eax,0x1
   17c0e:	eb 11                	jmp    17c21 <f3_get_stem_contributions_d53+0x1a0>
   17c10:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17c16:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   17c1c:	01 d0                	add    eax,edx
   17c1e:	83 c0 01             	add    eax,0x1
   17c21:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   17c27:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17c2d:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   17c33:	01 d0                	add    eax,edx
   17c35:	83 c0 01             	add    eax,0x1
   17c38:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   17c3e:	e9 16 01 00 00       	jmp    17d59 <f3_get_stem_contributions_d53+0x2d8>
   17c43:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17c49:	48 98                	cdqe   
   17c4b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   17c53:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   17c57:	48 01 d0             	add    rax,rdx
   17c5a:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   17c60:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17c66:	48 98                	cdqe   
   17c68:	48 c1 e0 02          	shl    rax,0x2
   17c6c:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   17c70:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   17c74:	48 01 d0             	add    rax,rdx
   17c77:	8b 00                	mov    eax,DWORD PTR [rax]
   17c79:	3d 80 96 98 00       	cmp    eax,0x989680
   17c7e:	0f 84 ce 00 00 00    	je     17d52 <f3_get_stem_contributions_d53+0x2d1>
   17c84:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17c8a:	8d 48 01             	lea    ecx,[rax+0x1]
   17c8d:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17c93:	8d 50 ff             	lea    edx,[rax-0x1]
   17c96:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   17c9d:	8b b5 68 ff ff ff    	mov    esi,DWORD PTR [rbp-0x98]
   17ca3:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17ca9:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   17cb0:	49 89 f9             	mov    r9,rdi
   17cb3:	41 b8 14 00 00 00    	mov    r8d,0x14
   17cb9:	89 c7                	mov    edi,eax
   17cbb:	41 ff d2             	call   r10
   17cbe:	84 c0                	test   al,al
   17cc0:	0f 84 8c 00 00 00    	je     17d52 <f3_get_stem_contributions_d53+0x2d1>
   17cc6:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17ccc:	8d 70 ff             	lea    esi,[rax-0x1]
   17ccf:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17cd5:	8d 48 01             	lea    ecx,[rax+0x1]
   17cd8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17cdc:	48 89 c2             	mov    rdx,rax
   17cdf:	89 cf                	mov    edi,ecx
   17ce1:	e8 dc 8c 01 00       	call   309c2 <vrna_get_ptype_window>
   17ce6:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   17cec:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17cf2:	48 98                	cdqe   
   17cf4:	48 c1 e0 02          	shl    rax,0x2
   17cf8:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   17cfc:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   17d00:	48 01 d0             	add    rax,rdx
   17d03:	8b 18                	mov    ebx,DWORD PTR [rax]
   17d05:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17d0b:	48 98                	cdqe   
   17d0d:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   17d11:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   17d15:	48 01 d0             	add    rax,rdx
   17d18:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17d1b:	0f bf d0             	movsx  edx,ax
   17d1e:	0f bf b5 5a ff ff ff 	movsx  esi,WORD PTR [rbp-0xa6]
   17d25:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   17d29:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   17d2f:	89 c7                	mov    edi,eax
   17d31:	e8 05 93 ff ff       	call   1103b <vrna_E_ext_stem>
   17d36:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   17d3c:	48 63 d2             	movsxd rdx,edx
   17d3f:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17d47:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   17d4b:	48 01 ca             	add    rdx,rcx
   17d4e:	01 d8                	add    eax,ebx
   17d50:	89 02                	mov    DWORD PTR [rdx],eax
   17d52:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   17d59:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17d5f:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   17d65:	0f 8e d8 fe ff ff    	jle    17c43 <f3_get_stem_contributions_d53+0x1c2>
   17d6b:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   17d70:	0f 84 b8 00 00 00    	je     17e2e <f3_get_stem_contributions_d53+0x3ad>
   17d76:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17d7c:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   17d82:	01 d0                	add    eax,edx
   17d84:	83 c0 01             	add    eax,0x1
   17d87:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   17d8d:	e9 8a 00 00 00       	jmp    17e1c <f3_get_stem_contributions_d53+0x39b>
   17d92:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17d98:	48 98                	cdqe   
   17d9a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   17da2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   17da6:	48 01 d0             	add    rax,rdx
   17da9:	8b 00                	mov    eax,DWORD PTR [rax]
   17dab:	3d 80 96 98 00       	cmp    eax,0x989680
   17db0:	74 63                	je     17e15 <f3_get_stem_contributions_d53+0x394>
   17db2:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17db8:	8d 78 01             	lea    edi,[rax+0x1]
   17dbb:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17dc1:	8d 70 ff             	lea    esi,[rax-0x1]
   17dc4:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   17dcb:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17dd1:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   17dd5:	48 89 d1             	mov    rcx,rdx
   17dd8:	89 fa                	mov    edx,edi
   17dda:	89 c7                	mov    edi,eax
   17ddc:	41 ff d0             	call   r8
   17ddf:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   17de5:	48 63 d2             	movsxd rdx,edx
   17de8:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17df0:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   17df4:	48 01 ca             	add    rdx,rcx
   17df7:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   17df9:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   17dff:	48 63 d2             	movsxd rdx,edx
   17e02:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   17e0a:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   17e0e:	48 01 f2             	add    rdx,rsi
   17e11:	01 c8                	add    eax,ecx
   17e13:	89 02                	mov    DWORD PTR [rdx],eax
   17e15:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   17e1c:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17e22:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   17e28:	0f 8e 64 ff ff ff    	jle    17d92 <f3_get_stem_contributions_d53+0x311>
   17e2e:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   17e34:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   17e3a:	01 d0                	add    eax,edx
   17e3c:	39 85 68 ff ff ff    	cmp    DWORD PTR [rbp-0x98],eax
   17e42:	0f 8f 86 08 00 00    	jg     186ce <f3_get_stem_contributions_d53+0xc4d>
   17e48:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   17e4e:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   17e54:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17e5a:	48 98                	cdqe   
   17e5c:	48 c1 e0 02          	shl    rax,0x2
   17e60:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   17e64:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   17e68:	48 01 d0             	add    rax,rdx
   17e6b:	8b 00                	mov    eax,DWORD PTR [rax]
   17e6d:	3d 80 96 98 00       	cmp    eax,0x989680
   17e72:	0f 84 56 08 00 00    	je     186ce <f3_get_stem_contributions_d53+0xc4d>
   17e78:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17e7e:	8d 48 ff             	lea    ecx,[rax-0x1]
   17e81:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17e87:	8d 50 01             	lea    edx,[rax+0x1]
   17e8a:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   17e91:	8b b5 68 ff ff ff    	mov    esi,DWORD PTR [rbp-0x98]
   17e97:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17e9d:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   17ea4:	49 89 f9             	mov    r9,rdi
   17ea7:	41 b8 0e 00 00 00    	mov    r8d,0xe
   17ead:	89 c7                	mov    edi,eax
   17eaf:	41 ff d2             	call   r10
   17eb2:	84 c0                	test   al,al
   17eb4:	0f 84 14 08 00 00    	je     186ce <f3_get_stem_contributions_d53+0xc4d>
   17eba:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17ec0:	8d 70 ff             	lea    esi,[rax-0x1]
   17ec3:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17ec9:	8d 48 01             	lea    ecx,[rax+0x1]
   17ecc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17ed0:	48 89 c2             	mov    rdx,rax
   17ed3:	89 cf                	mov    edi,ecx
   17ed5:	e8 e8 8a 01 00       	call   309c2 <vrna_get_ptype_window>
   17eda:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   17ee0:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17ee6:	48 98                	cdqe   
   17ee8:	48 c1 e0 02          	shl    rax,0x2
   17eec:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   17ef0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   17ef4:	48 01 d0             	add    rax,rdx
   17ef7:	8b 18                	mov    ebx,DWORD PTR [rax]
   17ef9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17eff:	48 98                	cdqe   
   17f01:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   17f05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   17f09:	48 01 d0             	add    rax,rdx
   17f0c:	0f b7 00             	movzx  eax,WORD PTR [rax]
   17f0f:	0f bf d0             	movsx  edx,ax
   17f12:	0f bf b5 5a ff ff ff 	movsx  esi,WORD PTR [rbp-0xa6]
   17f19:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   17f1d:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   17f23:	89 c7                	mov    edi,eax
   17f25:	e8 11 91 ff ff       	call   1103b <vrna_E_ext_stem>
   17f2a:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   17f30:	48 63 d2             	movsxd rdx,edx
   17f33:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17f3b:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   17f3f:	48 01 ca             	add    rdx,rcx
   17f42:	01 d8                	add    eax,ebx
   17f44:	89 02                	mov    DWORD PTR [rdx],eax
   17f46:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   17f4b:	0f 84 7d 07 00 00    	je     186ce <f3_get_stem_contributions_d53+0xc4d>
   17f51:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   17f57:	8d 78 ff             	lea    edi,[rax-0x1]
   17f5a:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17f60:	8d 70 01             	lea    esi,[rax+0x1]
   17f63:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   17f6a:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   17f70:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   17f74:	48 89 d1             	mov    rcx,rdx
   17f77:	89 fa                	mov    edx,edi
   17f79:	89 c7                	mov    edi,eax
   17f7b:	41 ff d0             	call   r8
   17f7e:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   17f84:	48 63 d2             	movsxd rdx,edx
   17f87:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   17f8f:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   17f93:	48 01 ca             	add    rdx,rcx
   17f96:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   17f98:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   17f9e:	48 63 d2             	movsxd rdx,edx
   17fa1:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   17fa9:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   17fad:	48 01 f2             	add    rdx,rsi
   17fb0:	01 c8                	add    eax,ecx
   17fb2:	89 02                	mov    DWORD PTR [rdx],eax
   17fb4:	e9 15 07 00 00       	jmp    186ce <f3_get_stem_contributions_d53+0xc4d>
   17fb9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17fc0:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   17fc6:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   17fcc:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17fd3:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   17fda:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   17fde:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17fe5:	48 8b 80 d8 00 00 00 	mov    rax,QWORD PTR [rax+0xd8]
   17fec:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   17ff0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   17ff7:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
   17ffe:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   18002:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   18009:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
   18010:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   18014:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   1801a:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   18020:	01 d0                	add    eax,edx
   18022:	83 c0 01             	add    eax,0x1
   18025:	39 85 68 ff ff ff    	cmp    DWORD PTR [rbp-0x98],eax
   1802b:	7f 0b                	jg     18038 <f3_get_stem_contributions_d53+0x5b7>
   1802d:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   18033:	83 e8 01             	sub    eax,0x1
   18036:	eb 11                	jmp    18049 <f3_get_stem_contributions_d53+0x5c8>
   18038:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   1803e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   18044:	01 d0                	add    eax,edx
   18046:	83 c0 01             	add    eax,0x1
   18049:	89 85 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],eax
   1804f:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   18055:	01 c0                	add    eax,eax
   18057:	89 c7                	mov    edi,eax
   18059:	e8 b3 6c 01 00       	call   2ed11 <vrna_alloc>
   1805e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   18062:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   18068:	01 c0                	add    eax,eax
   1806a:	89 c7                	mov    edi,eax
   1806c:	e8 a0 6c 01 00       	call   2ed11 <vrna_alloc>
   18071:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   18075:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   1807f:	e9 c5 00 00 00       	jmp    18149 <f3_get_stem_contributions_d53+0x6c8>
   18084:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1808a:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   18092:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18096:	48 01 d0             	add    rax,rdx
   18099:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1809c:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   180a2:	48 63 d2             	movsxd rdx,edx
   180a5:	48 83 c2 01          	add    rdx,0x1
   180a9:	48 c1 e2 02          	shl    rdx,0x2
   180ad:	48 01 d0             	add    rax,rdx
   180b0:	8b 00                	mov    eax,DWORD PTR [rax]
   180b2:	83 f8 01             	cmp    eax,0x1
   180b5:	76 30                	jbe    180e7 <f3_get_stem_contributions_d53+0x666>
   180b7:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   180bd:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   180c5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   180c9:	48 01 d0             	add    rax,rdx
   180cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   180cf:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   180d5:	48 63 d2             	movsxd rdx,edx
   180d8:	48 83 c2 01          	add    rdx,0x1
   180dc:	48 01 d2             	add    rdx,rdx
   180df:	48 01 d0             	add    rax,rdx
   180e2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   180e5:	eb 05                	jmp    180ec <f3_get_stem_contributions_d53+0x66b>
   180e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
   180ec:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   180f2:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   180f6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   180fa:	48 01 ca             	add    rdx,rcx
   180fd:	66 89 02             	mov    WORD PTR [rdx],ax
   18100:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   18106:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1810e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   18112:	48 01 d0             	add    rax,rdx
   18115:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18118:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   1811e:	48 63 d2             	movsxd rdx,edx
   18121:	48 83 c2 01          	add    rdx,0x1
   18125:	48 01 d2             	add    rdx,rdx
   18128:	48 01 d0             	add    rax,rdx
   1812b:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   18131:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   18135:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   18139:	48 01 ca             	add    rdx,rcx
   1813c:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1813f:	66 89 02             	mov    WORD PTR [rdx],ax
   18142:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   18149:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1814f:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   18155:	0f 82 29 ff ff ff    	jb     18084 <f3_get_stem_contributions_d53+0x603>
   1815b:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   18161:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   18167:	01 d0                	add    eax,edx
   18169:	83 c0 01             	add    eax,0x1
   1816c:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   18172:	e9 16 02 00 00       	jmp    1838d <f3_get_stem_contributions_d53+0x90c>
   18177:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1817d:	48 98                	cdqe   
   1817f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18187:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1818b:	48 01 d0             	add    rax,rdx
   1818e:	c7 00 80 96 98 00    	mov    DWORD PTR [rax],0x989680
   18194:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1819a:	48 98                	cdqe   
   1819c:	48 c1 e0 02          	shl    rax,0x2
   181a0:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   181a4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   181a8:	48 01 d0             	add    rax,rdx
   181ab:	8b 00                	mov    eax,DWORD PTR [rax]
   181ad:	3d 80 96 98 00       	cmp    eax,0x989680
   181b2:	0f 84 ce 01 00 00    	je     18386 <f3_get_stem_contributions_d53+0x905>
   181b8:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   181be:	8d 48 01             	lea    ecx,[rax+0x1]
   181c1:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   181c7:	8d 50 ff             	lea    edx,[rax-0x1]
   181ca:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   181d1:	8b b5 68 ff ff ff    	mov    esi,DWORD PTR [rbp-0x98]
   181d7:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   181dd:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   181e4:	49 89 f9             	mov    r9,rdi
   181e7:	41 b8 14 00 00 00    	mov    r8d,0x14
   181ed:	89 c7                	mov    edi,eax
   181ef:	41 ff d2             	call   r10
   181f2:	84 c0                	test   al,al
   181f4:	0f 84 8c 01 00 00    	je     18386 <f3_get_stem_contributions_d53+0x905>
   181fa:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   18200:	48 98                	cdqe   
   18202:	48 c1 e0 02          	shl    rax,0x2
   18206:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   1820a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   1820e:	48 01 d0             	add    rax,rdx
   18211:	8b 00                	mov    eax,DWORD PTR [rax]
   18213:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   18219:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   18223:	e9 2d 01 00 00       	jmp    18355 <f3_get_stem_contributions_d53+0x8d4>
   18228:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1822e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   18236:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1823a:	48 01 d0             	add    rax,rdx
   1823d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18240:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   18246:	48 63 d2             	movsxd rdx,edx
   18249:	48 01 d2             	add    rdx,rdx
   1824c:	48 83 ea 02          	sub    rdx,0x2
   18250:	48 01 d0             	add    rax,rdx
   18253:	0f b7 00             	movzx  eax,WORD PTR [rax]
   18256:	0f bf c8             	movsx  ecx,ax
   18259:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1825f:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   18263:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   18267:	48 01 d0             	add    rax,rdx
   1826a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1826d:	98                   	cwde   
   1826e:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   18272:	89 ce                	mov    esi,ecx
   18274:	89 c7                	mov    edi,eax
   18276:	e8 bd 86 01 00       	call   30938 <vrna_get_ptype_md>
   1827b:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   18281:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   18287:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1828f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18293:	48 01 d0             	add    rax,rdx
   18296:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18299:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   1829f:	48 63 d2             	movsxd rdx,edx
   182a2:	48 c1 e2 02          	shl    rdx,0x2
   182a6:	48 83 ea 04          	sub    rdx,0x4
   182aa:	48 01 d0             	add    rax,rdx
   182ad:	8b 10                	mov    edx,DWORD PTR [rax]
   182af:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   182b5:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   182bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   182c1:	48 01 c8             	add    rax,rcx
   182c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   182c7:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
   182cd:	48 63 c9             	movsxd rcx,ecx
   182d0:	48 c1 e1 02          	shl    rcx,0x2
   182d4:	48 01 c8             	add    rax,rcx
   182d7:	8b 00                	mov    eax,DWORD PTR [rax]
   182d9:	39 c2                	cmp    edx,eax
   182db:	73 30                	jae    1830d <f3_get_stem_contributions_d53+0x88c>
   182dd:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   182e3:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   182eb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   182ef:	48 01 d0             	add    rax,rdx
   182f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   182f5:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   182fb:	48 63 d2             	movsxd rdx,edx
   182fe:	48 01 d2             	add    rdx,rdx
   18301:	48 83 ea 02          	sub    rdx,0x2
   18305:	48 01 d0             	add    rax,rdx
   18308:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1830b:	eb 05                	jmp    18312 <f3_get_stem_contributions_d53+0x891>
   1830d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   18312:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
   18319:	0f bf 95 58 ff ff ff 	movsx  edx,WORD PTR [rbp-0xa8]
   18320:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   18326:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
   1832a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1832e:	48 01 c8             	add    rax,rcx
   18331:	0f b7 00             	movzx  eax,WORD PTR [rax]
   18334:	0f bf f0             	movsx  esi,ax
   18337:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   1833b:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   18341:	89 c7                	mov    edi,eax
   18343:	e8 f3 8c ff ff       	call   1103b <vrna_E_ext_stem>
   18348:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   1834e:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   18355:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1835b:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   18361:	0f 82 c1 fe ff ff    	jb     18228 <f3_get_stem_contributions_d53+0x7a7>
   18367:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1836d:	48 98                	cdqe   
   1836f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18377:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1837b:	48 01 c2             	add    rdx,rax
   1837e:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   18384:	89 02                	mov    DWORD PTR [rdx],eax
   18386:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   1838d:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   18393:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   18399:	0f 8e d8 fd ff ff    	jle    18177 <f3_get_stem_contributions_d53+0x6f6>
   1839f:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   183a4:	0f 84 b8 00 00 00    	je     18462 <f3_get_stem_contributions_d53+0x9e1>
   183aa:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   183b0:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   183b6:	01 d0                	add    eax,edx
   183b8:	83 c0 01             	add    eax,0x1
   183bb:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   183c1:	e9 8a 00 00 00       	jmp    18450 <f3_get_stem_contributions_d53+0x9cf>
   183c6:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   183cc:	48 98                	cdqe   
   183ce:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   183d6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   183da:	48 01 d0             	add    rax,rdx
   183dd:	8b 00                	mov    eax,DWORD PTR [rax]
   183df:	3d 80 96 98 00       	cmp    eax,0x989680
   183e4:	74 63                	je     18449 <f3_get_stem_contributions_d53+0x9c8>
   183e6:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   183ec:	8d 78 01             	lea    edi,[rax+0x1]
   183ef:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   183f5:	8d 70 ff             	lea    esi,[rax-0x1]
   183f8:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   183ff:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   18405:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   18409:	48 89 d1             	mov    rcx,rdx
   1840c:	89 fa                	mov    edx,edi
   1840e:	89 c7                	mov    edi,eax
   18410:	41 ff d0             	call   r8
   18413:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   18419:	48 63 d2             	movsxd rdx,edx
   1841c:	48 8d 0c 95 00 00 00 00 	lea    rcx,[rdx*4+0x0]
   18424:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   18428:	48 01 ca             	add    rdx,rcx
   1842b:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1842d:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   18433:	48 63 d2             	movsxd rdx,edx
   18436:	48 8d 34 95 00 00 00 00 	lea    rsi,[rdx*4+0x0]
   1843e:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   18442:	48 01 f2             	add    rdx,rsi
   18445:	01 c8                	add    eax,ecx
   18447:	89 02                	mov    DWORD PTR [rdx],eax
   18449:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   18450:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   18456:	3b 85 78 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x88]
   1845c:	0f 8e 64 ff ff ff    	jle    183c6 <f3_get_stem_contributions_d53+0x945>
   18462:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   18468:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   1846e:	01 d0                	add    eax,edx
   18470:	39 85 68 ff ff ff    	cmp    DWORD PTR [rbp-0x98],eax
   18476:	0f 8f 38 02 00 00    	jg     186b4 <f3_get_stem_contributions_d53+0xc33>
   1847c:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   18482:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   18488:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1848e:	48 98                	cdqe   
   18490:	48 c1 e0 02          	shl    rax,0x2
   18494:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   18498:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   1849c:	48 01 d0             	add    rax,rdx
   1849f:	8b 00                	mov    eax,DWORD PTR [rax]
   184a1:	3d 80 96 98 00       	cmp    eax,0x989680
   184a6:	0f 84 08 02 00 00    	je     186b4 <f3_get_stem_contributions_d53+0xc33>
   184ac:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   184b2:	8d 48 ff             	lea    ecx,[rax-0x1]
   184b5:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   184bb:	8d 50 01             	lea    edx,[rax+0x1]
   184be:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
   184c5:	8b b5 68 ff ff ff    	mov    esi,DWORD PTR [rbp-0x98]
   184cb:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   184d1:	4c 8b 95 38 ff ff ff 	mov    r10,QWORD PTR [rbp-0xc8]
   184d8:	49 89 f9             	mov    r9,rdi
   184db:	41 b8 0e 00 00 00    	mov    r8d,0xe
   184e1:	89 c7                	mov    edi,eax
   184e3:	41 ff d2             	call   r10
   184e6:	84 c0                	test   al,al
   184e8:	0f 84 c6 01 00 00    	je     186b4 <f3_get_stem_contributions_d53+0xc33>
   184ee:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   184f4:	48 98                	cdqe   
   184f6:	48 c1 e0 02          	shl    rax,0x2
   184fa:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   184fe:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   18502:	48 01 d0             	add    rax,rdx
   18505:	8b 00                	mov    eax,DWORD PTR [rax]
   18507:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   1850d:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   18517:	e9 2d 01 00 00       	jmp    18649 <f3_get_stem_contributions_d53+0xbc8>
   1851c:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   18522:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   1852a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1852e:	48 01 d0             	add    rax,rdx
   18531:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18534:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   1853a:	48 63 d2             	movsxd rdx,edx
   1853d:	48 01 d2             	add    rdx,rdx
   18540:	48 83 ea 02          	sub    rdx,0x2
   18544:	48 01 d0             	add    rax,rdx
   18547:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1854a:	0f bf c8             	movsx  ecx,ax
   1854d:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   18553:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   18557:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1855b:	48 01 d0             	add    rax,rdx
   1855e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   18561:	98                   	cwde   
   18562:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   18566:	89 ce                	mov    esi,ecx
   18568:	89 c7                	mov    edi,eax
   1856a:	e8 c9 83 01 00       	call   30938 <vrna_get_ptype_md>
   1856f:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   18575:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1857b:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   18583:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18587:	48 01 d0             	add    rax,rdx
   1858a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1858d:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   18593:	48 63 d2             	movsxd rdx,edx
   18596:	48 c1 e2 02          	shl    rdx,0x2
   1859a:	48 83 ea 04          	sub    rdx,0x4
   1859e:	48 01 d0             	add    rax,rdx
   185a1:	8b 10                	mov    edx,DWORD PTR [rax]
   185a3:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   185a9:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   185b1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   185b5:	48 01 c8             	add    rax,rcx
   185b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   185bb:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
   185c1:	48 63 c9             	movsxd rcx,ecx
   185c4:	48 c1 e1 02          	shl    rcx,0x2
   185c8:	48 01 c8             	add    rax,rcx
   185cb:	8b 00                	mov    eax,DWORD PTR [rax]
   185cd:	39 c2                	cmp    edx,eax
   185cf:	73 30                	jae    18601 <f3_get_stem_contributions_d53+0xb80>
   185d1:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   185d7:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   185df:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   185e3:	48 01 d0             	add    rax,rdx
   185e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   185e9:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   185ef:	48 63 d2             	movsxd rdx,edx
   185f2:	48 01 d2             	add    rdx,rdx
   185f5:	48 83 ea 02          	sub    rdx,0x2
   185f9:	48 01 d0             	add    rax,rdx
   185fc:	0f b7 00             	movzx  eax,WORD PTR [rax]
   185ff:	eb 05                	jmp    18606 <f3_get_stem_contributions_d53+0xb85>
   18601:	b8 ff ff ff ff       	mov    eax,0xffffffff
   18606:	66 89 85 58 ff ff ff 	mov    WORD PTR [rbp-0xa8],ax
   1860d:	0f bf 95 58 ff ff ff 	movsx  edx,WORD PTR [rbp-0xa8]
   18614:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1861a:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
   1861e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   18622:	48 01 c8             	add    rax,rcx
   18625:	0f b7 00             	movzx  eax,WORD PTR [rax]
   18628:	0f bf f0             	movsx  esi,ax
   1862b:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   1862f:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   18635:	89 c7                	mov    edi,eax
   18637:	e8 ff 89 ff ff       	call   1103b <vrna_E_ext_stem>
   1863c:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   18642:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   18649:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   1864f:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   18655:	0f 82 c1 fe ff ff    	jb     1851c <f3_get_stem_contributions_d53+0xa9b>
   1865b:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   18660:	74 33                	je     18695 <f3_get_stem_contributions_d53+0xc14>
   18662:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   18668:	8d 78 ff             	lea    edi,[rax-0x1]
   1866b:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   18671:	8d 70 01             	lea    esi,[rax+0x1]
   18674:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   1867b:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   18681:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
   18685:	48 89 d1             	mov    rcx,rdx
   18688:	89 fa                	mov    edx,edi
   1868a:	89 c7                	mov    edi,eax
   1868c:	41 ff d0             	call   r8
   1868f:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   18695:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1869b:	48 98                	cdqe   
   1869d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   186a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   186a9:	48 01 c2             	add    rdx,rax
   186ac:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   186b2:	89 02                	mov    DWORD PTR [rdx],eax
   186b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   186b8:	48 89 c7             	mov    rdi,rax
   186bb:	e8 80 b2 fe ff       	call   3940 <free@plt>
   186c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   186c4:	48 89 c7             	mov    rdi,rax
   186c7:	e8 74 b2 fe ff       	call   3940 <free@plt>
   186cc:	eb 01                	jmp    186cf <f3_get_stem_contributions_d53+0xc4e>
   186ce:	90                   	nop
   186cf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   186d3:	48 81 c4 d8 00 00 00 	add    rsp,0xd8
   186da:	5b                   	pop    rbx
   186db:	5d                   	pop    rbp
   186dc:	c3                   	ret    

00000000000186dd <add_f5_gquad>:
   186dd:	55                   	push   rbp
   186de:	48 89 e5             	mov    rbp,rsp
   186e1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   186e5:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
   186e8:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   186ec:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   186f0:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
   186f4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   186f8:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
   186fc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   18700:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18704:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   18708:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1870c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   18710:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18714:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   18718:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
   1871c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18720:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18724:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18728:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   1872e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   18731:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   18734:	48 98                	cdqe   
   18736:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1873e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18742:	48 01 d0             	add    rax,rdx
   18745:	8b 10                	mov    edx,DWORD PTR [rax]
   18747:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1874a:	01 d0                	add    eax,edx
   1874c:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   1874f:	83 e8 01             	sub    eax,0x1
   18752:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   18755:	c7 45 d8 80 96 98 00 	mov    DWORD PTR [rbp-0x28],0x989680
   1875c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1875f:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   18762:	83 e8 01             	sub    eax,0x1
   18765:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   18768:	eb 7a                	jmp    187e4 <add_f5_gquad+0x107>
   1876a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1876d:	48 98                	cdqe   
   1876f:	48 c1 e0 02          	shl    rax,0x2
   18773:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   18777:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1877b:	48 01 d0             	add    rax,rdx
   1877e:	8b 00                	mov    eax,DWORD PTR [rax]
   18780:	3d 80 96 98 00       	cmp    eax,0x989680
   18785:	74 55                	je     187dc <add_f5_gquad+0xff>
   18787:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1878a:	48 98                	cdqe   
   1878c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18794:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18798:	48 01 d0             	add    rax,rdx
   1879b:	8b 00                	mov    eax,DWORD PTR [rax]
   1879d:	3d 80 96 98 00       	cmp    eax,0x989680
   187a2:	74 38                	je     187dc <add_f5_gquad+0xff>
   187a4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   187a7:	48 98                	cdqe   
   187a9:	48 c1 e0 02          	shl    rax,0x2
   187ad:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   187b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   187b5:	48 01 d0             	add    rax,rdx
   187b8:	8b 10                	mov    edx,DWORD PTR [rax]
   187ba:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   187bd:	48 98                	cdqe   
   187bf:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   187c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   187cb:	48 01 c8             	add    rax,rcx
   187ce:	8b 00                	mov    eax,DWORD PTR [rax]
   187d0:	01 d0                	add    eax,edx
   187d2:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
   187d5:	0f 4e 45 d8          	cmovle eax,DWORD PTR [rbp-0x28]
   187d9:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   187dc:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
   187e0:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
   187e4:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
   187e8:	7f 80                	jg     1876a <add_f5_gquad+0x8d>
   187ea:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   187ed:	48 98                	cdqe   
   187ef:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   187f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187fb:	48 01 d0             	add    rax,rdx
   187fe:	8b 00                	mov    eax,DWORD PTR [rax]
   18800:	83 c0 01             	add    eax,0x1
   18803:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   18806:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   18809:	48 98                	cdqe   
   1880b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18813:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18817:	48 01 d0             	add    rax,rdx
   1881a:	8b 00                	mov    eax,DWORD PTR [rax]
   1881c:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
   1881f:	0f 4e 45 d8          	cmovle eax,DWORD PTR [rbp-0x28]
   18823:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   18826:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   18829:	5d                   	pop    rbp
   1882a:	c3                   	ret    

000000000001882b <add_f3_gquad>:
   1882b:	55                   	push   rbp
   1882c:	48 89 e5             	mov    rbp,rsp
   1882f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   18833:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
   18836:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   1883a:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   1883e:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
   18842:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18846:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18849:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1884c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18850:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [rax+0x160]
   18856:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   18859:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1885d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   18861:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   18865:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   18869:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1886d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   18871:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   18875:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   18878:	48 63 d2             	movsxd rdx,edx
   1887b:	48 c1 e2 03          	shl    rdx,0x3
   1887f:	48 01 d0             	add    rax,rdx
   18882:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18885:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18889:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1888d:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18891:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   18897:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1889a:	c7 45 dc 80 96 98 00 	mov    DWORD PTR [rbp-0x24],0x989680
   188a1:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   188a4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   188a7:	01 d0                	add    eax,edx
   188a9:	83 c0 01             	add    eax,0x1
   188ac:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   188af:	e9 84 00 00 00       	jmp    18938 <add_f3_gquad+0x10d>
   188b4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   188b7:	48 98                	cdqe   
   188b9:	48 83 c0 01          	add    rax,0x1
   188bd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   188c5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   188c9:	48 01 d0             	add    rax,rdx
   188cc:	8b 00                	mov    eax,DWORD PTR [rax]
   188ce:	3d 80 96 98 00       	cmp    eax,0x989680
   188d3:	74 5f                	je     18934 <add_f3_gquad+0x109>
   188d5:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   188d8:	2b 45 c4             	sub    eax,DWORD PTR [rbp-0x3c]
   188db:	48 98                	cdqe   
   188dd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   188e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   188e9:	48 01 d0             	add    rax,rdx
   188ec:	8b 00                	mov    eax,DWORD PTR [rax]
   188ee:	3d 80 96 98 00       	cmp    eax,0x989680
   188f3:	74 3f                	je     18934 <add_f3_gquad+0x109>
   188f5:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   188f8:	48 98                	cdqe   
   188fa:	48 83 c0 01          	add    rax,0x1
   188fe:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18906:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1890a:	48 01 d0             	add    rax,rdx
   1890d:	8b 10                	mov    edx,DWORD PTR [rax]
   1890f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   18912:	2b 45 c4             	sub    eax,DWORD PTR [rbp-0x3c]
   18915:	48 98                	cdqe   
   18917:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1891f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18923:	48 01 c8             	add    rax,rcx
   18926:	8b 00                	mov    eax,DWORD PTR [rax]
   18928:	01 d0                	add    eax,edx
   1892a:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
   1892d:	0f 4e 45 dc          	cmovle eax,DWORD PTR [rbp-0x24]
   18931:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   18934:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   18938:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1893b:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
   1893e:	7d 11                	jge    18951 <add_f3_gquad+0x126>
   18940:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   18943:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18946:	01 d0                	add    eax,edx
   18948:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
   1894b:	0f 8e 63 ff ff ff    	jle    188b4 <add_f3_gquad+0x89>
   18951:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   18954:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18957:	01 d0                	add    eax,edx
   18959:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
   1895c:	7f 23                	jg     18981 <add_f3_gquad+0x156>
   1895e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   18961:	2b 45 c4             	sub    eax,DWORD PTR [rbp-0x3c]
   18964:	48 98                	cdqe   
   18966:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1896e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18972:	48 01 d0             	add    rax,rdx
   18975:	8b 00                	mov    eax,DWORD PTR [rax]
   18977:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
   1897a:	0f 4e 45 dc          	cmovle eax,DWORD PTR [rbp-0x24]
   1897e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   18981:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   18984:	5d                   	pop    rbp
   18985:	c3                   	ret    

0000000000018986 <decompose_f5_ext_stem>:
   18986:	55                   	push   rbp
   18987:	48 89 e5             	mov    rbp,rsp
   1898a:	48 83 ec 40          	sub    rsp,0x40
   1898e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   18992:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   18995:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   18999:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1899d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   189a1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   189a5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   189a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   189ad:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   189b1:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   189b7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   189ba:	c7 45 f0 80 96 98 00 	mov    DWORD PTR [rbp-0x10],0x989680
   189c1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   189c4:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
   189c7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   189ca:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   189cd:	8d 50 fe             	lea    edx,[rax-0x2]
   189d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   189d4:	48 8d 48 08          	lea    rcx,[rax+0x8]
   189d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   189dc:	48 83 c0 04          	add    rax,0x4
   189e0:	48 89 ce             	mov    rsi,rcx
   189e3:	48 89 c7             	mov    rdi,rax
   189e6:	e8 3c 54 01 00       	call   2de27 <vrna_fun_zip_add_min>
   189eb:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   189ee:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   189f1:	c9                   	leave  
   189f2:	c3                   	ret    

00000000000189f3 <decompose_f3_ext_stem>:
   189f3:	55                   	push   rbp
   189f4:	48 89 e5             	mov    rbp,rsp
   189f7:	48 83 ec 40          	sub    rsp,0x40
   189fb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   189ff:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   18a02:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
   18a05:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   18a09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   18a0d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
   18a11:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   18a15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18a19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   18a1d:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18a21:	8b 80 24 36 03 00    	mov    eax,DWORD PTR [rax+0x33624]
   18a27:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   18a2a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   18a2d:	2b 45 d4             	sub    eax,DWORD PTR [rbp-0x2c]
   18a30:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
   18a33:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   18a36:	c7 45 f4 80 96 98 00 	mov    DWORD PTR [rbp-0xc],0x989680
   18a3d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   18a40:	48 63 d0             	movsxd rdx,eax
   18a43:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18a46:	48 98                	cdqe   
   18a48:	48 01 d0             	add    rax,rdx
   18a4b:	48 83 c0 02          	add    rax,0x2
   18a4f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18a57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18a5b:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   18a5f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   18a62:	48 63 d0             	movsxd rdx,eax
   18a65:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18a68:	48 98                	cdqe   
   18a6a:	48 01 d0             	add    rax,rdx
   18a6d:	48 83 c0 01          	add    rax,0x1
   18a71:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18a79:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18a7d:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   18a81:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   18a84:	89 c2                	mov    edx,eax
   18a86:	48 89 cf             	mov    rdi,rcx
   18a89:	e8 99 53 01 00       	call   2de27 <vrna_fun_zip_add_min>
   18a8e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   18a91:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   18a94:	c9                   	leave  
   18a95:	c3                   	ret    

0000000000018a96 <E_Stem>:
   18a96:	f3 0f 1e fa          	endbr64 
   18a9a:	55                   	push   rbp
   18a9b:	48 89 e5             	mov    rbp,rsp
   18a9e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   18aa1:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   18aa4:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   18aa7:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
   18aaa:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
   18aae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   18ab5:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   18ab9:	78 29                	js     18ae4 <E_Stem+0x4e>
   18abb:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   18abf:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18ac2:	48 63 f0             	movsxd rsi,eax
   18ac5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18ac8:	48 63 d0             	movsxd rdx,eax
   18acb:	48 89 d0             	mov    rax,rdx
   18ace:	48 c1 e0 02          	shl    rax,0x2
   18ad2:	48 01 d0             	add    rax,rdx
   18ad5:	48 01 f0             	add    rax,rsi
   18ad8:	48 05 4c 05 00 00    	add    rax,0x54c
   18ade:	8b 44 81 08          	mov    eax,DWORD PTR [rcx+rax*4+0x8]
   18ae2:	eb 05                	jmp    18ae9 <E_Stem+0x53>
   18ae4:	b8 00 00 00 00       	mov    eax,0x0
   18ae9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   18aec:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   18af0:	78 29                	js     18b1b <E_Stem+0x85>
   18af2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   18af6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   18af9:	48 63 f0             	movsxd rsi,eax
   18afc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18aff:	48 63 d0             	movsxd rdx,eax
   18b02:	48 89 d0             	mov    rax,rdx
   18b05:	48 c1 e0 02          	shl    rax,0x2
   18b09:	48 01 d0             	add    rax,rdx
   18b0c:	48 01 f0             	add    rax,rsi
   18b0f:	48 05 74 05 00 00    	add    rax,0x574
   18b15:	8b 44 81 08          	mov    eax,DWORD PTR [rcx+rax*4+0x8]
   18b19:	eb 05                	jmp    18b20 <E_Stem+0x8a>
   18b1b:	b8 00 00 00 00       	mov    eax,0x0
   18b20:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18b23:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
   18b27:	7e 0d                	jle    18b36 <E_Stem+0xa0>
   18b29:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   18b2d:	8b 80 d4 1d 03 00    	mov    eax,DWORD PTR [rax+0x31dd4]
   18b33:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   18b36:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   18b3a:	0f 88 a1 00 00 00    	js     18be1 <E_Stem+0x14b>
   18b40:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   18b44:	0f 88 97 00 00 00    	js     18be1 <E_Stem+0x14b>
   18b4a:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   18b4e:	74 47                	je     18b97 <E_Stem+0x101>
   18b50:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
   18b54:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   18b57:	48 63 f8             	movsxd rdi,eax
   18b5a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18b5d:	48 63 d0             	movsxd rdx,eax
   18b60:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18b63:	48 63 c8             	movsxd rcx,eax
   18b66:	48 89 d0             	mov    rax,rdx
   18b69:	48 c1 e0 02          	shl    rax,0x2
   18b6d:	48 01 d0             	add    rax,rdx
   18b70:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18b78:	48 01 d0             	add    rax,rdx
   18b7b:	48 89 ca             	mov    rdx,rcx
   18b7e:	48 c1 e2 02          	shl    rdx,0x2
   18b82:	48 01 ca             	add    rdx,rcx
   18b85:	48 01 d0             	add    rax,rdx
   18b88:	48 01 f8             	add    rax,rdi
   18b8b:	48 05 9c 00 00 00    	add    rax,0x9c
   18b91:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
   18b95:	eb 45                	jmp    18bdc <E_Stem+0x146>
   18b97:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
   18b9b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   18b9e:	48 63 f8             	movsxd rdi,eax
   18ba1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18ba4:	48 63 d0             	movsxd rdx,eax
   18ba7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18baa:	48 63 c8             	movsxd rcx,eax
   18bad:	48 89 d0             	mov    rax,rdx
   18bb0:	48 c1 e0 02          	shl    rax,0x2
   18bb4:	48 01 d0             	add    rax,rdx
   18bb7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18bbf:	48 01 d0             	add    rax,rdx
   18bc2:	48 89 ca             	mov    rdx,rcx
   18bc5:	48 c1 e2 02          	shl    rdx,0x2
   18bc9:	48 01 ca             	add    rdx,rcx
   18bcc:	48 01 d0             	add    rax,rdx
   18bcf:	48 01 f8             	add    rax,rdi
   18bd2:	48 05 84 04 00 00    	add    rax,0x484
   18bd8:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
   18bdc:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   18bdf:	eb 0b                	jmp    18bec <E_Stem+0x156>
   18be1:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   18be4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18be7:	01 d0                	add    eax,edx
   18be9:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   18bec:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   18bf0:	75 18                	jne    18c0a <E_Stem+0x174>
   18bf2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   18bf6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   18bf9:	48 63 d2             	movsxd rdx,edx
   18bfc:	48 81 c2 64 c7 00 00 	add    rdx,0xc764
   18c03:	8b 44 90 0c          	mov    eax,DWORD PTR [rax+rdx*4+0xc]
   18c07:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   18c0a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   18c0d:	5d                   	pop    rbp
   18c0e:	c3                   	ret    

0000000000018c0f <E_ExtLoop>:
   18c0f:	f3 0f 1e fa          	endbr64 
   18c13:	55                   	push   rbp
   18c14:	48 89 e5             	mov    rbp,rsp
   18c17:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   18c1a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   18c1d:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   18c20:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   18c24:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   18c2b:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   18c2f:	78 50                	js     18c81 <E_ExtLoop+0x72>
   18c31:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   18c35:	78 4a                	js     18c81 <E_ExtLoop+0x72>
   18c37:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
   18c3b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   18c3e:	48 63 f8             	movsxd rdi,eax
   18c41:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18c44:	48 63 d0             	movsxd rdx,eax
   18c47:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18c4a:	48 63 c8             	movsxd rcx,eax
   18c4d:	48 89 d0             	mov    rax,rdx
   18c50:	48 c1 e0 02          	shl    rax,0x2
   18c54:	48 01 d0             	add    rax,rdx
   18c57:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18c5f:	48 01 d0             	add    rax,rdx
   18c62:	48 89 ca             	mov    rdx,rcx
   18c65:	48 c1 e2 02          	shl    rdx,0x2
   18c69:	48 01 ca             	add    rdx,rcx
   18c6c:	48 01 d0             	add    rax,rdx
   18c6f:	48 01 f8             	add    rax,rdi
   18c72:	48 05 9c 00 00 00    	add    rax,0x9c
   18c78:	8b 44 86 08          	mov    eax,DWORD PTR [rsi+rax*4+0x8]
   18c7c:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18c7f:	eb 62                	jmp    18ce3 <E_ExtLoop+0xd4>
   18c81:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   18c85:	78 2c                	js     18cb3 <E_ExtLoop+0xa4>
   18c87:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   18c8b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   18c8e:	48 63 f0             	movsxd rsi,eax
   18c91:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18c94:	48 63 d0             	movsxd rdx,eax
   18c97:	48 89 d0             	mov    rax,rdx
   18c9a:	48 c1 e0 02          	shl    rax,0x2
   18c9e:	48 01 d0             	add    rax,rdx
   18ca1:	48 01 f0             	add    rax,rsi
   18ca4:	48 05 4c 05 00 00    	add    rax,0x54c
   18caa:	8b 44 81 08          	mov    eax,DWORD PTR [rcx+rax*4+0x8]
   18cae:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18cb1:	eb 30                	jmp    18ce3 <E_ExtLoop+0xd4>
   18cb3:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   18cb7:	78 2a                	js     18ce3 <E_ExtLoop+0xd4>
   18cb9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   18cbd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   18cc0:	48 63 f0             	movsxd rsi,eax
   18cc3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   18cc6:	48 63 d0             	movsxd rdx,eax
   18cc9:	48 89 d0             	mov    rax,rdx
   18ccc:	48 c1 e0 02          	shl    rax,0x2
   18cd0:	48 01 d0             	add    rax,rdx
   18cd3:	48 01 f0             	add    rax,rsi
   18cd6:	48 05 74 05 00 00    	add    rax,0x574
   18cdc:	8b 44 81 08          	mov    eax,DWORD PTR [rcx+rax*4+0x8]
   18ce0:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18ce3:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
   18ce7:	7e 0d                	jle    18cf6 <E_ExtLoop+0xe7>
   18ce9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   18ced:	8b 80 d4 1d 03 00    	mov    eax,DWORD PTR [rax+0x31dd4]
   18cf3:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18cf6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18cf9:	5d                   	pop    rbp
   18cfa:	c3                   	ret    

0000000000018cfb <vrna_params>:
   18cfb:	f3 0f 1e fa          	endbr64 
   18cff:	55                   	push   rbp
   18d00:	48 89 e5             	mov    rbp,rsp
   18d03:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   18d0a:	48 89 bd 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rdi
   18d11:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   18d1a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18d1e:	31 c0                	xor    eax,eax
   18d20:	48 83 bd 08 f8 ff ff 00 	cmp    QWORD PTR [rbp-0x7f8],0x0
   18d28:	74 11                	je     18d3b <vrna_params+0x40>
   18d2a:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   18d31:	48 89 c7             	mov    rdi,rax
   18d34:	e8 9f 07 00 00       	call   194d8 <get_scaled_params>
   18d39:	eb 1e                	jmp    18d59 <vrna_params+0x5e>
   18d3b:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   18d42:	48 89 c7             	mov    rdi,rax
   18d45:	e8 bc 80 01 00       	call   30e06 <vrna_md_set_default>
   18d4a:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   18d51:	48 89 c7             	mov    rdi,rax
   18d54:	e8 7f 07 00 00       	call   194d8 <get_scaled_params>
   18d59:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   18d5d:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   18d66:	74 05                	je     18d6d <vrna_params+0x72>
   18d68:	e8 83 ab fe ff       	call   38f0 <__stack_chk_fail@plt>
   18d6d:	c9                   	leave  
   18d6e:	c3                   	ret    

0000000000018d6f <vrna_exp_params>:
   18d6f:	f3 0f 1e fa          	endbr64 
   18d73:	55                   	push   rbp
   18d74:	48 89 e5             	mov    rbp,rsp
   18d77:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   18d7e:	48 89 bd 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rdi
   18d85:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   18d8e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18d92:	31 c0                	xor    eax,eax
   18d94:	48 83 bd 08 f8 ff ff 00 	cmp    QWORD PTR [rbp-0x7f8],0x0
   18d9c:	74 1d                	je     18dbb <vrna_exp_params+0x4c>
   18d9e:	48 8b 15 cb c0 01 00 	mov    rdx,QWORD PTR [rip+0x1c0cb]        # 34e70 <Law_and_Order+0x5d0>
   18da5:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   18dac:	66 48 0f 6e c2       	movq   xmm0,rdx
   18db1:	48 89 c7             	mov    rdi,rax
   18db4:	e8 0c 21 00 00       	call   1aec5 <get_scaled_exp_params>
   18db9:	eb 2a                	jmp    18de5 <vrna_exp_params+0x76>
   18dbb:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   18dc2:	48 89 c7             	mov    rdi,rax
   18dc5:	e8 3c 80 01 00       	call   30e06 <vrna_md_set_default>
   18dca:	48 8b 15 9f c0 01 00 	mov    rdx,QWORD PTR [rip+0x1c09f]        # 34e70 <Law_and_Order+0x5d0>
   18dd1:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   18dd8:	66 48 0f 6e c2       	movq   xmm0,rdx
   18ddd:	48 89 c7             	mov    rdi,rax
   18de0:	e8 e0 20 00 00       	call   1aec5 <get_scaled_exp_params>
   18de5:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   18de9:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   18df2:	74 05                	je     18df9 <vrna_exp_params+0x8a>
   18df4:	e8 f7 aa fe ff       	call   38f0 <__stack_chk_fail@plt>
   18df9:	c9                   	leave  
   18dfa:	c3                   	ret    

0000000000018dfb <vrna_exp_params_comparative>:
   18dfb:	f3 0f 1e fa          	endbr64 
   18dff:	55                   	push   rbp
   18e00:	48 89 e5             	mov    rbp,rsp
   18e03:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   18e0a:	89 bd 0c f8 ff ff    	mov    DWORD PTR [rbp-0x7f4],edi
   18e10:	48 89 b5 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],rsi
   18e17:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   18e20:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18e24:	31 c0                	xor    eax,eax
   18e26:	48 83 bd 00 f8 ff ff 00 	cmp    QWORD PTR [rbp-0x800],0x0
   18e2e:	74 25                	je     18e55 <vrna_exp_params_comparative+0x5a>
   18e30:	48 8b 0d 39 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c039]        # 34e70 <Law_and_Order+0x5d0>
   18e37:	8b 95 0c f8 ff ff    	mov    edx,DWORD PTR [rbp-0x7f4]
   18e3d:	48 8b 85 00 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x800]
   18e44:	66 48 0f 6e c1       	movq   xmm0,rcx
   18e49:	89 d6                	mov    esi,edx
   18e4b:	48 89 c7             	mov    rdi,rax
   18e4e:	e8 9e 78 00 00       	call   206f1 <get_exp_params_ali>
   18e53:	eb 32                	jmp    18e87 <vrna_exp_params_comparative+0x8c>
   18e55:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   18e5c:	48 89 c7             	mov    rdi,rax
   18e5f:	e8 a2 7f 01 00       	call   30e06 <vrna_md_set_default>
   18e64:	48 8b 0d 05 c0 01 00 	mov    rcx,QWORD PTR [rip+0x1c005]        # 34e70 <Law_and_Order+0x5d0>
   18e6b:	8b 95 0c f8 ff ff    	mov    edx,DWORD PTR [rbp-0x7f4]
   18e71:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   18e78:	66 48 0f 6e c1       	movq   xmm0,rcx
   18e7d:	89 d6                	mov    esi,edx
   18e7f:	48 89 c7             	mov    rdi,rax
   18e82:	e8 6a 78 00 00       	call   206f1 <get_exp_params_ali>
   18e87:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   18e8b:	64 48 33 34 25 28 00 00 00 	xor    rsi,QWORD PTR fs:0x28
   18e94:	74 05                	je     18e9b <vrna_exp_params_comparative+0xa0>
   18e96:	e8 55 aa fe ff       	call   38f0 <__stack_chk_fail@plt>
   18e9b:	c9                   	leave  
   18e9c:	c3                   	ret    

0000000000018e9d <vrna_params_copy>:
   18e9d:	f3 0f 1e fa          	endbr64 
   18ea1:	55                   	push   rbp
   18ea2:	48 89 e5             	mov    rbp,rsp
   18ea5:	48 83 ec 20          	sub    rsp,0x20
   18ea9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   18ead:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   18eb5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   18eba:	74 26                	je     18ee2 <vrna_params_copy+0x45>
   18ebc:	bf 80 3e 03 00       	mov    edi,0x33e80
   18ec1:	e8 4b 5e 01 00       	call   2ed11 <vrna_alloc>
   18ec6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18eca:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   18ece:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18ed2:	ba 80 3e 03 00       	mov    edx,0x33e80
   18ed7:	48 89 ce             	mov    rsi,rcx
   18eda:	48 89 c7             	mov    rdi,rax
   18edd:	e8 4e a9 fe ff       	call   3830 <memcpy@plt>
   18ee2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18ee6:	c9                   	leave  
   18ee7:	c3                   	ret    

0000000000018ee8 <vrna_exp_params_copy>:
   18ee8:	f3 0f 1e fa          	endbr64 
   18eec:	55                   	push   rbp
   18eed:	48 89 e5             	mov    rbp,rsp
   18ef0:	48 83 ec 20          	sub    rsp,0x20
   18ef4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   18ef8:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   18f00:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   18f05:	74 26                	je     18f2d <vrna_exp_params_copy+0x45>
   18f07:	bf 60 67 06 00       	mov    edi,0x66760
   18f0c:	e8 00 5e 01 00       	call   2ed11 <vrna_alloc>
   18f11:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   18f15:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   18f19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18f1d:	ba 60 67 06 00       	mov    edx,0x66760
   18f22:	48 89 ce             	mov    rsi,rcx
   18f25:	48 89 c7             	mov    rdi,rax
   18f28:	e8 03 a9 fe ff       	call   3830 <memcpy@plt>
   18f2d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18f31:	c9                   	leave  
   18f32:	c3                   	ret    

0000000000018f33 <vrna_params_subst>:
   18f33:	f3 0f 1e fa          	endbr64 
   18f37:	55                   	push   rbp
   18f38:	48 89 e5             	mov    rbp,rsp
   18f3b:	48 83 ec 10          	sub    rsp,0x10
   18f3f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   18f43:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   18f47:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   18f4c:	74 59                	je     18fa7 <vrna_params_subst+0x74>
   18f4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18f52:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18f56:	48 85 c0             	test   rax,rax
   18f59:	74 10                	je     18f6b <vrna_params_subst+0x38>
   18f5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18f5f:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18f63:	48 89 c7             	mov    rdi,rax
   18f66:	e8 d5 a9 fe ff       	call   3940 <free@plt>
   18f6b:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   18f70:	74 16                	je     18f88 <vrna_params_subst+0x55>
   18f72:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   18f76:	48 89 c7             	mov    rdi,rax
   18f79:	e8 1f ff ff ff       	call   18e9d <vrna_params_copy>
   18f7e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   18f82:	48 89 42 60          	mov    QWORD PTR [rdx+0x60],rax
   18f86:	eb 23                	jmp    18fab <vrna_params_subst+0x78>
   18f88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18f8c:	8b 00                	mov    eax,DWORD PTR [rax]
   18f8e:	83 f8 01             	cmp    eax,0x1
   18f91:	77 17                	ja     18faa <vrna_params_subst+0x77>
   18f93:	bf 00 00 00 00       	mov    edi,0x0
   18f98:	e8 5e fd ff ff       	call   18cfb <vrna_params>
   18f9d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   18fa1:	48 89 42 60          	mov    QWORD PTR [rdx+0x60],rax
   18fa5:	eb 04                	jmp    18fab <vrna_params_subst+0x78>
   18fa7:	90                   	nop
   18fa8:	eb 01                	jmp    18fab <vrna_params_subst+0x78>
   18faa:	90                   	nop
   18fab:	90                   	nop
   18fac:	c9                   	leave  
   18fad:	c3                   	ret    

0000000000018fae <vrna_params_reset>:
   18fae:	f3 0f 1e fa          	endbr64 
   18fb2:	55                   	push   rbp
   18fb3:	48 89 e5             	mov    rbp,rsp
   18fb6:	48 83 ec 10          	sub    rsp,0x10
   18fba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   18fbe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   18fc2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   18fc7:	74 6f                	je     19038 <vrna_params_reset+0x8a>
   18fc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18fcd:	8b 00                	mov    eax,DWORD PTR [rax]
   18fcf:	83 f8 01             	cmp    eax,0x1
   18fd2:	77 67                	ja     1903b <vrna_params_reset+0x8d>
   18fd4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18fd8:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18fdc:	48 85 c0             	test   rax,rax
   18fdf:	74 10                	je     18ff1 <vrna_params_reset+0x43>
   18fe1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18fe5:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   18fe9:	48 89 c7             	mov    rdi,rax
   18fec:	e8 4f a9 fe ff       	call   3940 <free@plt>
   18ff1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   18ff5:	48 89 c7             	mov    rdi,rax
   18ff8:	e8 fe fc ff ff       	call   18cfb <vrna_params>
   18ffd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   19001:	48 89 42 60          	mov    QWORD PTR [rdx+0x60],rax
   19005:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19009:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1900d:	48 85 c0             	test   rax,rax
   19010:	74 2c                	je     1903e <vrna_params_reset+0x90>
   19012:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19016:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1901a:	48 89 c7             	mov    rdi,rax
   1901d:	e8 1e a9 fe ff       	call   3940 <free@plt>
   19022:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19026:	48 89 c7             	mov    rdi,rax
   19029:	e8 41 fd ff ff       	call   18d6f <vrna_exp_params>
   1902e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   19032:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   19036:	eb 06                	jmp    1903e <vrna_params_reset+0x90>
   19038:	90                   	nop
   19039:	eb 04                	jmp    1903f <vrna_params_reset+0x91>
   1903b:	90                   	nop
   1903c:	eb 01                	jmp    1903f <vrna_params_reset+0x91>
   1903e:	90                   	nop
   1903f:	90                   	nop
   19040:	c9                   	leave  
   19041:	c3                   	ret    

0000000000019042 <vrna_exp_params_reset>:
   19042:	f3 0f 1e fa          	endbr64 
   19046:	55                   	push   rbp
   19047:	48 89 e5             	mov    rbp,rsp
   1904a:	48 83 ec 10          	sub    rsp,0x10
   1904e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   19052:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   19056:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1905b:	74 3e                	je     1909b <vrna_exp_params_reset+0x59>
   1905d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19061:	8b 00                	mov    eax,DWORD PTR [rax]
   19063:	83 f8 01             	cmp    eax,0x1
   19066:	77 36                	ja     1909e <vrna_exp_params_reset+0x5c>
   19068:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1906c:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   19070:	48 85 c0             	test   rax,rax
   19073:	74 10                	je     19085 <vrna_exp_params_reset+0x43>
   19075:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19079:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1907d:	48 89 c7             	mov    rdi,rax
   19080:	e8 bb a8 fe ff       	call   3940 <free@plt>
   19085:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19089:	48 89 c7             	mov    rdi,rax
   1908c:	e8 de fc ff ff       	call   18d6f <vrna_exp_params>
   19091:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   19095:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   19099:	eb 04                	jmp    1909f <vrna_exp_params_reset+0x5d>
   1909b:	90                   	nop
   1909c:	eb 01                	jmp    1909f <vrna_exp_params_reset+0x5d>
   1909e:	90                   	nop
   1909f:	90                   	nop
   190a0:	c9                   	leave  
   190a1:	c3                   	ret    

00000000000190a2 <vrna_exp_params_subst>:
   190a2:	f3 0f 1e fa          	endbr64 
   190a6:	55                   	push   rbp
   190a7:	48 89 e5             	mov    rbp,rsp
   190aa:	48 83 ec 10          	sub    rsp,0x10
   190ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   190b2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   190b6:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   190bb:	0f 84 af 00 00 00    	je     19170 <vrna_exp_params_subst+0xce>
   190c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   190c5:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   190c9:	48 85 c0             	test   rax,rax
   190cc:	74 10                	je     190de <vrna_exp_params_subst+0x3c>
   190ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   190d2:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   190d6:	48 89 c7             	mov    rdi,rax
   190d9:	e8 62 a8 fe ff       	call   3940 <free@plt>
   190de:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   190e3:	74 16                	je     190fb <vrna_exp_params_subst+0x59>
   190e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   190e9:	48 89 c7             	mov    rdi,rax
   190ec:	e8 f7 fd ff ff       	call   18ee8 <vrna_exp_params_copy>
   190f1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   190f5:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   190f9:	eb 64                	jmp    1915f <vrna_exp_params_subst+0xbd>
   190fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   190ff:	8b 00                	mov    eax,DWORD PTR [rax]
   19101:	85 c0                	test   eax,eax
   19103:	74 07                	je     1910c <vrna_exp_params_subst+0x6a>
   19105:	83 f8 01             	cmp    eax,0x1
   19108:	74 34                	je     1913e <vrna_exp_params_subst+0x9c>
   1910a:	eb 53                	jmp    1915f <vrna_exp_params_subst+0xbd>
   1910c:	bf 00 00 00 00       	mov    edi,0x0
   19111:	e8 59 fc ff ff       	call   18d6f <vrna_exp_params>
   19116:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1911a:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   1911e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19122:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   19125:	83 f8 01             	cmp    eax,0x1
   19128:	76 34                	jbe    1915e <vrna_exp_params_subst+0xbc>
   1912a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1912e:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   19132:	c7 80 04 5f 06 00 00 00 00 00 	mov    DWORD PTR [rax+0x65f04],0x0
   1913c:	eb 20                	jmp    1915e <vrna_exp_params_subst+0xbc>
   1913e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19142:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   19148:	be 00 00 00 00       	mov    esi,0x0
   1914d:	89 c7                	mov    edi,eax
   1914f:	e8 a7 fc ff ff       	call   18dfb <vrna_exp_params_comparative>
   19154:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   19158:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   1915c:	eb 01                	jmp    1915f <vrna_exp_params_subst+0xbd>
   1915e:	90                   	nop
   1915f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19163:	be 00 00 00 00       	mov    esi,0x0
   19168:	48 89 c7             	mov    rdi,rax
   1916b:	e8 03 00 00 00       	call   19173 <vrna_exp_params_rescale>
   19170:	90                   	nop
   19171:	c9                   	leave  
   19172:	c3                   	ret    

0000000000019173 <vrna_exp_params_rescale>:
   19173:	f3 0f 1e fa          	endbr64 
   19177:	55                   	push   rbp
   19178:	48 89 e5             	mov    rbp,rsp
   1917b:	48 83 ec 30          	sub    rsp,0x30
   1917f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   19183:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   19187:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   1918c:	0f 84 6d 02 00 00    	je     193ff <vrna_exp_params_rescale+0x28c>
   19192:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19196:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1919a:	48 85 c0             	test   rax,rax
   1919d:	75 64                	jne    19203 <vrna_exp_params_rescale+0x90>
   1919f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   191a3:	8b 00                	mov    eax,DWORD PTR [rax]
   191a5:	85 c0                	test   eax,eax
   191a7:	74 0a                	je     191b3 <vrna_exp_params_rescale+0x40>
   191a9:	83 f8 01             	cmp    eax,0x1
   191ac:	74 28                	je     191d6 <vrna_exp_params_rescale+0x63>
   191ae:	e9 a9 00 00 00       	jmp    1925c <vrna_exp_params_rescale+0xe9>
   191b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   191b7:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   191bb:	48 05 98 35 03 00    	add    rax,0x33598
   191c1:	48 89 c7             	mov    rdi,rax
   191c4:	e8 a6 fb ff ff       	call   18d6f <vrna_exp_params>
   191c9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   191cd:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   191d1:	e9 86 00 00 00       	jmp    1925c <vrna_exp_params_rescale+0xe9>
   191d6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   191da:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   191de:	48 8d 90 98 35 03 00 	lea    rdx,[rax+0x33598]
   191e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   191e9:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   191ef:	48 89 d6             	mov    rsi,rdx
   191f2:	89 c7                	mov    edi,eax
   191f4:	e8 02 fc ff ff       	call   18dfb <vrna_exp_params_comparative>
   191f9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   191fd:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   19201:	eb 59                	jmp    1925c <vrna_exp_params_rescale+0xe9>
   19203:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19207:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1920b:	48 8d 88 78 5e 06 00 	lea    rcx,[rax+0x65e78]
   19212:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19216:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   1921a:	48 05 98 35 03 00    	add    rax,0x33598
   19220:	ba e8 07 00 00       	mov    edx,0x7e8
   19225:	48 89 ce             	mov    rsi,rcx
   19228:	48 89 c7             	mov    rdi,rax
   1922b:	e8 00 a5 fe ff       	call   3730 <memcmp@plt>
   19230:	85 c0                	test   eax,eax
   19232:	74 28                	je     1925c <vrna_exp_params_rescale+0xe9>
   19234:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19238:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   1923c:	48 8d 90 98 35 03 00 	lea    rdx,[rax+0x33598]
   19243:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19247:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1924b:	48 05 78 5e 06 00    	add    rax,0x65e78
   19251:	48 89 d6             	mov    rsi,rdx
   19254:	48 89 c7             	mov    rdi,rax
   19257:	e8 51 7a 01 00       	call   30cad <vrna_md_copy>
   1925c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19260:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   19264:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   19268:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   1926d:	0f 84 8c 01 00 00    	je     193ff <vrna_exp_params_rescale+0x28c>
   19273:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19277:	f2 0f 10 80 58 5e 06 00 	movsd  xmm0,QWORD PTR [rax+0x65e58]
   1927f:	f2 0f 11 45 e8       	movsd  QWORD PTR [rbp-0x18],xmm0
   19284:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19288:	48 05 78 5e 06 00    	add    rax,0x65e78
   1928e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   19292:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19296:	8b 00                	mov    eax,DWORD PTR [rax]
   19298:	83 f8 01             	cmp    eax,0x1
   1929b:	75 3f                	jne    192dc <vrna_exp_params_rescale+0x169>
   1929d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   192a1:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   192a7:	89 c0                	mov    eax,eax
   192a9:	48 85 c0             	test   rax,rax
   192ac:	78 07                	js     192b5 <vrna_exp_params_rescale+0x142>
   192ae:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   192b3:	eb 15                	jmp    192ca <vrna_exp_params_rescale+0x157>
   192b5:	48 89 c2             	mov    rdx,rax
   192b8:	48 d1 ea             	shr    rdx,1
   192bb:	83 e0 01             	and    eax,0x1
   192be:	48 09 c2             	or     rdx,rax
   192c1:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   192c6:	f2 0f 58 c0          	addsd  xmm0,xmm0
   192ca:	f2 0f 10 4d e8       	movsd  xmm1,QWORD PTR [rbp-0x18]
   192cf:	f2 0f 5e c8          	divsd  xmm1,xmm0
   192d3:	66 0f 28 c1          	movapd xmm0,xmm1
   192d7:	f2 0f 11 45 e8       	movsd  QWORD PTR [rbp-0x18],xmm0
   192dc:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   192e1:	75 1e                	jne    19301 <vrna_exp_params_rescale+0x18e>
   192e3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   192e7:	f2 0f 10 88 60 5e 06 00 	movsd  xmm1,QWORD PTR [rax+0x65e60]
   192ef:	f2 0f 10 05 81 bb 01 00 	movsd  xmm0,QWORD PTR [rip+0x1bb81]        # 34e78 <Law_and_Order+0x5d8>
   192f7:	66 0f 2f c1          	comisd xmm0,xmm1
   192fb:	0f 86 c4 00 00 00    	jbe    193c5 <vrna_exp_params_rescale+0x252>
   19301:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   19306:	74 4d                	je     19355 <vrna_exp_params_rescale+0x1e2>
   19308:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1930c:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
   19310:	f2 0f 10 05 68 bb 01 00 	movsd  xmm0,QWORD PTR [rip+0x1bb68]        # 34e80 <Law_and_Order+0x5e0>
   19318:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   1931c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19320:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   19323:	89 c0                	mov    eax,eax
   19325:	48 85 c0             	test   rax,rax
   19328:	78 07                	js     19331 <vrna_exp_params_rescale+0x1be>
   1932a:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1932f:	eb 15                	jmp    19346 <vrna_exp_params_rescale+0x1d3>
   19331:	48 89 c2             	mov    rdx,rax
   19334:	48 d1 ea             	shr    rdx,1
   19337:	83 e0 01             	and    eax,0x1
   1933a:	48 09 c2             	or     rdx,rax
   1933d:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   19342:	f2 0f 58 c0          	addsd  xmm0,xmm0
   19346:	f2 0f 5e c8          	divsd  xmm1,xmm0
   1934a:	66 0f 28 c1          	movapd xmm0,xmm1
   1934e:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   19353:	eb 39                	jmp    1938e <vrna_exp_params_rescale+0x21b>
   19355:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19359:	f2 0f 10 80 68 5e 06 00 	movsd  xmm0,QWORD PTR [rax+0x65e68]
   19361:	f2 0f 10 0d 1f bb 01 00 	movsd  xmm1,QWORD PTR [rip+0x1bb1f]        # 34e88 <Law_and_Order+0x5e8>
   19369:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1936d:	66 0f 28 c8          	movapd xmm1,xmm0
   19371:	f2 0f 10 05 17 bb 01 00 	movsd  xmm0,QWORD PTR [rip+0x1bb17]        # 34e90 <Law_and_Order+0x5f0>
   19379:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1937d:	f2 0f 10 0d 13 bb 01 00 	movsd  xmm1,QWORD PTR [rip+0x1bb13]        # 34e98 <Law_and_Order+0x5f8>
   19385:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19389:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   1938e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19392:	f2 0f 10 80 b0 00 00 00 	movsd  xmm0,QWORD PTR [rax+0xb0]
   1939a:	f2 0f 59 45 e0       	mulsd  xmm0,QWORD PTR [rbp-0x20]
   1939f:	f3 0f 7e 0d f9 ba 01 00 	movq   xmm1,QWORD PTR [rip+0x1baf9]        # 34ea0 <Law_and_Order+0x600>
   193a7:	66 0f 57 c1          	xorpd  xmm0,xmm1
   193ab:	f2 0f 5e 45 e8       	divsd  xmm0,QWORD PTR [rbp-0x18]
   193b0:	e8 7b a7 fe ff       	call   3b30 <exp@plt>
   193b5:	66 48 0f 7e c0       	movq   rax,xmm0
   193ba:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   193be:	48 89 82 60 5e 06 00 	mov    QWORD PTR [rdx+0x65e60],rax
   193c5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   193c9:	f2 0f 10 88 60 5e 06 00 	movsd  xmm1,QWORD PTR [rax+0x65e60]
   193d1:	f2 0f 10 05 9f ba 01 00 	movsd  xmm0,QWORD PTR [rip+0x1ba9f]        # 34e78 <Law_and_Order+0x5d8>
   193d9:	66 0f 2f c1          	comisd xmm0,xmm1
   193dd:	76 14                	jbe    193f3 <vrna_exp_params_rescale+0x280>
   193df:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   193e3:	f2 0f 10 05 8d ba 01 00 	movsd  xmm0,QWORD PTR [rip+0x1ba8d]        # 34e78 <Law_and_Order+0x5d8>
   193eb:	f2 0f 11 80 60 5e 06 00 	movsd  QWORD PTR [rax+0x65e60],xmm0
   193f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   193f7:	48 89 c7             	mov    rdi,rax
   193fa:	e8 8c ca 00 00       	call   25e8b <rescale_params>
   193ff:	90                   	nop
   19400:	c9                   	leave  
   19401:	c3                   	ret    

0000000000019402 <vrna_params_prepare>:
   19402:	f3 0f 1e fa          	endbr64 
   19406:	55                   	push   rbp
   19407:	48 89 e5             	mov    rbp,rsp
   1940a:	48 83 ec 20          	sub    rsp,0x20
   1940e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   19412:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   19415:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   1941a:	0f 84 b5 00 00 00    	je     194d5 <vrna_params_prepare+0xd3>
   19420:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19424:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   19428:	48 05 98 35 03 00    	add    rax,0x33598
   1942e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   19432:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   19435:	83 e0 02             	and    eax,0x2
   19438:	85 c0                	test   eax,eax
   1943a:	0f 84 95 00 00 00    	je     194d5 <vrna_params_prepare+0xd3>
   19440:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19444:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   19448:	48 85 c0             	test   rax,rax
   1944b:	74 43                	je     19490 <vrna_params_prepare+0x8e>
   1944d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19451:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   19455:	48 8d 88 78 5e 06 00 	lea    rcx,[rax+0x65e78]
   1945c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   19460:	ba e8 07 00 00       	mov    edx,0x7e8
   19465:	48 89 ce             	mov    rsi,rcx
   19468:	48 89 c7             	mov    rdi,rax
   1946b:	e8 c0 a2 fe ff       	call   3730 <memcmp@plt>
   19470:	85 c0                	test   eax,eax
   19472:	74 1c                	je     19490 <vrna_params_prepare+0x8e>
   19474:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19478:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   1947c:	48 89 c7             	mov    rdi,rax
   1947f:	e8 bc a4 fe ff       	call   3940 <free@plt>
   19484:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19488:	48 c7 40 68 00 00 00 00 	mov    QWORD PTR [rax+0x68],0x0
   19490:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19494:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   19498:	48 85 c0             	test   rax,rax
   1949b:	75 38                	jne    194d5 <vrna_params_prepare+0xd3>
   1949d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   194a1:	8b 00                	mov    eax,DWORD PTR [rax]
   194a3:	85 c0                	test   eax,eax
   194a5:	75 0e                	jne    194b5 <vrna_params_prepare+0xb3>
   194a7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   194ab:	48 89 c7             	mov    rdi,rax
   194ae:	e8 bc f8 ff ff       	call   18d6f <vrna_exp_params>
   194b3:	eb 18                	jmp    194cd <vrna_params_prepare+0xcb>
   194b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   194b9:	8b 80 b8 00 00 00    	mov    eax,DWORD PTR [rax+0xb8]
   194bf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   194c3:	48 89 d6             	mov    rsi,rdx
   194c6:	89 c7                	mov    edi,eax
   194c8:	e8 2e f9 ff ff       	call   18dfb <vrna_exp_params_comparative>
   194cd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   194d1:	48 89 42 68          	mov    QWORD PTR [rdx+0x68],rax
   194d5:	90                   	nop
   194d6:	c9                   	leave  
   194d7:	c3                   	ret    

00000000000194d8 <get_scaled_params>:
   194d8:	f3 0f 1e fa          	endbr64 
   194dc:	55                   	push   rbp
   194dd:	48 89 e5             	mov    rbp,rsp
   194e0:	53                   	push   rbx
   194e1:	48 83 ec 68          	sub    rsp,0x68
   194e5:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   194e9:	bf 80 3e 03 00       	mov    edi,0x33e80
   194ee:	e8 1e 58 01 00       	call   2ed11 <vrna_alloc>
   194f3:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   194f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   194fb:	48 05 80 3d 03 00    	add    rax,0x33d80
   19501:	ba 00 01 00 00       	mov    edx,0x100
   19506:	be 00 00 00 00       	mov    esi,0x0
   1950b:	48 89 c7             	mov    rdi,rax
   1950e:	e8 8d a2 fe ff       	call   37a0 <memset@plt>
   19513:	e8 5f 25 01 00       	call   2ba77 <last_parameter_file>
   19518:	48 85 c0             	test   rax,rax
   1951b:	74 22                	je     1953f <get_scaled_params+0x67>
   1951d:	e8 55 25 01 00       	call   2ba77 <last_parameter_file>
   19522:	48 89 c1             	mov    rcx,rax
   19525:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19529:	48 05 80 3d 03 00    	add    rax,0x33d80
   1952f:	ba ff 00 00 00       	mov    edx,0xff
   19534:	48 89 ce             	mov    rsi,rcx
   19537:	48 89 c7             	mov    rdi,rax
   1953a:	e8 31 a2 fe ff       	call   3770 <strncpy@plt>
   1953f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19543:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   19547:	48 05 98 35 03 00    	add    rax,0x33598
   1954d:	48 89 d6             	mov    rsi,rdx
   19550:	ba fd 00 00 00       	mov    edx,0xfd
   19555:	48 89 c7             	mov    rdi,rax
   19558:	48 89 d1             	mov    rcx,rdx
   1955b:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1955e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   19562:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
   19566:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1956a:	f2 0f 11 80 90 35 03 00 	movsd  QWORD PTR [rax+0x33590],xmm0
   19572:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19576:	f2 0f 10 88 90 35 03 00 	movsd  xmm1,QWORD PTR [rax+0x33590]
   1957e:	f2 0f 10 05 2a b9 01 00 	movsd  xmm0,QWORD PTR [rip+0x1b92a]        # 34eb0 <Law_and_Order+0x610>
   19586:	f2 0f 58 c1          	addsd  xmm0,xmm1
   1958a:	f2 0f 10 0d 6e 3c 1d 00 	movsd  xmm1,QWORD PTR [rip+0x1d3c6e]        # 1ed200 <Tmeasure>
   19592:	f2 0f 5e c1          	divsd  xmm0,xmm1
   19596:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   1959b:	8b 05 87 3c 1d 00    	mov    eax,DWORD PTR [rip+0x1d3c87]        # 1ed228 <niniodH>
   195a1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   195a5:	8b 15 7d 3c 1d 00    	mov    edx,DWORD PTR [rip+0x1d3c7d]        # 1ed228 <niniodH>
   195ab:	8b 05 73 3c 1d 00    	mov    eax,DWORD PTR [rip+0x1d3c73]        # 1ed224 <ninio37>
   195b1:	29 c2                	sub    edx,eax
   195b3:	89 d0                	mov    eax,edx
   195b5:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   195b9:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   195be:	f2 0f 5c c1          	subsd  xmm0,xmm1
   195c2:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   195c6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   195ca:	89 90 80 1d 03 00    	mov    DWORD PTR [rax+0x31d80],edx
   195d0:	f2 0f 10 05 30 3c 1d 00 	movsd  xmm0,QWORD PTR [rip+0x1d3c30]        # 1ed208 <lxc37>
   195d8:	f2 0f 59 45 d8       	mulsd  xmm0,QWORD PTR [rbp-0x28]
   195dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   195e1:	f2 0f 11 80 90 1d 03 00 	movsd  QWORD PTR [rax+0x31d90],xmm0
   195e9:	8b 05 51 3c 1d 00    	mov    eax,DWORD PTR [rip+0x1d3c51]        # 1ed240 <TripleCdH>
   195ef:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   195f3:	8b 15 47 3c 1d 00    	mov    edx,DWORD PTR [rip+0x1d3c47]        # 1ed240 <TripleCdH>
   195f9:	8b 05 3d 3c 1d 00    	mov    eax,DWORD PTR [rip+0x1d3c3d]        # 1ed23c <TripleC37>
   195ff:	29 c2                	sub    edx,eax
   19601:	89 d0                	mov    eax,edx
   19603:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19607:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1960c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19610:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19614:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19618:	89 90 b8 2f 03 00    	mov    DWORD PTR [rax+0x32fb8],edx
   1961e:	8b 05 24 3c 1d 00    	mov    eax,DWORD PTR [rip+0x1d3c24]        # 1ed248 <MultipleCAdH>
   19624:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19628:	8b 15 1a 3c 1d 00    	mov    edx,DWORD PTR [rip+0x1d3c1a]        # 1ed248 <MultipleCAdH>
   1962e:	8b 05 10 3c 1d 00    	mov    eax,DWORD PTR [rip+0x1d3c10]        # 1ed244 <MultipleCA37>
   19634:	29 c2                	sub    edx,eax
   19636:	89 d0                	mov    eax,edx
   19638:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1963c:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19641:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19645:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19649:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1964d:	89 90 bc 2f 03 00    	mov    DWORD PTR [rax+0x32fbc],edx
   19653:	8b 05 f7 3b 1d 00    	mov    eax,DWORD PTR [rip+0x1d3bf7]        # 1ed250 <MultipleCBdH>
   19659:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1965d:	8b 15 ed 3b 1d 00    	mov    edx,DWORD PTR [rip+0x1d3bed]        # 1ed250 <MultipleCBdH>
   19663:	8b 05 e3 3b 1d 00    	mov    eax,DWORD PTR [rip+0x1d3be3]        # 1ed24c <MultipleCB37>
   19669:	29 c2                	sub    edx,eax
   1966b:	89 d0                	mov    eax,edx
   1966d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19671:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19676:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1967a:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   1967e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19682:	89 90 c0 2f 03 00    	mov    DWORD PTR [rax+0x32fc0],edx
   19688:	8b 05 a2 3b 1d 00    	mov    eax,DWORD PTR [rip+0x1d3ba2]        # 1ed230 <TerminalAUdH>
   1968e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19692:	8b 15 98 3b 1d 00    	mov    edx,DWORD PTR [rip+0x1d3b98]        # 1ed230 <TerminalAUdH>
   19698:	8b 05 8e 3b 1d 00    	mov    eax,DWORD PTR [rip+0x1d3b8e]        # 1ed22c <TerminalAU37>
   1969e:	29 c2                	sub    edx,eax
   196a0:	89 d0                	mov    eax,edx
   196a2:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   196a6:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   196ab:	f2 0f 5c c1          	subsd  xmm0,xmm1
   196af:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   196b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   196b7:	89 90 d4 1d 03 00    	mov    DWORD PTR [rax+0x31dd4],edx
   196bd:	8b 05 75 3b 1d 00    	mov    eax,DWORD PTR [rip+0x1d3b75]        # 1ed238 <DuplexInitdH>
   196c3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   196c7:	8b 15 6b 3b 1d 00    	mov    edx,DWORD PTR [rip+0x1d3b6b]        # 1ed238 <DuplexInitdH>
   196cd:	8b 05 61 3b 1d 00    	mov    eax,DWORD PTR [rip+0x1d3b61]        # 1ed234 <DuplexInit37>
   196d3:	29 c2                	sub    edx,eax
   196d5:	89 d0                	mov    eax,edx
   196d7:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   196db:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   196e0:	f2 0f 5c c1          	subsd  xmm0,xmm1
   196e4:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   196e8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   196ec:	89 90 d8 1d 03 00    	mov    DWORD PTR [rax+0x31dd8],edx
   196f2:	8b 05 f8 92 23 00    	mov    eax,DWORD PTR [rip+0x2392f8]        # 2529f0 <ML_BASEdH>
   196f8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   196fc:	8b 15 ee 92 23 00    	mov    edx,DWORD PTR [rip+0x2392ee]        # 2529f0 <ML_BASEdH>
   19702:	8b 05 e4 92 23 00    	mov    eax,DWORD PTR [rip+0x2392e4]        # 2529ec <ML_BASE37>
   19708:	29 c2                	sub    edx,eax
   1970a:	89 d0                	mov    eax,edx
   1970c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19710:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19715:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19719:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   1971d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19721:	89 90 98 1d 03 00    	mov    DWORD PTR [rax+0x31d98],edx
   19727:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1972b:	c7 80 c0 1d 03 00 c0 03 00 00 	mov    DWORD PTR [rax+0x31dc0],0x3c0
   19735:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19739:	c7 80 c4 1d 03 00 dc 05 00 00 	mov    DWORD PTR [rax+0x31dc4],0x5dc
   19743:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19747:	c7 80 c8 1d 03 00 14 00 00 00 	mov    DWORD PTR [rax+0x31dc8],0x14
   19751:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19755:	c7 80 cc 1d 03 00 0a 00 00 00 	mov    DWORD PTR [rax+0x31dcc],0xa
   1975f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19763:	c7 80 d0 1d 03 00 0a 00 00 00 	mov    DWORD PTR [rax+0x31dd0],0xa
   1976d:	8b 05 a9 3a 1d 00    	mov    eax,DWORD PTR [rip+0x1d3aa9]        # 1ed21c <ML_closingdH>
   19773:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19777:	8b 15 9f 3a 1d 00    	mov    edx,DWORD PTR [rip+0x1d3a9f]        # 1ed21c <ML_closingdH>
   1977d:	8b 05 95 3a 1d 00    	mov    eax,DWORD PTR [rip+0x1d3a95]        # 1ed218 <ML_closing37>
   19783:	29 c2                	sub    edx,eax
   19785:	89 d0                	mov    eax,edx
   19787:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1978b:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19790:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19794:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19798:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1979c:	89 90 bc 1d 03 00    	mov    DWORD PTR [rax+0x31dbc],edx
   197a2:	8b 05 50 92 23 00    	mov    eax,DWORD PTR [rip+0x239250]        # 2529f8 <GQuadLayerMismatchH>
   197a8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   197ac:	8b 15 46 92 23 00    	mov    edx,DWORD PTR [rip+0x239246]        # 2529f8 <GQuadLayerMismatchH>
   197b2:	8b 05 a8 3a 1d 00    	mov    eax,DWORD PTR [rip+0x1d3aa8]        # 1ed260 <GQuadLayerMismatch37>
   197b8:	29 c2                	sub    edx,eax
   197ba:	89 d0                	mov    eax,edx
   197bc:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   197c0:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   197c5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   197c9:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   197cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   197d1:	89 90 84 35 03 00    	mov    DWORD PTR [rax+0x33584],edx
   197d7:	8b 15 87 3a 1d 00    	mov    edx,DWORD PTR [rip+0x1d3a87]        # 1ed264 <GQuadLayerMismatchMax>
   197dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   197e1:	89 90 88 35 03 00    	mov    DWORD PTR [rax+0x33588],edx
   197e7:	c7 45 ac 02 00 00 00 	mov    DWORD PTR [rbp-0x54],0x2
   197ee:	e9 e3 00 00 00       	jmp    198d6 <get_scaled_params+0x3fe>
   197f3:	c7 45 b0 03 00 00 00 	mov    DWORD PTR [rbp-0x50],0x3
   197fa:	e9 c9 00 00 00       	jmp    198c8 <get_scaled_params+0x3f0>
   197ff:	8b 05 53 3a 1d 00    	mov    eax,DWORD PTR [rip+0x1d3a53]        # 1ed258 <GQuadAlphadH>
   19805:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19809:	8b 15 49 3a 1d 00    	mov    edx,DWORD PTR [rip+0x1d3a49]        # 1ed258 <GQuadAlphadH>
   1980f:	8b 05 3f 3a 1d 00    	mov    eax,DWORD PTR [rip+0x1d3a3f]        # 1ed254 <GQuadAlpha37>
   19815:	29 c2                	sub    edx,eax
   19817:	89 d0                	mov    eax,edx
   19819:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1981d:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19822:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19826:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   1982b:	8b 05 c3 91 23 00    	mov    eax,DWORD PTR [rip+0x2391c3]        # 2529f4 <GQuadBetadH>
   19831:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19835:	8b 15 b9 91 23 00    	mov    edx,DWORD PTR [rip+0x2391b9]        # 2529f4 <GQuadBetadH>
   1983b:	8b 05 1b 3a 1d 00    	mov    eax,DWORD PTR [rip+0x1d3a1b]        # 1ed25c <GQuadBeta37>
   19841:	29 c2                	sub    edx,eax
   19843:	89 d0                	mov    eax,edx
   19845:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19849:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1984e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19852:	f2 0f 11 45 e8       	movsd  QWORD PTR [rbp-0x18],xmm0
   19857:	f2 0f 10 45 e0       	movsd  xmm0,QWORD PTR [rbp-0x20]
   1985c:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   19860:	89 c2                	mov    edx,eax
   19862:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19865:	83 e8 01             	sub    eax,0x1
   19868:	89 d3                	mov    ebx,edx
   1986a:	0f af d8             	imul   ebx,eax
   1986d:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   19870:	83 e8 02             	sub    eax,0x2
   19873:	89 c0                	mov    eax,eax
   19875:	48 85 c0             	test   rax,rax
   19878:	78 07                	js     19881 <get_scaled_params+0x3a9>
   1987a:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1987f:	eb 15                	jmp    19896 <get_scaled_params+0x3be>
   19881:	48 89 c2             	mov    rdx,rax
   19884:	48 d1 ea             	shr    rdx,1
   19887:	83 e0 01             	and    eax,0x1
   1988a:	48 09 c2             	or     rdx,rax
   1988d:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   19892:	f2 0f 58 c0          	addsd  xmm0,xmm0
   19896:	e8 85 9f fe ff       	call   3820 <log@plt>
   1989b:	f2 0f 59 45 e8       	mulsd  xmm0,QWORD PTR [rbp-0x18]
   198a0:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   198a4:	01 d8                	add    eax,ebx
   198a6:	89 c6                	mov    esi,eax
   198a8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   198ac:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   198af:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   198b2:	48 6b c9 2e          	imul   rcx,rcx,0x2e
   198b6:	48 01 ca             	add    rdx,rcx
   198b9:	48 81 c2 f0 cb 00 00 	add    rdx,0xcbf0
   198c0:	89 74 90 04          	mov    DWORD PTR [rax+rdx*4+0x4],esi
   198c4:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   198c8:	83 7d b0 2d          	cmp    DWORD PTR [rbp-0x50],0x2d
   198cc:	0f 86 2d ff ff ff    	jbe    197ff <get_scaled_params+0x327>
   198d2:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   198d6:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   198da:	0f 86 13 ff ff ff    	jbe    197f3 <get_scaled_params+0x31b>
   198e0:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   198e7:	eb 6b                	jmp    19954 <get_scaled_params+0x47c>
   198e9:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   198ec:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   198f4:	48 8d 05 05 3c 1d 00 	lea    rax,[rip+0x1d3c05]        # 1ed500 <hairpindH>
   198fb:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   198fe:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19902:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19905:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1990d:	48 8d 05 ec 3b 1d 00 	lea    rax,[rip+0x1d3bec]        # 1ed500 <hairpindH>
   19914:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   19917:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1991a:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   19922:	48 8d 05 57 3b 1d 00 	lea    rax,[rip+0x1d3b57]        # 1ed480 <hairpin37>
   19929:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1992c:	29 c2                	sub    edx,eax
   1992e:	89 d0                	mov    eax,edx
   19930:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19934:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19939:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1993d:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19941:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19945:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19948:	48 83 c1 40          	add    rcx,0x40
   1994c:	89 54 88 04          	mov    DWORD PTR [rax+rcx*4+0x4],edx
   19950:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19954:	83 7d ac 1e          	cmp    DWORD PTR [rbp-0x54],0x1e
   19958:	76 8f                	jbe    198e9 <get_scaled_params+0x411>
   1995a:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19961:	e9 d1 00 00 00       	jmp    19a37 <get_scaled_params+0x55f>
   19966:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19969:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19971:	48 8d 05 88 3c 1d 00 	lea    rax,[rip+0x1d3c88]        # 1ed600 <bulgedH>
   19978:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1997b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1997f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19982:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1998a:	48 8d 05 6f 3c 1d 00 	lea    rax,[rip+0x1d3c6f]        # 1ed600 <bulgedH>
   19991:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   19994:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19997:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1999f:	48 8d 05 da 3b 1d 00 	lea    rax,[rip+0x1d3bda]        # 1ed580 <bulge37>
   199a6:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   199a9:	29 c2                	sub    edx,eax
   199ab:	89 d0                	mov    eax,edx
   199ad:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   199b1:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   199b6:	f2 0f 5c c1          	subsd  xmm0,xmm1
   199ba:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   199be:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   199c2:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   199c5:	48 83 c1 60          	add    rcx,0x60
   199c9:	89 14 88             	mov    DWORD PTR [rax+rcx*4],edx
   199cc:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   199cf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   199d7:	48 8d 05 22 3d 1d 00 	lea    rax,[rip+0x1d3d22]        # 1ed700 <internal_loopdH>
   199de:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   199e1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   199e5:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   199e8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   199f0:	48 8d 05 09 3d 1d 00 	lea    rax,[rip+0x1d3d09]        # 1ed700 <internal_loopdH>
   199f7:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   199fa:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   199fd:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   19a05:	48 8d 05 74 3c 1d 00 	lea    rax,[rip+0x1d3c74]        # 1ed680 <internal_loop37>
   19a0c:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   19a0f:	29 c2                	sub    edx,eax
   19a11:	89 d0                	mov    eax,edx
   19a13:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19a17:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19a1c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19a20:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19a24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19a28:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19a2b:	48 83 c1 7c          	add    rcx,0x7c
   19a2f:	89 54 88 0c          	mov    DWORD PTR [rax+rcx*4+0xc],edx
   19a33:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19a37:	83 7d ac 1e          	cmp    DWORD PTR [rbp-0x54],0x1e
   19a3b:	0f 86 25 ff ff ff    	jbe    19966 <get_scaled_params+0x48e>
   19a41:	e9 d9 00 00 00       	jmp    19b1f <get_scaled_params+0x647>
   19a46:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19a4a:	8b 98 f8 01 00 00    	mov    ebx,DWORD PTR [rax+0x1f8]
   19a50:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19a54:	f2 0f 10 90 90 1d 03 00 	movsd  xmm2,QWORD PTR [rax+0x31d90]
   19a5c:	f2 0f 11 55 90       	movsd  QWORD PTR [rbp-0x70],xmm2
   19a61:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19a64:	48 85 c0             	test   rax,rax
   19a67:	78 07                	js     19a70 <get_scaled_params+0x598>
   19a69:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   19a6e:	eb 15                	jmp    19a85 <get_scaled_params+0x5ad>
   19a70:	48 89 c2             	mov    rdx,rax
   19a73:	48 d1 ea             	shr    rdx,1
   19a76:	83 e0 01             	and    eax,0x1
   19a79:	48 09 c2             	or     rdx,rax
   19a7c:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   19a81:	f2 0f 58 c0          	addsd  xmm0,xmm0
   19a85:	f2 0f 10 0d 2b b4 01 00 	movsd  xmm1,QWORD PTR [rip+0x1b42b]        # 34eb8 <Law_and_Order+0x618>
   19a8d:	f2 0f 5e c1          	divsd  xmm0,xmm1
   19a91:	e8 8a 9d fe ff       	call   3820 <log@plt>
   19a96:	f2 0f 59 45 90       	mulsd  xmm0,QWORD PTR [rbp-0x70]
   19a9b:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   19a9f:	8d 0c 03             	lea    ecx,[rbx+rax*1]
   19aa2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19aa6:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19aa9:	48 83 c2 60          	add    rdx,0x60
   19aad:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
   19ab0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19ab4:	8b 98 74 02 00 00    	mov    ebx,DWORD PTR [rax+0x274]
   19aba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19abe:	f2 0f 10 a0 90 1d 03 00 	movsd  xmm4,QWORD PTR [rax+0x31d90]
   19ac6:	f2 0f 11 65 90       	movsd  QWORD PTR [rbp-0x70],xmm4
   19acb:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19ace:	48 85 c0             	test   rax,rax
   19ad1:	78 07                	js     19ada <get_scaled_params+0x602>
   19ad3:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   19ad8:	eb 15                	jmp    19aef <get_scaled_params+0x617>
   19ada:	48 89 c2             	mov    rdx,rax
   19add:	48 d1 ea             	shr    rdx,1
   19ae0:	83 e0 01             	and    eax,0x1
   19ae3:	48 09 c2             	or     rdx,rax
   19ae6:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   19aeb:	f2 0f 58 c0          	addsd  xmm0,xmm0
   19aef:	f2 0f 10 0d c1 b3 01 00 	movsd  xmm1,QWORD PTR [rip+0x1b3c1]        # 34eb8 <Law_and_Order+0x618>
   19af7:	f2 0f 5e c1          	divsd  xmm0,xmm1
   19afb:	e8 20 9d fe ff       	call   3820 <log@plt>
   19b00:	f2 0f 59 45 90       	mulsd  xmm0,QWORD PTR [rbp-0x70]
   19b05:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   19b09:	8d 0c 03             	lea    ecx,[rbx+rax*1]
   19b0c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19b10:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19b13:	48 83 c2 7c          	add    rdx,0x7c
   19b17:	89 4c 90 0c          	mov    DWORD PTR [rax+rdx*4+0xc],ecx
   19b1b:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19b1f:	83 7d ac 1e          	cmp    DWORD PTR [rbp-0x54],0x1e
   19b23:	0f 86 1d ff ff ff    	jbe    19a46 <get_scaled_params+0x56e>
   19b29:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19b30:	eb 6e                	jmp    19ba0 <get_scaled_params+0x6c8>
   19b32:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19b35:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19b3d:	48 8d 05 3c 68 1d 00 	lea    rax,[rip+0x1d683c]        # 1f0380 <TetraloopdH>
   19b44:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19b47:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19b4b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19b4e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19b56:	48 8d 05 23 68 1d 00 	lea    rax,[rip+0x1d6823]        # 1f0380 <TetraloopdH>
   19b5d:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   19b60:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19b63:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   19b6b:	48 8d 05 6e 67 1d 00 	lea    rax,[rip+0x1d676e]        # 1f02e0 <Tetraloop37>
   19b72:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   19b75:	29 c2                	sub    edx,eax
   19b77:	89 d0                	mov    eax,edx
   19b79:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19b7d:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19b82:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19b86:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19b8a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19b8e:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19b91:	48 81 c1 74 c7 00 00 	add    rcx,0xc774
   19b98:	89 54 88 0c          	mov    DWORD PTR [rax+rcx*4+0xc],edx
   19b9c:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19ba0:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19ba3:	89 d0                	mov    eax,edx
   19ba5:	c1 e0 03             	shl    eax,0x3
   19ba8:	29 d0                	sub    eax,edx
   19baa:	89 c3                	mov    ebx,eax
   19bac:	48 8d 3d 0d 66 1d 00 	lea    rdi,[rip+0x1d660d]        # 1f01c0 <Tetraloops>
   19bb3:	e8 68 9b fe ff       	call   3720 <strlen@plt>
   19bb8:	48 39 c3             	cmp    rbx,rax
   19bbb:	0f 82 71 ff ff ff    	jb     19b32 <get_scaled_params+0x65a>
   19bc1:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19bc8:	eb 6e                	jmp    19c38 <get_scaled_params+0x760>
   19bca:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19bcd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19bd5:	48 8d 05 44 65 1d 00 	lea    rax,[rip+0x1d6544]        # 1f0120 <TriloopdH>
   19bdc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19bdf:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19be3:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19be6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19bee:	48 8d 05 2b 65 1d 00 	lea    rax,[rip+0x1d652b]        # 1f0120 <TriloopdH>
   19bf5:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   19bf8:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19bfb:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   19c03:	48 8d 05 76 64 1d 00 	lea    rax,[rip+0x1d6476]        # 1f0080 <Triloop37>
   19c0a:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   19c0d:	29 c2                	sub    edx,eax
   19c0f:	89 d0                	mov    eax,edx
   19c11:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19c15:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19c1a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19c1e:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19c22:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19c26:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19c29:	48 81 c1 9c c9 00 00 	add    rcx,0xc99c
   19c30:	89 54 88 08          	mov    DWORD PTR [rax+rcx*4+0x8],edx
   19c34:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19c38:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19c3b:	89 d0                	mov    eax,edx
   19c3d:	c1 e0 02             	shl    eax,0x2
   19c40:	01 d0                	add    eax,edx
   19c42:	89 c3                	mov    ebx,eax
   19c44:	48 8d 3d 35 63 1d 00 	lea    rdi,[rip+0x1d6335]        # 1eff80 <Triloops>
   19c4b:	e8 d0 9a fe ff       	call   3720 <strlen@plt>
   19c50:	48 39 c3             	cmp    rbx,rax
   19c53:	0f 82 71 ff ff ff    	jb     19bca <get_scaled_params+0x6f2>
   19c59:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19c60:	eb 6e                	jmp    19cd0 <get_scaled_params+0x7f8>
   19c62:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19c65:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19c6d:	48 8d 05 cc 69 1d 00 	lea    rax,[rip+0x1d69cc]        # 1f0640 <HexaloopdH>
   19c74:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19c77:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19c7b:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19c7e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19c86:	48 8d 05 b3 69 1d 00 	lea    rax,[rip+0x1d69b3]        # 1f0640 <HexaloopdH>
   19c8d:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   19c90:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   19c93:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   19c9b:	48 8d 05 fe 68 1d 00 	lea    rax,[rip+0x1d68fe]        # 1f05a0 <Hexaloop37>
   19ca2:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   19ca5:	29 c2                	sub    edx,eax
   19ca7:	89 d0                	mov    eax,edx
   19ca9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19cad:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19cb2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19cb6:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19cba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19cbe:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19cc1:	48 81 c1 00 ca 00 00 	add    rcx,0xca00
   19cc8:	89 54 88 0c          	mov    DWORD PTR [rax+rcx*4+0xc],edx
   19ccc:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19cd0:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19cd3:	89 d0                	mov    eax,edx
   19cd5:	c1 e0 03             	shl    eax,0x3
   19cd8:	01 d0                	add    eax,edx
   19cda:	89 c3                	mov    ebx,eax
   19cdc:	48 8d 3d 3d 67 1d 00 	lea    rdi,[rip+0x1d673d]        # 1f0420 <Hexaloops>
   19ce3:	e8 38 9a fe ff       	call   3720 <strlen@plt>
   19ce8:	48 39 c3             	cmp    rbx,rax
   19ceb:	0f 82 71 ff ff ff    	jb     19c62 <get_scaled_params+0x78a>
   19cf1:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19cf8:	eb 41                	jmp    19d3b <get_scaled_params+0x863>
   19cfa:	8b 05 14 35 1d 00    	mov    eax,DWORD PTR [rip+0x1d3514]        # 1ed214 <ML_interndH>
   19d00:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19d04:	8b 15 0a 35 1d 00    	mov    edx,DWORD PTR [rip+0x1d350a]        # 1ed214 <ML_interndH>
   19d0a:	8b 05 00 35 1d 00    	mov    eax,DWORD PTR [rip+0x1d3500]        # 1ed210 <ML_intern37>
   19d10:	29 c2                	sub    edx,eax
   19d12:	89 d0                	mov    eax,edx
   19d14:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19d18:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19d1d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19d21:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19d25:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19d29:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19d2c:	48 81 c1 64 c7 00 00 	add    rcx,0xc764
   19d33:	89 54 88 0c          	mov    DWORD PTR [rax+rcx*4+0xc],edx
   19d37:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19d3b:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   19d3f:	76 b9                	jbe    19cfa <get_scaled_params+0x822>
   19d41:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19d48:	e9 a9 00 00 00       	jmp    19df6 <get_scaled_params+0x91e>
   19d4d:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   19d54:	e9 8f 00 00 00       	jmp    19de8 <get_scaled_params+0x910>
   19d59:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   19d5c:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19d5f:	48 c1 e2 03          	shl    rdx,0x3
   19d63:	48 01 d0             	add    rax,rdx
   19d66:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19d6e:	48 8d 05 0b 36 1d 00 	lea    rax,[rip+0x1d360b]        # 1ed380 <stackdH>
   19d75:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19d78:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19d7c:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   19d7f:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19d82:	48 c1 e2 03          	shl    rdx,0x3
   19d86:	48 01 d0             	add    rax,rdx
   19d89:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19d91:	48 8d 05 e8 35 1d 00 	lea    rax,[rip+0x1d35e8]        # 1ed380 <stackdH>
   19d98:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   19d9b:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   19d9e:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   19da1:	48 c1 e1 03          	shl    rcx,0x3
   19da5:	48 01 c8             	add    rax,rcx
   19da8:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   19db0:	48 8d 05 c9 34 1d 00 	lea    rax,[rip+0x1d34c9]        # 1ed280 <stack37>
   19db7:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   19dba:	29 c2                	sub    edx,eax
   19dbc:	89 d0                	mov    eax,edx
   19dbe:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19dc2:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19dc7:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19dcb:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   19dcf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19dd3:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19dd6:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   19dd9:	48 c1 e6 03          	shl    rsi,0x3
   19ddd:	48 01 f1             	add    rcx,rsi
   19de0:	89 54 88 04          	mov    DWORD PTR [rax+rcx*4+0x4],edx
   19de4:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   19de8:	83 7d b0 07          	cmp    DWORD PTR [rbp-0x50],0x7
   19dec:	0f 86 67 ff ff ff    	jbe    19d59 <get_scaled_params+0x881>
   19df2:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   19df6:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   19dfa:	0f 86 4d ff ff ff    	jbe    19d4d <get_scaled_params+0x875>
   19e00:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   19e07:	e9 ad 07 00 00       	jmp    1a5b9 <get_scaled_params+0x10e1>
   19e0c:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   19e13:	e9 93 07 00 00       	jmp    1a5ab <get_scaled_params+0x10d3>
   19e18:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   19e1f:	e9 79 07 00 00       	jmp    1a59d <get_scaled_params+0x10c5>
   19e24:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   19e27:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19e2a:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19e2d:	48 89 d0             	mov    rax,rdx
   19e30:	48 c1 e0 02          	shl    rax,0x2
   19e34:	48 01 d0             	add    rax,rdx
   19e37:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19e3f:	48 01 d0             	add    rax,rdx
   19e42:	48 89 ca             	mov    rdx,rcx
   19e45:	48 c1 e2 02          	shl    rdx,0x2
   19e49:	48 01 ca             	add    rdx,rcx
   19e4c:	48 01 d0             	add    rax,rdx
   19e4f:	48 01 f0             	add    rax,rsi
   19e52:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19e5a:	48 8d 05 3f 3c 1d 00 	lea    rax,[rip+0x1d3c3f]        # 1edaa0 <mismatchIdH>
   19e61:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19e64:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19e68:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   19e6b:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19e6e:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19e71:	48 89 d0             	mov    rax,rdx
   19e74:	48 c1 e0 02          	shl    rax,0x2
   19e78:	48 01 d0             	add    rax,rdx
   19e7b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19e83:	48 01 d0             	add    rax,rdx
   19e86:	48 89 ca             	mov    rdx,rcx
   19e89:	48 c1 e2 02          	shl    rdx,0x2
   19e8d:	48 01 ca             	add    rdx,rcx
   19e90:	48 01 d0             	add    rax,rdx
   19e93:	48 01 f0             	add    rax,rsi
   19e96:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19e9e:	48 8d 05 fb 3b 1d 00 	lea    rax,[rip+0x1d3bfb]        # 1edaa0 <mismatchIdH>
   19ea5:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   19ea8:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   19eab:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19eae:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19eb1:	48 89 d0             	mov    rax,rdx
   19eb4:	48 c1 e0 02          	shl    rax,0x2
   19eb8:	48 01 d0             	add    rax,rdx
   19ebb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19ec3:	48 01 d0             	add    rax,rdx
   19ec6:	48 89 ca             	mov    rdx,rcx
   19ec9:	48 c1 e2 02          	shl    rdx,0x2
   19ecd:	48 01 ca             	add    rdx,rcx
   19ed0:	48 01 d0             	add    rax,rdx
   19ed3:	48 01 f8             	add    rax,rdi
   19ed6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19ede:	48 8d 05 9b 38 1d 00 	lea    rax,[rip+0x1d389b]        # 1ed780 <mismatchI37>
   19ee5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19ee8:	29 c6                	sub    esi,eax
   19eea:	89 f0                	mov    eax,esi
   19eec:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   19ef0:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   19ef5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   19ef9:	f2 0f 2c f8          	cvttsd2si edi,xmm0
   19efd:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   19f01:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   19f05:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19f08:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19f0b:	48 89 d0             	mov    rax,rdx
   19f0e:	48 c1 e0 02          	shl    rax,0x2
   19f12:	48 01 d0             	add    rax,rdx
   19f15:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19f1d:	48 01 d0             	add    rax,rdx
   19f20:	48 89 ca             	mov    rdx,rcx
   19f23:	48 c1 e2 02          	shl    rdx,0x2
   19f27:	48 01 ca             	add    rdx,rcx
   19f2a:	48 01 d0             	add    rax,rdx
   19f2d:	4c 01 c0             	add    rax,r8
   19f30:	48 05 64 01 00 00    	add    rax,0x164
   19f36:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   19f3a:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   19f3d:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19f40:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19f43:	48 89 d0             	mov    rax,rdx
   19f46:	48 c1 e0 02          	shl    rax,0x2
   19f4a:	48 01 d0             	add    rax,rdx
   19f4d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19f55:	48 01 d0             	add    rax,rdx
   19f58:	48 89 ca             	mov    rdx,rcx
   19f5b:	48 c1 e2 02          	shl    rdx,0x2
   19f5f:	48 01 ca             	add    rdx,rcx
   19f62:	48 01 d0             	add    rax,rdx
   19f65:	48 01 f0             	add    rax,rsi
   19f68:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19f70:	48 8d 05 69 41 1d 00 	lea    rax,[rip+0x1d4169]        # 1ee0e0 <mismatchHdH>
   19f77:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19f7a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   19f7e:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   19f81:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19f84:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19f87:	48 89 d0             	mov    rax,rdx
   19f8a:	48 c1 e0 02          	shl    rax,0x2
   19f8e:	48 01 d0             	add    rax,rdx
   19f91:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19f99:	48 01 d0             	add    rax,rdx
   19f9c:	48 89 ca             	mov    rdx,rcx
   19f9f:	48 c1 e2 02          	shl    rdx,0x2
   19fa3:	48 01 ca             	add    rdx,rcx
   19fa6:	48 01 d0             	add    rax,rdx
   19fa9:	48 01 f0             	add    rax,rsi
   19fac:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19fb4:	48 8d 05 25 41 1d 00 	lea    rax,[rip+0x1d4125]        # 1ee0e0 <mismatchHdH>
   19fbb:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   19fbe:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   19fc1:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   19fc4:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   19fc7:	48 89 d0             	mov    rax,rdx
   19fca:	48 c1 e0 02          	shl    rax,0x2
   19fce:	48 01 d0             	add    rax,rdx
   19fd1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19fd9:	48 01 d0             	add    rax,rdx
   19fdc:	48 89 ca             	mov    rdx,rcx
   19fdf:	48 c1 e2 02          	shl    rdx,0x2
   19fe3:	48 01 ca             	add    rdx,rcx
   19fe6:	48 01 d0             	add    rax,rdx
   19fe9:	48 01 f8             	add    rax,rdi
   19fec:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19ff4:	48 8d 05 c5 3d 1d 00 	lea    rax,[rip+0x1d3dc5]        # 1eddc0 <mismatchH37>
   19ffb:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19ffe:	29 c6                	sub    esi,eax
   1a000:	89 f0                	mov    eax,esi
   1a002:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a006:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a00b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a00f:	f2 0f 2c f8          	cvttsd2si edi,xmm0
   1a013:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a017:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   1a01b:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a01e:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a021:	48 89 d0             	mov    rax,rdx
   1a024:	48 c1 e0 02          	shl    rax,0x2
   1a028:	48 01 d0             	add    rax,rdx
   1a02b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a033:	48 01 d0             	add    rax,rdx
   1a036:	48 89 ca             	mov    rdx,rcx
   1a039:	48 c1 e2 02          	shl    rdx,0x2
   1a03d:	48 01 ca             	add    rdx,rcx
   1a040:	48 01 d0             	add    rax,rdx
   1a043:	4c 01 c0             	add    rax,r8
   1a046:	48 05 bc 03 00 00    	add    rax,0x3bc
   1a04c:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   1a050:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a053:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a056:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a059:	48 89 d0             	mov    rax,rdx
   1a05c:	48 c1 e0 02          	shl    rax,0x2
   1a060:	48 01 d0             	add    rax,rdx
   1a063:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a06b:	48 01 d0             	add    rax,rdx
   1a06e:	48 89 ca             	mov    rdx,rcx
   1a071:	48 c1 e2 02          	shl    rdx,0x2
   1a075:	48 01 ca             	add    rdx,rcx
   1a078:	48 01 d0             	add    rax,rdx
   1a07b:	48 01 f0             	add    rax,rsi
   1a07e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a086:	48 8d 05 d3 4c 1d 00 	lea    rax,[rip+0x1d4cd3]        # 1eed60 <mismatch1nIdH>
   1a08d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a090:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a094:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a097:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a09a:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a09d:	48 89 d0             	mov    rax,rdx
   1a0a0:	48 c1 e0 02          	shl    rax,0x2
   1a0a4:	48 01 d0             	add    rax,rdx
   1a0a7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a0af:	48 01 d0             	add    rax,rdx
   1a0b2:	48 89 ca             	mov    rdx,rcx
   1a0b5:	48 c1 e2 02          	shl    rdx,0x2
   1a0b9:	48 01 ca             	add    rdx,rcx
   1a0bc:	48 01 d0             	add    rax,rdx
   1a0bf:	48 01 f0             	add    rax,rsi
   1a0c2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a0ca:	48 8d 05 8f 4c 1d 00 	lea    rax,[rip+0x1d4c8f]        # 1eed60 <mismatch1nIdH>
   1a0d1:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1a0d4:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a0d7:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a0da:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a0dd:	48 89 d0             	mov    rax,rdx
   1a0e0:	48 c1 e0 02          	shl    rax,0x2
   1a0e4:	48 01 d0             	add    rax,rdx
   1a0e7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a0ef:	48 01 d0             	add    rax,rdx
   1a0f2:	48 89 ca             	mov    rdx,rcx
   1a0f5:	48 c1 e2 02          	shl    rdx,0x2
   1a0f9:	48 01 ca             	add    rdx,rcx
   1a0fc:	48 01 d0             	add    rax,rdx
   1a0ff:	48 01 f8             	add    rax,rdi
   1a102:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a10a:	48 8d 05 2f 49 1d 00 	lea    rax,[rip+0x1d492f]        # 1eea40 <mismatch1nI37>
   1a111:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a114:	29 c6                	sub    esi,eax
   1a116:	89 f0                	mov    eax,esi
   1a118:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a11c:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a121:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a125:	f2 0f 2c f8          	cvttsd2si edi,xmm0
   1a129:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a12d:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   1a131:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a134:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a137:	48 89 d0             	mov    rax,rdx
   1a13a:	48 c1 e0 02          	shl    rax,0x2
   1a13e:	48 01 d0             	add    rax,rdx
   1a141:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a149:	48 01 d0             	add    rax,rdx
   1a14c:	48 89 ca             	mov    rdx,rcx
   1a14f:	48 c1 e2 02          	shl    rdx,0x2
   1a153:	48 01 ca             	add    rdx,rcx
   1a156:	48 01 d0             	add    rax,rdx
   1a159:	4c 01 c0             	add    rax,r8
   1a15c:	48 05 2c 02 00 00    	add    rax,0x22c
   1a162:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   1a166:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a169:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a16c:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a16f:	48 89 d0             	mov    rax,rdx
   1a172:	48 c1 e0 02          	shl    rax,0x2
   1a176:	48 01 d0             	add    rax,rdx
   1a179:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a181:	48 01 d0             	add    rax,rdx
   1a184:	48 89 ca             	mov    rdx,rcx
   1a187:	48 c1 e2 02          	shl    rdx,0x2
   1a18b:	48 01 ca             	add    rdx,rcx
   1a18e:	48 01 d0             	add    rax,rdx
   1a191:	48 01 f0             	add    rax,rsi
   1a194:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a19c:	48 8d 05 fd 51 1d 00 	lea    rax,[rip+0x1d51fd]        # 1ef3a0 <mismatch23IdH>
   1a1a3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a1a6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a1aa:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a1ad:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a1b0:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a1b3:	48 89 d0             	mov    rax,rdx
   1a1b6:	48 c1 e0 02          	shl    rax,0x2
   1a1ba:	48 01 d0             	add    rax,rdx
   1a1bd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a1c5:	48 01 d0             	add    rax,rdx
   1a1c8:	48 89 ca             	mov    rdx,rcx
   1a1cb:	48 c1 e2 02          	shl    rdx,0x2
   1a1cf:	48 01 ca             	add    rdx,rcx
   1a1d2:	48 01 d0             	add    rax,rdx
   1a1d5:	48 01 f0             	add    rax,rsi
   1a1d8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a1e0:	48 8d 05 b9 51 1d 00 	lea    rax,[rip+0x1d51b9]        # 1ef3a0 <mismatch23IdH>
   1a1e7:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1a1ea:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a1ed:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a1f0:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a1f3:	48 89 d0             	mov    rax,rdx
   1a1f6:	48 c1 e0 02          	shl    rax,0x2
   1a1fa:	48 01 d0             	add    rax,rdx
   1a1fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a205:	48 01 d0             	add    rax,rdx
   1a208:	48 89 ca             	mov    rdx,rcx
   1a20b:	48 c1 e2 02          	shl    rdx,0x2
   1a20f:	48 01 ca             	add    rdx,rcx
   1a212:	48 01 d0             	add    rax,rdx
   1a215:	48 01 f8             	add    rax,rdi
   1a218:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a220:	48 8d 05 59 4e 1d 00 	lea    rax,[rip+0x1d4e59]        # 1ef080 <mismatch23I37>
   1a227:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a22a:	29 c6                	sub    esi,eax
   1a22c:	89 f0                	mov    eax,esi
   1a22e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a232:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a237:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a23b:	f2 0f 2c f8          	cvttsd2si edi,xmm0
   1a23f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a243:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   1a247:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a24a:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a24d:	48 89 d0             	mov    rax,rdx
   1a250:	48 c1 e0 02          	shl    rax,0x2
   1a254:	48 01 d0             	add    rax,rdx
   1a257:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a25f:	48 01 d0             	add    rax,rdx
   1a262:	48 89 ca             	mov    rdx,rcx
   1a265:	48 c1 e2 02          	shl    rdx,0x2
   1a269:	48 01 ca             	add    rdx,rcx
   1a26c:	48 01 d0             	add    rax,rdx
   1a26f:	4c 01 c0             	add    rax,r8
   1a272:	48 05 f4 02 00 00    	add    rax,0x2f4
   1a278:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   1a27c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1a280:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   1a283:	85 c0                	test   eax,eax
   1a285:	0f 84 55 02 00 00    	je     1a4e0 <get_scaled_params+0x1008>
   1a28b:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a28e:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a291:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a294:	48 89 d0             	mov    rax,rdx
   1a297:	48 c1 e0 02          	shl    rax,0x2
   1a29b:	48 01 d0             	add    rax,rdx
   1a29e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a2a6:	48 01 d0             	add    rax,rdx
   1a2a9:	48 89 ca             	mov    rdx,rcx
   1a2ac:	48 c1 e2 02          	shl    rdx,0x2
   1a2b0:	48 01 ca             	add    rdx,rcx
   1a2b3:	48 01 d0             	add    rax,rdx
   1a2b6:	48 01 f0             	add    rax,rsi
   1a2b9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a2c1:	48 8d 05 58 44 1d 00 	lea    rax,[rip+0x1d4458]        # 1ee720 <mismatchMdH>
   1a2c8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a2cb:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a2cf:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a2d2:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a2d5:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a2d8:	48 89 d0             	mov    rax,rdx
   1a2db:	48 c1 e0 02          	shl    rax,0x2
   1a2df:	48 01 d0             	add    rax,rdx
   1a2e2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a2ea:	48 01 d0             	add    rax,rdx
   1a2ed:	48 89 ca             	mov    rdx,rcx
   1a2f0:	48 c1 e2 02          	shl    rdx,0x2
   1a2f4:	48 01 ca             	add    rdx,rcx
   1a2f7:	48 01 d0             	add    rax,rdx
   1a2fa:	48 01 f0             	add    rax,rsi
   1a2fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a305:	48 8d 05 14 44 1d 00 	lea    rax,[rip+0x1d4414]        # 1ee720 <mismatchMdH>
   1a30c:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1a30f:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a312:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a315:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a318:	48 89 d0             	mov    rax,rdx
   1a31b:	48 c1 e0 02          	shl    rax,0x2
   1a31f:	48 01 d0             	add    rax,rdx
   1a322:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a32a:	48 01 d0             	add    rax,rdx
   1a32d:	48 89 ca             	mov    rdx,rcx
   1a330:	48 c1 e2 02          	shl    rdx,0x2
   1a334:	48 01 ca             	add    rdx,rcx
   1a337:	48 01 d0             	add    rax,rdx
   1a33a:	48 01 f8             	add    rax,rdi
   1a33d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a345:	48 8d 05 b4 40 1d 00 	lea    rax,[rip+0x1d40b4]        # 1ee400 <mismatchM37>
   1a34c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a34f:	29 c6                	sub    esi,eax
   1a351:	89 f0                	mov    eax,esi
   1a353:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a357:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a35c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a360:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1a364:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1a367:	b8 00 00 00 00       	mov    eax,0x0
   1a36c:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1a370:	0f 4e 45 cc          	cmovle eax,DWORD PTR [rbp-0x34]
   1a374:	89 c7                	mov    edi,eax
   1a376:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a37a:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   1a37e:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a381:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a384:	48 89 d0             	mov    rax,rdx
   1a387:	48 c1 e0 02          	shl    rax,0x2
   1a38b:	48 01 d0             	add    rax,rdx
   1a38e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a396:	48 01 d0             	add    rax,rdx
   1a399:	48 89 ca             	mov    rdx,rcx
   1a39c:	48 c1 e2 02          	shl    rdx,0x2
   1a3a0:	48 01 ca             	add    rdx,rcx
   1a3a3:	48 01 d0             	add    rax,rdx
   1a3a6:	4c 01 c0             	add    rax,r8
   1a3a9:	48 05 84 04 00 00    	add    rax,0x484
   1a3af:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   1a3b3:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a3b6:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a3b9:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a3bc:	48 89 d0             	mov    rax,rdx
   1a3bf:	48 c1 e0 02          	shl    rax,0x2
   1a3c3:	48 01 d0             	add    rax,rdx
   1a3c6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a3ce:	48 01 d0             	add    rax,rdx
   1a3d1:	48 89 ca             	mov    rdx,rcx
   1a3d4:	48 c1 e2 02          	shl    rdx,0x2
   1a3d8:	48 01 ca             	add    rdx,rcx
   1a3db:	48 01 d0             	add    rax,rdx
   1a3de:	48 01 f0             	add    rax,rsi
   1a3e1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a3e9:	48 8d 05 f0 55 1d 00 	lea    rax,[rip+0x1d55f0]        # 1ef9e0 <mismatchExtdH>
   1a3f0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a3f3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a3f7:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a3fa:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a3fd:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a400:	48 89 d0             	mov    rax,rdx
   1a403:	48 c1 e0 02          	shl    rax,0x2
   1a407:	48 01 d0             	add    rax,rdx
   1a40a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a412:	48 01 d0             	add    rax,rdx
   1a415:	48 89 ca             	mov    rdx,rcx
   1a418:	48 c1 e2 02          	shl    rdx,0x2
   1a41c:	48 01 ca             	add    rdx,rcx
   1a41f:	48 01 d0             	add    rax,rdx
   1a422:	48 01 f0             	add    rax,rsi
   1a425:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a42d:	48 8d 05 ac 55 1d 00 	lea    rax,[rip+0x1d55ac]        # 1ef9e0 <mismatchExtdH>
   1a434:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1a437:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a43a:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a43d:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a440:	48 89 d0             	mov    rax,rdx
   1a443:	48 c1 e0 02          	shl    rax,0x2
   1a447:	48 01 d0             	add    rax,rdx
   1a44a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a452:	48 01 d0             	add    rax,rdx
   1a455:	48 89 ca             	mov    rdx,rcx
   1a458:	48 c1 e2 02          	shl    rdx,0x2
   1a45c:	48 01 ca             	add    rdx,rcx
   1a45f:	48 01 d0             	add    rax,rdx
   1a462:	48 01 f8             	add    rax,rdi
   1a465:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a46d:	48 8d 05 4c 52 1d 00 	lea    rax,[rip+0x1d524c]        # 1ef6c0 <mismatchExt37>
   1a474:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a477:	29 c6                	sub    esi,eax
   1a479:	89 f0                	mov    eax,esi
   1a47b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a47f:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a484:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a488:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1a48c:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1a48f:	b8 00 00 00 00       	mov    eax,0x0
   1a494:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1a498:	0f 4e 45 cc          	cmovle eax,DWORD PTR [rbp-0x34]
   1a49c:	89 c7                	mov    edi,eax
   1a49e:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a4a2:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   1a4a6:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a4a9:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a4ac:	48 89 d0             	mov    rax,rdx
   1a4af:	48 c1 e0 02          	shl    rax,0x2
   1a4b3:	48 01 d0             	add    rax,rdx
   1a4b6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a4be:	48 01 d0             	add    rax,rdx
   1a4c1:	48 89 ca             	mov    rdx,rcx
   1a4c4:	48 c1 e2 02          	shl    rdx,0x2
   1a4c8:	48 01 ca             	add    rdx,rcx
   1a4cb:	48 01 d0             	add    rax,rdx
   1a4ce:	4c 01 c0             	add    rax,r8
   1a4d1:	48 05 9c 00 00 00    	add    rax,0x9c
   1a4d7:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   1a4db:	e9 b9 00 00 00       	jmp    1a599 <get_scaled_params+0x10c1>
   1a4e0:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a4e4:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a4e7:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a4ea:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a4ed:	48 89 d0             	mov    rax,rdx
   1a4f0:	48 c1 e0 02          	shl    rax,0x2
   1a4f4:	48 01 d0             	add    rax,rdx
   1a4f7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a4ff:	48 01 d0             	add    rax,rdx
   1a502:	48 89 ca             	mov    rdx,rcx
   1a505:	48 c1 e2 02          	shl    rdx,0x2
   1a509:	48 01 ca             	add    rdx,rcx
   1a50c:	48 01 d0             	add    rax,rdx
   1a50f:	48 01 f8             	add    rax,rdi
   1a512:	48 05 9c 00 00 00    	add    rax,0x9c
   1a518:	c7 44 86 08 00 00 00 00 	mov    DWORD PTR [rsi+rax*4+0x8],0x0
   1a520:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a524:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a527:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a52a:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a52d:	48 89 d0             	mov    rax,rdx
   1a530:	48 c1 e0 02          	shl    rax,0x2
   1a534:	48 01 d0             	add    rax,rdx
   1a537:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a53f:	48 01 d0             	add    rax,rdx
   1a542:	48 89 ca             	mov    rdx,rcx
   1a545:	48 c1 e2 02          	shl    rdx,0x2
   1a549:	48 01 ca             	add    rdx,rcx
   1a54c:	48 01 d0             	add    rax,rdx
   1a54f:	48 01 f8             	add    rax,rdi
   1a552:	48 05 9c 00 00 00    	add    rax,0x9c
   1a558:	8b 7c 86 08          	mov    edi,DWORD PTR [rsi+rax*4+0x8]
   1a55c:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   1a560:	44 8b 45 b4          	mov    r8d,DWORD PTR [rbp-0x4c]
   1a564:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a567:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a56a:	48 89 d0             	mov    rax,rdx
   1a56d:	48 c1 e0 02          	shl    rax,0x2
   1a571:	48 01 d0             	add    rax,rdx
   1a574:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a57c:	48 01 d0             	add    rax,rdx
   1a57f:	48 89 ca             	mov    rdx,rcx
   1a582:	48 c1 e2 02          	shl    rdx,0x2
   1a586:	48 01 ca             	add    rdx,rcx
   1a589:	48 01 d0             	add    rax,rdx
   1a58c:	4c 01 c0             	add    rax,r8
   1a58f:	48 05 84 04 00 00    	add    rax,0x484
   1a595:	89 7c 86 08          	mov    DWORD PTR [rsi+rax*4+0x8],edi
   1a599:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   1a59d:	83 7d b4 04          	cmp    DWORD PTR [rbp-0x4c],0x4
   1a5a1:	0f 86 7d f8 ff ff    	jbe    19e24 <get_scaled_params+0x94c>
   1a5a7:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1a5ab:	83 7d b0 04          	cmp    DWORD PTR [rbp-0x50],0x4
   1a5af:	0f 86 63 f8 ff ff    	jbe    19e18 <get_scaled_params+0x940>
   1a5b5:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1a5b9:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   1a5bd:	0f 86 49 f8 ff ff    	jbe    19e0c <get_scaled_params+0x934>
   1a5c3:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1a5ca:	e9 94 01 00 00       	jmp    1a763 <get_scaled_params+0x128b>
   1a5cf:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1a5d6:	e9 7a 01 00 00       	jmp    1a755 <get_scaled_params+0x127d>
   1a5db:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a5de:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a5e1:	48 89 d0             	mov    rax,rdx
   1a5e4:	48 c1 e0 02          	shl    rax,0x2
   1a5e8:	48 01 d0             	add    rax,rdx
   1a5eb:	48 01 c8             	add    rax,rcx
   1a5ee:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a5f6:	48 8d 05 43 58 1d 00 	lea    rax,[rip+0x1d5843]        # 1efe40 <dangle5_dH>
   1a5fd:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a600:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a604:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a607:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a60a:	48 89 d0             	mov    rax,rdx
   1a60d:	48 c1 e0 02          	shl    rax,0x2
   1a611:	48 01 d0             	add    rax,rdx
   1a614:	48 01 c8             	add    rax,rcx
   1a617:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a61f:	48 8d 05 1a 58 1d 00 	lea    rax,[rip+0x1d581a]        # 1efe40 <dangle5_dH>
   1a626:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1a629:	8b 75 b0             	mov    esi,DWORD PTR [rbp-0x50]
   1a62c:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a62f:	48 89 d0             	mov    rax,rdx
   1a632:	48 c1 e0 02          	shl    rax,0x2
   1a636:	48 01 d0             	add    rax,rdx
   1a639:	48 01 f0             	add    rax,rsi
   1a63c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a644:	48 8d 05 b5 56 1d 00 	lea    rax,[rip+0x1d56b5]        # 1efd00 <dangle5_37>
   1a64b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a64e:	29 c1                	sub    ecx,eax
   1a650:	89 c8                	mov    eax,ecx
   1a652:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a656:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a65b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a65f:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1a663:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
   1a666:	b8 00 00 00 00       	mov    eax,0x0
   1a66b:	83 7d c8 00          	cmp    DWORD PTR [rbp-0x38],0x0
   1a66f:	0f 4e 45 c8          	cmovle eax,DWORD PTR [rbp-0x38]
   1a673:	89 c6                	mov    esi,eax
   1a675:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1a679:	8b 7d b0             	mov    edi,DWORD PTR [rbp-0x50]
   1a67c:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a67f:	48 89 d0             	mov    rax,rdx
   1a682:	48 c1 e0 02          	shl    rax,0x2
   1a686:	48 01 d0             	add    rax,rdx
   1a689:	48 01 f8             	add    rax,rdi
   1a68c:	48 05 4c 05 00 00    	add    rax,0x54c
   1a692:	89 74 81 08          	mov    DWORD PTR [rcx+rax*4+0x8],esi
   1a696:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a699:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a69c:	48 89 d0             	mov    rax,rdx
   1a69f:	48 c1 e0 02          	shl    rax,0x2
   1a6a3:	48 01 d0             	add    rax,rdx
   1a6a6:	48 01 c8             	add    rax,rcx
   1a6a9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a6b1:	48 8d 05 28 58 1d 00 	lea    rax,[rip+0x1d5828]        # 1efee0 <dangle3_dH>
   1a6b8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a6bb:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a6bf:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a6c2:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a6c5:	48 89 d0             	mov    rax,rdx
   1a6c8:	48 c1 e0 02          	shl    rax,0x2
   1a6cc:	48 01 d0             	add    rax,rdx
   1a6cf:	48 01 c8             	add    rax,rcx
   1a6d2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a6da:	48 8d 05 ff 57 1d 00 	lea    rax,[rip+0x1d57ff]        # 1efee0 <dangle3_dH>
   1a6e1:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1a6e4:	8b 75 b0             	mov    esi,DWORD PTR [rbp-0x50]
   1a6e7:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a6ea:	48 89 d0             	mov    rax,rdx
   1a6ed:	48 c1 e0 02          	shl    rax,0x2
   1a6f1:	48 01 d0             	add    rax,rdx
   1a6f4:	48 01 f0             	add    rax,rsi
   1a6f7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a6ff:	48 8d 05 9a 56 1d 00 	lea    rax,[rip+0x1d569a]        # 1efda0 <dangle3_37>
   1a706:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a709:	29 c1                	sub    ecx,eax
   1a70b:	89 c8                	mov    eax,ecx
   1a70d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a711:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a716:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a71a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1a71e:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
   1a721:	b8 00 00 00 00       	mov    eax,0x0
   1a726:	83 7d c8 00          	cmp    DWORD PTR [rbp-0x38],0x0
   1a72a:	0f 4e 45 c8          	cmovle eax,DWORD PTR [rbp-0x38]
   1a72e:	89 c6                	mov    esi,eax
   1a730:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1a734:	8b 7d b0             	mov    edi,DWORD PTR [rbp-0x50]
   1a737:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
   1a73a:	48 89 d0             	mov    rax,rdx
   1a73d:	48 c1 e0 02          	shl    rax,0x2
   1a741:	48 01 d0             	add    rax,rdx
   1a744:	48 01 f8             	add    rax,rdi
   1a747:	48 05 74 05 00 00    	add    rax,0x574
   1a74d:	89 74 81 08          	mov    DWORD PTR [rcx+rax*4+0x8],esi
   1a751:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1a755:	83 7d b0 04          	cmp    DWORD PTR [rbp-0x50],0x4
   1a759:	0f 86 7c fe ff ff    	jbe    1a5db <get_scaled_params+0x1103>
   1a75f:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1a763:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   1a767:	0f 86 62 fe ff ff    	jbe    1a5cf <get_scaled_params+0x10f7>
   1a76d:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1a774:	e9 e8 01 00 00       	jmp    1a961 <get_scaled_params+0x1489>
   1a779:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1a780:	e9 ce 01 00 00       	jmp    1a953 <get_scaled_params+0x147b>
   1a785:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   1a78c:	e9 b4 01 00 00       	jmp    1a945 <get_scaled_params+0x146d>
   1a791:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   1a798:	e9 9a 01 00 00       	jmp    1a937 <get_scaled_params+0x145f>
   1a79d:	8b 7d b8             	mov    edi,DWORD PTR [rbp-0x48]
   1a7a0:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a7a3:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
   1a7a6:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   1a7a9:	48 89 c2             	mov    rdx,rax
   1a7ac:	48 c1 e2 02          	shl    rdx,0x2
   1a7b0:	48 01 c2             	add    rdx,rax
   1a7b3:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1a7bb:	48 01 c2             	add    rdx,rax
   1a7be:	48 89 f0             	mov    rax,rsi
   1a7c1:	48 c1 e0 02          	shl    rax,0x2
   1a7c5:	48 01 f0             	add    rax,rsi
   1a7c8:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1a7d0:	48 01 f0             	add    rax,rsi
   1a7d3:	48 c1 e0 03          	shl    rax,0x3
   1a7d7:	48 01 c2             	add    rdx,rax
   1a7da:	48 89 c8             	mov    rax,rcx
   1a7dd:	48 c1 e0 02          	shl    rax,0x2
   1a7e1:	48 01 c8             	add    rax,rcx
   1a7e4:	48 01 d0             	add    rax,rdx
   1a7e7:	48 01 f8             	add    rax,rdi
   1a7ea:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a7f2:	48 8d 05 e7 77 1d 00 	lea    rax,[rip+0x1d77e7]        # 1f1fe0 <int11_dH>
   1a7f9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a7fc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1a800:	8b 7d b8             	mov    edi,DWORD PTR [rbp-0x48]
   1a803:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a806:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
   1a809:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   1a80c:	48 89 c2             	mov    rdx,rax
   1a80f:	48 c1 e2 02          	shl    rdx,0x2
   1a813:	48 01 c2             	add    rdx,rax
   1a816:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1a81e:	48 01 c2             	add    rdx,rax
   1a821:	48 89 f0             	mov    rax,rsi
   1a824:	48 c1 e0 02          	shl    rax,0x2
   1a828:	48 01 f0             	add    rax,rsi
   1a82b:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1a833:	48 01 f0             	add    rax,rsi
   1a836:	48 c1 e0 03          	shl    rax,0x3
   1a83a:	48 01 c2             	add    rdx,rax
   1a83d:	48 89 c8             	mov    rax,rcx
   1a840:	48 c1 e0 02          	shl    rax,0x2
   1a844:	48 01 c8             	add    rax,rcx
   1a847:	48 01 d0             	add    rax,rdx
   1a84a:	48 01 f8             	add    rax,rdi
   1a84d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a855:	48 8d 05 84 77 1d 00 	lea    rax,[rip+0x1d7784]        # 1f1fe0 <int11_dH>
   1a85c:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   1a85f:	44 8b 45 b8          	mov    r8d,DWORD PTR [rbp-0x48]
   1a863:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a866:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
   1a869:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   1a86c:	48 89 c2             	mov    rdx,rax
   1a86f:	48 c1 e2 02          	shl    rdx,0x2
   1a873:	48 01 c2             	add    rdx,rax
   1a876:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1a87e:	48 01 c2             	add    rdx,rax
   1a881:	48 89 f0             	mov    rax,rsi
   1a884:	48 c1 e0 02          	shl    rax,0x2
   1a888:	48 01 f0             	add    rax,rsi
   1a88b:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1a893:	48 01 f0             	add    rax,rsi
   1a896:	48 c1 e0 03          	shl    rax,0x3
   1a89a:	48 01 c2             	add    rdx,rax
   1a89d:	48 89 c8             	mov    rax,rcx
   1a8a0:	48 c1 e0 02          	shl    rax,0x2
   1a8a4:	48 01 c8             	add    rax,rcx
   1a8a7:	48 01 d0             	add    rax,rdx
   1a8aa:	4c 01 c0             	add    rax,r8
   1a8ad:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a8b5:	48 8d 05 24 5e 1d 00 	lea    rax,[rip+0x1d5e24]        # 1f06e0 <int11_37>
   1a8bc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1a8bf:	29 c7                	sub    edi,eax
   1a8c1:	89 f8                	mov    eax,edi
   1a8c3:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1a8c7:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1a8cc:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1a8d0:	f2 44 0f 2c c0       	cvttsd2si r8d,xmm0
   1a8d5:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
   1a8d9:	44 8b 4d b8          	mov    r9d,DWORD PTR [rbp-0x48]
   1a8dd:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   1a8e0:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a8e3:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   1a8e6:	48 89 d0             	mov    rax,rdx
   1a8e9:	48 c1 e0 02          	shl    rax,0x2
   1a8ed:	48 01 d0             	add    rax,rdx
   1a8f0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a8f8:	48 01 d0             	add    rax,rdx
   1a8fb:	48 89 f2             	mov    rdx,rsi
   1a8fe:	48 c1 e2 02          	shl    rdx,0x2
   1a902:	48 01 f2             	add    rdx,rsi
   1a905:	48 8d 34 10          	lea    rsi,[rax+rdx*1]
   1a909:	48 89 c8             	mov    rax,rcx
   1a90c:	48 c1 e0 02          	shl    rax,0x2
   1a910:	48 01 c8             	add    rax,rcx
   1a913:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1a91b:	48 01 d0             	add    rax,rdx
   1a91e:	48 c1 e0 03          	shl    rax,0x3
   1a922:	48 01 f0             	add    rax,rsi
   1a925:	4c 01 c8             	add    rax,r9
   1a928:	48 05 9c 05 00 00    	add    rax,0x59c
   1a92e:	44 89 44 87 08       	mov    DWORD PTR [rdi+rax*4+0x8],r8d
   1a933:	83 45 b8 01          	add    DWORD PTR [rbp-0x48],0x1
   1a937:	83 7d b8 04          	cmp    DWORD PTR [rbp-0x48],0x4
   1a93b:	0f 86 5c fe ff ff    	jbe    1a79d <get_scaled_params+0x12c5>
   1a941:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   1a945:	83 7d b4 04          	cmp    DWORD PTR [rbp-0x4c],0x4
   1a949:	0f 86 42 fe ff ff    	jbe    1a791 <get_scaled_params+0x12b9>
   1a94f:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1a953:	83 7d b0 07          	cmp    DWORD PTR [rbp-0x50],0x7
   1a957:	0f 86 28 fe ff ff    	jbe    1a785 <get_scaled_params+0x12ad>
   1a95d:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1a961:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   1a965:	0f 86 0e fe ff ff    	jbe    1a779 <get_scaled_params+0x12a1>
   1a96b:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1a972:	e9 26 02 00 00       	jmp    1ab9d <get_scaled_params+0x16c5>
   1a977:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1a97e:	e9 0c 02 00 00       	jmp    1ab8f <get_scaled_params+0x16b7>
   1a983:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   1a98a:	e9 f2 01 00 00       	jmp    1ab81 <get_scaled_params+0x16a9>
   1a98f:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   1a996:	e9 d8 01 00 00       	jmp    1ab73 <get_scaled_params+0x169b>
   1a99b:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
   1a9a2:	e9 be 01 00 00       	jmp    1ab65 <get_scaled_params+0x168d>
   1a9a7:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1a9aa:	48 63 f8             	movsxd rdi,eax
   1a9ad:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a9b0:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
   1a9b3:	44 8b 45 ac          	mov    r8d,DWORD PTR [rbp-0x54]
   1a9b7:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   1a9ba:	48 89 f0             	mov    rax,rsi
   1a9bd:	48 c1 e0 02          	shl    rax,0x2
   1a9c1:	48 01 f0             	add    rax,rsi
   1a9c4:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1a9cc:	48 01 f0             	add    rax,rsi
   1a9cf:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   1a9d6:	48 01 c6             	add    rsi,rax
   1a9d9:	48 89 d0             	mov    rax,rdx
   1a9dc:	48 c1 e0 05          	shl    rax,0x5
   1a9e0:	48 29 d0             	sub    rax,rdx
   1a9e3:	48 c1 e0 02          	shl    rax,0x2
   1a9e7:	48 01 d0             	add    rax,rdx
   1a9ea:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1a9ee:	48 89 c8             	mov    rax,rcx
   1a9f1:	48 c1 e0 02          	shl    rax,0x2
   1a9f5:	48 01 c8             	add    rax,rcx
   1a9f8:	48 01 d0             	add    rax,rdx
   1a9fb:	48 01 f8             	add    rax,rdi
   1a9fe:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1aa06:	48 8d 05 d3 0b 1e 00 	lea    rax,[rip+0x1e0bd3]        # 1fb5e0 <int21_dH>
   1aa0d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1aa10:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1aa14:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1aa17:	48 63 f8             	movsxd rdi,eax
   1aa1a:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1aa1d:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
   1aa20:	44 8b 45 ac          	mov    r8d,DWORD PTR [rbp-0x54]
   1aa24:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   1aa27:	48 89 f0             	mov    rax,rsi
   1aa2a:	48 c1 e0 02          	shl    rax,0x2
   1aa2e:	48 01 f0             	add    rax,rsi
   1aa31:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1aa39:	48 01 f0             	add    rax,rsi
   1aa3c:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   1aa43:	48 01 c6             	add    rsi,rax
   1aa46:	48 89 d0             	mov    rax,rdx
   1aa49:	48 c1 e0 05          	shl    rax,0x5
   1aa4d:	48 29 d0             	sub    rax,rdx
   1aa50:	48 c1 e0 02          	shl    rax,0x2
   1aa54:	48 01 d0             	add    rax,rdx
   1aa57:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1aa5b:	48 89 c8             	mov    rax,rcx
   1aa5e:	48 c1 e0 02          	shl    rax,0x2
   1aa62:	48 01 c8             	add    rax,rcx
   1aa65:	48 01 d0             	add    rax,rdx
   1aa68:	48 01 f8             	add    rax,rdi
   1aa6b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1aa73:	48 8d 05 66 0b 1e 00 	lea    rax,[rip+0x1e0b66]        # 1fb5e0 <int21_dH>
   1aa7a:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   1aa7d:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1aa80:	4c 63 c0             	movsxd r8,eax
   1aa83:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1aa86:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
   1aa89:	44 8b 4d ac          	mov    r9d,DWORD PTR [rbp-0x54]
   1aa8d:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   1aa90:	48 89 f0             	mov    rax,rsi
   1aa93:	48 c1 e0 02          	shl    rax,0x2
   1aa97:	48 01 f0             	add    rax,rsi
   1aa9a:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1aaa2:	48 01 f0             	add    rax,rsi
   1aaa5:	49 69 f1 e8 03 00 00 	imul   rsi,r9,0x3e8
   1aaac:	48 01 c6             	add    rsi,rax
   1aaaf:	48 89 d0             	mov    rax,rdx
   1aab2:	48 c1 e0 05          	shl    rax,0x5
   1aab6:	48 29 d0             	sub    rax,rdx
   1aab9:	48 c1 e0 02          	shl    rax,0x2
   1aabd:	48 01 d0             	add    rax,rdx
   1aac0:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1aac4:	48 89 c8             	mov    rax,rcx
   1aac7:	48 c1 e0 02          	shl    rax,0x2
   1aacb:	48 01 c8             	add    rax,rcx
   1aace:	48 01 d0             	add    rax,rdx
   1aad1:	4c 01 c0             	add    rax,r8
   1aad4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1aadc:	48 8d 05 fd 8d 1d 00 	lea    rax,[rip+0x1d8dfd]        # 1f38e0 <int21_37>
   1aae3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1aae6:	29 c7                	sub    edi,eax
   1aae8:	89 f8                	mov    eax,edi
   1aaea:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1aaee:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1aaf3:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1aaf7:	f2 44 0f 2c c0       	cvttsd2si r8d,xmm0
   1aafc:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
   1ab00:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1ab03:	4c 63 c8             	movsxd r9,eax
   1ab06:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1ab09:	8b 75 b8             	mov    esi,DWORD PTR [rbp-0x48]
   1ab0c:	44 8b 55 ac          	mov    r10d,DWORD PTR [rbp-0x54]
   1ab10:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1ab13:	48 89 d0             	mov    rax,rdx
   1ab16:	48 c1 e0 02          	shl    rax,0x2
   1ab1a:	48 01 d0             	add    rax,rdx
   1ab1d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ab25:	48 01 d0             	add    rax,rdx
   1ab28:	48 89 f2             	mov    rdx,rsi
   1ab2b:	48 c1 e2 02          	shl    rdx,0x2
   1ab2f:	48 01 f2             	add    rdx,rsi
   1ab32:	48 01 c2             	add    rdx,rax
   1ab35:	48 89 c8             	mov    rax,rcx
   1ab38:	48 c1 e0 05          	shl    rax,0x5
   1ab3c:	48 29 c8             	sub    rax,rcx
   1ab3f:	48 c1 e0 02          	shl    rax,0x2
   1ab43:	48 01 c8             	add    rax,rcx
   1ab46:	48 01 c2             	add    rdx,rax
   1ab49:	49 69 c2 e8 03 00 00 	imul   rax,r10,0x3e8
   1ab50:	48 01 d0             	add    rax,rdx
   1ab53:	4c 01 c8             	add    rax,r9
   1ab56:	48 05 dc 0b 00 00    	add    rax,0xbdc
   1ab5c:	44 89 44 87 08       	mov    DWORD PTR [rdi+rax*4+0x8],r8d
   1ab61:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
   1ab65:	83 7d bc 04          	cmp    DWORD PTR [rbp-0x44],0x4
   1ab69:	0f 8e 38 fe ff ff    	jle    1a9a7 <get_scaled_params+0x14cf>
   1ab6f:	83 45 b8 01          	add    DWORD PTR [rbp-0x48],0x1
   1ab73:	83 7d b8 04          	cmp    DWORD PTR [rbp-0x48],0x4
   1ab77:	0f 86 1e fe ff ff    	jbe    1a99b <get_scaled_params+0x14c3>
   1ab7d:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   1ab81:	83 7d b4 04          	cmp    DWORD PTR [rbp-0x4c],0x4
   1ab85:	0f 86 04 fe ff ff    	jbe    1a98f <get_scaled_params+0x14b7>
   1ab8b:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1ab8f:	83 7d b0 07          	cmp    DWORD PTR [rbp-0x50],0x7
   1ab93:	0f 86 ea fd ff ff    	jbe    1a983 <get_scaled_params+0x14ab>
   1ab99:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1ab9d:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   1aba1:	0f 86 d0 fd ff ff    	jbe    1a977 <get_scaled_params+0x149f>
   1aba7:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1abae:	e9 88 02 00 00       	jmp    1ae3b <get_scaled_params+0x1963>
   1abb3:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1abba:	e9 6e 02 00 00       	jmp    1ae2d <get_scaled_params+0x1955>
   1abbf:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   1abc6:	e9 54 02 00 00       	jmp    1ae1f <get_scaled_params+0x1947>
   1abcb:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   1abd2:	e9 3a 02 00 00       	jmp    1ae11 <get_scaled_params+0x1939>
   1abd7:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
   1abde:	e9 20 02 00 00       	jmp    1ae03 <get_scaled_params+0x192b>
   1abe3:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
   1abea:	e9 06 02 00 00       	jmp    1adf5 <get_scaled_params+0x191d>
   1abef:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1abf2:	48 63 f8             	movsxd rdi,eax
   1abf5:	8b 75 b8             	mov    esi,DWORD PTR [rbp-0x48]
   1abf8:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1abfb:	48 63 c8             	movsxd rcx,eax
   1abfe:	44 8b 45 b0          	mov    r8d,DWORD PTR [rbp-0x50]
   1ac02:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1ac05:	44 8b 4d ac          	mov    r9d,DWORD PTR [rbp-0x54]
   1ac09:	48 89 f0             	mov    rax,rsi
   1ac0c:	48 c1 e0 02          	shl    rax,0x2
   1ac10:	48 01 f0             	add    rax,rsi
   1ac13:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1ac1b:	48 01 f0             	add    rax,rsi
   1ac1e:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   1ac25:	48 01 c6             	add    rsi,rax
   1ac28:	48 89 c8             	mov    rax,rcx
   1ac2b:	48 c1 e0 02          	shl    rax,0x2
   1ac2f:	48 01 c8             	add    rax,rcx
   1ac32:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   1ac36:	48 89 d0             	mov    rax,rdx
   1ac39:	48 c1 e0 05          	shl    rax,0x5
   1ac3d:	48 29 d0             	sub    rax,rdx
   1ac40:	48 c1 e0 02          	shl    rax,0x2
   1ac44:	48 01 d0             	add    rax,rdx
   1ac47:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   1ac4b:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   1ac52:	48 01 d0             	add    rax,rdx
   1ac55:	48 01 f8             	add    rax,rdi
   1ac58:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ac60:	48 8d 05 79 f7 20 00 	lea    rax,[rip+0x20f779]        # 22a3e0 <int22_dH>
   1ac67:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ac6a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ac6e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1ac71:	48 63 f8             	movsxd rdi,eax
   1ac74:	8b 75 b8             	mov    esi,DWORD PTR [rbp-0x48]
   1ac77:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1ac7a:	48 63 c8             	movsxd rcx,eax
   1ac7d:	44 8b 45 b0          	mov    r8d,DWORD PTR [rbp-0x50]
   1ac81:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1ac84:	44 8b 4d ac          	mov    r9d,DWORD PTR [rbp-0x54]
   1ac88:	48 89 f0             	mov    rax,rsi
   1ac8b:	48 c1 e0 02          	shl    rax,0x2
   1ac8f:	48 01 f0             	add    rax,rsi
   1ac92:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1ac9a:	48 01 f0             	add    rax,rsi
   1ac9d:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   1aca4:	48 01 c6             	add    rsi,rax
   1aca7:	48 89 c8             	mov    rax,rcx
   1acaa:	48 c1 e0 02          	shl    rax,0x2
   1acae:	48 01 c8             	add    rax,rcx
   1acb1:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   1acb5:	48 89 d0             	mov    rax,rdx
   1acb8:	48 c1 e0 05          	shl    rax,0x5
   1acbc:	48 29 d0             	sub    rax,rdx
   1acbf:	48 c1 e0 02          	shl    rax,0x2
   1acc3:	48 01 d0             	add    rax,rdx
   1acc6:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   1acca:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   1acd1:	48 01 d0             	add    rax,rdx
   1acd4:	48 01 f8             	add    rax,rdi
   1acd7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1acdf:	48 8d 05 fa f6 20 00 	lea    rax,[rip+0x20f6fa]        # 22a3e0 <int22_dH>
   1ace6:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   1ace9:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1acec:	4c 63 c0             	movsxd r8,eax
   1acef:	8b 75 b8             	mov    esi,DWORD PTR [rbp-0x48]
   1acf2:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1acf5:	48 63 c8             	movsxd rcx,eax
   1acf8:	44 8b 4d b0          	mov    r9d,DWORD PTR [rbp-0x50]
   1acfc:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1acff:	44 8b 55 ac          	mov    r10d,DWORD PTR [rbp-0x54]
   1ad03:	48 89 f0             	mov    rax,rsi
   1ad06:	48 c1 e0 02          	shl    rax,0x2
   1ad0a:	48 01 f0             	add    rax,rsi
   1ad0d:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1ad15:	48 01 f0             	add    rax,rsi
   1ad18:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   1ad1f:	48 01 c6             	add    rsi,rax
   1ad22:	48 89 c8             	mov    rax,rcx
   1ad25:	48 c1 e0 02          	shl    rax,0x2
   1ad29:	48 01 c8             	add    rax,rcx
   1ad2c:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   1ad30:	48 89 d0             	mov    rax,rdx
   1ad33:	48 c1 e0 05          	shl    rax,0x5
   1ad37:	48 29 d0             	sub    rax,rdx
   1ad3a:	48 c1 e0 02          	shl    rax,0x2
   1ad3e:	48 01 d0             	add    rax,rdx
   1ad41:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   1ad45:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   1ad4c:	48 01 d0             	add    rax,rdx
   1ad4f:	4c 01 c0             	add    rax,r8
   1ad52:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ad5a:	48 8d 05 7f 85 1e 00 	lea    rax,[rip+0x1e857f]        # 2032e0 <int22_37>
   1ad61:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ad64:	29 c7                	sub    edi,eax
   1ad66:	89 f8                	mov    eax,edi
   1ad68:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ad6c:	f2 0f 59 4d d8       	mulsd  xmm1,QWORD PTR [rbp-0x28]
   1ad71:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ad75:	f2 44 0f 2c c0       	cvttsd2si r8d,xmm0
   1ad7a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
   1ad7e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1ad81:	4c 63 c8             	movsxd r9,eax
   1ad84:	8b 75 b8             	mov    esi,DWORD PTR [rbp-0x48]
   1ad87:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1ad8a:	48 63 c8             	movsxd rcx,eax
   1ad8d:	44 8b 5d b0          	mov    r11d,DWORD PTR [rbp-0x50]
   1ad91:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1ad94:	44 8b 55 ac          	mov    r10d,DWORD PTR [rbp-0x54]
   1ad98:	48 89 f0             	mov    rax,rsi
   1ad9b:	48 c1 e0 02          	shl    rax,0x2
   1ad9f:	48 01 f0             	add    rax,rsi
   1ada2:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1adaa:	48 01 f0             	add    rax,rsi
   1adad:	49 69 f3 71 02 00 00 	imul   rsi,r11,0x271
   1adb4:	48 01 c6             	add    rsi,rax
   1adb7:	48 89 d0             	mov    rax,rdx
   1adba:	48 c1 e0 05          	shl    rax,0x5
   1adbe:	48 29 d0             	sub    rax,rdx
   1adc1:	48 c1 e0 02          	shl    rax,0x2
   1adc5:	48 01 d0             	add    rax,rdx
   1adc8:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1adcc:	48 89 c8             	mov    rax,rcx
   1adcf:	48 c1 e0 02          	shl    rax,0x2
   1add3:	48 01 c8             	add    rax,rcx
   1add6:	48 01 c2             	add    rdx,rax
   1add9:	49 69 c2 88 13 00 00 	imul   rax,r10,0x1388
   1ade0:	48 01 d0             	add    rax,rdx
   1ade3:	4c 01 c8             	add    rax,r9
   1ade6:	48 05 1c 2b 00 00    	add    rax,0x2b1c
   1adec:	44 89 44 87 08       	mov    DWORD PTR [rdi+rax*4+0x8],r8d
   1adf1:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
   1adf5:	83 7d c4 04          	cmp    DWORD PTR [rbp-0x3c],0x4
   1adf9:	0f 8e f0 fd ff ff    	jle    1abef <get_scaled_params+0x1717>
   1adff:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
   1ae03:	83 7d c0 04          	cmp    DWORD PTR [rbp-0x40],0x4
   1ae07:	0f 8e d6 fd ff ff    	jle    1abe3 <get_scaled_params+0x170b>
   1ae0d:	83 45 b8 01          	add    DWORD PTR [rbp-0x48],0x1
   1ae11:	83 7d b8 04          	cmp    DWORD PTR [rbp-0x48],0x4
   1ae15:	0f 86 bc fd ff ff    	jbe    1abd7 <get_scaled_params+0x16ff>
   1ae1b:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   1ae1f:	83 7d b4 04          	cmp    DWORD PTR [rbp-0x4c],0x4
   1ae23:	0f 86 a2 fd ff ff    	jbe    1abcb <get_scaled_params+0x16f3>
   1ae29:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1ae2d:	83 7d b0 07          	cmp    DWORD PTR [rbp-0x50],0x7
   1ae31:	0f 86 88 fd ff ff    	jbe    1abbf <get_scaled_params+0x16e7>
   1ae37:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1ae3b:	83 7d ac 07          	cmp    DWORD PTR [rbp-0x54],0x7
   1ae3f:	0f 86 6e fd ff ff    	jbe    1abb3 <get_scaled_params+0x16db>
   1ae45:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1ae49:	48 05 fc 20 03 00    	add    rax,0x320fc
   1ae4f:	ba 19 01 00 00       	mov    edx,0x119
   1ae54:	48 8d 35 65 53 1d 00 	lea    rsi,[rip+0x1d5365]        # 1f01c0 <Tetraloops>
   1ae5b:	48 89 c7             	mov    rdi,rax
   1ae5e:	e8 0d 89 fe ff       	call   3770 <strncpy@plt>
   1ae63:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1ae67:	48 05 18 27 03 00    	add    rax,0x32718
   1ae6d:	ba f1 00 00 00       	mov    edx,0xf1
   1ae72:	48 8d 35 07 51 1d 00 	lea    rsi,[rip+0x1d5107]        # 1eff80 <Triloops>
   1ae79:	48 89 c7             	mov    rdi,rax
   1ae7c:	e8 ef 88 fe ff       	call   3770 <strncpy@plt>
   1ae81:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1ae85:	48 05 ac 28 03 00    	add    rax,0x328ac
   1ae8b:	ba 69 01 00 00       	mov    edx,0x169
   1ae90:	48 8d 35 89 55 1d 00 	lea    rsi,[rip+0x1d5589]        # 1f0420 <Hexaloops>
   1ae97:	48 89 c7             	mov    rdi,rax
   1ae9a:	e8 d1 88 fe ff       	call   3770 <strncpy@plt>
   1ae9f:	8b 05 3b 66 23 00    	mov    eax,DWORD PTR [rip+0x23663b]        # 2514e0 <id>
   1aea5:	83 c0 01             	add    eax,0x1
   1aea8:	89 05 32 66 23 00    	mov    DWORD PTR [rip+0x236632],eax        # 2514e0 <id>
   1aeae:	8b 15 2c 66 23 00    	mov    edx,DWORD PTR [rip+0x23662c]        # 2514e0 <id>
   1aeb4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1aeb8:	89 10                	mov    DWORD PTR [rax],edx
   1aeba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1aebe:	48 83 c4 68          	add    rsp,0x68
   1aec2:	5b                   	pop    rbx
   1aec3:	5d                   	pop    rbp
   1aec4:	c3                   	ret    

000000000001aec5 <get_scaled_exp_params>:
   1aec5:	f3 0f 1e fa          	endbr64 
   1aec9:	55                   	push   rbp
   1aeca:	48 89 e5             	mov    rbp,rsp
   1aecd:	53                   	push   rbx
   1aece:	48 83 ec 78          	sub    rsp,0x78
   1aed2:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   1aed6:	f2 0f 11 45 90       	movsd  QWORD PTR [rbp-0x70],xmm0
   1aedb:	bf 60 67 06 00       	mov    edi,0x66760
   1aee0:	e8 2c 3e 01 00       	call   2ed11 <vrna_alloc>
   1aee5:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1aee9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1aeed:	48 05 60 66 06 00    	add    rax,0x66660
   1aef3:	ba 00 01 00 00       	mov    edx,0x100
   1aef8:	be 00 00 00 00       	mov    esi,0x0
   1aefd:	48 89 c7             	mov    rdi,rax
   1af00:	e8 9b 88 fe ff       	call   37a0 <memset@plt>
   1af05:	e8 6d 0b 01 00       	call   2ba77 <last_parameter_file>
   1af0a:	48 85 c0             	test   rax,rax
   1af0d:	74 22                	je     1af31 <get_scaled_exp_params+0x6c>
   1af0f:	e8 63 0b 01 00       	call   2ba77 <last_parameter_file>
   1af14:	48 89 c1             	mov    rcx,rax
   1af17:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af1b:	48 05 60 66 06 00    	add    rax,0x66660
   1af21:	ba ff 00 00 00       	mov    edx,0xff
   1af26:	48 89 ce             	mov    rsi,rcx
   1af29:	48 89 c7             	mov    rdi,rax
   1af2c:	e8 3f 88 fe ff       	call   3770 <strncpy@plt>
   1af31:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af35:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   1af39:	48 05 78 5e 06 00    	add    rax,0x65e78
   1af3f:	48 89 d6             	mov    rsi,rdx
   1af42:	ba fd 00 00 00       	mov    edx,0xfd
   1af47:	48 89 c7             	mov    rdi,rax
   1af4a:	48 89 d1             	mov    rcx,rdx
   1af4d:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1af50:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1af54:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
   1af58:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af5c:	f2 0f 11 80 68 5e 06 00 	movsd  QWORD PTR [rax+0x65e68],xmm0
   1af64:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1af68:	f2 0f 10 40 08       	movsd  xmm0,QWORD PTR [rax+0x8]
   1af6d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af71:	f2 0f 11 80 70 5e 06 00 	movsd  QWORD PTR [rax+0x65e70],xmm0
   1af79:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1af7d:	f2 0f 10 48 08       	movsd  xmm1,QWORD PTR [rax+0x8]
   1af82:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1af86:	f2 0f 10 10          	movsd  xmm2,QWORD PTR [rax]
   1af8a:	f2 0f 10 05 1e 9f 01 00 	movsd  xmm0,QWORD PTR [rip+0x19f1e]        # 34eb0 <Law_and_Order+0x610>
   1af92:	f2 0f 58 c2          	addsd  xmm0,xmm2
   1af96:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   1af9a:	f2 0f 10 05 1e 9f 01 00 	movsd  xmm0,QWORD PTR [rip+0x19f1e]        # 34ec0 <Law_and_Order+0x620>
   1afa2:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1afa6:	f2 0f 11 45 c8       	movsd  QWORD PTR [rbp-0x38],xmm0
   1afab:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1afaf:	f2 0f 10 45 c8       	movsd  xmm0,QWORD PTR [rbp-0x38]
   1afb4:	f2 0f 11 80 58 5e 06 00 	movsd  QWORD PTR [rax+0x65e58],xmm0
   1afbc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1afc0:	f2 0f 10 45 90       	movsd  xmm0,QWORD PTR [rbp-0x70]
   1afc5:	f2 0f 11 80 60 5e 06 00 	movsd  QWORD PTR [rax+0x65e60],xmm0
   1afcd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1afd1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   1afd4:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   1afd7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1afdb:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
   1afdf:	f2 0f 10 05 c9 9e 01 00 	movsd  xmm0,QWORD PTR [rip+0x19ec9]        # 34eb0 <Law_and_Order+0x610>
   1afe7:	f2 0f 58 c1          	addsd  xmm0,xmm1
   1afeb:	f2 0f 10 0d 0d 22 1d 00 	movsd  xmm1,QWORD PTR [rip+0x1d220d]        # 1ed200 <Tmeasure>
   1aff3:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1aff7:	f2 0f 11 45 d0       	movsd  QWORD PTR [rbp-0x30],xmm0
   1affc:	f2 0f 10 05 04 22 1d 00 	movsd  xmm0,QWORD PTR [rip+0x1d2204]        # 1ed208 <lxc37>
   1b004:	f2 0f 59 45 d0       	mulsd  xmm0,QWORD PTR [rbp-0x30]
   1b009:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b00d:	f2 0f 11 80 c8 3f 06 00 	movsd  QWORD PTR [rax+0x63fc8],xmm0
   1b015:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b019:	75 3d                	jne    1b058 <get_scaled_exp_params+0x193>
   1b01b:	8b 05 17 22 1d 00    	mov    eax,DWORD PTR [rip+0x1d2217]        # 1ed238 <DuplexInitdH>
   1b021:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b025:	8b 15 0d 22 1d 00    	mov    edx,DWORD PTR [rip+0x1d220d]        # 1ed238 <DuplexInitdH>
   1b02b:	8b 05 03 22 1d 00    	mov    eax,DWORD PTR [rip+0x1d2203]        # 1ed234 <DuplexInit37>
   1b031:	29 c2                	sub    edx,eax
   1b033:	89 d0                	mov    eax,edx
   1b035:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b039:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b03e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b042:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b046:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b04a:	f3 0f 7e 0d 4e 9e 01 00 	movq   xmm1,QWORD PTR [rip+0x19e4e]        # 34ea0 <Law_and_Order+0x600>
   1b052:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b056:	eb 33                	jmp    1b08b <get_scaled_exp_params+0x1c6>
   1b058:	8b 05 da 21 1d 00    	mov    eax,DWORD PTR [rip+0x1d21da]        # 1ed238 <DuplexInitdH>
   1b05e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b062:	8b 15 d0 21 1d 00    	mov    edx,DWORD PTR [rip+0x1d21d0]        # 1ed238 <DuplexInitdH>
   1b068:	8b 05 c6 21 1d 00    	mov    eax,DWORD PTR [rip+0x1d21c6]        # 1ed234 <DuplexInit37>
   1b06e:	29 c2                	sub    edx,eax
   1b070:	89 d0                	mov    eax,edx
   1b072:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b076:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b07b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b07f:	f3 0f 7e 0d 19 9e 01 00 	movq   xmm1,QWORD PTR [rip+0x19e19]        # 34ea0 <Law_and_Order+0x600>
   1b087:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b08b:	f2 0f 10 0d 35 9e 01 00 	movsd  xmm1,QWORD PTR [rip+0x19e35]        # 34ec8 <Law_and_Order+0x628>
   1b093:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b097:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b09c:	e8 8f 8a fe ff       	call   3b30 <exp@plt>
   1b0a1:	66 48 0f 7e c0       	movq   rax,xmm0
   1b0a6:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b0aa:	48 89 82 28 40 06 00 	mov    QWORD PTR [rdx+0x64028],rax
   1b0b1:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b0b5:	75 3d                	jne    1b0f4 <get_scaled_exp_params+0x22f>
   1b0b7:	8b 05 73 21 1d 00    	mov    eax,DWORD PTR [rip+0x1d2173]        # 1ed230 <TerminalAUdH>
   1b0bd:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b0c1:	8b 15 69 21 1d 00    	mov    edx,DWORD PTR [rip+0x1d2169]        # 1ed230 <TerminalAUdH>
   1b0c7:	8b 05 5f 21 1d 00    	mov    eax,DWORD PTR [rip+0x1d215f]        # 1ed22c <TerminalAU37>
   1b0cd:	29 c2                	sub    edx,eax
   1b0cf:	89 d0                	mov    eax,edx
   1b0d1:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b0d5:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b0da:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b0de:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b0e2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b0e6:	f3 0f 7e 0d b2 9d 01 00 	movq   xmm1,QWORD PTR [rip+0x19db2]        # 34ea0 <Law_and_Order+0x600>
   1b0ee:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b0f2:	eb 33                	jmp    1b127 <get_scaled_exp_params+0x262>
   1b0f4:	8b 05 36 21 1d 00    	mov    eax,DWORD PTR [rip+0x1d2136]        # 1ed230 <TerminalAUdH>
   1b0fa:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b0fe:	8b 15 2c 21 1d 00    	mov    edx,DWORD PTR [rip+0x1d212c]        # 1ed230 <TerminalAUdH>
   1b104:	8b 05 22 21 1d 00    	mov    eax,DWORD PTR [rip+0x1d2122]        # 1ed22c <TerminalAU37>
   1b10a:	29 c2                	sub    edx,eax
   1b10c:	89 d0                	mov    eax,edx
   1b10e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b112:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b117:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b11b:	f3 0f 7e 0d 7d 9d 01 00 	movq   xmm1,QWORD PTR [rip+0x19d7d]        # 34ea0 <Law_and_Order+0x600>
   1b123:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b127:	f2 0f 10 0d 99 9d 01 00 	movsd  xmm1,QWORD PTR [rip+0x19d99]        # 34ec8 <Law_and_Order+0x628>
   1b12f:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b133:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b138:	e8 f3 89 fe ff       	call   3b30 <exp@plt>
   1b13d:	66 48 0f 7e c0       	movq   rax,xmm0
   1b142:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b146:	48 89 82 20 40 06 00 	mov    QWORD PTR [rdx+0x64020],rax
   1b14d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b151:	75 3d                	jne    1b190 <get_scaled_exp_params+0x2cb>
   1b153:	8b 05 97 78 23 00    	mov    eax,DWORD PTR [rip+0x237897]        # 2529f0 <ML_BASEdH>
   1b159:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b15d:	8b 15 8d 78 23 00    	mov    edx,DWORD PTR [rip+0x23788d]        # 2529f0 <ML_BASEdH>
   1b163:	8b 05 83 78 23 00    	mov    eax,DWORD PTR [rip+0x237883]        # 2529ec <ML_BASE37>
   1b169:	29 c2                	sub    edx,eax
   1b16b:	89 d0                	mov    eax,edx
   1b16d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b171:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b176:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b17a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b17e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b182:	f3 0f 7e 0d 16 9d 01 00 	movq   xmm1,QWORD PTR [rip+0x19d16]        # 34ea0 <Law_and_Order+0x600>
   1b18a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b18e:	eb 33                	jmp    1b1c3 <get_scaled_exp_params+0x2fe>
   1b190:	8b 05 5a 78 23 00    	mov    eax,DWORD PTR [rip+0x23785a]        # 2529f0 <ML_BASEdH>
   1b196:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b19a:	8b 15 50 78 23 00    	mov    edx,DWORD PTR [rip+0x237850]        # 2529f0 <ML_BASEdH>
   1b1a0:	8b 05 46 78 23 00    	mov    eax,DWORD PTR [rip+0x237846]        # 2529ec <ML_BASE37>
   1b1a6:	29 c2                	sub    edx,eax
   1b1a8:	89 d0                	mov    eax,edx
   1b1aa:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b1ae:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b1b3:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b1b7:	f3 0f 7e 0d e1 9c 01 00 	movq   xmm1,QWORD PTR [rip+0x19ce1]        # 34ea0 <Law_and_Order+0x600>
   1b1bf:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b1c3:	f2 0f 10 0d fd 9c 01 00 	movsd  xmm1,QWORD PTR [rip+0x19cfd]        # 34ec8 <Law_and_Order+0x628>
   1b1cb:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b1cf:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b1d4:	e8 57 89 fe ff       	call   3b30 <exp@plt>
   1b1d9:	66 48 0f 7e c0       	movq   rax,xmm0
   1b1de:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b1e2:	48 89 82 d0 3f 06 00 	mov    QWORD PTR [rdx+0x63fd0],rax
   1b1e9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b1ed:	75 3d                	jne    1b22c <get_scaled_exp_params+0x367>
   1b1ef:	8b 05 27 20 1d 00    	mov    eax,DWORD PTR [rip+0x1d2027]        # 1ed21c <ML_closingdH>
   1b1f5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b1f9:	8b 15 1d 20 1d 00    	mov    edx,DWORD PTR [rip+0x1d201d]        # 1ed21c <ML_closingdH>
   1b1ff:	8b 05 13 20 1d 00    	mov    eax,DWORD PTR [rip+0x1d2013]        # 1ed218 <ML_closing37>
   1b205:	29 c2                	sub    edx,eax
   1b207:	89 d0                	mov    eax,edx
   1b209:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b20d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b212:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b216:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b21a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b21e:	f3 0f 7e 0d 7a 9c 01 00 	movq   xmm1,QWORD PTR [rip+0x19c7a]        # 34ea0 <Law_and_Order+0x600>
   1b226:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b22a:	eb 33                	jmp    1b25f <get_scaled_exp_params+0x39a>
   1b22c:	8b 05 ea 1f 1d 00    	mov    eax,DWORD PTR [rip+0x1d1fea]        # 1ed21c <ML_closingdH>
   1b232:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b236:	8b 15 e0 1f 1d 00    	mov    edx,DWORD PTR [rip+0x1d1fe0]        # 1ed21c <ML_closingdH>
   1b23c:	8b 05 d6 1f 1d 00    	mov    eax,DWORD PTR [rip+0x1d1fd6]        # 1ed218 <ML_closing37>
   1b242:	29 c2                	sub    edx,eax
   1b244:	89 d0                	mov    eax,edx
   1b246:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b24a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b24f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b253:	f3 0f 7e 0d 45 9c 01 00 	movq   xmm1,QWORD PTR [rip+0x19c45]        # 34ea0 <Law_and_Order+0x600>
   1b25b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b25f:	f2 0f 10 0d 61 9c 01 00 	movsd  xmm1,QWORD PTR [rip+0x19c61]        # 34ec8 <Law_and_Order+0x628>
   1b267:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b26b:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b270:	e8 bb 88 fe ff       	call   3b30 <exp@plt>
   1b275:	66 48 0f 7e c0       	movq   rax,xmm0
   1b27a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b27e:	48 89 82 18 40 06 00 	mov    QWORD PTR [rdx+0x64018],rax
   1b285:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b289:	75 3d                	jne    1b2c8 <get_scaled_exp_params+0x403>
   1b28b:	8b 05 67 77 23 00    	mov    eax,DWORD PTR [rip+0x237767]        # 2529f8 <GQuadLayerMismatchH>
   1b291:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b295:	8b 15 5d 77 23 00    	mov    edx,DWORD PTR [rip+0x23775d]        # 2529f8 <GQuadLayerMismatchH>
   1b29b:	8b 05 bf 1f 1d 00    	mov    eax,DWORD PTR [rip+0x1d1fbf]        # 1ed260 <GQuadLayerMismatch37>
   1b2a1:	29 c2                	sub    edx,eax
   1b2a3:	89 d0                	mov    eax,edx
   1b2a5:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b2a9:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b2ae:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b2b2:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b2b6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b2ba:	f3 0f 7e 0d de 9b 01 00 	movq   xmm1,QWORD PTR [rip+0x19bde]        # 34ea0 <Law_and_Order+0x600>
   1b2c2:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b2c6:	eb 33                	jmp    1b2fb <get_scaled_exp_params+0x436>
   1b2c8:	8b 05 2a 77 23 00    	mov    eax,DWORD PTR [rip+0x23772a]        # 2529f8 <GQuadLayerMismatchH>
   1b2ce:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b2d2:	8b 15 20 77 23 00    	mov    edx,DWORD PTR [rip+0x237720]        # 2529f8 <GQuadLayerMismatchH>
   1b2d8:	8b 05 82 1f 1d 00    	mov    eax,DWORD PTR [rip+0x1d1f82]        # 1ed260 <GQuadLayerMismatch37>
   1b2de:	29 c2                	sub    edx,eax
   1b2e0:	89 d0                	mov    eax,edx
   1b2e2:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b2e6:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b2eb:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b2ef:	f3 0f 7e 0d a9 9b 01 00 	movq   xmm1,QWORD PTR [rip+0x19ba9]        # 34ea0 <Law_and_Order+0x600>
   1b2f7:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b2fb:	f2 0f 10 0d c5 9b 01 00 	movsd  xmm1,QWORD PTR [rip+0x19bc5]        # 34ec8 <Law_and_Order+0x628>
   1b303:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b307:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b30c:	e8 1f 88 fe ff       	call   3b30 <exp@plt>
   1b311:	66 48 0f 7e c0       	movq   rax,xmm0
   1b316:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b31a:	48 89 82 48 5e 06 00 	mov    QWORD PTR [rdx+0x65e48],rax
   1b321:	8b 15 3d 1f 1d 00    	mov    edx,DWORD PTR [rip+0x1d1f3d]        # 1ed264 <GQuadLayerMismatchMax>
   1b327:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b32b:	89 90 50 5e 06 00    	mov    DWORD PTR [rax+0x65e50],edx
   1b331:	c7 45 a0 02 00 00 00 	mov    DWORD PTR [rbp-0x60],0x2
   1b338:	e9 57 01 00 00       	jmp    1b494 <get_scaled_exp_params+0x5cf>
   1b33d:	c7 45 a4 03 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x3
   1b344:	e9 3d 01 00 00       	jmp    1b486 <get_scaled_exp_params+0x5c1>
   1b349:	8b 05 09 1f 1d 00    	mov    eax,DWORD PTR [rip+0x1d1f09]        # 1ed258 <GQuadAlphadH>
   1b34f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b353:	8b 15 ff 1e 1d 00    	mov    edx,DWORD PTR [rip+0x1d1eff]        # 1ed258 <GQuadAlphadH>
   1b359:	8b 05 f5 1e 1d 00    	mov    eax,DWORD PTR [rip+0x1d1ef5]        # 1ed254 <GQuadAlpha37>
   1b35f:	29 c2                	sub    edx,eax
   1b361:	89 d0                	mov    eax,edx
   1b363:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b367:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b36c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b370:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   1b375:	8b 05 79 76 23 00    	mov    eax,DWORD PTR [rip+0x237679]        # 2529f4 <GQuadBetadH>
   1b37b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b37f:	8b 15 6f 76 23 00    	mov    edx,DWORD PTR [rip+0x23766f]        # 2529f4 <GQuadBetadH>
   1b385:	8b 05 d1 1e 1d 00    	mov    eax,DWORD PTR [rip+0x1d1ed1]        # 1ed25c <GQuadBeta37>
   1b38b:	29 c2                	sub    edx,eax
   1b38d:	89 d0                	mov    eax,edx
   1b38f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b393:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b398:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b39c:	f2 0f 11 45 e8       	movsd  QWORD PTR [rbp-0x18],xmm0
   1b3a1:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b3a4:	83 e8 01             	sub    eax,0x1
   1b3a7:	89 c0                	mov    eax,eax
   1b3a9:	48 85 c0             	test   rax,rax
   1b3ac:	78 07                	js     1b3b5 <get_scaled_exp_params+0x4f0>
   1b3ae:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1b3b3:	eb 15                	jmp    1b3ca <get_scaled_exp_params+0x505>
   1b3b5:	48 89 c2             	mov    rdx,rax
   1b3b8:	48 d1 ea             	shr    rdx,1
   1b3bb:	83 e0 01             	and    eax,0x1
   1b3be:	48 09 c2             	or     rdx,rax
   1b3c1:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1b3c6:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1b3ca:	f2 0f 59 45 e0       	mulsd  xmm0,QWORD PTR [rbp-0x20]
   1b3cf:	f2 0f 11 45 88       	movsd  QWORD PTR [rbp-0x78],xmm0
   1b3d4:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1b3d7:	48 85 c0             	test   rax,rax
   1b3da:	78 07                	js     1b3e3 <get_scaled_exp_params+0x51e>
   1b3dc:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1b3e1:	eb 15                	jmp    1b3f8 <get_scaled_exp_params+0x533>
   1b3e3:	48 89 c2             	mov    rdx,rax
   1b3e6:	48 d1 ea             	shr    rdx,1
   1b3e9:	83 e0 01             	and    eax,0x1
   1b3ec:	48 09 c2             	or     rdx,rax
   1b3ef:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1b3f4:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1b3f8:	f2 0f 10 0d d0 9a 01 00 	movsd  xmm1,QWORD PTR [rip+0x19ad0]        # 34ed0 <Law_and_Order+0x630>
   1b400:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b404:	e8 17 84 fe ff       	call   3820 <log@plt>
   1b409:	f2 0f 59 45 e8       	mulsd  xmm0,QWORD PTR [rbp-0x18]
   1b40e:	f2 0f 58 45 88       	addsd  xmm0,QWORD PTR [rbp-0x78]
   1b413:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   1b418:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b41c:	75 1b                	jne    1b439 <get_scaled_exp_params+0x574>
   1b41e:	f2 0f 10 45 d8       	movsd  xmm0,QWORD PTR [rbp-0x28]
   1b423:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b427:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b42b:	f3 0f 7e 0d 6d 9a 01 00 	movq   xmm1,QWORD PTR [rip+0x19a6d]        # 34ea0 <Law_and_Order+0x600>
   1b433:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b437:	eb 11                	jmp    1b44a <get_scaled_exp_params+0x585>
   1b439:	f2 0f 10 45 d8       	movsd  xmm0,QWORD PTR [rbp-0x28]
   1b43e:	f3 0f 7e 0d 5a 9a 01 00 	movq   xmm1,QWORD PTR [rip+0x19a5a]        # 34ea0 <Law_and_Order+0x600>
   1b446:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b44a:	f2 0f 10 0d 76 9a 01 00 	movsd  xmm1,QWORD PTR [rip+0x19a76]        # 34ec8 <Law_and_Order+0x628>
   1b452:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b456:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b45b:	e8 d0 86 fe ff       	call   3b30 <exp@plt>
   1b460:	66 48 0f 7e c0       	movq   rax,xmm0
   1b465:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b469:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1b46c:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1b46f:	48 6b f6 2e          	imul   rsi,rsi,0x2e
   1b473:	48 01 f1             	add    rcx,rsi
   1b476:	48 81 c1 58 ca 00 00 	add    rcx,0xca58
   1b47d:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   1b482:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1b486:	83 7d a4 2d          	cmp    DWORD PTR [rbp-0x5c],0x2d
   1b48a:	0f 86 b9 fe ff ff    	jbe    1b349 <get_scaled_exp_params+0x484>
   1b490:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1b494:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   1b498:	0f 86 9f fe ff ff    	jbe    1b33d <get_scaled_exp_params+0x478>
   1b49e:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1b4a5:	e9 ff 00 00 00       	jmp    1b5a9 <get_scaled_exp_params+0x6e4>
   1b4aa:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b4ae:	75 6a                	jne    1b51a <get_scaled_exp_params+0x655>
   1b4b0:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b4b3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b4bb:	48 8d 05 3e 20 1d 00 	lea    rax,[rip+0x1d203e]        # 1ed500 <hairpindH>
   1b4c2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1b4c5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b4c9:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b4cc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b4d4:	48 8d 05 25 20 1d 00 	lea    rax,[rip+0x1d2025]        # 1ed500 <hairpindH>
   1b4db:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1b4de:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b4e1:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b4e9:	48 8d 05 90 1f 1d 00 	lea    rax,[rip+0x1d1f90]        # 1ed480 <hairpin37>
   1b4f0:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1b4f3:	29 c2                	sub    edx,eax
   1b4f5:	89 d0                	mov    eax,edx
   1b4f7:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b4fb:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b500:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b504:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b508:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b50c:	f3 0f 7e 0d 8c 99 01 00 	movq   xmm1,QWORD PTR [rip+0x1998c]        # 34ea0 <Law_and_Order+0x600>
   1b514:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b518:	eb 60                	jmp    1b57a <get_scaled_exp_params+0x6b5>
   1b51a:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b51d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b525:	48 8d 05 d4 1f 1d 00 	lea    rax,[rip+0x1d1fd4]        # 1ed500 <hairpindH>
   1b52c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1b52f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b533:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b536:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b53e:	48 8d 05 bb 1f 1d 00 	lea    rax,[rip+0x1d1fbb]        # 1ed500 <hairpindH>
   1b545:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1b548:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b54b:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b553:	48 8d 05 26 1f 1d 00 	lea    rax,[rip+0x1d1f26]        # 1ed480 <hairpin37>
   1b55a:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1b55d:	29 c2                	sub    edx,eax
   1b55f:	89 d0                	mov    eax,edx
   1b561:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b565:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b56a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b56e:	f3 0f 7e 0d 2a 99 01 00 	movq   xmm1,QWORD PTR [rip+0x1992a]        # 34ea0 <Law_and_Order+0x600>
   1b576:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b57a:	f2 0f 10 0d 46 99 01 00 	movsd  xmm1,QWORD PTR [rip+0x19946]        # 34ec8 <Law_and_Order+0x628>
   1b582:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b586:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b58b:	e8 a0 85 fe ff       	call   3b30 <exp@plt>
   1b590:	66 48 0f 7e c0       	movq   rax,xmm0
   1b595:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b599:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1b59c:	48 83 c1 40          	add    rcx,0x40
   1b5a0:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   1b5a5:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1b5a9:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   1b5ad:	0f 86 f7 fe ff ff    	jbe    1b4aa <get_scaled_exp_params+0x5e5>
   1b5b3:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1b5ba:	e9 f9 01 00 00       	jmp    1b7b8 <get_scaled_exp_params+0x8f3>
   1b5bf:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b5c3:	75 6a                	jne    1b62f <get_scaled_exp_params+0x76a>
   1b5c5:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b5c8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b5d0:	48 8d 05 29 20 1d 00 	lea    rax,[rip+0x1d2029]        # 1ed600 <bulgedH>
   1b5d7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1b5da:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b5de:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b5e1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b5e9:	48 8d 05 10 20 1d 00 	lea    rax,[rip+0x1d2010]        # 1ed600 <bulgedH>
   1b5f0:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1b5f3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b5f6:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b5fe:	48 8d 05 7b 1f 1d 00 	lea    rax,[rip+0x1d1f7b]        # 1ed580 <bulge37>
   1b605:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1b608:	29 c2                	sub    edx,eax
   1b60a:	89 d0                	mov    eax,edx
   1b60c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b610:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b615:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b619:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b61d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b621:	f3 0f 7e 0d 77 98 01 00 	movq   xmm1,QWORD PTR [rip+0x19877]        # 34ea0 <Law_and_Order+0x600>
   1b629:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b62d:	eb 60                	jmp    1b68f <get_scaled_exp_params+0x7ca>
   1b62f:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b632:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b63a:	48 8d 05 bf 1f 1d 00 	lea    rax,[rip+0x1d1fbf]        # 1ed600 <bulgedH>
   1b641:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1b644:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b648:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b64b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b653:	48 8d 05 a6 1f 1d 00 	lea    rax,[rip+0x1d1fa6]        # 1ed600 <bulgedH>
   1b65a:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1b65d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b660:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b668:	48 8d 05 11 1f 1d 00 	lea    rax,[rip+0x1d1f11]        # 1ed580 <bulge37>
   1b66f:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1b672:	29 c2                	sub    edx,eax
   1b674:	89 d0                	mov    eax,edx
   1b676:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b67a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b67f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b683:	f3 0f 7e 0d 15 98 01 00 	movq   xmm1,QWORD PTR [rip+0x19815]        # 34ea0 <Law_and_Order+0x600>
   1b68b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b68f:	f2 0f 10 0d 31 98 01 00 	movsd  xmm1,QWORD PTR [rip+0x19831]        # 34ec8 <Law_and_Order+0x628>
   1b697:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b69b:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b6a0:	e8 8b 84 fe ff       	call   3b30 <exp@plt>
   1b6a5:	66 48 0f 7e c0       	movq   rax,xmm0
   1b6aa:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b6ae:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1b6b1:	48 83 c1 60          	add    rcx,0x60
   1b6b5:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   1b6b9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b6bd:	75 6a                	jne    1b729 <get_scaled_exp_params+0x864>
   1b6bf:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b6c2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b6ca:	48 8d 05 2f 20 1d 00 	lea    rax,[rip+0x1d202f]        # 1ed700 <internal_loopdH>
   1b6d1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1b6d4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b6d8:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b6db:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b6e3:	48 8d 05 16 20 1d 00 	lea    rax,[rip+0x1d2016]        # 1ed700 <internal_loopdH>
   1b6ea:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1b6ed:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b6f0:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b6f8:	48 8d 05 81 1f 1d 00 	lea    rax,[rip+0x1d1f81]        # 1ed680 <internal_loop37>
   1b6ff:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1b702:	29 c2                	sub    edx,eax
   1b704:	89 d0                	mov    eax,edx
   1b706:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b70a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b70f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b713:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b717:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b71b:	f3 0f 7e 0d 7d 97 01 00 	movq   xmm1,QWORD PTR [rip+0x1977d]        # 34ea0 <Law_and_Order+0x600>
   1b723:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b727:	eb 60                	jmp    1b789 <get_scaled_exp_params+0x8c4>
   1b729:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b72c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b734:	48 8d 05 c5 1f 1d 00 	lea    rax,[rip+0x1d1fc5]        # 1ed700 <internal_loopdH>
   1b73b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1b73e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b742:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b745:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1b74d:	48 8d 05 ac 1f 1d 00 	lea    rax,[rip+0x1d1fac]        # 1ed700 <internal_loopdH>
   1b754:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1b757:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b75a:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1b762:	48 8d 05 17 1f 1d 00 	lea    rax,[rip+0x1d1f17]        # 1ed680 <internal_loop37>
   1b769:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1b76c:	29 c2                	sub    edx,eax
   1b76e:	89 d0                	mov    eax,edx
   1b770:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b774:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b779:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b77d:	f3 0f 7e 0d 1b 97 01 00 	movq   xmm1,QWORD PTR [rip+0x1971b]        # 34ea0 <Law_and_Order+0x600>
   1b785:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b789:	f2 0f 10 0d 37 97 01 00 	movsd  xmm1,QWORD PTR [rip+0x19737]        # 34ec8 <Law_and_Order+0x628>
   1b791:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b795:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b79a:	e8 91 83 fe ff       	call   3b30 <exp@plt>
   1b79f:	66 48 0f 7e c0       	movq   rax,xmm0
   1b7a4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b7a8:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1b7ab:	48 83 c1 7e          	add    rcx,0x7e
   1b7af:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   1b7b4:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1b7b8:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   1b7bc:	0f 86 fd fd ff ff    	jbe    1b5bf <get_scaled_exp_params+0x6fa>
   1b7c2:	8b 05 f0 5e 23 00    	mov    eax,DWORD PTR [rip+0x235ef0]        # 2516b8 <james_rule>
   1b7c8:	85 c0                	test   eax,eax
   1b7ca:	74 22                	je     1b7ee <get_scaled_exp_params+0x929>
   1b7cc:	f2 0f 10 05 04 97 01 00 	movsd  xmm0,QWORD PTR [rip+0x19704]        # 34ed8 <Law_and_Order+0x638>
   1b7d4:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b7d9:	e8 52 83 fe ff       	call   3b30 <exp@plt>
   1b7de:	66 48 0f 7e c0       	movq   rax,xmm0
   1b7e3:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b7e7:	48 89 82 08 04 00 00 	mov    QWORD PTR [rdx+0x408],rax
   1b7ee:	8b 05 84 1e 1d 00    	mov    eax,DWORD PTR [rip+0x1d1e84]        # 1ed678 <bulgedH+0x78>
   1b7f4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b7f8:	8b 15 7a 1e 1d 00    	mov    edx,DWORD PTR [rip+0x1d1e7a]        # 1ed678 <bulgedH+0x78>
   1b7fe:	8b 05 f4 1d 1d 00    	mov    eax,DWORD PTR [rip+0x1d1df4]        # 1ed5f8 <bulge37+0x78>
   1b804:	29 c2                	sub    edx,eax
   1b806:	89 d0                	mov    eax,edx
   1b808:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b80c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b811:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b815:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   1b81a:	c7 45 a0 1f 00 00 00 	mov    DWORD PTR [rbp-0x60],0x1f
   1b821:	e9 f6 00 00 00       	jmp    1b91c <get_scaled_exp_params+0xa57>
   1b826:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b82a:	75 66                	jne    1b892 <get_scaled_exp_params+0x9cd>
   1b82c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b830:	f2 0f 10 a0 c8 3f 06 00 	movsd  xmm4,QWORD PTR [rax+0x63fc8]
   1b838:	f2 0f 11 65 88       	movsd  QWORD PTR [rbp-0x78],xmm4
   1b83d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b840:	48 85 c0             	test   rax,rax
   1b843:	78 07                	js     1b84c <get_scaled_exp_params+0x987>
   1b845:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1b84a:	eb 15                	jmp    1b861 <get_scaled_exp_params+0x99c>
   1b84c:	48 89 c2             	mov    rdx,rax
   1b84f:	48 d1 ea             	shr    rdx,1
   1b852:	83 e0 01             	and    eax,0x1
   1b855:	48 09 c2             	or     rdx,rax
   1b858:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1b85d:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1b861:	f2 0f 10 0d 4f 96 01 00 	movsd  xmm1,QWORD PTR [rip+0x1964f]        # 34eb8 <Law_and_Order+0x618>
   1b869:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1b86d:	e8 ae 7f fe ff       	call   3820 <log@plt>
   1b872:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1b877:	f2 0f 58 45 d8       	addsd  xmm0,QWORD PTR [rbp-0x28]
   1b87c:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b880:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b884:	f3 0f 7e 0d 14 96 01 00 	movq   xmm1,QWORD PTR [rip+0x19614]        # 34ea0 <Law_and_Order+0x600>
   1b88c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b890:	eb 5c                	jmp    1b8ee <get_scaled_exp_params+0xa29>
   1b892:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b896:	f2 0f 10 b0 c8 3f 06 00 	movsd  xmm6,QWORD PTR [rax+0x63fc8]
   1b89e:	f2 0f 11 75 88       	movsd  QWORD PTR [rbp-0x78],xmm6
   1b8a3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b8a6:	48 85 c0             	test   rax,rax
   1b8a9:	78 07                	js     1b8b2 <get_scaled_exp_params+0x9ed>
   1b8ab:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1b8b0:	eb 15                	jmp    1b8c7 <get_scaled_exp_params+0xa02>
   1b8b2:	48 89 c2             	mov    rdx,rax
   1b8b5:	48 d1 ea             	shr    rdx,1
   1b8b8:	83 e0 01             	and    eax,0x1
   1b8bb:	48 09 c2             	or     rdx,rax
   1b8be:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1b8c3:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1b8c7:	f2 0f 10 0d e9 95 01 00 	movsd  xmm1,QWORD PTR [rip+0x195e9]        # 34eb8 <Law_and_Order+0x618>
   1b8cf:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1b8d3:	e8 48 7f fe ff       	call   3820 <log@plt>
   1b8d8:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1b8dd:	f2 0f 58 45 d8       	addsd  xmm0,QWORD PTR [rbp-0x28]
   1b8e2:	f3 0f 7e 0d b6 95 01 00 	movq   xmm1,QWORD PTR [rip+0x195b6]        # 34ea0 <Law_and_Order+0x600>
   1b8ea:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b8ee:	f2 0f 10 0d d2 95 01 00 	movsd  xmm1,QWORD PTR [rip+0x195d2]        # 34ec8 <Law_and_Order+0x628>
   1b8f6:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1b8fa:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1b8ff:	e8 2c 82 fe ff       	call   3b30 <exp@plt>
   1b904:	66 48 0f 7e c0       	movq   rax,xmm0
   1b909:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b90d:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1b910:	48 83 c1 60          	add    rcx,0x60
   1b914:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   1b918:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1b91c:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   1b920:	0f 86 00 ff ff ff    	jbe    1b826 <get_scaled_exp_params+0x961>
   1b926:	8b 05 4c 1e 1d 00    	mov    eax,DWORD PTR [rip+0x1d1e4c]        # 1ed778 <internal_loopdH+0x78>
   1b92c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b930:	8b 15 42 1e 1d 00    	mov    edx,DWORD PTR [rip+0x1d1e42]        # 1ed778 <internal_loopdH+0x78>
   1b936:	8b 05 bc 1d 1d 00    	mov    eax,DWORD PTR [rip+0x1d1dbc]        # 1ed6f8 <internal_loop37+0x78>
   1b93c:	29 c2                	sub    edx,eax
   1b93e:	89 d0                	mov    eax,edx
   1b940:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1b944:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1b949:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1b94d:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   1b952:	c7 45 a0 1f 00 00 00 	mov    DWORD PTR [rbp-0x60],0x1f
   1b959:	e9 f7 00 00 00       	jmp    1ba55 <get_scaled_exp_params+0xb90>
   1b95e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1b962:	75 66                	jne    1b9ca <get_scaled_exp_params+0xb05>
   1b964:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b968:	f2 0f 10 98 c8 3f 06 00 	movsd  xmm3,QWORD PTR [rax+0x63fc8]
   1b970:	f2 0f 11 5d 88       	movsd  QWORD PTR [rbp-0x78],xmm3
   1b975:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b978:	48 85 c0             	test   rax,rax
   1b97b:	78 07                	js     1b984 <get_scaled_exp_params+0xabf>
   1b97d:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1b982:	eb 15                	jmp    1b999 <get_scaled_exp_params+0xad4>
   1b984:	48 89 c2             	mov    rdx,rax
   1b987:	48 d1 ea             	shr    rdx,1
   1b98a:	83 e0 01             	and    eax,0x1
   1b98d:	48 09 c2             	or     rdx,rax
   1b990:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1b995:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1b999:	f2 0f 10 0d 17 95 01 00 	movsd  xmm1,QWORD PTR [rip+0x19517]        # 34eb8 <Law_and_Order+0x618>
   1b9a1:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1b9a5:	e8 76 7e fe ff       	call   3820 <log@plt>
   1b9aa:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1b9af:	f2 0f 58 45 d8       	addsd  xmm0,QWORD PTR [rbp-0x28]
   1b9b4:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1b9b8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1b9bc:	f3 0f 7e 0d dc 94 01 00 	movq   xmm1,QWORD PTR [rip+0x194dc]        # 34ea0 <Law_and_Order+0x600>
   1b9c4:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1b9c8:	eb 5c                	jmp    1ba26 <get_scaled_exp_params+0xb61>
   1b9ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b9ce:	f2 0f 10 a8 c8 3f 06 00 	movsd  xmm5,QWORD PTR [rax+0x63fc8]
   1b9d6:	f2 0f 11 6d 88       	movsd  QWORD PTR [rbp-0x78],xmm5
   1b9db:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b9de:	48 85 c0             	test   rax,rax
   1b9e1:	78 07                	js     1b9ea <get_scaled_exp_params+0xb25>
   1b9e3:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1b9e8:	eb 15                	jmp    1b9ff <get_scaled_exp_params+0xb3a>
   1b9ea:	48 89 c2             	mov    rdx,rax
   1b9ed:	48 d1 ea             	shr    rdx,1
   1b9f0:	83 e0 01             	and    eax,0x1
   1b9f3:	48 09 c2             	or     rdx,rax
   1b9f6:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1b9fb:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1b9ff:	f2 0f 10 0d b1 94 01 00 	movsd  xmm1,QWORD PTR [rip+0x194b1]        # 34eb8 <Law_and_Order+0x618>
   1ba07:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1ba0b:	e8 10 7e fe ff       	call   3820 <log@plt>
   1ba10:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1ba15:	f2 0f 58 45 d8       	addsd  xmm0,QWORD PTR [rbp-0x28]
   1ba1a:	f3 0f 7e 0d 7e 94 01 00 	movq   xmm1,QWORD PTR [rip+0x1947e]        # 34ea0 <Law_and_Order+0x600>
   1ba22:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1ba26:	f2 0f 10 0d 9a 94 01 00 	movsd  xmm1,QWORD PTR [rip+0x1949a]        # 34ec8 <Law_and_Order+0x628>
   1ba2e:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1ba32:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1ba37:	e8 f4 80 fe ff       	call   3b30 <exp@plt>
   1ba3c:	66 48 0f 7e c0       	movq   rax,xmm0
   1ba41:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1ba45:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1ba48:	48 83 c1 7e          	add    rcx,0x7e
   1ba4c:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   1ba51:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1ba55:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   1ba59:	0f 86 ff fe ff ff    	jbe    1b95e <get_scaled_exp_params+0xa99>
   1ba5f:	8b 05 c3 17 1d 00    	mov    eax,DWORD PTR [rip+0x1d17c3]        # 1ed228 <niniodH>
   1ba65:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ba69:	8b 15 b9 17 1d 00    	mov    edx,DWORD PTR [rip+0x1d17b9]        # 1ed228 <niniodH>
   1ba6f:	8b 05 af 17 1d 00    	mov    eax,DWORD PTR [rip+0x1d17af]        # 1ed224 <ninio37>
   1ba75:	29 c2                	sub    edx,eax
   1ba77:	89 d0                	mov    eax,edx
   1ba79:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ba7d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ba82:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ba86:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   1ba8b:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1ba92:	e9 e9 00 00 00       	jmp    1bb80 <get_scaled_exp_params+0xcbb>
   1ba97:	8b 05 83 17 1d 00    	mov    eax,DWORD PTR [rip+0x1d1783]        # 1ed220 <MAX_NINIO>
   1ba9d:	f2 0f 2a d0          	cvtsi2sd xmm2,eax
   1baa1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1baa4:	48 85 c0             	test   rax,rax
   1baa7:	78 07                	js     1bab0 <get_scaled_exp_params+0xbeb>
   1baa9:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1baae:	eb 15                	jmp    1bac5 <get_scaled_exp_params+0xc00>
   1bab0:	48 89 c2             	mov    rdx,rax
   1bab3:	48 d1 ea             	shr    rdx,1
   1bab6:	83 e0 01             	and    eax,0x1
   1bab9:	48 09 c2             	or     rdx,rax
   1babc:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1bac1:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1bac5:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bac9:	75 0f                	jne    1bada <get_scaled_exp_params+0xc15>
   1bacb:	f2 0f 10 4d d8       	movsd  xmm1,QWORD PTR [rbp-0x28]
   1bad0:	f2 0f 2c c1          	cvttsd2si eax,xmm1
   1bad4:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bad8:	eb 05                	jmp    1badf <get_scaled_exp_params+0xc1a>
   1bada:	f2 0f 10 4d d8       	movsd  xmm1,QWORD PTR [rbp-0x28]
   1badf:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bae3:	66 0f 2f c2          	comisd xmm0,xmm2
   1bae7:	76 18                	jbe    1bb01 <get_scaled_exp_params+0xc3c>
   1bae9:	8b 05 31 17 1d 00    	mov    eax,DWORD PTR [rip+0x1d1731]        # 1ed220 <MAX_NINIO>
   1baef:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1baf3:	f3 0f 7e 0d a5 93 01 00 	movq   xmm1,QWORD PTR [rip+0x193a5]        # 34ea0 <Law_and_Order+0x600>
   1bafb:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1baff:	eb 4e                	jmp    1bb4f <get_scaled_exp_params+0xc8a>
   1bb01:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1bb04:	48 85 c0             	test   rax,rax
   1bb07:	78 07                	js     1bb10 <get_scaled_exp_params+0xc4b>
   1bb09:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   1bb0e:	eb 15                	jmp    1bb25 <get_scaled_exp_params+0xc60>
   1bb10:	48 89 c2             	mov    rdx,rax
   1bb13:	48 d1 ea             	shr    rdx,1
   1bb16:	83 e0 01             	and    eax,0x1
   1bb19:	48 09 c2             	or     rdx,rax
   1bb1c:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   1bb21:	f2 0f 58 c0          	addsd  xmm0,xmm0
   1bb25:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bb29:	75 0f                	jne    1bb3a <get_scaled_exp_params+0xc75>
   1bb2b:	f2 0f 10 4d d8       	movsd  xmm1,QWORD PTR [rbp-0x28]
   1bb30:	f2 0f 2c c1          	cvttsd2si eax,xmm1
   1bb34:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bb38:	eb 05                	jmp    1bb3f <get_scaled_exp_params+0xc7a>
   1bb3a:	f2 0f 10 4d d8       	movsd  xmm1,QWORD PTR [rbp-0x28]
   1bb3f:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bb43:	f3 0f 7e 0d 55 93 01 00 	movq   xmm1,QWORD PTR [rip+0x19355]        # 34ea0 <Law_and_Order+0x600>
   1bb4b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bb4f:	f2 0f 10 0d 71 93 01 00 	movsd  xmm1,QWORD PTR [rip+0x19371]        # 34ec8 <Law_and_Order+0x628>
   1bb57:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bb5b:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1bb60:	e8 cb 7f fe ff       	call   3b30 <exp@plt>
   1bb65:	66 48 0f 7e c0       	movq   rax,xmm0
   1bb6a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1bb6e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1bb71:	48 81 c1 9c c7 00 00 	add    rcx,0xc79c
   1bb78:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   1bb7c:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1bb80:	83 7d a4 1e          	cmp    DWORD PTR [rbp-0x5c],0x1e
   1bb84:	0f 86 0d ff ff ff    	jbe    1ba97 <get_scaled_exp_params+0xbd2>
   1bb8a:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1bb91:	e9 01 01 00 00       	jmp    1bc97 <get_scaled_exp_params+0xdd2>
   1bb96:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bb9a:	75 6a                	jne    1bc06 <get_scaled_exp_params+0xd41>
   1bb9c:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bb9f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bba7:	48 8d 05 d2 47 1d 00 	lea    rax,[rip+0x1d47d2]        # 1f0380 <TetraloopdH>
   1bbae:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1bbb1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bbb5:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bbb8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bbc0:	48 8d 05 b9 47 1d 00 	lea    rax,[rip+0x1d47b9]        # 1f0380 <TetraloopdH>
   1bbc7:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1bbca:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bbcd:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1bbd5:	48 8d 05 04 47 1d 00 	lea    rax,[rip+0x1d4704]        # 1f02e0 <Tetraloop37>
   1bbdc:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1bbdf:	29 c2                	sub    edx,eax
   1bbe1:	89 d0                	mov    eax,edx
   1bbe3:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bbe7:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1bbec:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1bbf0:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1bbf4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bbf8:	f3 0f 7e 0d a0 92 01 00 	movq   xmm1,QWORD PTR [rip+0x192a0]        # 34ea0 <Law_and_Order+0x600>
   1bc00:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bc04:	eb 60                	jmp    1bc66 <get_scaled_exp_params+0xda1>
   1bc06:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bc09:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bc11:	48 8d 05 68 47 1d 00 	lea    rax,[rip+0x1d4768]        # 1f0380 <TetraloopdH>
   1bc18:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1bc1b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bc1f:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bc22:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bc2a:	48 8d 05 4f 47 1d 00 	lea    rax,[rip+0x1d474f]        # 1f0380 <TetraloopdH>
   1bc31:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1bc34:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bc37:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1bc3f:	48 8d 05 9a 46 1d 00 	lea    rax,[rip+0x1d469a]        # 1f02e0 <Tetraloop37>
   1bc46:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1bc49:	29 c2                	sub    edx,eax
   1bc4b:	89 d0                	mov    eax,edx
   1bc4d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bc51:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1bc56:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1bc5a:	f3 0f 7e 0d 3e 92 01 00 	movq   xmm1,QWORD PTR [rip+0x1923e]        # 34ea0 <Law_and_Order+0x600>
   1bc62:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bc66:	f2 0f 10 0d 5a 92 01 00 	movsd  xmm1,QWORD PTR [rip+0x1925a]        # 34ec8 <Law_and_Order+0x628>
   1bc6e:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bc72:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1bc77:	e8 b4 7e fe ff       	call   3b30 <exp@plt>
   1bc7c:	66 48 0f 7e c0       	movq   rax,xmm0
   1bc81:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1bc85:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1bc88:	48 81 c1 06 c8 00 00 	add    rcx,0xc806
   1bc8f:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   1bc93:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1bc97:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1bc9a:	89 d0                	mov    eax,edx
   1bc9c:	c1 e0 03             	shl    eax,0x3
   1bc9f:	29 d0                	sub    eax,edx
   1bca1:	89 c3                	mov    ebx,eax
   1bca3:	48 8d 3d 16 45 1d 00 	lea    rdi,[rip+0x1d4516]        # 1f01c0 <Tetraloops>
   1bcaa:	e8 71 7a fe ff       	call   3720 <strlen@plt>
   1bcaf:	48 39 c3             	cmp    rbx,rax
   1bcb2:	0f 82 de fe ff ff    	jb     1bb96 <get_scaled_exp_params+0xcd1>
   1bcb8:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1bcbf:	e9 01 01 00 00       	jmp    1bdc5 <get_scaled_exp_params+0xf00>
   1bcc4:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bcc8:	75 6a                	jne    1bd34 <get_scaled_exp_params+0xe6f>
   1bcca:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bccd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bcd5:	48 8d 05 44 44 1d 00 	lea    rax,[rip+0x1d4444]        # 1f0120 <TriloopdH>
   1bcdc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1bcdf:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bce3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bce6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bcee:	48 8d 05 2b 44 1d 00 	lea    rax,[rip+0x1d442b]        # 1f0120 <TriloopdH>
   1bcf5:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1bcf8:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bcfb:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1bd03:	48 8d 05 76 43 1d 00 	lea    rax,[rip+0x1d4376]        # 1f0080 <Triloop37>
   1bd0a:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1bd0d:	29 c2                	sub    edx,eax
   1bd0f:	89 d0                	mov    eax,edx
   1bd11:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bd15:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1bd1a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1bd1e:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1bd22:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bd26:	f3 0f 7e 0d 72 91 01 00 	movq   xmm1,QWORD PTR [rip+0x19172]        # 34ea0 <Law_and_Order+0x600>
   1bd2e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bd32:	eb 60                	jmp    1bd94 <get_scaled_exp_params+0xecf>
   1bd34:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bd37:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bd3f:	48 8d 05 da 43 1d 00 	lea    rax,[rip+0x1d43da]        # 1f0120 <TriloopdH>
   1bd46:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1bd49:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bd4d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bd50:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bd58:	48 8d 05 c1 43 1d 00 	lea    rax,[rip+0x1d43c1]        # 1f0120 <TriloopdH>
   1bd5f:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1bd62:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bd65:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1bd6d:	48 8d 05 0c 43 1d 00 	lea    rax,[rip+0x1d430c]        # 1f0080 <Triloop37>
   1bd74:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1bd77:	29 c2                	sub    edx,eax
   1bd79:	89 d0                	mov    eax,edx
   1bd7b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bd7f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1bd84:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1bd88:	f3 0f 7e 0d 10 91 01 00 	movq   xmm1,QWORD PTR [rip+0x19110]        # 34ea0 <Law_and_Order+0x600>
   1bd90:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bd94:	f2 0f 10 0d 2c 91 01 00 	movsd  xmm1,QWORD PTR [rip+0x1912c]        # 34ec8 <Law_and_Order+0x628>
   1bd9c:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bda0:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1bda5:	e8 86 7d fe ff       	call   3b30 <exp@plt>
   1bdaa:	66 48 0f 7e c0       	movq   rax,xmm0
   1bdaf:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1bdb3:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1bdb6:	48 81 c1 2e c8 00 00 	add    rcx,0xc82e
   1bdbd:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   1bdc1:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1bdc5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1bdc8:	89 d0                	mov    eax,edx
   1bdca:	c1 e0 02             	shl    eax,0x2
   1bdcd:	01 d0                	add    eax,edx
   1bdcf:	89 c3                	mov    ebx,eax
   1bdd1:	48 8d 3d a8 41 1d 00 	lea    rdi,[rip+0x1d41a8]        # 1eff80 <Triloops>
   1bdd8:	e8 43 79 fe ff       	call   3720 <strlen@plt>
   1bddd:	48 39 c3             	cmp    rbx,rax
   1bde0:	0f 82 de fe ff ff    	jb     1bcc4 <get_scaled_exp_params+0xdff>
   1bde6:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1bded:	e9 01 01 00 00       	jmp    1bef3 <get_scaled_exp_params+0x102e>
   1bdf2:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bdf6:	75 6a                	jne    1be62 <get_scaled_exp_params+0xf9d>
   1bdf8:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1bdfb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1be03:	48 8d 05 36 48 1d 00 	lea    rax,[rip+0x1d4836]        # 1f0640 <HexaloopdH>
   1be0a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1be0d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1be11:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1be14:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1be1c:	48 8d 05 1d 48 1d 00 	lea    rax,[rip+0x1d481d]        # 1f0640 <HexaloopdH>
   1be23:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1be26:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1be29:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1be31:	48 8d 05 68 47 1d 00 	lea    rax,[rip+0x1d4768]        # 1f05a0 <Hexaloop37>
   1be38:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1be3b:	29 c2                	sub    edx,eax
   1be3d:	89 d0                	mov    eax,edx
   1be3f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1be43:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1be48:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1be4c:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1be50:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1be54:	f3 0f 7e 0d 44 90 01 00 	movq   xmm1,QWORD PTR [rip+0x19044]        # 34ea0 <Law_and_Order+0x600>
   1be5c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1be60:	eb 60                	jmp    1bec2 <get_scaled_exp_params+0xffd>
   1be62:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1be65:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1be6d:	48 8d 05 cc 47 1d 00 	lea    rax,[rip+0x1d47cc]        # 1f0640 <HexaloopdH>
   1be74:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1be77:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1be7b:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1be7e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1be86:	48 8d 05 b3 47 1d 00 	lea    rax,[rip+0x1d47b3]        # 1f0640 <HexaloopdH>
   1be8d:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1be90:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1be93:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1be9b:	48 8d 05 fe 46 1d 00 	lea    rax,[rip+0x1d46fe]        # 1f05a0 <Hexaloop37>
   1bea2:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1bea5:	29 c2                	sub    edx,eax
   1bea7:	89 d0                	mov    eax,edx
   1bea9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bead:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1beb2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1beb6:	f3 0f 7e 0d e2 8f 01 00 	movq   xmm1,QWORD PTR [rip+0x18fe2]        # 34ea0 <Law_and_Order+0x600>
   1bebe:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bec2:	f2 0f 10 0d fe 8f 01 00 	movsd  xmm1,QWORD PTR [rip+0x18ffe]        # 34ec8 <Law_and_Order+0x628>
   1beca:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bece:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1bed3:	e8 58 7c fe ff       	call   3b30 <exp@plt>
   1bed8:	66 48 0f 7e c0       	movq   rax,xmm0
   1bedd:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1bee1:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1bee4:	48 81 c1 56 c8 00 00 	add    rcx,0xc856
   1beeb:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   1beef:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1bef3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1bef6:	89 d0                	mov    eax,edx
   1bef8:	c1 e0 03             	shl    eax,0x3
   1befb:	01 d0                	add    eax,edx
   1befd:	89 c3                	mov    ebx,eax
   1beff:	48 8d 3d 1a 45 1d 00 	lea    rdi,[rip+0x1d451a]        # 1f0420 <Hexaloops>
   1bf06:	e8 15 78 fe ff       	call   3720 <strlen@plt>
   1bf0b:	48 39 c3             	cmp    rbx,rax
   1bf0e:	0f 82 de fe ff ff    	jb     1bdf2 <get_scaled_exp_params+0xf2d>
   1bf14:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1bf1b:	e9 a8 00 00 00       	jmp    1bfc8 <get_scaled_exp_params+0x1103>
   1bf20:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bf24:	75 3d                	jne    1bf63 <get_scaled_exp_params+0x109e>
   1bf26:	8b 05 e8 12 1d 00    	mov    eax,DWORD PTR [rip+0x1d12e8]        # 1ed214 <ML_interndH>
   1bf2c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bf30:	8b 15 de 12 1d 00    	mov    edx,DWORD PTR [rip+0x1d12de]        # 1ed214 <ML_interndH>
   1bf36:	8b 05 d4 12 1d 00    	mov    eax,DWORD PTR [rip+0x1d12d4]        # 1ed210 <ML_intern37>
   1bf3c:	29 c2                	sub    edx,eax
   1bf3e:	89 d0                	mov    eax,edx
   1bf40:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bf44:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1bf49:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1bf4d:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1bf51:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bf55:	f3 0f 7e 0d 43 8f 01 00 	movq   xmm1,QWORD PTR [rip+0x18f43]        # 34ea0 <Law_and_Order+0x600>
   1bf5d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bf61:	eb 33                	jmp    1bf96 <get_scaled_exp_params+0x10d1>
   1bf63:	8b 05 ab 12 1d 00    	mov    eax,DWORD PTR [rip+0x1d12ab]        # 1ed214 <ML_interndH>
   1bf69:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1bf6d:	8b 15 a1 12 1d 00    	mov    edx,DWORD PTR [rip+0x1d12a1]        # 1ed214 <ML_interndH>
   1bf73:	8b 05 97 12 1d 00    	mov    eax,DWORD PTR [rip+0x1d1297]        # 1ed210 <ML_intern37>
   1bf79:	29 c2                	sub    edx,eax
   1bf7b:	89 d0                	mov    eax,edx
   1bf7d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1bf81:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1bf86:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1bf8a:	f3 0f 7e 0d 0e 8f 01 00 	movq   xmm1,QWORD PTR [rip+0x18f0e]        # 34ea0 <Law_and_Order+0x600>
   1bf92:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1bf96:	f2 0f 10 0d 2a 8f 01 00 	movsd  xmm1,QWORD PTR [rip+0x18f2a]        # 34ec8 <Law_and_Order+0x628>
   1bf9e:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1bfa2:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1bfa7:	e8 84 7b fe ff       	call   3b30 <exp@plt>
   1bfac:	66 48 0f 7e c0       	movq   rax,xmm0
   1bfb1:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1bfb5:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1bfb8:	48 81 c1 fa c7 00 00 	add    rcx,0xc7fa
   1bfbf:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   1bfc4:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1bfc8:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   1bfcc:	0f 86 4e ff ff ff    	jbe    1bf20 <get_scaled_exp_params+0x105b>
   1bfd2:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1bfd9:	e9 93 13 00 00       	jmp    1d371 <get_scaled_exp_params+0x24ac>
   1bfde:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1bfe5:	e9 79 13 00 00       	jmp    1d363 <get_scaled_exp_params+0x249e>
   1bfea:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1bfee:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   1bff1:	85 c0                	test   eax,eax
   1bff3:	0f 84 f8 12 00 00    	je     1d2f1 <get_scaled_exp_params+0x242c>
   1bff9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1bffd:	0f 85 74 02 00 00    	jne    1c277 <get_scaled_exp_params+0x13b2>
   1c003:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c007:	0f 85 92 00 00 00    	jne    1c09f <get_scaled_exp_params+0x11da>
   1c00d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c010:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c013:	48 89 d0             	mov    rax,rdx
   1c016:	48 c1 e0 02          	shl    rax,0x2
   1c01a:	48 01 d0             	add    rax,rdx
   1c01d:	48 01 c8             	add    rax,rcx
   1c020:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c028:	48 8d 05 11 3e 1d 00 	lea    rax,[rip+0x1d3e11]        # 1efe40 <dangle5_dH>
   1c02f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c032:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c036:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c039:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c03c:	48 89 d0             	mov    rax,rdx
   1c03f:	48 c1 e0 02          	shl    rax,0x2
   1c043:	48 01 d0             	add    rax,rdx
   1c046:	48 01 c8             	add    rax,rcx
   1c049:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c051:	48 8d 05 e8 3d 1d 00 	lea    rax,[rip+0x1d3de8]        # 1efe40 <dangle5_dH>
   1c058:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c05b:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c05e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c061:	48 89 d0             	mov    rax,rdx
   1c064:	48 c1 e0 02          	shl    rax,0x2
   1c068:	48 01 d0             	add    rax,rdx
   1c06b:	48 01 f0             	add    rax,rsi
   1c06e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c076:	48 8d 05 83 3c 1d 00 	lea    rax,[rip+0x1d3c83]        # 1efd00 <dangle5_37>
   1c07d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c080:	29 c1                	sub    ecx,eax
   1c082:	89 c8                	mov    eax,ecx
   1c084:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c088:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c08d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c091:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c095:	85 c0                	test   eax,eax
   1c097:	0f 9f c0             	setg   al
   1c09a:	e9 8f 00 00 00       	jmp    1c12e <get_scaled_exp_params+0x1269>
   1c09f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c0a2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c0a5:	48 89 d0             	mov    rax,rdx
   1c0a8:	48 c1 e0 02          	shl    rax,0x2
   1c0ac:	48 01 d0             	add    rax,rdx
   1c0af:	48 01 c8             	add    rax,rcx
   1c0b2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c0ba:	48 8d 05 7f 3d 1d 00 	lea    rax,[rip+0x1d3d7f]        # 1efe40 <dangle5_dH>
   1c0c1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c0c4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c0c8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c0cb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c0ce:	48 89 d0             	mov    rax,rdx
   1c0d1:	48 c1 e0 02          	shl    rax,0x2
   1c0d5:	48 01 d0             	add    rax,rdx
   1c0d8:	48 01 c8             	add    rax,rcx
   1c0db:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c0e3:	48 8d 05 56 3d 1d 00 	lea    rax,[rip+0x1d3d56]        # 1efe40 <dangle5_dH>
   1c0ea:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c0ed:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c0f0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c0f3:	48 89 d0             	mov    rax,rdx
   1c0f6:	48 c1 e0 02          	shl    rax,0x2
   1c0fa:	48 01 d0             	add    rax,rdx
   1c0fd:	48 01 f0             	add    rax,rsi
   1c100:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c108:	48 8d 05 f1 3b 1d 00 	lea    rax,[rip+0x1d3bf1]        # 1efd00 <dangle5_37>
   1c10f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c112:	29 c1                	sub    ecx,eax
   1c114:	89 c8                	mov    eax,ecx
   1c116:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c11a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c11f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c123:	66 0f ef c9          	pxor   xmm1,xmm1
   1c127:	66 0f 2f c1          	comisd xmm0,xmm1
   1c12b:	0f 97 c0             	seta   al
   1c12e:	84 c0                	test   al,al
   1c130:	74 09                	je     1c13b <get_scaled_exp_params+0x1276>
   1c132:	66 0f ef c0          	pxor   xmm0,xmm0
   1c136:	e9 fd 07 00 00       	jmp    1c938 <get_scaled_exp_params+0x1a73>
   1c13b:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c13f:	0f 85 9d 00 00 00    	jne    1c1e2 <get_scaled_exp_params+0x131d>
   1c145:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c148:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c14b:	48 89 d0             	mov    rax,rdx
   1c14e:	48 c1 e0 02          	shl    rax,0x2
   1c152:	48 01 d0             	add    rax,rdx
   1c155:	48 01 c8             	add    rax,rcx
   1c158:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c160:	48 8d 05 d9 3c 1d 00 	lea    rax,[rip+0x1d3cd9]        # 1efe40 <dangle5_dH>
   1c167:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c16a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c16e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c171:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c174:	48 89 d0             	mov    rax,rdx
   1c177:	48 c1 e0 02          	shl    rax,0x2
   1c17b:	48 01 d0             	add    rax,rdx
   1c17e:	48 01 c8             	add    rax,rcx
   1c181:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c189:	48 8d 05 b0 3c 1d 00 	lea    rax,[rip+0x1d3cb0]        # 1efe40 <dangle5_dH>
   1c190:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c193:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c196:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c199:	48 89 d0             	mov    rax,rdx
   1c19c:	48 c1 e0 02          	shl    rax,0x2
   1c1a0:	48 01 d0             	add    rax,rdx
   1c1a3:	48 01 f0             	add    rax,rsi
   1c1a6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c1ae:	48 8d 05 4b 3b 1d 00 	lea    rax,[rip+0x1d3b4b]        # 1efd00 <dangle5_37>
   1c1b5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c1b8:	29 c1                	sub    ecx,eax
   1c1ba:	89 c8                	mov    eax,ecx
   1c1bc:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c1c0:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c1c5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c1c9:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c1cd:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c1d1:	f3 0f 7e 0d c7 8c 01 00 	movq   xmm1,QWORD PTR [rip+0x18cc7]        # 34ea0 <Law_and_Order+0x600>
   1c1d9:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c1dd:	e9 56 07 00 00       	jmp    1c938 <get_scaled_exp_params+0x1a73>
   1c1e2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c1e5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c1e8:	48 89 d0             	mov    rax,rdx
   1c1eb:	48 c1 e0 02          	shl    rax,0x2
   1c1ef:	48 01 d0             	add    rax,rdx
   1c1f2:	48 01 c8             	add    rax,rcx
   1c1f5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c1fd:	48 8d 05 3c 3c 1d 00 	lea    rax,[rip+0x1d3c3c]        # 1efe40 <dangle5_dH>
   1c204:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c207:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c20b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c20e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c211:	48 89 d0             	mov    rax,rdx
   1c214:	48 c1 e0 02          	shl    rax,0x2
   1c218:	48 01 d0             	add    rax,rdx
   1c21b:	48 01 c8             	add    rax,rcx
   1c21e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c226:	48 8d 05 13 3c 1d 00 	lea    rax,[rip+0x1d3c13]        # 1efe40 <dangle5_dH>
   1c22d:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c230:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c233:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c236:	48 89 d0             	mov    rax,rdx
   1c239:	48 c1 e0 02          	shl    rax,0x2
   1c23d:	48 01 d0             	add    rax,rdx
   1c240:	48 01 f0             	add    rax,rsi
   1c243:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c24b:	48 8d 05 ae 3a 1d 00 	lea    rax,[rip+0x1d3aae]        # 1efd00 <dangle5_37>
   1c252:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c255:	29 c1                	sub    ecx,eax
   1c257:	89 c8                	mov    eax,ecx
   1c259:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c25d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c262:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c266:	f3 0f 7e 0d 32 8c 01 00 	movq   xmm1,QWORD PTR [rip+0x18c32]        # 34ea0 <Law_and_Order+0x600>
   1c26e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c272:	e9 c1 06 00 00       	jmp    1c938 <get_scaled_exp_params+0x1a73>
   1c277:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c27b:	0f 85 9d 00 00 00    	jne    1c31e <get_scaled_exp_params+0x1459>
   1c281:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c284:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c287:	48 89 d0             	mov    rax,rdx
   1c28a:	48 c1 e0 02          	shl    rax,0x2
   1c28e:	48 01 d0             	add    rax,rdx
   1c291:	48 01 c8             	add    rax,rcx
   1c294:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c29c:	48 8d 05 9d 3b 1d 00 	lea    rax,[rip+0x1d3b9d]        # 1efe40 <dangle5_dH>
   1c2a3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c2a6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c2aa:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c2ad:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c2b0:	48 89 d0             	mov    rax,rdx
   1c2b3:	48 c1 e0 02          	shl    rax,0x2
   1c2b7:	48 01 d0             	add    rax,rdx
   1c2ba:	48 01 c8             	add    rax,rcx
   1c2bd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c2c5:	48 8d 05 74 3b 1d 00 	lea    rax,[rip+0x1d3b74]        # 1efe40 <dangle5_dH>
   1c2cc:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c2cf:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c2d2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c2d5:	48 89 d0             	mov    rax,rdx
   1c2d8:	48 c1 e0 02          	shl    rax,0x2
   1c2dc:	48 01 d0             	add    rax,rdx
   1c2df:	48 01 f0             	add    rax,rsi
   1c2e2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c2ea:	48 8d 05 0f 3a 1d 00 	lea    rax,[rip+0x1d3a0f]        # 1efd00 <dangle5_37>
   1c2f1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c2f4:	29 c1                	sub    ecx,eax
   1c2f6:	89 c8                	mov    eax,ecx
   1c2f8:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c2fc:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c301:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c305:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c309:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c30d:	f3 0f 7e 0d 8b 8b 01 00 	movq   xmm1,QWORD PTR [rip+0x18b8b]        # 34ea0 <Law_and_Order+0x600>
   1c315:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c319:	e9 90 00 00 00       	jmp    1c3ae <get_scaled_exp_params+0x14e9>
   1c31e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c321:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c324:	48 89 d0             	mov    rax,rdx
   1c327:	48 c1 e0 02          	shl    rax,0x2
   1c32b:	48 01 d0             	add    rax,rdx
   1c32e:	48 01 c8             	add    rax,rcx
   1c331:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c339:	48 8d 05 00 3b 1d 00 	lea    rax,[rip+0x1d3b00]        # 1efe40 <dangle5_dH>
   1c340:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c343:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c347:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c34a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c34d:	48 89 d0             	mov    rax,rdx
   1c350:	48 c1 e0 02          	shl    rax,0x2
   1c354:	48 01 d0             	add    rax,rdx
   1c357:	48 01 c8             	add    rax,rcx
   1c35a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c362:	48 8d 05 d7 3a 1d 00 	lea    rax,[rip+0x1d3ad7]        # 1efe40 <dangle5_dH>
   1c369:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c36c:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c36f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c372:	48 89 d0             	mov    rax,rdx
   1c375:	48 c1 e0 02          	shl    rax,0x2
   1c379:	48 01 d0             	add    rax,rdx
   1c37c:	48 01 f0             	add    rax,rsi
   1c37f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c387:	48 8d 05 72 39 1d 00 	lea    rax,[rip+0x1d3972]        # 1efd00 <dangle5_37>
   1c38e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c391:	29 c1                	sub    ecx,eax
   1c393:	89 c8                	mov    eax,ecx
   1c395:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c399:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c39e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c3a2:	f3 0f 7e 0d f6 8a 01 00 	movq   xmm1,QWORD PTR [rip+0x18af6]        # 34ea0 <Law_and_Order+0x600>
   1c3aa:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c3ae:	f2 0f 10 0d 12 8b 01 00 	movsd  xmm1,QWORD PTR [rip+0x18b12]        # 34ec8 <Law_and_Order+0x628>
   1c3b6:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1c3ba:	66 0f 28 c8          	movapd xmm1,xmm0
   1c3be:	f2 0f 10 05 1a 8b 01 00 	movsd  xmm0,QWORD PTR [rip+0x18b1a]        # 34ee0 <Law_and_Order+0x640>
   1c3c6:	66 0f 2f c1          	comisd xmm0,xmm1
   1c3ca:	76 09                	jbe    1c3d5 <get_scaled_exp_params+0x1510>
   1c3cc:	66 0f ef c0          	pxor   xmm0,xmm0
   1c3d0:	e9 63 05 00 00       	jmp    1c938 <get_scaled_exp_params+0x1a73>
   1c3d5:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c3d9:	0f 85 9d 00 00 00    	jne    1c47c <get_scaled_exp_params+0x15b7>
   1c3df:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c3e2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c3e5:	48 89 d0             	mov    rax,rdx
   1c3e8:	48 c1 e0 02          	shl    rax,0x2
   1c3ec:	48 01 d0             	add    rax,rdx
   1c3ef:	48 01 c8             	add    rax,rcx
   1c3f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c3fa:	48 8d 05 3f 3a 1d 00 	lea    rax,[rip+0x1d3a3f]        # 1efe40 <dangle5_dH>
   1c401:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c404:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c408:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c40b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c40e:	48 89 d0             	mov    rax,rdx
   1c411:	48 c1 e0 02          	shl    rax,0x2
   1c415:	48 01 d0             	add    rax,rdx
   1c418:	48 01 c8             	add    rax,rcx
   1c41b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c423:	48 8d 05 16 3a 1d 00 	lea    rax,[rip+0x1d3a16]        # 1efe40 <dangle5_dH>
   1c42a:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c42d:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c430:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c433:	48 89 d0             	mov    rax,rdx
   1c436:	48 c1 e0 02          	shl    rax,0x2
   1c43a:	48 01 d0             	add    rax,rdx
   1c43d:	48 01 f0             	add    rax,rsi
   1c440:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c448:	48 8d 05 b1 38 1d 00 	lea    rax,[rip+0x1d38b1]        # 1efd00 <dangle5_37>
   1c44f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c452:	29 c1                	sub    ecx,eax
   1c454:	89 c8                	mov    eax,ecx
   1c456:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c45a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c45f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c463:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c467:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c46b:	f3 0f 7e 0d 2d 8a 01 00 	movq   xmm1,QWORD PTR [rip+0x18a2d]        # 34ea0 <Law_and_Order+0x600>
   1c473:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c477:	e9 90 00 00 00       	jmp    1c50c <get_scaled_exp_params+0x1647>
   1c47c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c47f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c482:	48 89 d0             	mov    rax,rdx
   1c485:	48 c1 e0 02          	shl    rax,0x2
   1c489:	48 01 d0             	add    rax,rdx
   1c48c:	48 01 c8             	add    rax,rcx
   1c48f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c497:	48 8d 05 a2 39 1d 00 	lea    rax,[rip+0x1d39a2]        # 1efe40 <dangle5_dH>
   1c49e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c4a1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c4a5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c4a8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c4ab:	48 89 d0             	mov    rax,rdx
   1c4ae:	48 c1 e0 02          	shl    rax,0x2
   1c4b2:	48 01 d0             	add    rax,rdx
   1c4b5:	48 01 c8             	add    rax,rcx
   1c4b8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c4c0:	48 8d 05 79 39 1d 00 	lea    rax,[rip+0x1d3979]        # 1efe40 <dangle5_dH>
   1c4c7:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c4ca:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c4cd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c4d0:	48 89 d0             	mov    rax,rdx
   1c4d3:	48 c1 e0 02          	shl    rax,0x2
   1c4d7:	48 01 d0             	add    rax,rdx
   1c4da:	48 01 f0             	add    rax,rsi
   1c4dd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c4e5:	48 8d 05 14 38 1d 00 	lea    rax,[rip+0x1d3814]        # 1efd00 <dangle5_37>
   1c4ec:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c4ef:	29 c1                	sub    ecx,eax
   1c4f1:	89 c8                	mov    eax,ecx
   1c4f3:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c4f7:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c4fc:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c500:	f3 0f 7e 0d 98 89 01 00 	movq   xmm1,QWORD PTR [rip+0x18998]        # 34ea0 <Law_and_Order+0x600>
   1c508:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c50c:	f2 0f 10 0d b4 89 01 00 	movsd  xmm1,QWORD PTR [rip+0x189b4]        # 34ec8 <Law_and_Order+0x628>
   1c514:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1c518:	66 0f 2f 05 c8 89 01 00 	comisd xmm0,QWORD PTR [rip+0x189c8]        # 34ee8 <Law_and_Order+0x648>
   1c520:	0f 86 3c 01 00 00    	jbe    1c662 <get_scaled_exp_params+0x179d>
   1c526:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c52a:	0f 85 9d 00 00 00    	jne    1c5cd <get_scaled_exp_params+0x1708>
   1c530:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c533:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c536:	48 89 d0             	mov    rax,rdx
   1c539:	48 c1 e0 02          	shl    rax,0x2
   1c53d:	48 01 d0             	add    rax,rdx
   1c540:	48 01 c8             	add    rax,rcx
   1c543:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c54b:	48 8d 05 ee 38 1d 00 	lea    rax,[rip+0x1d38ee]        # 1efe40 <dangle5_dH>
   1c552:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c555:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c559:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c55c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c55f:	48 89 d0             	mov    rax,rdx
   1c562:	48 c1 e0 02          	shl    rax,0x2
   1c566:	48 01 d0             	add    rax,rdx
   1c569:	48 01 c8             	add    rax,rcx
   1c56c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c574:	48 8d 05 c5 38 1d 00 	lea    rax,[rip+0x1d38c5]        # 1efe40 <dangle5_dH>
   1c57b:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c57e:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c581:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c584:	48 89 d0             	mov    rax,rdx
   1c587:	48 c1 e0 02          	shl    rax,0x2
   1c58b:	48 01 d0             	add    rax,rdx
   1c58e:	48 01 f0             	add    rax,rsi
   1c591:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c599:	48 8d 05 60 37 1d 00 	lea    rax,[rip+0x1d3760]        # 1efd00 <dangle5_37>
   1c5a0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c5a3:	29 c1                	sub    ecx,eax
   1c5a5:	89 c8                	mov    eax,ecx
   1c5a7:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c5ab:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c5b0:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c5b4:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c5b8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c5bc:	f3 0f 7e 0d dc 88 01 00 	movq   xmm1,QWORD PTR [rip+0x188dc]        # 34ea0 <Law_and_Order+0x600>
   1c5c4:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c5c8:	e9 6b 03 00 00       	jmp    1c938 <get_scaled_exp_params+0x1a73>
   1c5cd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c5d0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c5d3:	48 89 d0             	mov    rax,rdx
   1c5d6:	48 c1 e0 02          	shl    rax,0x2
   1c5da:	48 01 d0             	add    rax,rdx
   1c5dd:	48 01 c8             	add    rax,rcx
   1c5e0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c5e8:	48 8d 05 51 38 1d 00 	lea    rax,[rip+0x1d3851]        # 1efe40 <dangle5_dH>
   1c5ef:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c5f2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c5f6:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c5f9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c5fc:	48 89 d0             	mov    rax,rdx
   1c5ff:	48 c1 e0 02          	shl    rax,0x2
   1c603:	48 01 d0             	add    rax,rdx
   1c606:	48 01 c8             	add    rax,rcx
   1c609:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c611:	48 8d 05 28 38 1d 00 	lea    rax,[rip+0x1d3828]        # 1efe40 <dangle5_dH>
   1c618:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c61b:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c61e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c621:	48 89 d0             	mov    rax,rdx
   1c624:	48 c1 e0 02          	shl    rax,0x2
   1c628:	48 01 d0             	add    rax,rdx
   1c62b:	48 01 f0             	add    rax,rsi
   1c62e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c636:	48 8d 05 c3 36 1d 00 	lea    rax,[rip+0x1d36c3]        # 1efd00 <dangle5_37>
   1c63d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c640:	29 c1                	sub    ecx,eax
   1c642:	89 c8                	mov    eax,ecx
   1c644:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c648:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c64d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c651:	f3 0f 7e 0d 47 88 01 00 	movq   xmm1,QWORD PTR [rip+0x18847]        # 34ea0 <Law_and_Order+0x600>
   1c659:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c65d:	e9 d6 02 00 00       	jmp    1c938 <get_scaled_exp_params+0x1a73>
   1c662:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c666:	0f 85 9d 00 00 00    	jne    1c709 <get_scaled_exp_params+0x1844>
   1c66c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c66f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c672:	48 89 d0             	mov    rax,rdx
   1c675:	48 c1 e0 02          	shl    rax,0x2
   1c679:	48 01 d0             	add    rax,rdx
   1c67c:	48 01 c8             	add    rax,rcx
   1c67f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c687:	48 8d 05 b2 37 1d 00 	lea    rax,[rip+0x1d37b2]        # 1efe40 <dangle5_dH>
   1c68e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c691:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c695:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c698:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c69b:	48 89 d0             	mov    rax,rdx
   1c69e:	48 c1 e0 02          	shl    rax,0x2
   1c6a2:	48 01 d0             	add    rax,rdx
   1c6a5:	48 01 c8             	add    rax,rcx
   1c6a8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c6b0:	48 8d 05 89 37 1d 00 	lea    rax,[rip+0x1d3789]        # 1efe40 <dangle5_dH>
   1c6b7:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c6ba:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c6bd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c6c0:	48 89 d0             	mov    rax,rdx
   1c6c3:	48 c1 e0 02          	shl    rax,0x2
   1c6c7:	48 01 d0             	add    rax,rdx
   1c6ca:	48 01 f0             	add    rax,rsi
   1c6cd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c6d5:	48 8d 05 24 36 1d 00 	lea    rax,[rip+0x1d3624]        # 1efd00 <dangle5_37>
   1c6dc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c6df:	29 c1                	sub    ecx,eax
   1c6e1:	89 c8                	mov    eax,ecx
   1c6e3:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c6e7:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c6ec:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c6f0:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c6f4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c6f8:	f3 0f 7e 0d a0 87 01 00 	movq   xmm1,QWORD PTR [rip+0x187a0]        # 34ea0 <Law_and_Order+0x600>
   1c700:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c704:	e9 90 00 00 00       	jmp    1c799 <get_scaled_exp_params+0x18d4>
   1c709:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c70c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c70f:	48 89 d0             	mov    rax,rdx
   1c712:	48 c1 e0 02          	shl    rax,0x2
   1c716:	48 01 d0             	add    rax,rdx
   1c719:	48 01 c8             	add    rax,rcx
   1c71c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c724:	48 8d 05 15 37 1d 00 	lea    rax,[rip+0x1d3715]        # 1efe40 <dangle5_dH>
   1c72b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c72e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c732:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c735:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c738:	48 89 d0             	mov    rax,rdx
   1c73b:	48 c1 e0 02          	shl    rax,0x2
   1c73f:	48 01 d0             	add    rax,rdx
   1c742:	48 01 c8             	add    rax,rcx
   1c745:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c74d:	48 8d 05 ec 36 1d 00 	lea    rax,[rip+0x1d36ec]        # 1efe40 <dangle5_dH>
   1c754:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c757:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c75a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c75d:	48 89 d0             	mov    rax,rdx
   1c760:	48 c1 e0 02          	shl    rax,0x2
   1c764:	48 01 d0             	add    rax,rdx
   1c767:	48 01 f0             	add    rax,rsi
   1c76a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c772:	48 8d 05 87 35 1d 00 	lea    rax,[rip+0x1d3587]        # 1efd00 <dangle5_37>
   1c779:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c77c:	29 c1                	sub    ecx,eax
   1c77e:	89 c8                	mov    eax,ecx
   1c780:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c784:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c789:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c78d:	f3 0f 7e 0d 0b 87 01 00 	movq   xmm1,QWORD PTR [rip+0x1870b]        # 34ea0 <Law_and_Order+0x600>
   1c795:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c799:	f2 0f 10 0d 27 87 01 00 	movsd  xmm1,QWORD PTR [rip+0x18727]        # 34ec8 <Law_and_Order+0x628>
   1c7a1:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1c7a5:	f2 0f 10 0d 43 87 01 00 	movsd  xmm1,QWORD PTR [rip+0x18743]        # 34ef0 <Law_and_Order+0x650>
   1c7ad:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c7b1:	e8 9a 6e fe ff       	call   3650 <sin@plt>
   1c7b6:	f2 0f 10 0d ba 86 01 00 	movsd  xmm1,QWORD PTR [rip+0x186ba]        # 34e78 <Law_and_Order+0x5d8>
   1c7be:	f2 0f 58 c8          	addsd  xmm1,xmm0
   1c7c2:	f2 0f 10 05 2e 87 01 00 	movsd  xmm0,QWORD PTR [rip+0x1872e]        # 34ef8 <Law_and_Order+0x658>
   1c7ca:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   1c7ce:	f2 0f 11 4d 88       	movsd  QWORD PTR [rbp-0x78],xmm1
   1c7d3:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c7d7:	0f 85 9d 00 00 00    	jne    1c87a <get_scaled_exp_params+0x19b5>
   1c7dd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c7e0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c7e3:	48 89 d0             	mov    rax,rdx
   1c7e6:	48 c1 e0 02          	shl    rax,0x2
   1c7ea:	48 01 d0             	add    rax,rdx
   1c7ed:	48 01 c8             	add    rax,rcx
   1c7f0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c7f8:	48 8d 05 41 36 1d 00 	lea    rax,[rip+0x1d3641]        # 1efe40 <dangle5_dH>
   1c7ff:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c802:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c806:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c809:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c80c:	48 89 d0             	mov    rax,rdx
   1c80f:	48 c1 e0 02          	shl    rax,0x2
   1c813:	48 01 d0             	add    rax,rdx
   1c816:	48 01 c8             	add    rax,rcx
   1c819:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c821:	48 8d 05 18 36 1d 00 	lea    rax,[rip+0x1d3618]        # 1efe40 <dangle5_dH>
   1c828:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c82b:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c82e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c831:	48 89 d0             	mov    rax,rdx
   1c834:	48 c1 e0 02          	shl    rax,0x2
   1c838:	48 01 d0             	add    rax,rdx
   1c83b:	48 01 f0             	add    rax,rsi
   1c83e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c846:	48 8d 05 b3 34 1d 00 	lea    rax,[rip+0x1d34b3]        # 1efd00 <dangle5_37>
   1c84d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c850:	29 c1                	sub    ecx,eax
   1c852:	89 c8                	mov    eax,ecx
   1c854:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c858:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c85d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c861:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1c865:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c869:	f3 0f 7e 0d 2f 86 01 00 	movq   xmm1,QWORD PTR [rip+0x1862f]        # 34ea0 <Law_and_Order+0x600>
   1c871:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c875:	e9 90 00 00 00       	jmp    1c90a <get_scaled_exp_params+0x1a45>
   1c87a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c87d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c880:	48 89 d0             	mov    rax,rdx
   1c883:	48 c1 e0 02          	shl    rax,0x2
   1c887:	48 01 d0             	add    rax,rdx
   1c88a:	48 01 c8             	add    rax,rcx
   1c88d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c895:	48 8d 05 a4 35 1d 00 	lea    rax,[rip+0x1d35a4]        # 1efe40 <dangle5_dH>
   1c89c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c89f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c8a3:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c8a6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c8a9:	48 89 d0             	mov    rax,rdx
   1c8ac:	48 c1 e0 02          	shl    rax,0x2
   1c8b0:	48 01 d0             	add    rax,rdx
   1c8b3:	48 01 c8             	add    rax,rcx
   1c8b6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c8be:	48 8d 05 7b 35 1d 00 	lea    rax,[rip+0x1d357b]        # 1efe40 <dangle5_dH>
   1c8c5:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c8c8:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c8cb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c8ce:	48 89 d0             	mov    rax,rdx
   1c8d1:	48 c1 e0 02          	shl    rax,0x2
   1c8d5:	48 01 d0             	add    rax,rdx
   1c8d8:	48 01 f0             	add    rax,rsi
   1c8db:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c8e3:	48 8d 05 16 34 1d 00 	lea    rax,[rip+0x1d3416]        # 1efd00 <dangle5_37>
   1c8ea:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c8ed:	29 c1                	sub    ecx,eax
   1c8ef:	89 c8                	mov    eax,ecx
   1c8f1:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1c8f5:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1c8fa:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c8fe:	f3 0f 7e 0d 9a 85 01 00 	movq   xmm1,QWORD PTR [rip+0x1859a]        # 34ea0 <Law_and_Order+0x600>
   1c906:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1c90a:	f2 0f 10 0d b6 85 01 00 	movsd  xmm1,QWORD PTR [rip+0x185b6]        # 34ec8 <Law_and_Order+0x628>
   1c912:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1c916:	f2 0f 10 0d d2 85 01 00 	movsd  xmm1,QWORD PTR [rip+0x185d2]        # 34ef0 <Law_and_Order+0x650>
   1c91e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1c922:	e8 29 6d fe ff       	call   3650 <sin@plt>
   1c927:	f2 0f 10 0d 49 85 01 00 	movsd  xmm1,QWORD PTR [rip+0x18549]        # 34e78 <Law_and_Order+0x5d8>
   1c92f:	f2 0f 58 c1          	addsd  xmm0,xmm1
   1c933:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1c938:	f2 0f 10 0d 88 85 01 00 	movsd  xmm1,QWORD PTR [rip+0x18588]        # 34ec8 <Law_and_Order+0x628>
   1c940:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1c944:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1c949:	e8 e2 71 fe ff       	call   3b30 <exp@plt>
   1c94e:	66 48 0f 7e c1       	movq   rcx,xmm0
   1c953:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   1c957:	8b 7d a4             	mov    edi,DWORD PTR [rbp-0x5c]
   1c95a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c95d:	48 89 d0             	mov    rax,rdx
   1c960:	48 c1 e0 02          	shl    rax,0x2
   1c964:	48 01 d0             	add    rax,rdx
   1c967:	48 01 f8             	add    rax,rdi
   1c96a:	48 05 4e 05 00 00    	add    rax,0x54e
   1c970:	48 89 0c c6          	mov    QWORD PTR [rsi+rax*8],rcx
   1c974:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c978:	0f 85 74 02 00 00    	jne    1cbf2 <get_scaled_exp_params+0x1d2d>
   1c97e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1c982:	0f 85 92 00 00 00    	jne    1ca1a <get_scaled_exp_params+0x1b55>
   1c988:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c98b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c98e:	48 89 d0             	mov    rax,rdx
   1c991:	48 c1 e0 02          	shl    rax,0x2
   1c995:	48 01 d0             	add    rax,rdx
   1c998:	48 01 c8             	add    rax,rcx
   1c99b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c9a3:	48 8d 05 36 35 1d 00 	lea    rax,[rip+0x1d3536]        # 1efee0 <dangle3_dH>
   1c9aa:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c9ad:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1c9b1:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1c9b4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c9b7:	48 89 d0             	mov    rax,rdx
   1c9ba:	48 c1 e0 02          	shl    rax,0x2
   1c9be:	48 01 d0             	add    rax,rdx
   1c9c1:	48 01 c8             	add    rax,rcx
   1c9c4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c9cc:	48 8d 05 0d 35 1d 00 	lea    rax,[rip+0x1d350d]        # 1efee0 <dangle3_dH>
   1c9d3:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1c9d6:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1c9d9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1c9dc:	48 89 d0             	mov    rax,rdx
   1c9df:	48 c1 e0 02          	shl    rax,0x2
   1c9e3:	48 01 d0             	add    rax,rdx
   1c9e6:	48 01 f0             	add    rax,rsi
   1c9e9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c9f1:	48 8d 05 a8 33 1d 00 	lea    rax,[rip+0x1d33a8]        # 1efda0 <dangle3_37>
   1c9f8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1c9fb:	29 c1                	sub    ecx,eax
   1c9fd:	89 c8                	mov    eax,ecx
   1c9ff:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ca03:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ca08:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ca0c:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1ca10:	85 c0                	test   eax,eax
   1ca12:	0f 9f c0             	setg   al
   1ca15:	e9 8f 00 00 00       	jmp    1caa9 <get_scaled_exp_params+0x1be4>
   1ca1a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ca1d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ca20:	48 89 d0             	mov    rax,rdx
   1ca23:	48 c1 e0 02          	shl    rax,0x2
   1ca27:	48 01 d0             	add    rax,rdx
   1ca2a:	48 01 c8             	add    rax,rcx
   1ca2d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ca35:	48 8d 05 a4 34 1d 00 	lea    rax,[rip+0x1d34a4]        # 1efee0 <dangle3_dH>
   1ca3c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ca3f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ca43:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ca46:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ca49:	48 89 d0             	mov    rax,rdx
   1ca4c:	48 c1 e0 02          	shl    rax,0x2
   1ca50:	48 01 d0             	add    rax,rdx
   1ca53:	48 01 c8             	add    rax,rcx
   1ca56:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ca5e:	48 8d 05 7b 34 1d 00 	lea    rax,[rip+0x1d347b]        # 1efee0 <dangle3_dH>
   1ca65:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1ca68:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1ca6b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ca6e:	48 89 d0             	mov    rax,rdx
   1ca71:	48 c1 e0 02          	shl    rax,0x2
   1ca75:	48 01 d0             	add    rax,rdx
   1ca78:	48 01 f0             	add    rax,rsi
   1ca7b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ca83:	48 8d 05 16 33 1d 00 	lea    rax,[rip+0x1d3316]        # 1efda0 <dangle3_37>
   1ca8a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ca8d:	29 c1                	sub    ecx,eax
   1ca8f:	89 c8                	mov    eax,ecx
   1ca91:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ca95:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ca9a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ca9e:	66 0f ef c9          	pxor   xmm1,xmm1
   1caa2:	66 0f 2f c1          	comisd xmm0,xmm1
   1caa6:	0f 97 c0             	seta   al
   1caa9:	84 c0                	test   al,al
   1caab:	74 09                	je     1cab6 <get_scaled_exp_params+0x1bf1>
   1caad:	66 0f ef c0          	pxor   xmm0,xmm0
   1cab1:	e9 fd 07 00 00       	jmp    1d2b3 <get_scaled_exp_params+0x23ee>
   1cab6:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1caba:	0f 85 9d 00 00 00    	jne    1cb5d <get_scaled_exp_params+0x1c98>
   1cac0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cac3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cac6:	48 89 d0             	mov    rax,rdx
   1cac9:	48 c1 e0 02          	shl    rax,0x2
   1cacd:	48 01 d0             	add    rax,rdx
   1cad0:	48 01 c8             	add    rax,rcx
   1cad3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cadb:	48 8d 05 fe 33 1d 00 	lea    rax,[rip+0x1d33fe]        # 1efee0 <dangle3_dH>
   1cae2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cae5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cae9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1caec:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1caef:	48 89 d0             	mov    rax,rdx
   1caf2:	48 c1 e0 02          	shl    rax,0x2
   1caf6:	48 01 d0             	add    rax,rdx
   1caf9:	48 01 c8             	add    rax,rcx
   1cafc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cb04:	48 8d 05 d5 33 1d 00 	lea    rax,[rip+0x1d33d5]        # 1efee0 <dangle3_dH>
   1cb0b:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cb0e:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1cb11:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cb14:	48 89 d0             	mov    rax,rdx
   1cb17:	48 c1 e0 02          	shl    rax,0x2
   1cb1b:	48 01 d0             	add    rax,rdx
   1cb1e:	48 01 f0             	add    rax,rsi
   1cb21:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cb29:	48 8d 05 70 32 1d 00 	lea    rax,[rip+0x1d3270]        # 1efda0 <dangle3_37>
   1cb30:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cb33:	29 c1                	sub    ecx,eax
   1cb35:	89 c8                	mov    eax,ecx
   1cb37:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cb3b:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cb40:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cb44:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1cb48:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cb4c:	f3 0f 7e 0d 4c 83 01 00 	movq   xmm1,QWORD PTR [rip+0x1834c]        # 34ea0 <Law_and_Order+0x600>
   1cb54:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cb58:	e9 56 07 00 00       	jmp    1d2b3 <get_scaled_exp_params+0x23ee>
   1cb5d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cb60:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cb63:	48 89 d0             	mov    rax,rdx
   1cb66:	48 c1 e0 02          	shl    rax,0x2
   1cb6a:	48 01 d0             	add    rax,rdx
   1cb6d:	48 01 c8             	add    rax,rcx
   1cb70:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cb78:	48 8d 05 61 33 1d 00 	lea    rax,[rip+0x1d3361]        # 1efee0 <dangle3_dH>
   1cb7f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cb82:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cb86:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cb89:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cb8c:	48 89 d0             	mov    rax,rdx
   1cb8f:	48 c1 e0 02          	shl    rax,0x2
   1cb93:	48 01 d0             	add    rax,rdx
   1cb96:	48 01 c8             	add    rax,rcx
   1cb99:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cba1:	48 8d 05 38 33 1d 00 	lea    rax,[rip+0x1d3338]        # 1efee0 <dangle3_dH>
   1cba8:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cbab:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1cbae:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cbb1:	48 89 d0             	mov    rax,rdx
   1cbb4:	48 c1 e0 02          	shl    rax,0x2
   1cbb8:	48 01 d0             	add    rax,rdx
   1cbbb:	48 01 f0             	add    rax,rsi
   1cbbe:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cbc6:	48 8d 05 d3 31 1d 00 	lea    rax,[rip+0x1d31d3]        # 1efda0 <dangle3_37>
   1cbcd:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cbd0:	29 c1                	sub    ecx,eax
   1cbd2:	89 c8                	mov    eax,ecx
   1cbd4:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cbd8:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cbdd:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cbe1:	f3 0f 7e 0d b7 82 01 00 	movq   xmm1,QWORD PTR [rip+0x182b7]        # 34ea0 <Law_and_Order+0x600>
   1cbe9:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cbed:	e9 c1 06 00 00       	jmp    1d2b3 <get_scaled_exp_params+0x23ee>
   1cbf2:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1cbf6:	0f 85 9d 00 00 00    	jne    1cc99 <get_scaled_exp_params+0x1dd4>
   1cbfc:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cbff:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cc02:	48 89 d0             	mov    rax,rdx
   1cc05:	48 c1 e0 02          	shl    rax,0x2
   1cc09:	48 01 d0             	add    rax,rdx
   1cc0c:	48 01 c8             	add    rax,rcx
   1cc0f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cc17:	48 8d 05 c2 32 1d 00 	lea    rax,[rip+0x1d32c2]        # 1efee0 <dangle3_dH>
   1cc1e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cc21:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cc25:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cc28:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cc2b:	48 89 d0             	mov    rax,rdx
   1cc2e:	48 c1 e0 02          	shl    rax,0x2
   1cc32:	48 01 d0             	add    rax,rdx
   1cc35:	48 01 c8             	add    rax,rcx
   1cc38:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cc40:	48 8d 05 99 32 1d 00 	lea    rax,[rip+0x1d3299]        # 1efee0 <dangle3_dH>
   1cc47:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cc4a:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1cc4d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cc50:	48 89 d0             	mov    rax,rdx
   1cc53:	48 c1 e0 02          	shl    rax,0x2
   1cc57:	48 01 d0             	add    rax,rdx
   1cc5a:	48 01 f0             	add    rax,rsi
   1cc5d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cc65:	48 8d 05 34 31 1d 00 	lea    rax,[rip+0x1d3134]        # 1efda0 <dangle3_37>
   1cc6c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cc6f:	29 c1                	sub    ecx,eax
   1cc71:	89 c8                	mov    eax,ecx
   1cc73:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cc77:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cc7c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cc80:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1cc84:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cc88:	f3 0f 7e 0d 10 82 01 00 	movq   xmm1,QWORD PTR [rip+0x18210]        # 34ea0 <Law_and_Order+0x600>
   1cc90:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cc94:	e9 90 00 00 00       	jmp    1cd29 <get_scaled_exp_params+0x1e64>
   1cc99:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cc9c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cc9f:	48 89 d0             	mov    rax,rdx
   1cca2:	48 c1 e0 02          	shl    rax,0x2
   1cca6:	48 01 d0             	add    rax,rdx
   1cca9:	48 01 c8             	add    rax,rcx
   1ccac:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ccb4:	48 8d 05 25 32 1d 00 	lea    rax,[rip+0x1d3225]        # 1efee0 <dangle3_dH>
   1ccbb:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ccbe:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ccc2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ccc5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ccc8:	48 89 d0             	mov    rax,rdx
   1cccb:	48 c1 e0 02          	shl    rax,0x2
   1cccf:	48 01 d0             	add    rax,rdx
   1ccd2:	48 01 c8             	add    rax,rcx
   1ccd5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ccdd:	48 8d 05 fc 31 1d 00 	lea    rax,[rip+0x1d31fc]        # 1efee0 <dangle3_dH>
   1cce4:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cce7:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1ccea:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cced:	48 89 d0             	mov    rax,rdx
   1ccf0:	48 c1 e0 02          	shl    rax,0x2
   1ccf4:	48 01 d0             	add    rax,rdx
   1ccf7:	48 01 f0             	add    rax,rsi
   1ccfa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cd02:	48 8d 05 97 30 1d 00 	lea    rax,[rip+0x1d3097]        # 1efda0 <dangle3_37>
   1cd09:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cd0c:	29 c1                	sub    ecx,eax
   1cd0e:	89 c8                	mov    eax,ecx
   1cd10:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cd14:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cd19:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cd1d:	f3 0f 7e 0d 7b 81 01 00 	movq   xmm1,QWORD PTR [rip+0x1817b]        # 34ea0 <Law_and_Order+0x600>
   1cd25:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cd29:	f2 0f 10 0d 97 81 01 00 	movsd  xmm1,QWORD PTR [rip+0x18197]        # 34ec8 <Law_and_Order+0x628>
   1cd31:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1cd35:	66 0f 28 c8          	movapd xmm1,xmm0
   1cd39:	f2 0f 10 05 9f 81 01 00 	movsd  xmm0,QWORD PTR [rip+0x1819f]        # 34ee0 <Law_and_Order+0x640>
   1cd41:	66 0f 2f c1          	comisd xmm0,xmm1
   1cd45:	76 09                	jbe    1cd50 <get_scaled_exp_params+0x1e8b>
   1cd47:	66 0f ef c0          	pxor   xmm0,xmm0
   1cd4b:	e9 63 05 00 00       	jmp    1d2b3 <get_scaled_exp_params+0x23ee>
   1cd50:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1cd54:	0f 85 9d 00 00 00    	jne    1cdf7 <get_scaled_exp_params+0x1f32>
   1cd5a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cd5d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cd60:	48 89 d0             	mov    rax,rdx
   1cd63:	48 c1 e0 02          	shl    rax,0x2
   1cd67:	48 01 d0             	add    rax,rdx
   1cd6a:	48 01 c8             	add    rax,rcx
   1cd6d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cd75:	48 8d 05 64 31 1d 00 	lea    rax,[rip+0x1d3164]        # 1efee0 <dangle3_dH>
   1cd7c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cd7f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cd83:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cd86:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cd89:	48 89 d0             	mov    rax,rdx
   1cd8c:	48 c1 e0 02          	shl    rax,0x2
   1cd90:	48 01 d0             	add    rax,rdx
   1cd93:	48 01 c8             	add    rax,rcx
   1cd96:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cd9e:	48 8d 05 3b 31 1d 00 	lea    rax,[rip+0x1d313b]        # 1efee0 <dangle3_dH>
   1cda5:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cda8:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1cdab:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cdae:	48 89 d0             	mov    rax,rdx
   1cdb1:	48 c1 e0 02          	shl    rax,0x2
   1cdb5:	48 01 d0             	add    rax,rdx
   1cdb8:	48 01 f0             	add    rax,rsi
   1cdbb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cdc3:	48 8d 05 d6 2f 1d 00 	lea    rax,[rip+0x1d2fd6]        # 1efda0 <dangle3_37>
   1cdca:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cdcd:	29 c1                	sub    ecx,eax
   1cdcf:	89 c8                	mov    eax,ecx
   1cdd1:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cdd5:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cdda:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cdde:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1cde2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cde6:	f3 0f 7e 0d b2 80 01 00 	movq   xmm1,QWORD PTR [rip+0x180b2]        # 34ea0 <Law_and_Order+0x600>
   1cdee:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cdf2:	e9 90 00 00 00       	jmp    1ce87 <get_scaled_exp_params+0x1fc2>
   1cdf7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cdfa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cdfd:	48 89 d0             	mov    rax,rdx
   1ce00:	48 c1 e0 02          	shl    rax,0x2
   1ce04:	48 01 d0             	add    rax,rdx
   1ce07:	48 01 c8             	add    rax,rcx
   1ce0a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ce12:	48 8d 05 c7 30 1d 00 	lea    rax,[rip+0x1d30c7]        # 1efee0 <dangle3_dH>
   1ce19:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ce1c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ce20:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ce23:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ce26:	48 89 d0             	mov    rax,rdx
   1ce29:	48 c1 e0 02          	shl    rax,0x2
   1ce2d:	48 01 d0             	add    rax,rdx
   1ce30:	48 01 c8             	add    rax,rcx
   1ce33:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ce3b:	48 8d 05 9e 30 1d 00 	lea    rax,[rip+0x1d309e]        # 1efee0 <dangle3_dH>
   1ce42:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1ce45:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1ce48:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ce4b:	48 89 d0             	mov    rax,rdx
   1ce4e:	48 c1 e0 02          	shl    rax,0x2
   1ce52:	48 01 d0             	add    rax,rdx
   1ce55:	48 01 f0             	add    rax,rsi
   1ce58:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ce60:	48 8d 05 39 2f 1d 00 	lea    rax,[rip+0x1d2f39]        # 1efda0 <dangle3_37>
   1ce67:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ce6a:	29 c1                	sub    ecx,eax
   1ce6c:	89 c8                	mov    eax,ecx
   1ce6e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ce72:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ce77:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ce7b:	f3 0f 7e 0d 1d 80 01 00 	movq   xmm1,QWORD PTR [rip+0x1801d]        # 34ea0 <Law_and_Order+0x600>
   1ce83:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1ce87:	f2 0f 10 0d 39 80 01 00 	movsd  xmm1,QWORD PTR [rip+0x18039]        # 34ec8 <Law_and_Order+0x628>
   1ce8f:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1ce93:	66 0f 2f 05 4d 80 01 00 	comisd xmm0,QWORD PTR [rip+0x1804d]        # 34ee8 <Law_and_Order+0x648>
   1ce9b:	0f 86 3c 01 00 00    	jbe    1cfdd <get_scaled_exp_params+0x2118>
   1cea1:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1cea5:	0f 85 9d 00 00 00    	jne    1cf48 <get_scaled_exp_params+0x2083>
   1ceab:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ceae:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ceb1:	48 89 d0             	mov    rax,rdx
   1ceb4:	48 c1 e0 02          	shl    rax,0x2
   1ceb8:	48 01 d0             	add    rax,rdx
   1cebb:	48 01 c8             	add    rax,rcx
   1cebe:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cec6:	48 8d 05 13 30 1d 00 	lea    rax,[rip+0x1d3013]        # 1efee0 <dangle3_dH>
   1cecd:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ced0:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ced4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ced7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ceda:	48 89 d0             	mov    rax,rdx
   1cedd:	48 c1 e0 02          	shl    rax,0x2
   1cee1:	48 01 d0             	add    rax,rdx
   1cee4:	48 01 c8             	add    rax,rcx
   1cee7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ceef:	48 8d 05 ea 2f 1d 00 	lea    rax,[rip+0x1d2fea]        # 1efee0 <dangle3_dH>
   1cef6:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cef9:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1cefc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ceff:	48 89 d0             	mov    rax,rdx
   1cf02:	48 c1 e0 02          	shl    rax,0x2
   1cf06:	48 01 d0             	add    rax,rdx
   1cf09:	48 01 f0             	add    rax,rsi
   1cf0c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cf14:	48 8d 05 85 2e 1d 00 	lea    rax,[rip+0x1d2e85]        # 1efda0 <dangle3_37>
   1cf1b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cf1e:	29 c1                	sub    ecx,eax
   1cf20:	89 c8                	mov    eax,ecx
   1cf22:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cf26:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cf2b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cf2f:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1cf33:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cf37:	f3 0f 7e 0d 61 7f 01 00 	movq   xmm1,QWORD PTR [rip+0x17f61]        # 34ea0 <Law_and_Order+0x600>
   1cf3f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cf43:	e9 6b 03 00 00       	jmp    1d2b3 <get_scaled_exp_params+0x23ee>
   1cf48:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cf4b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cf4e:	48 89 d0             	mov    rax,rdx
   1cf51:	48 c1 e0 02          	shl    rax,0x2
   1cf55:	48 01 d0             	add    rax,rdx
   1cf58:	48 01 c8             	add    rax,rcx
   1cf5b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cf63:	48 8d 05 76 2f 1d 00 	lea    rax,[rip+0x1d2f76]        # 1efee0 <dangle3_dH>
   1cf6a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cf6d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1cf71:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cf74:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cf77:	48 89 d0             	mov    rax,rdx
   1cf7a:	48 c1 e0 02          	shl    rax,0x2
   1cf7e:	48 01 d0             	add    rax,rdx
   1cf81:	48 01 c8             	add    rax,rcx
   1cf84:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cf8c:	48 8d 05 4d 2f 1d 00 	lea    rax,[rip+0x1d2f4d]        # 1efee0 <dangle3_dH>
   1cf93:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1cf96:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1cf99:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cf9c:	48 89 d0             	mov    rax,rdx
   1cf9f:	48 c1 e0 02          	shl    rax,0x2
   1cfa3:	48 01 d0             	add    rax,rdx
   1cfa6:	48 01 f0             	add    rax,rsi
   1cfa9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1cfb1:	48 8d 05 e8 2d 1d 00 	lea    rax,[rip+0x1d2de8]        # 1efda0 <dangle3_37>
   1cfb8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1cfbb:	29 c1                	sub    ecx,eax
   1cfbd:	89 c8                	mov    eax,ecx
   1cfbf:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1cfc3:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1cfc8:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1cfcc:	f3 0f 7e 0d cc 7e 01 00 	movq   xmm1,QWORD PTR [rip+0x17ecc]        # 34ea0 <Law_and_Order+0x600>
   1cfd4:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1cfd8:	e9 d6 02 00 00       	jmp    1d2b3 <get_scaled_exp_params+0x23ee>
   1cfdd:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1cfe1:	0f 85 9d 00 00 00    	jne    1d084 <get_scaled_exp_params+0x21bf>
   1cfe7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1cfea:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1cfed:	48 89 d0             	mov    rax,rdx
   1cff0:	48 c1 e0 02          	shl    rax,0x2
   1cff4:	48 01 d0             	add    rax,rdx
   1cff7:	48 01 c8             	add    rax,rcx
   1cffa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d002:	48 8d 05 d7 2e 1d 00 	lea    rax,[rip+0x1d2ed7]        # 1efee0 <dangle3_dH>
   1d009:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d00c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d010:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d013:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d016:	48 89 d0             	mov    rax,rdx
   1d019:	48 c1 e0 02          	shl    rax,0x2
   1d01d:	48 01 d0             	add    rax,rdx
   1d020:	48 01 c8             	add    rax,rcx
   1d023:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d02b:	48 8d 05 ae 2e 1d 00 	lea    rax,[rip+0x1d2eae]        # 1efee0 <dangle3_dH>
   1d032:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1d035:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d038:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d03b:	48 89 d0             	mov    rax,rdx
   1d03e:	48 c1 e0 02          	shl    rax,0x2
   1d042:	48 01 d0             	add    rax,rdx
   1d045:	48 01 f0             	add    rax,rsi
   1d048:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d050:	48 8d 05 49 2d 1d 00 	lea    rax,[rip+0x1d2d49]        # 1efda0 <dangle3_37>
   1d057:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d05a:	29 c1                	sub    ecx,eax
   1d05c:	89 c8                	mov    eax,ecx
   1d05e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d062:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d067:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d06b:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1d06f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d073:	f3 0f 7e 0d 25 7e 01 00 	movq   xmm1,QWORD PTR [rip+0x17e25]        # 34ea0 <Law_and_Order+0x600>
   1d07b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d07f:	e9 90 00 00 00       	jmp    1d114 <get_scaled_exp_params+0x224f>
   1d084:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d087:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d08a:	48 89 d0             	mov    rax,rdx
   1d08d:	48 c1 e0 02          	shl    rax,0x2
   1d091:	48 01 d0             	add    rax,rdx
   1d094:	48 01 c8             	add    rax,rcx
   1d097:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d09f:	48 8d 05 3a 2e 1d 00 	lea    rax,[rip+0x1d2e3a]        # 1efee0 <dangle3_dH>
   1d0a6:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d0a9:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d0ad:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d0b0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d0b3:	48 89 d0             	mov    rax,rdx
   1d0b6:	48 c1 e0 02          	shl    rax,0x2
   1d0ba:	48 01 d0             	add    rax,rdx
   1d0bd:	48 01 c8             	add    rax,rcx
   1d0c0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d0c8:	48 8d 05 11 2e 1d 00 	lea    rax,[rip+0x1d2e11]        # 1efee0 <dangle3_dH>
   1d0cf:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1d0d2:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d0d5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d0d8:	48 89 d0             	mov    rax,rdx
   1d0db:	48 c1 e0 02          	shl    rax,0x2
   1d0df:	48 01 d0             	add    rax,rdx
   1d0e2:	48 01 f0             	add    rax,rsi
   1d0e5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d0ed:	48 8d 05 ac 2c 1d 00 	lea    rax,[rip+0x1d2cac]        # 1efda0 <dangle3_37>
   1d0f4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d0f7:	29 c1                	sub    ecx,eax
   1d0f9:	89 c8                	mov    eax,ecx
   1d0fb:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d0ff:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d104:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d108:	f3 0f 7e 0d 90 7d 01 00 	movq   xmm1,QWORD PTR [rip+0x17d90]        # 34ea0 <Law_and_Order+0x600>
   1d110:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d114:	f2 0f 10 0d ac 7d 01 00 	movsd  xmm1,QWORD PTR [rip+0x17dac]        # 34ec8 <Law_and_Order+0x628>
   1d11c:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1d120:	f2 0f 10 0d c8 7d 01 00 	movsd  xmm1,QWORD PTR [rip+0x17dc8]        # 34ef0 <Law_and_Order+0x650>
   1d128:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d12c:	e8 1f 65 fe ff       	call   3650 <sin@plt>
   1d131:	f2 0f 10 0d 3f 7d 01 00 	movsd  xmm1,QWORD PTR [rip+0x17d3f]        # 34e78 <Law_and_Order+0x5d8>
   1d139:	f2 0f 58 c8          	addsd  xmm1,xmm0
   1d13d:	f2 0f 10 05 b3 7d 01 00 	movsd  xmm0,QWORD PTR [rip+0x17db3]        # 34ef8 <Law_and_Order+0x658>
   1d145:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   1d149:	f2 0f 11 4d 88       	movsd  QWORD PTR [rbp-0x78],xmm1
   1d14e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1d152:	0f 85 9d 00 00 00    	jne    1d1f5 <get_scaled_exp_params+0x2330>
   1d158:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d15b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d15e:	48 89 d0             	mov    rax,rdx
   1d161:	48 c1 e0 02          	shl    rax,0x2
   1d165:	48 01 d0             	add    rax,rdx
   1d168:	48 01 c8             	add    rax,rcx
   1d16b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d173:	48 8d 05 66 2d 1d 00 	lea    rax,[rip+0x1d2d66]        # 1efee0 <dangle3_dH>
   1d17a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d17d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d181:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d184:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d187:	48 89 d0             	mov    rax,rdx
   1d18a:	48 c1 e0 02          	shl    rax,0x2
   1d18e:	48 01 d0             	add    rax,rdx
   1d191:	48 01 c8             	add    rax,rcx
   1d194:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d19c:	48 8d 05 3d 2d 1d 00 	lea    rax,[rip+0x1d2d3d]        # 1efee0 <dangle3_dH>
   1d1a3:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1d1a6:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d1a9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d1ac:	48 89 d0             	mov    rax,rdx
   1d1af:	48 c1 e0 02          	shl    rax,0x2
   1d1b3:	48 01 d0             	add    rax,rdx
   1d1b6:	48 01 f0             	add    rax,rsi
   1d1b9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d1c1:	48 8d 05 d8 2b 1d 00 	lea    rax,[rip+0x1d2bd8]        # 1efda0 <dangle3_37>
   1d1c8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d1cb:	29 c1                	sub    ecx,eax
   1d1cd:	89 c8                	mov    eax,ecx
   1d1cf:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d1d3:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d1d8:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d1dc:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1d1e0:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d1e4:	f3 0f 7e 0d b4 7c 01 00 	movq   xmm1,QWORD PTR [rip+0x17cb4]        # 34ea0 <Law_and_Order+0x600>
   1d1ec:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d1f0:	e9 90 00 00 00       	jmp    1d285 <get_scaled_exp_params+0x23c0>
   1d1f5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d1f8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d1fb:	48 89 d0             	mov    rax,rdx
   1d1fe:	48 c1 e0 02          	shl    rax,0x2
   1d202:	48 01 d0             	add    rax,rdx
   1d205:	48 01 c8             	add    rax,rcx
   1d208:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d210:	48 8d 05 c9 2c 1d 00 	lea    rax,[rip+0x1d2cc9]        # 1efee0 <dangle3_dH>
   1d217:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d21a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d21e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d221:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d224:	48 89 d0             	mov    rax,rdx
   1d227:	48 c1 e0 02          	shl    rax,0x2
   1d22b:	48 01 d0             	add    rax,rdx
   1d22e:	48 01 c8             	add    rax,rcx
   1d231:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d239:	48 8d 05 a0 2c 1d 00 	lea    rax,[rip+0x1d2ca0]        # 1efee0 <dangle3_dH>
   1d240:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   1d243:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d246:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d249:	48 89 d0             	mov    rax,rdx
   1d24c:	48 c1 e0 02          	shl    rax,0x2
   1d250:	48 01 d0             	add    rax,rdx
   1d253:	48 01 f0             	add    rax,rsi
   1d256:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d25e:	48 8d 05 3b 2b 1d 00 	lea    rax,[rip+0x1d2b3b]        # 1efda0 <dangle3_37>
   1d265:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d268:	29 c1                	sub    ecx,eax
   1d26a:	89 c8                	mov    eax,ecx
   1d26c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d270:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d275:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d279:	f3 0f 7e 0d 1f 7c 01 00 	movq   xmm1,QWORD PTR [rip+0x17c1f]        # 34ea0 <Law_and_Order+0x600>
   1d281:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d285:	f2 0f 10 0d 3b 7c 01 00 	movsd  xmm1,QWORD PTR [rip+0x17c3b]        # 34ec8 <Law_and_Order+0x628>
   1d28d:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1d291:	f2 0f 10 0d 57 7c 01 00 	movsd  xmm1,QWORD PTR [rip+0x17c57]        # 34ef0 <Law_and_Order+0x650>
   1d299:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d29d:	e8 ae 63 fe ff       	call   3650 <sin@plt>
   1d2a2:	f2 0f 10 0d ce 7b 01 00 	movsd  xmm1,QWORD PTR [rip+0x17bce]        # 34e78 <Law_and_Order+0x5d8>
   1d2aa:	f2 0f 58 c1          	addsd  xmm0,xmm1
   1d2ae:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1d2b3:	f2 0f 10 0d 0d 7c 01 00 	movsd  xmm1,QWORD PTR [rip+0x17c0d]        # 34ec8 <Law_and_Order+0x628>
   1d2bb:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1d2bf:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1d2c4:	e8 67 68 fe ff       	call   3b30 <exp@plt>
   1d2c9:	66 48 0f 7e c1       	movq   rcx,xmm0
   1d2ce:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   1d2d2:	8b 7d a4             	mov    edi,DWORD PTR [rbp-0x5c]
   1d2d5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d2d8:	48 89 d0             	mov    rax,rdx
   1d2db:	48 c1 e0 02          	shl    rax,0x2
   1d2df:	48 01 d0             	add    rax,rdx
   1d2e2:	48 01 f8             	add    rax,rdi
   1d2e5:	48 05 76 05 00 00    	add    rax,0x576
   1d2eb:	48 89 0c c6          	mov    QWORD PTR [rsi+rax*8],rcx
   1d2ef:	eb 6e                	jmp    1d35f <get_scaled_exp_params+0x249a>
   1d2f1:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1d2f5:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d2f8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d2fb:	48 89 d0             	mov    rax,rdx
   1d2fe:	48 c1 e0 02          	shl    rax,0x2
   1d302:	48 01 d0             	add    rax,rdx
   1d305:	48 01 f0             	add    rax,rsi
   1d308:	48 05 4e 05 00 00    	add    rax,0x54e
   1d30e:	f2 0f 10 05 62 7b 01 00 	movsd  xmm0,QWORD PTR [rip+0x17b62]        # 34e78 <Law_and_Order+0x5d8>
   1d316:	f2 0f 11 04 c1       	movsd  QWORD PTR [rcx+rax*8],xmm0
   1d31b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1d31f:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d322:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d325:	48 89 d0             	mov    rax,rdx
   1d328:	48 c1 e0 02          	shl    rax,0x2
   1d32c:	48 01 d0             	add    rax,rdx
   1d32f:	48 01 f0             	add    rax,rsi
   1d332:	48 05 4e 05 00 00    	add    rax,0x54e
   1d338:	f2 0f 10 04 c1       	movsd  xmm0,QWORD PTR [rcx+rax*8]
   1d33d:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1d341:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   1d344:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d347:	48 89 d0             	mov    rax,rdx
   1d34a:	48 c1 e0 02          	shl    rax,0x2
   1d34e:	48 01 d0             	add    rax,rdx
   1d351:	48 01 f0             	add    rax,rsi
   1d354:	48 05 76 05 00 00    	add    rax,0x576
   1d35a:	f2 0f 11 04 c1       	movsd  QWORD PTR [rcx+rax*8],xmm0
   1d35f:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1d363:	83 7d a4 04          	cmp    DWORD PTR [rbp-0x5c],0x4
   1d367:	0f 86 7d ec ff ff    	jbe    1bfea <get_scaled_exp_params+0x1125>
   1d36d:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1d371:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   1d375:	0f 86 63 ec ff ff    	jbe    1bfde <get_scaled_exp_params+0x1119>
   1d37b:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1d382:	e9 5f 01 00 00       	jmp    1d4e6 <get_scaled_exp_params+0x2621>
   1d387:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1d38e:	e9 45 01 00 00       	jmp    1d4d8 <get_scaled_exp_params+0x2613>
   1d393:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1d397:	0f 85 88 00 00 00    	jne    1d425 <get_scaled_exp_params+0x2560>
   1d39d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1d3a0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d3a3:	48 c1 e2 03          	shl    rdx,0x3
   1d3a7:	48 01 d0             	add    rax,rdx
   1d3aa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d3b2:	48 8d 05 c7 ff 1c 00 	lea    rax,[rip+0x1cffc7]        # 1ed380 <stackdH>
   1d3b9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d3bc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d3c0:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1d3c3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d3c6:	48 c1 e2 03          	shl    rdx,0x3
   1d3ca:	48 01 d0             	add    rax,rdx
   1d3cd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d3d5:	48 8d 05 a4 ff 1c 00 	lea    rax,[rip+0x1cffa4]        # 1ed380 <stackdH>
   1d3dc:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1d3df:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1d3e2:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1d3e5:	48 c1 e1 03          	shl    rcx,0x3
   1d3e9:	48 01 c8             	add    rax,rcx
   1d3ec:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1d3f4:	48 8d 05 85 fe 1c 00 	lea    rax,[rip+0x1cfe85]        # 1ed280 <stack37>
   1d3fb:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1d3fe:	29 c2                	sub    edx,eax
   1d400:	89 d0                	mov    eax,edx
   1d402:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d406:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d40b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d40f:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1d413:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d417:	f3 0f 7e 0d 81 7a 01 00 	movq   xmm1,QWORD PTR [rip+0x17a81]        # 34ea0 <Law_and_Order+0x600>
   1d41f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d423:	eb 7e                	jmp    1d4a3 <get_scaled_exp_params+0x25de>
   1d425:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1d428:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d42b:	48 c1 e2 03          	shl    rdx,0x3
   1d42f:	48 01 d0             	add    rax,rdx
   1d432:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d43a:	48 8d 05 3f ff 1c 00 	lea    rax,[rip+0x1cff3f]        # 1ed380 <stackdH>
   1d441:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d444:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d448:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1d44b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d44e:	48 c1 e2 03          	shl    rdx,0x3
   1d452:	48 01 d0             	add    rax,rdx
   1d455:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d45d:	48 8d 05 1c ff 1c 00 	lea    rax,[rip+0x1cff1c]        # 1ed380 <stackdH>
   1d464:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1d467:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1d46a:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1d46d:	48 c1 e1 03          	shl    rcx,0x3
   1d471:	48 01 c8             	add    rax,rcx
   1d474:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1d47c:	48 8d 05 fd fd 1c 00 	lea    rax,[rip+0x1cfdfd]        # 1ed280 <stack37>
   1d483:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   1d486:	29 c2                	sub    edx,eax
   1d488:	89 d0                	mov    eax,edx
   1d48a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d48e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d493:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d497:	f3 0f 7e 0d 01 7a 01 00 	movq   xmm1,QWORD PTR [rip+0x17a01]        # 34ea0 <Law_and_Order+0x600>
   1d49f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d4a3:	f2 0f 10 0d 1d 7a 01 00 	movsd  xmm1,QWORD PTR [rip+0x17a1d]        # 34ec8 <Law_and_Order+0x628>
   1d4ab:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1d4af:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1d4b4:	e8 77 66 fe ff       	call   3b30 <exp@plt>
   1d4b9:	66 48 0f 7e c0       	movq   rax,xmm0
   1d4be:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1d4c2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d4c5:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1d4c8:	48 c1 e6 03          	shl    rsi,0x3
   1d4cc:	48 01 f1             	add    rcx,rsi
   1d4cf:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   1d4d4:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1d4d8:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   1d4dc:	0f 86 b1 fe ff ff    	jbe    1d393 <get_scaled_exp_params+0x24ce>
   1d4e2:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1d4e6:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   1d4ea:	0f 86 97 fe ff ff    	jbe    1d387 <get_scaled_exp_params+0x24c2>
   1d4f0:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1d4f7:	e9 d9 25 00 00       	jmp    1fad5 <get_scaled_exp_params+0x4c10>
   1d4fc:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1d503:	e9 bf 25 00 00       	jmp    1fac7 <get_scaled_exp_params+0x4c02>
   1d508:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   1d50f:	e9 a5 25 00 00       	jmp    1fab9 <get_scaled_exp_params+0x4bf4>
   1d514:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1d518:	0f 85 ee 00 00 00    	jne    1d60c <get_scaled_exp_params+0x2747>
   1d51e:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d521:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d524:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d527:	48 89 d0             	mov    rax,rdx
   1d52a:	48 c1 e0 02          	shl    rax,0x2
   1d52e:	48 01 d0             	add    rax,rdx
   1d531:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d539:	48 01 d0             	add    rax,rdx
   1d53c:	48 89 ca             	mov    rdx,rcx
   1d53f:	48 c1 e2 02          	shl    rdx,0x2
   1d543:	48 01 ca             	add    rdx,rcx
   1d546:	48 01 d0             	add    rax,rdx
   1d549:	48 01 f0             	add    rax,rsi
   1d54c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d554:	48 8d 05 45 05 1d 00 	lea    rax,[rip+0x1d0545]        # 1edaa0 <mismatchIdH>
   1d55b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d55e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d562:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d565:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d568:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d56b:	48 89 d0             	mov    rax,rdx
   1d56e:	48 c1 e0 02          	shl    rax,0x2
   1d572:	48 01 d0             	add    rax,rdx
   1d575:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d57d:	48 01 d0             	add    rax,rdx
   1d580:	48 89 ca             	mov    rdx,rcx
   1d583:	48 c1 e2 02          	shl    rdx,0x2
   1d587:	48 01 ca             	add    rdx,rcx
   1d58a:	48 01 d0             	add    rax,rdx
   1d58d:	48 01 f0             	add    rax,rsi
   1d590:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d598:	48 8d 05 01 05 1d 00 	lea    rax,[rip+0x1d0501]        # 1edaa0 <mismatchIdH>
   1d59f:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1d5a2:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1d5a5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d5a8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d5ab:	48 89 d0             	mov    rax,rdx
   1d5ae:	48 c1 e0 02          	shl    rax,0x2
   1d5b2:	48 01 d0             	add    rax,rdx
   1d5b5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d5bd:	48 01 d0             	add    rax,rdx
   1d5c0:	48 89 ca             	mov    rdx,rcx
   1d5c3:	48 c1 e2 02          	shl    rdx,0x2
   1d5c7:	48 01 ca             	add    rdx,rcx
   1d5ca:	48 01 d0             	add    rax,rdx
   1d5cd:	48 01 f8             	add    rax,rdi
   1d5d0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d5d8:	48 8d 05 a1 01 1d 00 	lea    rax,[rip+0x1d01a1]        # 1ed780 <mismatchI37>
   1d5df:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d5e2:	29 c6                	sub    esi,eax
   1d5e4:	89 f0                	mov    eax,esi
   1d5e6:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d5ea:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d5ef:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d5f3:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1d5f7:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d5fb:	f3 0f 7e 0d 9d 78 01 00 	movq   xmm1,QWORD PTR [rip+0x1789d]        # 34ea0 <Law_and_Order+0x600>
   1d603:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d607:	e9 e1 00 00 00       	jmp    1d6ed <get_scaled_exp_params+0x2828>
   1d60c:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d60f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d612:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d615:	48 89 d0             	mov    rax,rdx
   1d618:	48 c1 e0 02          	shl    rax,0x2
   1d61c:	48 01 d0             	add    rax,rdx
   1d61f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d627:	48 01 d0             	add    rax,rdx
   1d62a:	48 89 ca             	mov    rdx,rcx
   1d62d:	48 c1 e2 02          	shl    rdx,0x2
   1d631:	48 01 ca             	add    rdx,rcx
   1d634:	48 01 d0             	add    rax,rdx
   1d637:	48 01 f0             	add    rax,rsi
   1d63a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d642:	48 8d 05 57 04 1d 00 	lea    rax,[rip+0x1d0457]        # 1edaa0 <mismatchIdH>
   1d649:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d64c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d650:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d653:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d656:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d659:	48 89 d0             	mov    rax,rdx
   1d65c:	48 c1 e0 02          	shl    rax,0x2
   1d660:	48 01 d0             	add    rax,rdx
   1d663:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d66b:	48 01 d0             	add    rax,rdx
   1d66e:	48 89 ca             	mov    rdx,rcx
   1d671:	48 c1 e2 02          	shl    rdx,0x2
   1d675:	48 01 ca             	add    rdx,rcx
   1d678:	48 01 d0             	add    rax,rdx
   1d67b:	48 01 f0             	add    rax,rsi
   1d67e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d686:	48 8d 05 13 04 1d 00 	lea    rax,[rip+0x1d0413]        # 1edaa0 <mismatchIdH>
   1d68d:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1d690:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1d693:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d696:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d699:	48 89 d0             	mov    rax,rdx
   1d69c:	48 c1 e0 02          	shl    rax,0x2
   1d6a0:	48 01 d0             	add    rax,rdx
   1d6a3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d6ab:	48 01 d0             	add    rax,rdx
   1d6ae:	48 89 ca             	mov    rdx,rcx
   1d6b1:	48 c1 e2 02          	shl    rdx,0x2
   1d6b5:	48 01 ca             	add    rdx,rcx
   1d6b8:	48 01 d0             	add    rax,rdx
   1d6bb:	48 01 f8             	add    rax,rdi
   1d6be:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d6c6:	48 8d 05 b3 00 1d 00 	lea    rax,[rip+0x1d00b3]        # 1ed780 <mismatchI37>
   1d6cd:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d6d0:	29 c6                	sub    esi,eax
   1d6d2:	89 f0                	mov    eax,esi
   1d6d4:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d6d8:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d6dd:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d6e1:	f3 0f 7e 0d b7 77 01 00 	movq   xmm1,QWORD PTR [rip+0x177b7]        # 34ea0 <Law_and_Order+0x600>
   1d6e9:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d6ed:	f2 0f 10 0d d3 77 01 00 	movsd  xmm1,QWORD PTR [rip+0x177d3]        # 34ec8 <Law_and_Order+0x628>
   1d6f5:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1d6f9:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1d6fe:	e8 2d 64 fe ff       	call   3b30 <exp@plt>
   1d703:	66 48 0f 7e c6       	movq   rsi,xmm0
   1d708:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   1d70c:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   1d710:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d713:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d716:	48 89 d0             	mov    rax,rdx
   1d719:	48 c1 e0 02          	shl    rax,0x2
   1d71d:	48 01 d0             	add    rax,rdx
   1d720:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d728:	48 01 d0             	add    rax,rdx
   1d72b:	48 89 ca             	mov    rdx,rcx
   1d72e:	48 c1 e2 02          	shl    rdx,0x2
   1d732:	48 01 ca             	add    rdx,rcx
   1d735:	48 01 d0             	add    rax,rdx
   1d738:	4c 01 c0             	add    rax,r8
   1d73b:	48 05 66 01 00 00    	add    rax,0x166
   1d741:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   1d745:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1d749:	0f 85 ee 00 00 00    	jne    1d83d <get_scaled_exp_params+0x2978>
   1d74f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d752:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d755:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d758:	48 89 d0             	mov    rax,rdx
   1d75b:	48 c1 e0 02          	shl    rax,0x2
   1d75f:	48 01 d0             	add    rax,rdx
   1d762:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d76a:	48 01 d0             	add    rax,rdx
   1d76d:	48 89 ca             	mov    rdx,rcx
   1d770:	48 c1 e2 02          	shl    rdx,0x2
   1d774:	48 01 ca             	add    rdx,rcx
   1d777:	48 01 d0             	add    rax,rdx
   1d77a:	48 01 f0             	add    rax,rsi
   1d77d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d785:	48 8d 05 d4 15 1d 00 	lea    rax,[rip+0x1d15d4]        # 1eed60 <mismatch1nIdH>
   1d78c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d78f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d793:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d796:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d799:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d79c:	48 89 d0             	mov    rax,rdx
   1d79f:	48 c1 e0 02          	shl    rax,0x2
   1d7a3:	48 01 d0             	add    rax,rdx
   1d7a6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d7ae:	48 01 d0             	add    rax,rdx
   1d7b1:	48 89 ca             	mov    rdx,rcx
   1d7b4:	48 c1 e2 02          	shl    rdx,0x2
   1d7b8:	48 01 ca             	add    rdx,rcx
   1d7bb:	48 01 d0             	add    rax,rdx
   1d7be:	48 01 f0             	add    rax,rsi
   1d7c1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d7c9:	48 8d 05 90 15 1d 00 	lea    rax,[rip+0x1d1590]        # 1eed60 <mismatch1nIdH>
   1d7d0:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1d7d3:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1d7d6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d7d9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d7dc:	48 89 d0             	mov    rax,rdx
   1d7df:	48 c1 e0 02          	shl    rax,0x2
   1d7e3:	48 01 d0             	add    rax,rdx
   1d7e6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d7ee:	48 01 d0             	add    rax,rdx
   1d7f1:	48 89 ca             	mov    rdx,rcx
   1d7f4:	48 c1 e2 02          	shl    rdx,0x2
   1d7f8:	48 01 ca             	add    rdx,rcx
   1d7fb:	48 01 d0             	add    rax,rdx
   1d7fe:	48 01 f8             	add    rax,rdi
   1d801:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d809:	48 8d 05 30 12 1d 00 	lea    rax,[rip+0x1d1230]        # 1eea40 <mismatch1nI37>
   1d810:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d813:	29 c6                	sub    esi,eax
   1d815:	89 f0                	mov    eax,esi
   1d817:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d81b:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d820:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d824:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1d828:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d82c:	f3 0f 7e 0d 6c 76 01 00 	movq   xmm1,QWORD PTR [rip+0x1766c]        # 34ea0 <Law_and_Order+0x600>
   1d834:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d838:	e9 e1 00 00 00       	jmp    1d91e <get_scaled_exp_params+0x2a59>
   1d83d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d840:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d843:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d846:	48 89 d0             	mov    rax,rdx
   1d849:	48 c1 e0 02          	shl    rax,0x2
   1d84d:	48 01 d0             	add    rax,rdx
   1d850:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d858:	48 01 d0             	add    rax,rdx
   1d85b:	48 89 ca             	mov    rdx,rcx
   1d85e:	48 c1 e2 02          	shl    rdx,0x2
   1d862:	48 01 ca             	add    rdx,rcx
   1d865:	48 01 d0             	add    rax,rdx
   1d868:	48 01 f0             	add    rax,rsi
   1d86b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d873:	48 8d 05 e6 14 1d 00 	lea    rax,[rip+0x1d14e6]        # 1eed60 <mismatch1nIdH>
   1d87a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d87d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d881:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d884:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d887:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d88a:	48 89 d0             	mov    rax,rdx
   1d88d:	48 c1 e0 02          	shl    rax,0x2
   1d891:	48 01 d0             	add    rax,rdx
   1d894:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d89c:	48 01 d0             	add    rax,rdx
   1d89f:	48 89 ca             	mov    rdx,rcx
   1d8a2:	48 c1 e2 02          	shl    rdx,0x2
   1d8a6:	48 01 ca             	add    rdx,rcx
   1d8a9:	48 01 d0             	add    rax,rdx
   1d8ac:	48 01 f0             	add    rax,rsi
   1d8af:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d8b7:	48 8d 05 a2 14 1d 00 	lea    rax,[rip+0x1d14a2]        # 1eed60 <mismatch1nIdH>
   1d8be:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1d8c1:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1d8c4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d8c7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d8ca:	48 89 d0             	mov    rax,rdx
   1d8cd:	48 c1 e0 02          	shl    rax,0x2
   1d8d1:	48 01 d0             	add    rax,rdx
   1d8d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d8dc:	48 01 d0             	add    rax,rdx
   1d8df:	48 89 ca             	mov    rdx,rcx
   1d8e2:	48 c1 e2 02          	shl    rdx,0x2
   1d8e6:	48 01 ca             	add    rdx,rcx
   1d8e9:	48 01 d0             	add    rax,rdx
   1d8ec:	48 01 f8             	add    rax,rdi
   1d8ef:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d8f7:	48 8d 05 42 11 1d 00 	lea    rax,[rip+0x1d1142]        # 1eea40 <mismatch1nI37>
   1d8fe:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d901:	29 c6                	sub    esi,eax
   1d903:	89 f0                	mov    eax,esi
   1d905:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1d909:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1d90e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1d912:	f3 0f 7e 0d 86 75 01 00 	movq   xmm1,QWORD PTR [rip+0x17586]        # 34ea0 <Law_and_Order+0x600>
   1d91a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1d91e:	f2 0f 10 0d a2 75 01 00 	movsd  xmm1,QWORD PTR [rip+0x175a2]        # 34ec8 <Law_and_Order+0x628>
   1d926:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1d92a:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1d92f:	e8 fc 61 fe ff       	call   3b30 <exp@plt>
   1d934:	66 48 0f 7e c6       	movq   rsi,xmm0
   1d939:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   1d93d:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   1d941:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d944:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d947:	48 89 d0             	mov    rax,rdx
   1d94a:	48 c1 e0 02          	shl    rax,0x2
   1d94e:	48 01 d0             	add    rax,rdx
   1d951:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d959:	48 01 d0             	add    rax,rdx
   1d95c:	48 89 ca             	mov    rdx,rcx
   1d95f:	48 c1 e2 02          	shl    rdx,0x2
   1d963:	48 01 ca             	add    rdx,rcx
   1d966:	48 01 d0             	add    rax,rdx
   1d969:	4c 01 c0             	add    rax,r8
   1d96c:	48 05 f6 02 00 00    	add    rax,0x2f6
   1d972:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   1d976:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1d97a:	0f 85 ee 00 00 00    	jne    1da6e <get_scaled_exp_params+0x2ba9>
   1d980:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d983:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d986:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d989:	48 89 d0             	mov    rax,rdx
   1d98c:	48 c1 e0 02          	shl    rax,0x2
   1d990:	48 01 d0             	add    rax,rdx
   1d993:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d99b:	48 01 d0             	add    rax,rdx
   1d99e:	48 89 ca             	mov    rdx,rcx
   1d9a1:	48 c1 e2 02          	shl    rdx,0x2
   1d9a5:	48 01 ca             	add    rdx,rcx
   1d9a8:	48 01 d0             	add    rax,rdx
   1d9ab:	48 01 f0             	add    rax,rsi
   1d9ae:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d9b6:	48 8d 05 23 07 1d 00 	lea    rax,[rip+0x1d0723]        # 1ee0e0 <mismatchHdH>
   1d9bd:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1d9c0:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1d9c4:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1d9c7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1d9ca:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1d9cd:	48 89 d0             	mov    rax,rdx
   1d9d0:	48 c1 e0 02          	shl    rax,0x2
   1d9d4:	48 01 d0             	add    rax,rdx
   1d9d7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d9df:	48 01 d0             	add    rax,rdx
   1d9e2:	48 89 ca             	mov    rdx,rcx
   1d9e5:	48 c1 e2 02          	shl    rdx,0x2
   1d9e9:	48 01 ca             	add    rdx,rcx
   1d9ec:	48 01 d0             	add    rax,rdx
   1d9ef:	48 01 f0             	add    rax,rsi
   1d9f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d9fa:	48 8d 05 df 06 1d 00 	lea    rax,[rip+0x1d06df]        # 1ee0e0 <mismatchHdH>
   1da01:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1da04:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1da07:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1da0a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1da0d:	48 89 d0             	mov    rax,rdx
   1da10:	48 c1 e0 02          	shl    rax,0x2
   1da14:	48 01 d0             	add    rax,rdx
   1da17:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1da1f:	48 01 d0             	add    rax,rdx
   1da22:	48 89 ca             	mov    rdx,rcx
   1da25:	48 c1 e2 02          	shl    rdx,0x2
   1da29:	48 01 ca             	add    rdx,rcx
   1da2c:	48 01 d0             	add    rax,rdx
   1da2f:	48 01 f8             	add    rax,rdi
   1da32:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1da3a:	48 8d 05 7f 03 1d 00 	lea    rax,[rip+0x1d037f]        # 1eddc0 <mismatchH37>
   1da41:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1da44:	29 c6                	sub    esi,eax
   1da46:	89 f0                	mov    eax,esi
   1da48:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1da4c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1da51:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1da55:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1da59:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1da5d:	f3 0f 7e 0d 3b 74 01 00 	movq   xmm1,QWORD PTR [rip+0x1743b]        # 34ea0 <Law_and_Order+0x600>
   1da65:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1da69:	e9 e1 00 00 00       	jmp    1db4f <get_scaled_exp_params+0x2c8a>
   1da6e:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1da71:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1da74:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1da77:	48 89 d0             	mov    rax,rdx
   1da7a:	48 c1 e0 02          	shl    rax,0x2
   1da7e:	48 01 d0             	add    rax,rdx
   1da81:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1da89:	48 01 d0             	add    rax,rdx
   1da8c:	48 89 ca             	mov    rdx,rcx
   1da8f:	48 c1 e2 02          	shl    rdx,0x2
   1da93:	48 01 ca             	add    rdx,rcx
   1da96:	48 01 d0             	add    rax,rdx
   1da99:	48 01 f0             	add    rax,rsi
   1da9c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1daa4:	48 8d 05 35 06 1d 00 	lea    rax,[rip+0x1d0635]        # 1ee0e0 <mismatchHdH>
   1daab:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1daae:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1dab2:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dab5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dab8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dabb:	48 89 d0             	mov    rax,rdx
   1dabe:	48 c1 e0 02          	shl    rax,0x2
   1dac2:	48 01 d0             	add    rax,rdx
   1dac5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dacd:	48 01 d0             	add    rax,rdx
   1dad0:	48 89 ca             	mov    rdx,rcx
   1dad3:	48 c1 e2 02          	shl    rdx,0x2
   1dad7:	48 01 ca             	add    rdx,rcx
   1dada:	48 01 d0             	add    rax,rdx
   1dadd:	48 01 f0             	add    rax,rsi
   1dae0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dae8:	48 8d 05 f1 05 1d 00 	lea    rax,[rip+0x1d05f1]        # 1ee0e0 <mismatchHdH>
   1daef:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1daf2:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1daf5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1daf8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dafb:	48 89 d0             	mov    rax,rdx
   1dafe:	48 c1 e0 02          	shl    rax,0x2
   1db02:	48 01 d0             	add    rax,rdx
   1db05:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1db0d:	48 01 d0             	add    rax,rdx
   1db10:	48 89 ca             	mov    rdx,rcx
   1db13:	48 c1 e2 02          	shl    rdx,0x2
   1db17:	48 01 ca             	add    rdx,rcx
   1db1a:	48 01 d0             	add    rax,rdx
   1db1d:	48 01 f8             	add    rax,rdi
   1db20:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1db28:	48 8d 05 91 02 1d 00 	lea    rax,[rip+0x1d0291]        # 1eddc0 <mismatchH37>
   1db2f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1db32:	29 c6                	sub    esi,eax
   1db34:	89 f0                	mov    eax,esi
   1db36:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1db3a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1db3f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1db43:	f3 0f 7e 0d 55 73 01 00 	movq   xmm1,QWORD PTR [rip+0x17355]        # 34ea0 <Law_and_Order+0x600>
   1db4b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1db4f:	f2 0f 10 0d 71 73 01 00 	movsd  xmm1,QWORD PTR [rip+0x17371]        # 34ec8 <Law_and_Order+0x628>
   1db57:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1db5b:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1db60:	e8 cb 5f fe ff       	call   3b30 <exp@plt>
   1db65:	66 48 0f 7e c6       	movq   rsi,xmm0
   1db6a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   1db6e:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   1db72:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1db75:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1db78:	48 89 d0             	mov    rax,rdx
   1db7b:	48 c1 e0 02          	shl    rax,0x2
   1db7f:	48 01 d0             	add    rax,rdx
   1db82:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1db8a:	48 01 d0             	add    rax,rdx
   1db8d:	48 89 ca             	mov    rdx,rcx
   1db90:	48 c1 e2 02          	shl    rdx,0x2
   1db94:	48 01 ca             	add    rdx,rcx
   1db97:	48 01 d0             	add    rax,rdx
   1db9a:	4c 01 c0             	add    rax,r8
   1db9d:	48 05 be 03 00 00    	add    rax,0x3be
   1dba3:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   1dba7:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1dbab:	0f 85 ee 00 00 00    	jne    1dc9f <get_scaled_exp_params+0x2dda>
   1dbb1:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dbb4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dbb7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dbba:	48 89 d0             	mov    rax,rdx
   1dbbd:	48 c1 e0 02          	shl    rax,0x2
   1dbc1:	48 01 d0             	add    rax,rdx
   1dbc4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dbcc:	48 01 d0             	add    rax,rdx
   1dbcf:	48 89 ca             	mov    rdx,rcx
   1dbd2:	48 c1 e2 02          	shl    rdx,0x2
   1dbd6:	48 01 ca             	add    rdx,rcx
   1dbd9:	48 01 d0             	add    rax,rdx
   1dbdc:	48 01 f0             	add    rax,rsi
   1dbdf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dbe7:	48 8d 05 b2 17 1d 00 	lea    rax,[rip+0x1d17b2]        # 1ef3a0 <mismatch23IdH>
   1dbee:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1dbf1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1dbf5:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dbf8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dbfb:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dbfe:	48 89 d0             	mov    rax,rdx
   1dc01:	48 c1 e0 02          	shl    rax,0x2
   1dc05:	48 01 d0             	add    rax,rdx
   1dc08:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dc10:	48 01 d0             	add    rax,rdx
   1dc13:	48 89 ca             	mov    rdx,rcx
   1dc16:	48 c1 e2 02          	shl    rdx,0x2
   1dc1a:	48 01 ca             	add    rdx,rcx
   1dc1d:	48 01 d0             	add    rax,rdx
   1dc20:	48 01 f0             	add    rax,rsi
   1dc23:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dc2b:	48 8d 05 6e 17 1d 00 	lea    rax,[rip+0x1d176e]        # 1ef3a0 <mismatch23IdH>
   1dc32:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1dc35:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1dc38:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dc3b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dc3e:	48 89 d0             	mov    rax,rdx
   1dc41:	48 c1 e0 02          	shl    rax,0x2
   1dc45:	48 01 d0             	add    rax,rdx
   1dc48:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dc50:	48 01 d0             	add    rax,rdx
   1dc53:	48 89 ca             	mov    rdx,rcx
   1dc56:	48 c1 e2 02          	shl    rdx,0x2
   1dc5a:	48 01 ca             	add    rdx,rcx
   1dc5d:	48 01 d0             	add    rax,rdx
   1dc60:	48 01 f8             	add    rax,rdi
   1dc63:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dc6b:	48 8d 05 0e 14 1d 00 	lea    rax,[rip+0x1d140e]        # 1ef080 <mismatch23I37>
   1dc72:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1dc75:	29 c6                	sub    esi,eax
   1dc77:	89 f0                	mov    eax,esi
   1dc79:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1dc7d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1dc82:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1dc86:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1dc8a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1dc8e:	f3 0f 7e 0d 0a 72 01 00 	movq   xmm1,QWORD PTR [rip+0x1720a]        # 34ea0 <Law_and_Order+0x600>
   1dc96:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1dc9a:	e9 e1 00 00 00       	jmp    1dd80 <get_scaled_exp_params+0x2ebb>
   1dc9f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dca2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dca5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dca8:	48 89 d0             	mov    rax,rdx
   1dcab:	48 c1 e0 02          	shl    rax,0x2
   1dcaf:	48 01 d0             	add    rax,rdx
   1dcb2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dcba:	48 01 d0             	add    rax,rdx
   1dcbd:	48 89 ca             	mov    rdx,rcx
   1dcc0:	48 c1 e2 02          	shl    rdx,0x2
   1dcc4:	48 01 ca             	add    rdx,rcx
   1dcc7:	48 01 d0             	add    rax,rdx
   1dcca:	48 01 f0             	add    rax,rsi
   1dccd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dcd5:	48 8d 05 c4 16 1d 00 	lea    rax,[rip+0x1d16c4]        # 1ef3a0 <mismatch23IdH>
   1dcdc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1dcdf:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1dce3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dce6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dce9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dcec:	48 89 d0             	mov    rax,rdx
   1dcef:	48 c1 e0 02          	shl    rax,0x2
   1dcf3:	48 01 d0             	add    rax,rdx
   1dcf6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dcfe:	48 01 d0             	add    rax,rdx
   1dd01:	48 89 ca             	mov    rdx,rcx
   1dd04:	48 c1 e2 02          	shl    rdx,0x2
   1dd08:	48 01 ca             	add    rdx,rcx
   1dd0b:	48 01 d0             	add    rax,rdx
   1dd0e:	48 01 f0             	add    rax,rsi
   1dd11:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dd19:	48 8d 05 80 16 1d 00 	lea    rax,[rip+0x1d1680]        # 1ef3a0 <mismatch23IdH>
   1dd20:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1dd23:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1dd26:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dd29:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dd2c:	48 89 d0             	mov    rax,rdx
   1dd2f:	48 c1 e0 02          	shl    rax,0x2
   1dd33:	48 01 d0             	add    rax,rdx
   1dd36:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dd3e:	48 01 d0             	add    rax,rdx
   1dd41:	48 89 ca             	mov    rdx,rcx
   1dd44:	48 c1 e2 02          	shl    rdx,0x2
   1dd48:	48 01 ca             	add    rdx,rcx
   1dd4b:	48 01 d0             	add    rax,rdx
   1dd4e:	48 01 f8             	add    rax,rdi
   1dd51:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dd59:	48 8d 05 20 13 1d 00 	lea    rax,[rip+0x1d1320]        # 1ef080 <mismatch23I37>
   1dd60:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1dd63:	29 c6                	sub    esi,eax
   1dd65:	89 f0                	mov    eax,esi
   1dd67:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1dd6b:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1dd70:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1dd74:	f3 0f 7e 0d 24 71 01 00 	movq   xmm1,QWORD PTR [rip+0x17124]        # 34ea0 <Law_and_Order+0x600>
   1dd7c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1dd80:	f2 0f 10 0d 40 71 01 00 	movsd  xmm1,QWORD PTR [rip+0x17140]        # 34ec8 <Law_and_Order+0x628>
   1dd88:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1dd8c:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1dd91:	e8 9a 5d fe ff       	call   3b30 <exp@plt>
   1dd96:	66 48 0f 7e c6       	movq   rsi,xmm0
   1dd9b:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   1dd9f:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   1dda3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dda6:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dda9:	48 89 d0             	mov    rax,rdx
   1ddac:	48 c1 e0 02          	shl    rax,0x2
   1ddb0:	48 01 d0             	add    rax,rdx
   1ddb3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ddbb:	48 01 d0             	add    rax,rdx
   1ddbe:	48 89 ca             	mov    rdx,rcx
   1ddc1:	48 c1 e2 02          	shl    rdx,0x2
   1ddc5:	48 01 ca             	add    rdx,rcx
   1ddc8:	48 01 d0             	add    rax,rdx
   1ddcb:	4c 01 c0             	add    rax,r8
   1ddce:	48 05 2e 02 00 00    	add    rax,0x22e
   1ddd4:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   1ddd8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1dddc:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   1dddf:	85 c0                	test   eax,eax
   1dde1:	0f 84 0f 1c 00 00    	je     1f9f6 <get_scaled_exp_params+0x4b31>
   1dde7:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1ddeb:	0f 85 b8 03 00 00    	jne    1e1a9 <get_scaled_exp_params+0x32e4>
   1ddf1:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1ddf5:	0f 85 e3 00 00 00    	jne    1dede <get_scaled_exp_params+0x3019>
   1ddfb:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ddfe:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1de01:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1de04:	48 89 d0             	mov    rax,rdx
   1de07:	48 c1 e0 02          	shl    rax,0x2
   1de0b:	48 01 d0             	add    rax,rdx
   1de0e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1de16:	48 01 d0             	add    rax,rdx
   1de19:	48 89 ca             	mov    rdx,rcx
   1de1c:	48 c1 e2 02          	shl    rdx,0x2
   1de20:	48 01 ca             	add    rdx,rcx
   1de23:	48 01 d0             	add    rax,rdx
   1de26:	48 01 f0             	add    rax,rsi
   1de29:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1de31:	48 8d 05 e8 08 1d 00 	lea    rax,[rip+0x1d08e8]        # 1ee720 <mismatchMdH>
   1de38:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1de3b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1de3f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1de42:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1de45:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1de48:	48 89 d0             	mov    rax,rdx
   1de4b:	48 c1 e0 02          	shl    rax,0x2
   1de4f:	48 01 d0             	add    rax,rdx
   1de52:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1de5a:	48 01 d0             	add    rax,rdx
   1de5d:	48 89 ca             	mov    rdx,rcx
   1de60:	48 c1 e2 02          	shl    rdx,0x2
   1de64:	48 01 ca             	add    rdx,rcx
   1de67:	48 01 d0             	add    rax,rdx
   1de6a:	48 01 f0             	add    rax,rsi
   1de6d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1de75:	48 8d 05 a4 08 1d 00 	lea    rax,[rip+0x1d08a4]        # 1ee720 <mismatchMdH>
   1de7c:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1de7f:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1de82:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1de85:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1de88:	48 89 d0             	mov    rax,rdx
   1de8b:	48 c1 e0 02          	shl    rax,0x2
   1de8f:	48 01 d0             	add    rax,rdx
   1de92:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1de9a:	48 01 d0             	add    rax,rdx
   1de9d:	48 89 ca             	mov    rdx,rcx
   1dea0:	48 c1 e2 02          	shl    rdx,0x2
   1dea4:	48 01 ca             	add    rdx,rcx
   1dea7:	48 01 d0             	add    rax,rdx
   1deaa:	48 01 f8             	add    rax,rdi
   1dead:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1deb5:	48 8d 05 44 05 1d 00 	lea    rax,[rip+0x1d0544]        # 1ee400 <mismatchM37>
   1debc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1debf:	29 c6                	sub    esi,eax
   1dec1:	89 f0                	mov    eax,esi
   1dec3:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1dec7:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1decc:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ded0:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1ded4:	85 c0                	test   eax,eax
   1ded6:	0f 9f c0             	setg   al
   1ded9:	e9 e0 00 00 00       	jmp    1dfbe <get_scaled_exp_params+0x30f9>
   1dede:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dee1:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dee4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dee7:	48 89 d0             	mov    rax,rdx
   1deea:	48 c1 e0 02          	shl    rax,0x2
   1deee:	48 01 d0             	add    rax,rdx
   1def1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1def9:	48 01 d0             	add    rax,rdx
   1defc:	48 89 ca             	mov    rdx,rcx
   1deff:	48 c1 e2 02          	shl    rdx,0x2
   1df03:	48 01 ca             	add    rdx,rcx
   1df06:	48 01 d0             	add    rax,rdx
   1df09:	48 01 f0             	add    rax,rsi
   1df0c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1df14:	48 8d 05 05 08 1d 00 	lea    rax,[rip+0x1d0805]        # 1ee720 <mismatchMdH>
   1df1b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1df1e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1df22:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1df25:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1df28:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1df2b:	48 89 d0             	mov    rax,rdx
   1df2e:	48 c1 e0 02          	shl    rax,0x2
   1df32:	48 01 d0             	add    rax,rdx
   1df35:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1df3d:	48 01 d0             	add    rax,rdx
   1df40:	48 89 ca             	mov    rdx,rcx
   1df43:	48 c1 e2 02          	shl    rdx,0x2
   1df47:	48 01 ca             	add    rdx,rcx
   1df4a:	48 01 d0             	add    rax,rdx
   1df4d:	48 01 f0             	add    rax,rsi
   1df50:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1df58:	48 8d 05 c1 07 1d 00 	lea    rax,[rip+0x1d07c1]        # 1ee720 <mismatchMdH>
   1df5f:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1df62:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1df65:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1df68:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1df6b:	48 89 d0             	mov    rax,rdx
   1df6e:	48 c1 e0 02          	shl    rax,0x2
   1df72:	48 01 d0             	add    rax,rdx
   1df75:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1df7d:	48 01 d0             	add    rax,rdx
   1df80:	48 89 ca             	mov    rdx,rcx
   1df83:	48 c1 e2 02          	shl    rdx,0x2
   1df87:	48 01 ca             	add    rdx,rcx
   1df8a:	48 01 d0             	add    rax,rdx
   1df8d:	48 01 f8             	add    rax,rdi
   1df90:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1df98:	48 8d 05 61 04 1d 00 	lea    rax,[rip+0x1d0461]        # 1ee400 <mismatchM37>
   1df9f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1dfa2:	29 c6                	sub    esi,eax
   1dfa4:	89 f0                	mov    eax,esi
   1dfa6:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1dfaa:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1dfaf:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1dfb3:	66 0f ef c9          	pxor   xmm1,xmm1
   1dfb7:	66 0f 2f c1          	comisd xmm0,xmm1
   1dfbb:	0f 97 c0             	seta   al
   1dfbe:	84 c0                	test   al,al
   1dfc0:	74 09                	je     1dfcb <get_scaled_exp_params+0x3106>
   1dfc2:	66 0f ef c0          	pxor   xmm0,xmm0
   1dfc6:	e9 c9 0b 00 00       	jmp    1eb94 <get_scaled_exp_params+0x3ccf>
   1dfcb:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1dfcf:	0f 85 ee 00 00 00    	jne    1e0c3 <get_scaled_exp_params+0x31fe>
   1dfd5:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1dfd8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1dfdb:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1dfde:	48 89 d0             	mov    rax,rdx
   1dfe1:	48 c1 e0 02          	shl    rax,0x2
   1dfe5:	48 01 d0             	add    rax,rdx
   1dfe8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dff0:	48 01 d0             	add    rax,rdx
   1dff3:	48 89 ca             	mov    rdx,rcx
   1dff6:	48 c1 e2 02          	shl    rdx,0x2
   1dffa:	48 01 ca             	add    rdx,rcx
   1dffd:	48 01 d0             	add    rax,rdx
   1e000:	48 01 f0             	add    rax,rsi
   1e003:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e00b:	48 8d 05 0e 07 1d 00 	lea    rax,[rip+0x1d070e]        # 1ee720 <mismatchMdH>
   1e012:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e015:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e019:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e01c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e01f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e022:	48 89 d0             	mov    rax,rdx
   1e025:	48 c1 e0 02          	shl    rax,0x2
   1e029:	48 01 d0             	add    rax,rdx
   1e02c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e034:	48 01 d0             	add    rax,rdx
   1e037:	48 89 ca             	mov    rdx,rcx
   1e03a:	48 c1 e2 02          	shl    rdx,0x2
   1e03e:	48 01 ca             	add    rdx,rcx
   1e041:	48 01 d0             	add    rax,rdx
   1e044:	48 01 f0             	add    rax,rsi
   1e047:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e04f:	48 8d 05 ca 06 1d 00 	lea    rax,[rip+0x1d06ca]        # 1ee720 <mismatchMdH>
   1e056:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e059:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e05c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e05f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e062:	48 89 d0             	mov    rax,rdx
   1e065:	48 c1 e0 02          	shl    rax,0x2
   1e069:	48 01 d0             	add    rax,rdx
   1e06c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e074:	48 01 d0             	add    rax,rdx
   1e077:	48 89 ca             	mov    rdx,rcx
   1e07a:	48 c1 e2 02          	shl    rdx,0x2
   1e07e:	48 01 ca             	add    rdx,rcx
   1e081:	48 01 d0             	add    rax,rdx
   1e084:	48 01 f8             	add    rax,rdi
   1e087:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e08f:	48 8d 05 6a 03 1d 00 	lea    rax,[rip+0x1d036a]        # 1ee400 <mismatchM37>
   1e096:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e099:	29 c6                	sub    esi,eax
   1e09b:	89 f0                	mov    eax,esi
   1e09d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e0a1:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e0a6:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e0aa:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1e0ae:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e0b2:	f3 0f 7e 0d e6 6d 01 00 	movq   xmm1,QWORD PTR [rip+0x16de6]        # 34ea0 <Law_and_Order+0x600>
   1e0ba:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e0be:	e9 d1 0a 00 00       	jmp    1eb94 <get_scaled_exp_params+0x3ccf>
   1e0c3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e0c6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e0c9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e0cc:	48 89 d0             	mov    rax,rdx
   1e0cf:	48 c1 e0 02          	shl    rax,0x2
   1e0d3:	48 01 d0             	add    rax,rdx
   1e0d6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e0de:	48 01 d0             	add    rax,rdx
   1e0e1:	48 89 ca             	mov    rdx,rcx
   1e0e4:	48 c1 e2 02          	shl    rdx,0x2
   1e0e8:	48 01 ca             	add    rdx,rcx
   1e0eb:	48 01 d0             	add    rax,rdx
   1e0ee:	48 01 f0             	add    rax,rsi
   1e0f1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e0f9:	48 8d 05 20 06 1d 00 	lea    rax,[rip+0x1d0620]        # 1ee720 <mismatchMdH>
   1e100:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e103:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e107:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e10a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e10d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e110:	48 89 d0             	mov    rax,rdx
   1e113:	48 c1 e0 02          	shl    rax,0x2
   1e117:	48 01 d0             	add    rax,rdx
   1e11a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e122:	48 01 d0             	add    rax,rdx
   1e125:	48 89 ca             	mov    rdx,rcx
   1e128:	48 c1 e2 02          	shl    rdx,0x2
   1e12c:	48 01 ca             	add    rdx,rcx
   1e12f:	48 01 d0             	add    rax,rdx
   1e132:	48 01 f0             	add    rax,rsi
   1e135:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e13d:	48 8d 05 dc 05 1d 00 	lea    rax,[rip+0x1d05dc]        # 1ee720 <mismatchMdH>
   1e144:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e147:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e14a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e14d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e150:	48 89 d0             	mov    rax,rdx
   1e153:	48 c1 e0 02          	shl    rax,0x2
   1e157:	48 01 d0             	add    rax,rdx
   1e15a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e162:	48 01 d0             	add    rax,rdx
   1e165:	48 89 ca             	mov    rdx,rcx
   1e168:	48 c1 e2 02          	shl    rdx,0x2
   1e16c:	48 01 ca             	add    rdx,rcx
   1e16f:	48 01 d0             	add    rax,rdx
   1e172:	48 01 f8             	add    rax,rdi
   1e175:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e17d:	48 8d 05 7c 02 1d 00 	lea    rax,[rip+0x1d027c]        # 1ee400 <mismatchM37>
   1e184:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e187:	29 c6                	sub    esi,eax
   1e189:	89 f0                	mov    eax,esi
   1e18b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e18f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e194:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e198:	f3 0f 7e 0d 00 6d 01 00 	movq   xmm1,QWORD PTR [rip+0x16d00]        # 34ea0 <Law_and_Order+0x600>
   1e1a0:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e1a4:	e9 eb 09 00 00       	jmp    1eb94 <get_scaled_exp_params+0x3ccf>
   1e1a9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1e1ad:	0f 85 ee 00 00 00    	jne    1e2a1 <get_scaled_exp_params+0x33dc>
   1e1b3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e1b6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e1b9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e1bc:	48 89 d0             	mov    rax,rdx
   1e1bf:	48 c1 e0 02          	shl    rax,0x2
   1e1c3:	48 01 d0             	add    rax,rdx
   1e1c6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e1ce:	48 01 d0             	add    rax,rdx
   1e1d1:	48 89 ca             	mov    rdx,rcx
   1e1d4:	48 c1 e2 02          	shl    rdx,0x2
   1e1d8:	48 01 ca             	add    rdx,rcx
   1e1db:	48 01 d0             	add    rax,rdx
   1e1de:	48 01 f0             	add    rax,rsi
   1e1e1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e1e9:	48 8d 05 30 05 1d 00 	lea    rax,[rip+0x1d0530]        # 1ee720 <mismatchMdH>
   1e1f0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e1f3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e1f7:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e1fa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e1fd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e200:	48 89 d0             	mov    rax,rdx
   1e203:	48 c1 e0 02          	shl    rax,0x2
   1e207:	48 01 d0             	add    rax,rdx
   1e20a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e212:	48 01 d0             	add    rax,rdx
   1e215:	48 89 ca             	mov    rdx,rcx
   1e218:	48 c1 e2 02          	shl    rdx,0x2
   1e21c:	48 01 ca             	add    rdx,rcx
   1e21f:	48 01 d0             	add    rax,rdx
   1e222:	48 01 f0             	add    rax,rsi
   1e225:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e22d:	48 8d 05 ec 04 1d 00 	lea    rax,[rip+0x1d04ec]        # 1ee720 <mismatchMdH>
   1e234:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e237:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e23a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e23d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e240:	48 89 d0             	mov    rax,rdx
   1e243:	48 c1 e0 02          	shl    rax,0x2
   1e247:	48 01 d0             	add    rax,rdx
   1e24a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e252:	48 01 d0             	add    rax,rdx
   1e255:	48 89 ca             	mov    rdx,rcx
   1e258:	48 c1 e2 02          	shl    rdx,0x2
   1e25c:	48 01 ca             	add    rdx,rcx
   1e25f:	48 01 d0             	add    rax,rdx
   1e262:	48 01 f8             	add    rax,rdi
   1e265:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e26d:	48 8d 05 8c 01 1d 00 	lea    rax,[rip+0x1d018c]        # 1ee400 <mismatchM37>
   1e274:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e277:	29 c6                	sub    esi,eax
   1e279:	89 f0                	mov    eax,esi
   1e27b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e27f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e284:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e288:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1e28c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e290:	f3 0f 7e 0d 08 6c 01 00 	movq   xmm1,QWORD PTR [rip+0x16c08]        # 34ea0 <Law_and_Order+0x600>
   1e298:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e29c:	e9 e1 00 00 00       	jmp    1e382 <get_scaled_exp_params+0x34bd>
   1e2a1:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e2a4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e2a7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e2aa:	48 89 d0             	mov    rax,rdx
   1e2ad:	48 c1 e0 02          	shl    rax,0x2
   1e2b1:	48 01 d0             	add    rax,rdx
   1e2b4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e2bc:	48 01 d0             	add    rax,rdx
   1e2bf:	48 89 ca             	mov    rdx,rcx
   1e2c2:	48 c1 e2 02          	shl    rdx,0x2
   1e2c6:	48 01 ca             	add    rdx,rcx
   1e2c9:	48 01 d0             	add    rax,rdx
   1e2cc:	48 01 f0             	add    rax,rsi
   1e2cf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e2d7:	48 8d 05 42 04 1d 00 	lea    rax,[rip+0x1d0442]        # 1ee720 <mismatchMdH>
   1e2de:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e2e1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e2e5:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e2e8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e2eb:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e2ee:	48 89 d0             	mov    rax,rdx
   1e2f1:	48 c1 e0 02          	shl    rax,0x2
   1e2f5:	48 01 d0             	add    rax,rdx
   1e2f8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e300:	48 01 d0             	add    rax,rdx
   1e303:	48 89 ca             	mov    rdx,rcx
   1e306:	48 c1 e2 02          	shl    rdx,0x2
   1e30a:	48 01 ca             	add    rdx,rcx
   1e30d:	48 01 d0             	add    rax,rdx
   1e310:	48 01 f0             	add    rax,rsi
   1e313:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e31b:	48 8d 05 fe 03 1d 00 	lea    rax,[rip+0x1d03fe]        # 1ee720 <mismatchMdH>
   1e322:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e325:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e328:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e32b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e32e:	48 89 d0             	mov    rax,rdx
   1e331:	48 c1 e0 02          	shl    rax,0x2
   1e335:	48 01 d0             	add    rax,rdx
   1e338:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e340:	48 01 d0             	add    rax,rdx
   1e343:	48 89 ca             	mov    rdx,rcx
   1e346:	48 c1 e2 02          	shl    rdx,0x2
   1e34a:	48 01 ca             	add    rdx,rcx
   1e34d:	48 01 d0             	add    rax,rdx
   1e350:	48 01 f8             	add    rax,rdi
   1e353:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e35b:	48 8d 05 9e 00 1d 00 	lea    rax,[rip+0x1d009e]        # 1ee400 <mismatchM37>
   1e362:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e365:	29 c6                	sub    esi,eax
   1e367:	89 f0                	mov    eax,esi
   1e369:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e36d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e372:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e376:	f3 0f 7e 0d 22 6b 01 00 	movq   xmm1,QWORD PTR [rip+0x16b22]        # 34ea0 <Law_and_Order+0x600>
   1e37e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e382:	f2 0f 10 0d 3e 6b 01 00 	movsd  xmm1,QWORD PTR [rip+0x16b3e]        # 34ec8 <Law_and_Order+0x628>
   1e38a:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1e38e:	66 0f 28 c8          	movapd xmm1,xmm0
   1e392:	f2 0f 10 05 46 6b 01 00 	movsd  xmm0,QWORD PTR [rip+0x16b46]        # 34ee0 <Law_and_Order+0x640>
   1e39a:	66 0f 2f c1          	comisd xmm0,xmm1
   1e39e:	76 09                	jbe    1e3a9 <get_scaled_exp_params+0x34e4>
   1e3a0:	66 0f ef c0          	pxor   xmm0,xmm0
   1e3a4:	e9 eb 07 00 00       	jmp    1eb94 <get_scaled_exp_params+0x3ccf>
   1e3a9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1e3ad:	0f 85 ee 00 00 00    	jne    1e4a1 <get_scaled_exp_params+0x35dc>
   1e3b3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e3b6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e3b9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e3bc:	48 89 d0             	mov    rax,rdx
   1e3bf:	48 c1 e0 02          	shl    rax,0x2
   1e3c3:	48 01 d0             	add    rax,rdx
   1e3c6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e3ce:	48 01 d0             	add    rax,rdx
   1e3d1:	48 89 ca             	mov    rdx,rcx
   1e3d4:	48 c1 e2 02          	shl    rdx,0x2
   1e3d8:	48 01 ca             	add    rdx,rcx
   1e3db:	48 01 d0             	add    rax,rdx
   1e3de:	48 01 f0             	add    rax,rsi
   1e3e1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e3e9:	48 8d 05 30 03 1d 00 	lea    rax,[rip+0x1d0330]        # 1ee720 <mismatchMdH>
   1e3f0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e3f3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e3f7:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e3fa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e3fd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e400:	48 89 d0             	mov    rax,rdx
   1e403:	48 c1 e0 02          	shl    rax,0x2
   1e407:	48 01 d0             	add    rax,rdx
   1e40a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e412:	48 01 d0             	add    rax,rdx
   1e415:	48 89 ca             	mov    rdx,rcx
   1e418:	48 c1 e2 02          	shl    rdx,0x2
   1e41c:	48 01 ca             	add    rdx,rcx
   1e41f:	48 01 d0             	add    rax,rdx
   1e422:	48 01 f0             	add    rax,rsi
   1e425:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e42d:	48 8d 05 ec 02 1d 00 	lea    rax,[rip+0x1d02ec]        # 1ee720 <mismatchMdH>
   1e434:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e437:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e43a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e43d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e440:	48 89 d0             	mov    rax,rdx
   1e443:	48 c1 e0 02          	shl    rax,0x2
   1e447:	48 01 d0             	add    rax,rdx
   1e44a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e452:	48 01 d0             	add    rax,rdx
   1e455:	48 89 ca             	mov    rdx,rcx
   1e458:	48 c1 e2 02          	shl    rdx,0x2
   1e45c:	48 01 ca             	add    rdx,rcx
   1e45f:	48 01 d0             	add    rax,rdx
   1e462:	48 01 f8             	add    rax,rdi
   1e465:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e46d:	48 8d 05 8c ff 1c 00 	lea    rax,[rip+0x1cff8c]        # 1ee400 <mismatchM37>
   1e474:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e477:	29 c6                	sub    esi,eax
   1e479:	89 f0                	mov    eax,esi
   1e47b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e47f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e484:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e488:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1e48c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e490:	f3 0f 7e 0d 08 6a 01 00 	movq   xmm1,QWORD PTR [rip+0x16a08]        # 34ea0 <Law_and_Order+0x600>
   1e498:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e49c:	e9 e1 00 00 00       	jmp    1e582 <get_scaled_exp_params+0x36bd>
   1e4a1:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e4a4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e4a7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e4aa:	48 89 d0             	mov    rax,rdx
   1e4ad:	48 c1 e0 02          	shl    rax,0x2
   1e4b1:	48 01 d0             	add    rax,rdx
   1e4b4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e4bc:	48 01 d0             	add    rax,rdx
   1e4bf:	48 89 ca             	mov    rdx,rcx
   1e4c2:	48 c1 e2 02          	shl    rdx,0x2
   1e4c6:	48 01 ca             	add    rdx,rcx
   1e4c9:	48 01 d0             	add    rax,rdx
   1e4cc:	48 01 f0             	add    rax,rsi
   1e4cf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e4d7:	48 8d 05 42 02 1d 00 	lea    rax,[rip+0x1d0242]        # 1ee720 <mismatchMdH>
   1e4de:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e4e1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e4e5:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e4e8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e4eb:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e4ee:	48 89 d0             	mov    rax,rdx
   1e4f1:	48 c1 e0 02          	shl    rax,0x2
   1e4f5:	48 01 d0             	add    rax,rdx
   1e4f8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e500:	48 01 d0             	add    rax,rdx
   1e503:	48 89 ca             	mov    rdx,rcx
   1e506:	48 c1 e2 02          	shl    rdx,0x2
   1e50a:	48 01 ca             	add    rdx,rcx
   1e50d:	48 01 d0             	add    rax,rdx
   1e510:	48 01 f0             	add    rax,rsi
   1e513:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e51b:	48 8d 05 fe 01 1d 00 	lea    rax,[rip+0x1d01fe]        # 1ee720 <mismatchMdH>
   1e522:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e525:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e528:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e52b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e52e:	48 89 d0             	mov    rax,rdx
   1e531:	48 c1 e0 02          	shl    rax,0x2
   1e535:	48 01 d0             	add    rax,rdx
   1e538:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e540:	48 01 d0             	add    rax,rdx
   1e543:	48 89 ca             	mov    rdx,rcx
   1e546:	48 c1 e2 02          	shl    rdx,0x2
   1e54a:	48 01 ca             	add    rdx,rcx
   1e54d:	48 01 d0             	add    rax,rdx
   1e550:	48 01 f8             	add    rax,rdi
   1e553:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e55b:	48 8d 05 9e fe 1c 00 	lea    rax,[rip+0x1cfe9e]        # 1ee400 <mismatchM37>
   1e562:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e565:	29 c6                	sub    esi,eax
   1e567:	89 f0                	mov    eax,esi
   1e569:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e56d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e572:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e576:	f3 0f 7e 0d 22 69 01 00 	movq   xmm1,QWORD PTR [rip+0x16922]        # 34ea0 <Law_and_Order+0x600>
   1e57e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e582:	f2 0f 10 0d 3e 69 01 00 	movsd  xmm1,QWORD PTR [rip+0x1693e]        # 34ec8 <Law_and_Order+0x628>
   1e58a:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1e58e:	66 0f 2f 05 52 69 01 00 	comisd xmm0,QWORD PTR [rip+0x16952]        # 34ee8 <Law_and_Order+0x648>
   1e596:	0f 86 de 01 00 00    	jbe    1e77a <get_scaled_exp_params+0x38b5>
   1e59c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1e5a0:	0f 85 ee 00 00 00    	jne    1e694 <get_scaled_exp_params+0x37cf>
   1e5a6:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e5a9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e5ac:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e5af:	48 89 d0             	mov    rax,rdx
   1e5b2:	48 c1 e0 02          	shl    rax,0x2
   1e5b6:	48 01 d0             	add    rax,rdx
   1e5b9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e5c1:	48 01 d0             	add    rax,rdx
   1e5c4:	48 89 ca             	mov    rdx,rcx
   1e5c7:	48 c1 e2 02          	shl    rdx,0x2
   1e5cb:	48 01 ca             	add    rdx,rcx
   1e5ce:	48 01 d0             	add    rax,rdx
   1e5d1:	48 01 f0             	add    rax,rsi
   1e5d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e5dc:	48 8d 05 3d 01 1d 00 	lea    rax,[rip+0x1d013d]        # 1ee720 <mismatchMdH>
   1e5e3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e5e6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e5ea:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e5ed:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e5f0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e5f3:	48 89 d0             	mov    rax,rdx
   1e5f6:	48 c1 e0 02          	shl    rax,0x2
   1e5fa:	48 01 d0             	add    rax,rdx
   1e5fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e605:	48 01 d0             	add    rax,rdx
   1e608:	48 89 ca             	mov    rdx,rcx
   1e60b:	48 c1 e2 02          	shl    rdx,0x2
   1e60f:	48 01 ca             	add    rdx,rcx
   1e612:	48 01 d0             	add    rax,rdx
   1e615:	48 01 f0             	add    rax,rsi
   1e618:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e620:	48 8d 05 f9 00 1d 00 	lea    rax,[rip+0x1d00f9]        # 1ee720 <mismatchMdH>
   1e627:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e62a:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e62d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e630:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e633:	48 89 d0             	mov    rax,rdx
   1e636:	48 c1 e0 02          	shl    rax,0x2
   1e63a:	48 01 d0             	add    rax,rdx
   1e63d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e645:	48 01 d0             	add    rax,rdx
   1e648:	48 89 ca             	mov    rdx,rcx
   1e64b:	48 c1 e2 02          	shl    rdx,0x2
   1e64f:	48 01 ca             	add    rdx,rcx
   1e652:	48 01 d0             	add    rax,rdx
   1e655:	48 01 f8             	add    rax,rdi
   1e658:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e660:	48 8d 05 99 fd 1c 00 	lea    rax,[rip+0x1cfd99]        # 1ee400 <mismatchM37>
   1e667:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e66a:	29 c6                	sub    esi,eax
   1e66c:	89 f0                	mov    eax,esi
   1e66e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e672:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e677:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e67b:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1e67f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e683:	f3 0f 7e 0d 15 68 01 00 	movq   xmm1,QWORD PTR [rip+0x16815]        # 34ea0 <Law_and_Order+0x600>
   1e68b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e68f:	e9 00 05 00 00       	jmp    1eb94 <get_scaled_exp_params+0x3ccf>
   1e694:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e697:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e69a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e69d:	48 89 d0             	mov    rax,rdx
   1e6a0:	48 c1 e0 02          	shl    rax,0x2
   1e6a4:	48 01 d0             	add    rax,rdx
   1e6a7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e6af:	48 01 d0             	add    rax,rdx
   1e6b2:	48 89 ca             	mov    rdx,rcx
   1e6b5:	48 c1 e2 02          	shl    rdx,0x2
   1e6b9:	48 01 ca             	add    rdx,rcx
   1e6bc:	48 01 d0             	add    rax,rdx
   1e6bf:	48 01 f0             	add    rax,rsi
   1e6c2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e6ca:	48 8d 05 4f 00 1d 00 	lea    rax,[rip+0x1d004f]        # 1ee720 <mismatchMdH>
   1e6d1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e6d4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e6d8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e6db:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e6de:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e6e1:	48 89 d0             	mov    rax,rdx
   1e6e4:	48 c1 e0 02          	shl    rax,0x2
   1e6e8:	48 01 d0             	add    rax,rdx
   1e6eb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e6f3:	48 01 d0             	add    rax,rdx
   1e6f6:	48 89 ca             	mov    rdx,rcx
   1e6f9:	48 c1 e2 02          	shl    rdx,0x2
   1e6fd:	48 01 ca             	add    rdx,rcx
   1e700:	48 01 d0             	add    rax,rdx
   1e703:	48 01 f0             	add    rax,rsi
   1e706:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e70e:	48 8d 05 0b 00 1d 00 	lea    rax,[rip+0x1d000b]        # 1ee720 <mismatchMdH>
   1e715:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e718:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e71b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e71e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e721:	48 89 d0             	mov    rax,rdx
   1e724:	48 c1 e0 02          	shl    rax,0x2
   1e728:	48 01 d0             	add    rax,rdx
   1e72b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e733:	48 01 d0             	add    rax,rdx
   1e736:	48 89 ca             	mov    rdx,rcx
   1e739:	48 c1 e2 02          	shl    rdx,0x2
   1e73d:	48 01 ca             	add    rdx,rcx
   1e740:	48 01 d0             	add    rax,rdx
   1e743:	48 01 f8             	add    rax,rdi
   1e746:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e74e:	48 8d 05 ab fc 1c 00 	lea    rax,[rip+0x1cfcab]        # 1ee400 <mismatchM37>
   1e755:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e758:	29 c6                	sub    esi,eax
   1e75a:	89 f0                	mov    eax,esi
   1e75c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e760:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e765:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e769:	f3 0f 7e 0d 2f 67 01 00 	movq   xmm1,QWORD PTR [rip+0x1672f]        # 34ea0 <Law_and_Order+0x600>
   1e771:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e775:	e9 1a 04 00 00       	jmp    1eb94 <get_scaled_exp_params+0x3ccf>
   1e77a:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1e77e:	0f 85 ee 00 00 00    	jne    1e872 <get_scaled_exp_params+0x39ad>
   1e784:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e787:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e78a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e78d:	48 89 d0             	mov    rax,rdx
   1e790:	48 c1 e0 02          	shl    rax,0x2
   1e794:	48 01 d0             	add    rax,rdx
   1e797:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e79f:	48 01 d0             	add    rax,rdx
   1e7a2:	48 89 ca             	mov    rdx,rcx
   1e7a5:	48 c1 e2 02          	shl    rdx,0x2
   1e7a9:	48 01 ca             	add    rdx,rcx
   1e7ac:	48 01 d0             	add    rax,rdx
   1e7af:	48 01 f0             	add    rax,rsi
   1e7b2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e7ba:	48 8d 05 5f ff 1c 00 	lea    rax,[rip+0x1cff5f]        # 1ee720 <mismatchMdH>
   1e7c1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e7c4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e7c8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e7cb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e7ce:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e7d1:	48 89 d0             	mov    rax,rdx
   1e7d4:	48 c1 e0 02          	shl    rax,0x2
   1e7d8:	48 01 d0             	add    rax,rdx
   1e7db:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e7e3:	48 01 d0             	add    rax,rdx
   1e7e6:	48 89 ca             	mov    rdx,rcx
   1e7e9:	48 c1 e2 02          	shl    rdx,0x2
   1e7ed:	48 01 ca             	add    rdx,rcx
   1e7f0:	48 01 d0             	add    rax,rdx
   1e7f3:	48 01 f0             	add    rax,rsi
   1e7f6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e7fe:	48 8d 05 1b ff 1c 00 	lea    rax,[rip+0x1cff1b]        # 1ee720 <mismatchMdH>
   1e805:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e808:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e80b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e80e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e811:	48 89 d0             	mov    rax,rdx
   1e814:	48 c1 e0 02          	shl    rax,0x2
   1e818:	48 01 d0             	add    rax,rdx
   1e81b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e823:	48 01 d0             	add    rax,rdx
   1e826:	48 89 ca             	mov    rdx,rcx
   1e829:	48 c1 e2 02          	shl    rdx,0x2
   1e82d:	48 01 ca             	add    rdx,rcx
   1e830:	48 01 d0             	add    rax,rdx
   1e833:	48 01 f8             	add    rax,rdi
   1e836:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e83e:	48 8d 05 bb fb 1c 00 	lea    rax,[rip+0x1cfbbb]        # 1ee400 <mismatchM37>
   1e845:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e848:	29 c6                	sub    esi,eax
   1e84a:	89 f0                	mov    eax,esi
   1e84c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e850:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e855:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e859:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1e85d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e861:	f3 0f 7e 0d 37 66 01 00 	movq   xmm1,QWORD PTR [rip+0x16637]        # 34ea0 <Law_and_Order+0x600>
   1e869:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e86d:	e9 e1 00 00 00       	jmp    1e953 <get_scaled_exp_params+0x3a8e>
   1e872:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e875:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e878:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e87b:	48 89 d0             	mov    rax,rdx
   1e87e:	48 c1 e0 02          	shl    rax,0x2
   1e882:	48 01 d0             	add    rax,rdx
   1e885:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e88d:	48 01 d0             	add    rax,rdx
   1e890:	48 89 ca             	mov    rdx,rcx
   1e893:	48 c1 e2 02          	shl    rdx,0x2
   1e897:	48 01 ca             	add    rdx,rcx
   1e89a:	48 01 d0             	add    rax,rdx
   1e89d:	48 01 f0             	add    rax,rsi
   1e8a0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e8a8:	48 8d 05 71 fe 1c 00 	lea    rax,[rip+0x1cfe71]        # 1ee720 <mismatchMdH>
   1e8af:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e8b2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e8b6:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e8b9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e8bc:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e8bf:	48 89 d0             	mov    rax,rdx
   1e8c2:	48 c1 e0 02          	shl    rax,0x2
   1e8c6:	48 01 d0             	add    rax,rdx
   1e8c9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e8d1:	48 01 d0             	add    rax,rdx
   1e8d4:	48 89 ca             	mov    rdx,rcx
   1e8d7:	48 c1 e2 02          	shl    rdx,0x2
   1e8db:	48 01 ca             	add    rdx,rcx
   1e8de:	48 01 d0             	add    rax,rdx
   1e8e1:	48 01 f0             	add    rax,rsi
   1e8e4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e8ec:	48 8d 05 2d fe 1c 00 	lea    rax,[rip+0x1cfe2d]        # 1ee720 <mismatchMdH>
   1e8f3:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1e8f6:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1e8f9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e8fc:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e8ff:	48 89 d0             	mov    rax,rdx
   1e902:	48 c1 e0 02          	shl    rax,0x2
   1e906:	48 01 d0             	add    rax,rdx
   1e909:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e911:	48 01 d0             	add    rax,rdx
   1e914:	48 89 ca             	mov    rdx,rcx
   1e917:	48 c1 e2 02          	shl    rdx,0x2
   1e91b:	48 01 ca             	add    rdx,rcx
   1e91e:	48 01 d0             	add    rax,rdx
   1e921:	48 01 f8             	add    rax,rdi
   1e924:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e92c:	48 8d 05 cd fa 1c 00 	lea    rax,[rip+0x1cfacd]        # 1ee400 <mismatchM37>
   1e933:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e936:	29 c6                	sub    esi,eax
   1e938:	89 f0                	mov    eax,esi
   1e93a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1e93e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1e943:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e947:	f3 0f 7e 0d 51 65 01 00 	movq   xmm1,QWORD PTR [rip+0x16551]        # 34ea0 <Law_and_Order+0x600>
   1e94f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1e953:	f2 0f 10 0d 6d 65 01 00 	movsd  xmm1,QWORD PTR [rip+0x1656d]        # 34ec8 <Law_and_Order+0x628>
   1e95b:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1e95f:	f2 0f 10 0d 89 65 01 00 	movsd  xmm1,QWORD PTR [rip+0x16589]        # 34ef0 <Law_and_Order+0x650>
   1e967:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1e96b:	e8 e0 4c fe ff       	call   3650 <sin@plt>
   1e970:	f2 0f 10 0d 00 65 01 00 	movsd  xmm1,QWORD PTR [rip+0x16500]        # 34e78 <Law_and_Order+0x5d8>
   1e978:	f2 0f 58 c8          	addsd  xmm1,xmm0
   1e97c:	f2 0f 10 05 74 65 01 00 	movsd  xmm0,QWORD PTR [rip+0x16574]        # 34ef8 <Law_and_Order+0x658>
   1e984:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   1e988:	f2 0f 11 4d 88       	movsd  QWORD PTR [rbp-0x78],xmm1
   1e98d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1e991:	0f 85 ee 00 00 00    	jne    1ea85 <get_scaled_exp_params+0x3bc0>
   1e997:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e99a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e99d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e9a0:	48 89 d0             	mov    rax,rdx
   1e9a3:	48 c1 e0 02          	shl    rax,0x2
   1e9a7:	48 01 d0             	add    rax,rdx
   1e9aa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e9b2:	48 01 d0             	add    rax,rdx
   1e9b5:	48 89 ca             	mov    rdx,rcx
   1e9b8:	48 c1 e2 02          	shl    rdx,0x2
   1e9bc:	48 01 ca             	add    rdx,rcx
   1e9bf:	48 01 d0             	add    rax,rdx
   1e9c2:	48 01 f0             	add    rax,rsi
   1e9c5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e9cd:	48 8d 05 4c fd 1c 00 	lea    rax,[rip+0x1cfd4c]        # 1ee720 <mismatchMdH>
   1e9d4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1e9d7:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1e9db:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1e9de:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1e9e1:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1e9e4:	48 89 d0             	mov    rax,rdx
   1e9e7:	48 c1 e0 02          	shl    rax,0x2
   1e9eb:	48 01 d0             	add    rax,rdx
   1e9ee:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1e9f6:	48 01 d0             	add    rax,rdx
   1e9f9:	48 89 ca             	mov    rdx,rcx
   1e9fc:	48 c1 e2 02          	shl    rdx,0x2
   1ea00:	48 01 ca             	add    rdx,rcx
   1ea03:	48 01 d0             	add    rax,rdx
   1ea06:	48 01 f0             	add    rax,rsi
   1ea09:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ea11:	48 8d 05 08 fd 1c 00 	lea    rax,[rip+0x1cfd08]        # 1ee720 <mismatchMdH>
   1ea18:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1ea1b:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1ea1e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ea21:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ea24:	48 89 d0             	mov    rax,rdx
   1ea27:	48 c1 e0 02          	shl    rax,0x2
   1ea2b:	48 01 d0             	add    rax,rdx
   1ea2e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ea36:	48 01 d0             	add    rax,rdx
   1ea39:	48 89 ca             	mov    rdx,rcx
   1ea3c:	48 c1 e2 02          	shl    rdx,0x2
   1ea40:	48 01 ca             	add    rdx,rcx
   1ea43:	48 01 d0             	add    rax,rdx
   1ea46:	48 01 f8             	add    rax,rdi
   1ea49:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ea51:	48 8d 05 a8 f9 1c 00 	lea    rax,[rip+0x1cf9a8]        # 1ee400 <mismatchM37>
   1ea58:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ea5b:	29 c6                	sub    esi,eax
   1ea5d:	89 f0                	mov    eax,esi
   1ea5f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ea63:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ea68:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ea6c:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1ea70:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ea74:	f3 0f 7e 0d 24 64 01 00 	movq   xmm1,QWORD PTR [rip+0x16424]        # 34ea0 <Law_and_Order+0x600>
   1ea7c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1ea80:	e9 e1 00 00 00       	jmp    1eb66 <get_scaled_exp_params+0x3ca1>
   1ea85:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ea88:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ea8b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ea8e:	48 89 d0             	mov    rax,rdx
   1ea91:	48 c1 e0 02          	shl    rax,0x2
   1ea95:	48 01 d0             	add    rax,rdx
   1ea98:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eaa0:	48 01 d0             	add    rax,rdx
   1eaa3:	48 89 ca             	mov    rdx,rcx
   1eaa6:	48 c1 e2 02          	shl    rdx,0x2
   1eaaa:	48 01 ca             	add    rdx,rcx
   1eaad:	48 01 d0             	add    rax,rdx
   1eab0:	48 01 f0             	add    rax,rsi
   1eab3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eabb:	48 8d 05 5e fc 1c 00 	lea    rax,[rip+0x1cfc5e]        # 1ee720 <mismatchMdH>
   1eac2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1eac5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1eac9:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1eacc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1eacf:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ead2:	48 89 d0             	mov    rax,rdx
   1ead5:	48 c1 e0 02          	shl    rax,0x2
   1ead9:	48 01 d0             	add    rax,rdx
   1eadc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eae4:	48 01 d0             	add    rax,rdx
   1eae7:	48 89 ca             	mov    rdx,rcx
   1eaea:	48 c1 e2 02          	shl    rdx,0x2
   1eaee:	48 01 ca             	add    rdx,rcx
   1eaf1:	48 01 d0             	add    rax,rdx
   1eaf4:	48 01 f0             	add    rax,rsi
   1eaf7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eaff:	48 8d 05 1a fc 1c 00 	lea    rax,[rip+0x1cfc1a]        # 1ee720 <mismatchMdH>
   1eb06:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1eb09:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1eb0c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1eb0f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1eb12:	48 89 d0             	mov    rax,rdx
   1eb15:	48 c1 e0 02          	shl    rax,0x2
   1eb19:	48 01 d0             	add    rax,rdx
   1eb1c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eb24:	48 01 d0             	add    rax,rdx
   1eb27:	48 89 ca             	mov    rdx,rcx
   1eb2a:	48 c1 e2 02          	shl    rdx,0x2
   1eb2e:	48 01 ca             	add    rdx,rcx
   1eb31:	48 01 d0             	add    rax,rdx
   1eb34:	48 01 f8             	add    rax,rdi
   1eb37:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eb3f:	48 8d 05 ba f8 1c 00 	lea    rax,[rip+0x1cf8ba]        # 1ee400 <mismatchM37>
   1eb46:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1eb49:	29 c6                	sub    esi,eax
   1eb4b:	89 f0                	mov    eax,esi
   1eb4d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1eb51:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1eb56:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1eb5a:	f3 0f 7e 0d 3e 63 01 00 	movq   xmm1,QWORD PTR [rip+0x1633e]        # 34ea0 <Law_and_Order+0x600>
   1eb62:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1eb66:	f2 0f 10 0d 5a 63 01 00 	movsd  xmm1,QWORD PTR [rip+0x1635a]        # 34ec8 <Law_and_Order+0x628>
   1eb6e:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1eb72:	f2 0f 10 0d 76 63 01 00 	movsd  xmm1,QWORD PTR [rip+0x16376]        # 34ef0 <Law_and_Order+0x650>
   1eb7a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1eb7e:	e8 cd 4a fe ff       	call   3650 <sin@plt>
   1eb83:	f2 0f 10 0d ed 62 01 00 	movsd  xmm1,QWORD PTR [rip+0x162ed]        # 34e78 <Law_and_Order+0x5d8>
   1eb8b:	f2 0f 58 c1          	addsd  xmm0,xmm1
   1eb8f:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1eb94:	f2 0f 10 0d 2c 63 01 00 	movsd  xmm1,QWORD PTR [rip+0x1632c]        # 34ec8 <Law_and_Order+0x628>
   1eb9c:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1eba0:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1eba5:	e8 86 4f fe ff       	call   3b30 <exp@plt>
   1ebaa:	66 48 0f 7e c6       	movq   rsi,xmm0
   1ebaf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   1ebb3:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   1ebb7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ebba:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ebbd:	48 89 d0             	mov    rax,rdx
   1ebc0:	48 c1 e0 02          	shl    rax,0x2
   1ebc4:	48 01 d0             	add    rax,rdx
   1ebc7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ebcf:	48 01 d0             	add    rax,rdx
   1ebd2:	48 89 ca             	mov    rdx,rcx
   1ebd5:	48 c1 e2 02          	shl    rdx,0x2
   1ebd9:	48 01 ca             	add    rdx,rcx
   1ebdc:	48 01 d0             	add    rax,rdx
   1ebdf:	4c 01 c0             	add    rax,r8
   1ebe2:	48 05 86 04 00 00    	add    rax,0x486
   1ebe8:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   1ebec:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1ebf0:	0f 85 b8 03 00 00    	jne    1efae <get_scaled_exp_params+0x40e9>
   1ebf6:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1ebfa:	0f 85 e3 00 00 00    	jne    1ece3 <get_scaled_exp_params+0x3e1e>
   1ec00:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ec03:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ec06:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ec09:	48 89 d0             	mov    rax,rdx
   1ec0c:	48 c1 e0 02          	shl    rax,0x2
   1ec10:	48 01 d0             	add    rax,rdx
   1ec13:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ec1b:	48 01 d0             	add    rax,rdx
   1ec1e:	48 89 ca             	mov    rdx,rcx
   1ec21:	48 c1 e2 02          	shl    rdx,0x2
   1ec25:	48 01 ca             	add    rdx,rcx
   1ec28:	48 01 d0             	add    rax,rdx
   1ec2b:	48 01 f0             	add    rax,rsi
   1ec2e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ec36:	48 8d 05 a3 0d 1d 00 	lea    rax,[rip+0x1d0da3]        # 1ef9e0 <mismatchExtdH>
   1ec3d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ec40:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ec44:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ec47:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ec4a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ec4d:	48 89 d0             	mov    rax,rdx
   1ec50:	48 c1 e0 02          	shl    rax,0x2
   1ec54:	48 01 d0             	add    rax,rdx
   1ec57:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ec5f:	48 01 d0             	add    rax,rdx
   1ec62:	48 89 ca             	mov    rdx,rcx
   1ec65:	48 c1 e2 02          	shl    rdx,0x2
   1ec69:	48 01 ca             	add    rdx,rcx
   1ec6c:	48 01 d0             	add    rax,rdx
   1ec6f:	48 01 f0             	add    rax,rsi
   1ec72:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ec7a:	48 8d 05 5f 0d 1d 00 	lea    rax,[rip+0x1d0d5f]        # 1ef9e0 <mismatchExtdH>
   1ec81:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1ec84:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1ec87:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ec8a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ec8d:	48 89 d0             	mov    rax,rdx
   1ec90:	48 c1 e0 02          	shl    rax,0x2
   1ec94:	48 01 d0             	add    rax,rdx
   1ec97:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ec9f:	48 01 d0             	add    rax,rdx
   1eca2:	48 89 ca             	mov    rdx,rcx
   1eca5:	48 c1 e2 02          	shl    rdx,0x2
   1eca9:	48 01 ca             	add    rdx,rcx
   1ecac:	48 01 d0             	add    rax,rdx
   1ecaf:	48 01 f8             	add    rax,rdi
   1ecb2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ecba:	48 8d 05 ff 09 1d 00 	lea    rax,[rip+0x1d09ff]        # 1ef6c0 <mismatchExt37>
   1ecc1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ecc4:	29 c6                	sub    esi,eax
   1ecc6:	89 f0                	mov    eax,esi
   1ecc8:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1eccc:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ecd1:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ecd5:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1ecd9:	85 c0                	test   eax,eax
   1ecdb:	0f 9f c0             	setg   al
   1ecde:	e9 e0 00 00 00       	jmp    1edc3 <get_scaled_exp_params+0x3efe>
   1ece3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ece6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ece9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ecec:	48 89 d0             	mov    rax,rdx
   1ecef:	48 c1 e0 02          	shl    rax,0x2
   1ecf3:	48 01 d0             	add    rax,rdx
   1ecf6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ecfe:	48 01 d0             	add    rax,rdx
   1ed01:	48 89 ca             	mov    rdx,rcx
   1ed04:	48 c1 e2 02          	shl    rdx,0x2
   1ed08:	48 01 ca             	add    rdx,rcx
   1ed0b:	48 01 d0             	add    rax,rdx
   1ed0e:	48 01 f0             	add    rax,rsi
   1ed11:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ed19:	48 8d 05 c0 0c 1d 00 	lea    rax,[rip+0x1d0cc0]        # 1ef9e0 <mismatchExtdH>
   1ed20:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ed23:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ed27:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ed2a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ed2d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ed30:	48 89 d0             	mov    rax,rdx
   1ed33:	48 c1 e0 02          	shl    rax,0x2
   1ed37:	48 01 d0             	add    rax,rdx
   1ed3a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ed42:	48 01 d0             	add    rax,rdx
   1ed45:	48 89 ca             	mov    rdx,rcx
   1ed48:	48 c1 e2 02          	shl    rdx,0x2
   1ed4c:	48 01 ca             	add    rdx,rcx
   1ed4f:	48 01 d0             	add    rax,rdx
   1ed52:	48 01 f0             	add    rax,rsi
   1ed55:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ed5d:	48 8d 05 7c 0c 1d 00 	lea    rax,[rip+0x1d0c7c]        # 1ef9e0 <mismatchExtdH>
   1ed64:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1ed67:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1ed6a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ed6d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ed70:	48 89 d0             	mov    rax,rdx
   1ed73:	48 c1 e0 02          	shl    rax,0x2
   1ed77:	48 01 d0             	add    rax,rdx
   1ed7a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ed82:	48 01 d0             	add    rax,rdx
   1ed85:	48 89 ca             	mov    rdx,rcx
   1ed88:	48 c1 e2 02          	shl    rdx,0x2
   1ed8c:	48 01 ca             	add    rdx,rcx
   1ed8f:	48 01 d0             	add    rax,rdx
   1ed92:	48 01 f8             	add    rax,rdi
   1ed95:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ed9d:	48 8d 05 1c 09 1d 00 	lea    rax,[rip+0x1d091c]        # 1ef6c0 <mismatchExt37>
   1eda4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1eda7:	29 c6                	sub    esi,eax
   1eda9:	89 f0                	mov    eax,esi
   1edab:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1edaf:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1edb4:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1edb8:	66 0f ef c9          	pxor   xmm1,xmm1
   1edbc:	66 0f 2f c1          	comisd xmm0,xmm1
   1edc0:	0f 97 c0             	seta   al
   1edc3:	84 c0                	test   al,al
   1edc5:	74 09                	je     1edd0 <get_scaled_exp_params+0x3f0b>
   1edc7:	66 0f ef c0          	pxor   xmm0,xmm0
   1edcb:	e9 c9 0b 00 00       	jmp    1f999 <get_scaled_exp_params+0x4ad4>
   1edd0:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1edd4:	0f 85 ee 00 00 00    	jne    1eec8 <get_scaled_exp_params+0x4003>
   1edda:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1eddd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ede0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ede3:	48 89 d0             	mov    rax,rdx
   1ede6:	48 c1 e0 02          	shl    rax,0x2
   1edea:	48 01 d0             	add    rax,rdx
   1eded:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1edf5:	48 01 d0             	add    rax,rdx
   1edf8:	48 89 ca             	mov    rdx,rcx
   1edfb:	48 c1 e2 02          	shl    rdx,0x2
   1edff:	48 01 ca             	add    rdx,rcx
   1ee02:	48 01 d0             	add    rax,rdx
   1ee05:	48 01 f0             	add    rax,rsi
   1ee08:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ee10:	48 8d 05 c9 0b 1d 00 	lea    rax,[rip+0x1d0bc9]        # 1ef9e0 <mismatchExtdH>
   1ee17:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ee1a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ee1e:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ee21:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ee24:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ee27:	48 89 d0             	mov    rax,rdx
   1ee2a:	48 c1 e0 02          	shl    rax,0x2
   1ee2e:	48 01 d0             	add    rax,rdx
   1ee31:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ee39:	48 01 d0             	add    rax,rdx
   1ee3c:	48 89 ca             	mov    rdx,rcx
   1ee3f:	48 c1 e2 02          	shl    rdx,0x2
   1ee43:	48 01 ca             	add    rdx,rcx
   1ee46:	48 01 d0             	add    rax,rdx
   1ee49:	48 01 f0             	add    rax,rsi
   1ee4c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ee54:	48 8d 05 85 0b 1d 00 	lea    rax,[rip+0x1d0b85]        # 1ef9e0 <mismatchExtdH>
   1ee5b:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1ee5e:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1ee61:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ee64:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ee67:	48 89 d0             	mov    rax,rdx
   1ee6a:	48 c1 e0 02          	shl    rax,0x2
   1ee6e:	48 01 d0             	add    rax,rdx
   1ee71:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ee79:	48 01 d0             	add    rax,rdx
   1ee7c:	48 89 ca             	mov    rdx,rcx
   1ee7f:	48 c1 e2 02          	shl    rdx,0x2
   1ee83:	48 01 ca             	add    rdx,rcx
   1ee86:	48 01 d0             	add    rax,rdx
   1ee89:	48 01 f8             	add    rax,rdi
   1ee8c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ee94:	48 8d 05 25 08 1d 00 	lea    rax,[rip+0x1d0825]        # 1ef6c0 <mismatchExt37>
   1ee9b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ee9e:	29 c6                	sub    esi,eax
   1eea0:	89 f0                	mov    eax,esi
   1eea2:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1eea6:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1eeab:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1eeaf:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1eeb3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1eeb7:	f3 0f 7e 0d e1 5f 01 00 	movq   xmm1,QWORD PTR [rip+0x15fe1]        # 34ea0 <Law_and_Order+0x600>
   1eebf:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1eec3:	e9 d1 0a 00 00       	jmp    1f999 <get_scaled_exp_params+0x4ad4>
   1eec8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1eecb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1eece:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1eed1:	48 89 d0             	mov    rax,rdx
   1eed4:	48 c1 e0 02          	shl    rax,0x2
   1eed8:	48 01 d0             	add    rax,rdx
   1eedb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eee3:	48 01 d0             	add    rax,rdx
   1eee6:	48 89 ca             	mov    rdx,rcx
   1eee9:	48 c1 e2 02          	shl    rdx,0x2
   1eeed:	48 01 ca             	add    rdx,rcx
   1eef0:	48 01 d0             	add    rax,rdx
   1eef3:	48 01 f0             	add    rax,rsi
   1eef6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1eefe:	48 8d 05 db 0a 1d 00 	lea    rax,[rip+0x1d0adb]        # 1ef9e0 <mismatchExtdH>
   1ef05:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ef08:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ef0c:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ef0f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ef12:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ef15:	48 89 d0             	mov    rax,rdx
   1ef18:	48 c1 e0 02          	shl    rax,0x2
   1ef1c:	48 01 d0             	add    rax,rdx
   1ef1f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ef27:	48 01 d0             	add    rax,rdx
   1ef2a:	48 89 ca             	mov    rdx,rcx
   1ef2d:	48 c1 e2 02          	shl    rdx,0x2
   1ef31:	48 01 ca             	add    rdx,rcx
   1ef34:	48 01 d0             	add    rax,rdx
   1ef37:	48 01 f0             	add    rax,rsi
   1ef3a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ef42:	48 8d 05 97 0a 1d 00 	lea    rax,[rip+0x1d0a97]        # 1ef9e0 <mismatchExtdH>
   1ef49:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1ef4c:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1ef4f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1ef52:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1ef55:	48 89 d0             	mov    rax,rdx
   1ef58:	48 c1 e0 02          	shl    rax,0x2
   1ef5c:	48 01 d0             	add    rax,rdx
   1ef5f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ef67:	48 01 d0             	add    rax,rdx
   1ef6a:	48 89 ca             	mov    rdx,rcx
   1ef6d:	48 c1 e2 02          	shl    rdx,0x2
   1ef71:	48 01 ca             	add    rdx,rcx
   1ef74:	48 01 d0             	add    rax,rdx
   1ef77:	48 01 f8             	add    rax,rdi
   1ef7a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ef82:	48 8d 05 37 07 1d 00 	lea    rax,[rip+0x1d0737]        # 1ef6c0 <mismatchExt37>
   1ef89:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ef8c:	29 c6                	sub    esi,eax
   1ef8e:	89 f0                	mov    eax,esi
   1ef90:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ef94:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ef99:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ef9d:	f3 0f 7e 0d fb 5e 01 00 	movq   xmm1,QWORD PTR [rip+0x15efb]        # 34ea0 <Law_and_Order+0x600>
   1efa5:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1efa9:	e9 eb 09 00 00       	jmp    1f999 <get_scaled_exp_params+0x4ad4>
   1efae:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1efb2:	0f 85 ee 00 00 00    	jne    1f0a6 <get_scaled_exp_params+0x41e1>
   1efb8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1efbb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1efbe:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1efc1:	48 89 d0             	mov    rax,rdx
   1efc4:	48 c1 e0 02          	shl    rax,0x2
   1efc8:	48 01 d0             	add    rax,rdx
   1efcb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1efd3:	48 01 d0             	add    rax,rdx
   1efd6:	48 89 ca             	mov    rdx,rcx
   1efd9:	48 c1 e2 02          	shl    rdx,0x2
   1efdd:	48 01 ca             	add    rdx,rcx
   1efe0:	48 01 d0             	add    rax,rdx
   1efe3:	48 01 f0             	add    rax,rsi
   1efe6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1efee:	48 8d 05 eb 09 1d 00 	lea    rax,[rip+0x1d09eb]        # 1ef9e0 <mismatchExtdH>
   1eff5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1eff8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1effc:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1efff:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f002:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f005:	48 89 d0             	mov    rax,rdx
   1f008:	48 c1 e0 02          	shl    rax,0x2
   1f00c:	48 01 d0             	add    rax,rdx
   1f00f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f017:	48 01 d0             	add    rax,rdx
   1f01a:	48 89 ca             	mov    rdx,rcx
   1f01d:	48 c1 e2 02          	shl    rdx,0x2
   1f021:	48 01 ca             	add    rdx,rcx
   1f024:	48 01 d0             	add    rax,rdx
   1f027:	48 01 f0             	add    rax,rsi
   1f02a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f032:	48 8d 05 a7 09 1d 00 	lea    rax,[rip+0x1d09a7]        # 1ef9e0 <mismatchExtdH>
   1f039:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f03c:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f03f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f042:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f045:	48 89 d0             	mov    rax,rdx
   1f048:	48 c1 e0 02          	shl    rax,0x2
   1f04c:	48 01 d0             	add    rax,rdx
   1f04f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f057:	48 01 d0             	add    rax,rdx
   1f05a:	48 89 ca             	mov    rdx,rcx
   1f05d:	48 c1 e2 02          	shl    rdx,0x2
   1f061:	48 01 ca             	add    rdx,rcx
   1f064:	48 01 d0             	add    rax,rdx
   1f067:	48 01 f8             	add    rax,rdi
   1f06a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f072:	48 8d 05 47 06 1d 00 	lea    rax,[rip+0x1d0647]        # 1ef6c0 <mismatchExt37>
   1f079:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f07c:	29 c6                	sub    esi,eax
   1f07e:	89 f0                	mov    eax,esi
   1f080:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f084:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f089:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f08d:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1f091:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f095:	f3 0f 7e 0d 03 5e 01 00 	movq   xmm1,QWORD PTR [rip+0x15e03]        # 34ea0 <Law_and_Order+0x600>
   1f09d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f0a1:	e9 e1 00 00 00       	jmp    1f187 <get_scaled_exp_params+0x42c2>
   1f0a6:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f0a9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f0ac:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f0af:	48 89 d0             	mov    rax,rdx
   1f0b2:	48 c1 e0 02          	shl    rax,0x2
   1f0b6:	48 01 d0             	add    rax,rdx
   1f0b9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f0c1:	48 01 d0             	add    rax,rdx
   1f0c4:	48 89 ca             	mov    rdx,rcx
   1f0c7:	48 c1 e2 02          	shl    rdx,0x2
   1f0cb:	48 01 ca             	add    rdx,rcx
   1f0ce:	48 01 d0             	add    rax,rdx
   1f0d1:	48 01 f0             	add    rax,rsi
   1f0d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f0dc:	48 8d 05 fd 08 1d 00 	lea    rax,[rip+0x1d08fd]        # 1ef9e0 <mismatchExtdH>
   1f0e3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f0e6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f0ea:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f0ed:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f0f0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f0f3:	48 89 d0             	mov    rax,rdx
   1f0f6:	48 c1 e0 02          	shl    rax,0x2
   1f0fa:	48 01 d0             	add    rax,rdx
   1f0fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f105:	48 01 d0             	add    rax,rdx
   1f108:	48 89 ca             	mov    rdx,rcx
   1f10b:	48 c1 e2 02          	shl    rdx,0x2
   1f10f:	48 01 ca             	add    rdx,rcx
   1f112:	48 01 d0             	add    rax,rdx
   1f115:	48 01 f0             	add    rax,rsi
   1f118:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f120:	48 8d 05 b9 08 1d 00 	lea    rax,[rip+0x1d08b9]        # 1ef9e0 <mismatchExtdH>
   1f127:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f12a:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f12d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f130:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f133:	48 89 d0             	mov    rax,rdx
   1f136:	48 c1 e0 02          	shl    rax,0x2
   1f13a:	48 01 d0             	add    rax,rdx
   1f13d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f145:	48 01 d0             	add    rax,rdx
   1f148:	48 89 ca             	mov    rdx,rcx
   1f14b:	48 c1 e2 02          	shl    rdx,0x2
   1f14f:	48 01 ca             	add    rdx,rcx
   1f152:	48 01 d0             	add    rax,rdx
   1f155:	48 01 f8             	add    rax,rdi
   1f158:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f160:	48 8d 05 59 05 1d 00 	lea    rax,[rip+0x1d0559]        # 1ef6c0 <mismatchExt37>
   1f167:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f16a:	29 c6                	sub    esi,eax
   1f16c:	89 f0                	mov    eax,esi
   1f16e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f172:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f177:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f17b:	f3 0f 7e 0d 1d 5d 01 00 	movq   xmm1,QWORD PTR [rip+0x15d1d]        # 34ea0 <Law_and_Order+0x600>
   1f183:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f187:	f2 0f 10 0d 39 5d 01 00 	movsd  xmm1,QWORD PTR [rip+0x15d39]        # 34ec8 <Law_and_Order+0x628>
   1f18f:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1f193:	66 0f 28 c8          	movapd xmm1,xmm0
   1f197:	f2 0f 10 05 41 5d 01 00 	movsd  xmm0,QWORD PTR [rip+0x15d41]        # 34ee0 <Law_and_Order+0x640>
   1f19f:	66 0f 2f c1          	comisd xmm0,xmm1
   1f1a3:	76 09                	jbe    1f1ae <get_scaled_exp_params+0x42e9>
   1f1a5:	66 0f ef c0          	pxor   xmm0,xmm0
   1f1a9:	e9 eb 07 00 00       	jmp    1f999 <get_scaled_exp_params+0x4ad4>
   1f1ae:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1f1b2:	0f 85 ee 00 00 00    	jne    1f2a6 <get_scaled_exp_params+0x43e1>
   1f1b8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f1bb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f1be:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f1c1:	48 89 d0             	mov    rax,rdx
   1f1c4:	48 c1 e0 02          	shl    rax,0x2
   1f1c8:	48 01 d0             	add    rax,rdx
   1f1cb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f1d3:	48 01 d0             	add    rax,rdx
   1f1d6:	48 89 ca             	mov    rdx,rcx
   1f1d9:	48 c1 e2 02          	shl    rdx,0x2
   1f1dd:	48 01 ca             	add    rdx,rcx
   1f1e0:	48 01 d0             	add    rax,rdx
   1f1e3:	48 01 f0             	add    rax,rsi
   1f1e6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f1ee:	48 8d 05 eb 07 1d 00 	lea    rax,[rip+0x1d07eb]        # 1ef9e0 <mismatchExtdH>
   1f1f5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f1f8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f1fc:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f1ff:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f202:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f205:	48 89 d0             	mov    rax,rdx
   1f208:	48 c1 e0 02          	shl    rax,0x2
   1f20c:	48 01 d0             	add    rax,rdx
   1f20f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f217:	48 01 d0             	add    rax,rdx
   1f21a:	48 89 ca             	mov    rdx,rcx
   1f21d:	48 c1 e2 02          	shl    rdx,0x2
   1f221:	48 01 ca             	add    rdx,rcx
   1f224:	48 01 d0             	add    rax,rdx
   1f227:	48 01 f0             	add    rax,rsi
   1f22a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f232:	48 8d 05 a7 07 1d 00 	lea    rax,[rip+0x1d07a7]        # 1ef9e0 <mismatchExtdH>
   1f239:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f23c:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f23f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f242:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f245:	48 89 d0             	mov    rax,rdx
   1f248:	48 c1 e0 02          	shl    rax,0x2
   1f24c:	48 01 d0             	add    rax,rdx
   1f24f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f257:	48 01 d0             	add    rax,rdx
   1f25a:	48 89 ca             	mov    rdx,rcx
   1f25d:	48 c1 e2 02          	shl    rdx,0x2
   1f261:	48 01 ca             	add    rdx,rcx
   1f264:	48 01 d0             	add    rax,rdx
   1f267:	48 01 f8             	add    rax,rdi
   1f26a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f272:	48 8d 05 47 04 1d 00 	lea    rax,[rip+0x1d0447]        # 1ef6c0 <mismatchExt37>
   1f279:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f27c:	29 c6                	sub    esi,eax
   1f27e:	89 f0                	mov    eax,esi
   1f280:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f284:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f289:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f28d:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1f291:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f295:	f3 0f 7e 0d 03 5c 01 00 	movq   xmm1,QWORD PTR [rip+0x15c03]        # 34ea0 <Law_and_Order+0x600>
   1f29d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f2a1:	e9 e1 00 00 00       	jmp    1f387 <get_scaled_exp_params+0x44c2>
   1f2a6:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f2a9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f2ac:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f2af:	48 89 d0             	mov    rax,rdx
   1f2b2:	48 c1 e0 02          	shl    rax,0x2
   1f2b6:	48 01 d0             	add    rax,rdx
   1f2b9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f2c1:	48 01 d0             	add    rax,rdx
   1f2c4:	48 89 ca             	mov    rdx,rcx
   1f2c7:	48 c1 e2 02          	shl    rdx,0x2
   1f2cb:	48 01 ca             	add    rdx,rcx
   1f2ce:	48 01 d0             	add    rax,rdx
   1f2d1:	48 01 f0             	add    rax,rsi
   1f2d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f2dc:	48 8d 05 fd 06 1d 00 	lea    rax,[rip+0x1d06fd]        # 1ef9e0 <mismatchExtdH>
   1f2e3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f2e6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f2ea:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f2ed:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f2f0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f2f3:	48 89 d0             	mov    rax,rdx
   1f2f6:	48 c1 e0 02          	shl    rax,0x2
   1f2fa:	48 01 d0             	add    rax,rdx
   1f2fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f305:	48 01 d0             	add    rax,rdx
   1f308:	48 89 ca             	mov    rdx,rcx
   1f30b:	48 c1 e2 02          	shl    rdx,0x2
   1f30f:	48 01 ca             	add    rdx,rcx
   1f312:	48 01 d0             	add    rax,rdx
   1f315:	48 01 f0             	add    rax,rsi
   1f318:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f320:	48 8d 05 b9 06 1d 00 	lea    rax,[rip+0x1d06b9]        # 1ef9e0 <mismatchExtdH>
   1f327:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f32a:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f32d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f330:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f333:	48 89 d0             	mov    rax,rdx
   1f336:	48 c1 e0 02          	shl    rax,0x2
   1f33a:	48 01 d0             	add    rax,rdx
   1f33d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f345:	48 01 d0             	add    rax,rdx
   1f348:	48 89 ca             	mov    rdx,rcx
   1f34b:	48 c1 e2 02          	shl    rdx,0x2
   1f34f:	48 01 ca             	add    rdx,rcx
   1f352:	48 01 d0             	add    rax,rdx
   1f355:	48 01 f8             	add    rax,rdi
   1f358:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f360:	48 8d 05 59 03 1d 00 	lea    rax,[rip+0x1d0359]        # 1ef6c0 <mismatchExt37>
   1f367:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f36a:	29 c6                	sub    esi,eax
   1f36c:	89 f0                	mov    eax,esi
   1f36e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f372:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f377:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f37b:	f3 0f 7e 0d 1d 5b 01 00 	movq   xmm1,QWORD PTR [rip+0x15b1d]        # 34ea0 <Law_and_Order+0x600>
   1f383:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f387:	f2 0f 10 0d 39 5b 01 00 	movsd  xmm1,QWORD PTR [rip+0x15b39]        # 34ec8 <Law_and_Order+0x628>
   1f38f:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1f393:	66 0f 2f 05 4d 5b 01 00 	comisd xmm0,QWORD PTR [rip+0x15b4d]        # 34ee8 <Law_and_Order+0x648>
   1f39b:	0f 86 de 01 00 00    	jbe    1f57f <get_scaled_exp_params+0x46ba>
   1f3a1:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1f3a5:	0f 85 ee 00 00 00    	jne    1f499 <get_scaled_exp_params+0x45d4>
   1f3ab:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f3ae:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f3b1:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f3b4:	48 89 d0             	mov    rax,rdx
   1f3b7:	48 c1 e0 02          	shl    rax,0x2
   1f3bb:	48 01 d0             	add    rax,rdx
   1f3be:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f3c6:	48 01 d0             	add    rax,rdx
   1f3c9:	48 89 ca             	mov    rdx,rcx
   1f3cc:	48 c1 e2 02          	shl    rdx,0x2
   1f3d0:	48 01 ca             	add    rdx,rcx
   1f3d3:	48 01 d0             	add    rax,rdx
   1f3d6:	48 01 f0             	add    rax,rsi
   1f3d9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f3e1:	48 8d 05 f8 05 1d 00 	lea    rax,[rip+0x1d05f8]        # 1ef9e0 <mismatchExtdH>
   1f3e8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f3eb:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f3ef:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f3f2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f3f5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f3f8:	48 89 d0             	mov    rax,rdx
   1f3fb:	48 c1 e0 02          	shl    rax,0x2
   1f3ff:	48 01 d0             	add    rax,rdx
   1f402:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f40a:	48 01 d0             	add    rax,rdx
   1f40d:	48 89 ca             	mov    rdx,rcx
   1f410:	48 c1 e2 02          	shl    rdx,0x2
   1f414:	48 01 ca             	add    rdx,rcx
   1f417:	48 01 d0             	add    rax,rdx
   1f41a:	48 01 f0             	add    rax,rsi
   1f41d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f425:	48 8d 05 b4 05 1d 00 	lea    rax,[rip+0x1d05b4]        # 1ef9e0 <mismatchExtdH>
   1f42c:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f42f:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f432:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f435:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f438:	48 89 d0             	mov    rax,rdx
   1f43b:	48 c1 e0 02          	shl    rax,0x2
   1f43f:	48 01 d0             	add    rax,rdx
   1f442:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f44a:	48 01 d0             	add    rax,rdx
   1f44d:	48 89 ca             	mov    rdx,rcx
   1f450:	48 c1 e2 02          	shl    rdx,0x2
   1f454:	48 01 ca             	add    rdx,rcx
   1f457:	48 01 d0             	add    rax,rdx
   1f45a:	48 01 f8             	add    rax,rdi
   1f45d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f465:	48 8d 05 54 02 1d 00 	lea    rax,[rip+0x1d0254]        # 1ef6c0 <mismatchExt37>
   1f46c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f46f:	29 c6                	sub    esi,eax
   1f471:	89 f0                	mov    eax,esi
   1f473:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f477:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f47c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f480:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1f484:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f488:	f3 0f 7e 0d 10 5a 01 00 	movq   xmm1,QWORD PTR [rip+0x15a10]        # 34ea0 <Law_and_Order+0x600>
   1f490:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f494:	e9 00 05 00 00       	jmp    1f999 <get_scaled_exp_params+0x4ad4>
   1f499:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f49c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f49f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f4a2:	48 89 d0             	mov    rax,rdx
   1f4a5:	48 c1 e0 02          	shl    rax,0x2
   1f4a9:	48 01 d0             	add    rax,rdx
   1f4ac:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f4b4:	48 01 d0             	add    rax,rdx
   1f4b7:	48 89 ca             	mov    rdx,rcx
   1f4ba:	48 c1 e2 02          	shl    rdx,0x2
   1f4be:	48 01 ca             	add    rdx,rcx
   1f4c1:	48 01 d0             	add    rax,rdx
   1f4c4:	48 01 f0             	add    rax,rsi
   1f4c7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f4cf:	48 8d 05 0a 05 1d 00 	lea    rax,[rip+0x1d050a]        # 1ef9e0 <mismatchExtdH>
   1f4d6:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f4d9:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f4dd:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f4e0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f4e3:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f4e6:	48 89 d0             	mov    rax,rdx
   1f4e9:	48 c1 e0 02          	shl    rax,0x2
   1f4ed:	48 01 d0             	add    rax,rdx
   1f4f0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f4f8:	48 01 d0             	add    rax,rdx
   1f4fb:	48 89 ca             	mov    rdx,rcx
   1f4fe:	48 c1 e2 02          	shl    rdx,0x2
   1f502:	48 01 ca             	add    rdx,rcx
   1f505:	48 01 d0             	add    rax,rdx
   1f508:	48 01 f0             	add    rax,rsi
   1f50b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f513:	48 8d 05 c6 04 1d 00 	lea    rax,[rip+0x1d04c6]        # 1ef9e0 <mismatchExtdH>
   1f51a:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f51d:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f520:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f523:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f526:	48 89 d0             	mov    rax,rdx
   1f529:	48 c1 e0 02          	shl    rax,0x2
   1f52d:	48 01 d0             	add    rax,rdx
   1f530:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f538:	48 01 d0             	add    rax,rdx
   1f53b:	48 89 ca             	mov    rdx,rcx
   1f53e:	48 c1 e2 02          	shl    rdx,0x2
   1f542:	48 01 ca             	add    rdx,rcx
   1f545:	48 01 d0             	add    rax,rdx
   1f548:	48 01 f8             	add    rax,rdi
   1f54b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f553:	48 8d 05 66 01 1d 00 	lea    rax,[rip+0x1d0166]        # 1ef6c0 <mismatchExt37>
   1f55a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f55d:	29 c6                	sub    esi,eax
   1f55f:	89 f0                	mov    eax,esi
   1f561:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f565:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f56a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f56e:	f3 0f 7e 0d 2a 59 01 00 	movq   xmm1,QWORD PTR [rip+0x1592a]        # 34ea0 <Law_and_Order+0x600>
   1f576:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f57a:	e9 1a 04 00 00       	jmp    1f999 <get_scaled_exp_params+0x4ad4>
   1f57f:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1f583:	0f 85 ee 00 00 00    	jne    1f677 <get_scaled_exp_params+0x47b2>
   1f589:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f58c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f58f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f592:	48 89 d0             	mov    rax,rdx
   1f595:	48 c1 e0 02          	shl    rax,0x2
   1f599:	48 01 d0             	add    rax,rdx
   1f59c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f5a4:	48 01 d0             	add    rax,rdx
   1f5a7:	48 89 ca             	mov    rdx,rcx
   1f5aa:	48 c1 e2 02          	shl    rdx,0x2
   1f5ae:	48 01 ca             	add    rdx,rcx
   1f5b1:	48 01 d0             	add    rax,rdx
   1f5b4:	48 01 f0             	add    rax,rsi
   1f5b7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f5bf:	48 8d 05 1a 04 1d 00 	lea    rax,[rip+0x1d041a]        # 1ef9e0 <mismatchExtdH>
   1f5c6:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f5c9:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f5cd:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f5d0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f5d3:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f5d6:	48 89 d0             	mov    rax,rdx
   1f5d9:	48 c1 e0 02          	shl    rax,0x2
   1f5dd:	48 01 d0             	add    rax,rdx
   1f5e0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f5e8:	48 01 d0             	add    rax,rdx
   1f5eb:	48 89 ca             	mov    rdx,rcx
   1f5ee:	48 c1 e2 02          	shl    rdx,0x2
   1f5f2:	48 01 ca             	add    rdx,rcx
   1f5f5:	48 01 d0             	add    rax,rdx
   1f5f8:	48 01 f0             	add    rax,rsi
   1f5fb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f603:	48 8d 05 d6 03 1d 00 	lea    rax,[rip+0x1d03d6]        # 1ef9e0 <mismatchExtdH>
   1f60a:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f60d:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f610:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f613:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f616:	48 89 d0             	mov    rax,rdx
   1f619:	48 c1 e0 02          	shl    rax,0x2
   1f61d:	48 01 d0             	add    rax,rdx
   1f620:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f628:	48 01 d0             	add    rax,rdx
   1f62b:	48 89 ca             	mov    rdx,rcx
   1f62e:	48 c1 e2 02          	shl    rdx,0x2
   1f632:	48 01 ca             	add    rdx,rcx
   1f635:	48 01 d0             	add    rax,rdx
   1f638:	48 01 f8             	add    rax,rdi
   1f63b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f643:	48 8d 05 76 00 1d 00 	lea    rax,[rip+0x1d0076]        # 1ef6c0 <mismatchExt37>
   1f64a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f64d:	29 c6                	sub    esi,eax
   1f64f:	89 f0                	mov    eax,esi
   1f651:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f655:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f65a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f65e:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1f662:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f666:	f3 0f 7e 0d 32 58 01 00 	movq   xmm1,QWORD PTR [rip+0x15832]        # 34ea0 <Law_and_Order+0x600>
   1f66e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f672:	e9 e1 00 00 00       	jmp    1f758 <get_scaled_exp_params+0x4893>
   1f677:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f67a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f67d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f680:	48 89 d0             	mov    rax,rdx
   1f683:	48 c1 e0 02          	shl    rax,0x2
   1f687:	48 01 d0             	add    rax,rdx
   1f68a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f692:	48 01 d0             	add    rax,rdx
   1f695:	48 89 ca             	mov    rdx,rcx
   1f698:	48 c1 e2 02          	shl    rdx,0x2
   1f69c:	48 01 ca             	add    rdx,rcx
   1f69f:	48 01 d0             	add    rax,rdx
   1f6a2:	48 01 f0             	add    rax,rsi
   1f6a5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f6ad:	48 8d 05 2c 03 1d 00 	lea    rax,[rip+0x1d032c]        # 1ef9e0 <mismatchExtdH>
   1f6b4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f6b7:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f6bb:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f6be:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f6c1:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f6c4:	48 89 d0             	mov    rax,rdx
   1f6c7:	48 c1 e0 02          	shl    rax,0x2
   1f6cb:	48 01 d0             	add    rax,rdx
   1f6ce:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f6d6:	48 01 d0             	add    rax,rdx
   1f6d9:	48 89 ca             	mov    rdx,rcx
   1f6dc:	48 c1 e2 02          	shl    rdx,0x2
   1f6e0:	48 01 ca             	add    rdx,rcx
   1f6e3:	48 01 d0             	add    rax,rdx
   1f6e6:	48 01 f0             	add    rax,rsi
   1f6e9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f6f1:	48 8d 05 e8 02 1d 00 	lea    rax,[rip+0x1d02e8]        # 1ef9e0 <mismatchExtdH>
   1f6f8:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f6fb:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f6fe:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f701:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f704:	48 89 d0             	mov    rax,rdx
   1f707:	48 c1 e0 02          	shl    rax,0x2
   1f70b:	48 01 d0             	add    rax,rdx
   1f70e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f716:	48 01 d0             	add    rax,rdx
   1f719:	48 89 ca             	mov    rdx,rcx
   1f71c:	48 c1 e2 02          	shl    rdx,0x2
   1f720:	48 01 ca             	add    rdx,rcx
   1f723:	48 01 d0             	add    rax,rdx
   1f726:	48 01 f8             	add    rax,rdi
   1f729:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f731:	48 8d 05 88 ff 1c 00 	lea    rax,[rip+0x1cff88]        # 1ef6c0 <mismatchExt37>
   1f738:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f73b:	29 c6                	sub    esi,eax
   1f73d:	89 f0                	mov    eax,esi
   1f73f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f743:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f748:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f74c:	f3 0f 7e 0d 4c 57 01 00 	movq   xmm1,QWORD PTR [rip+0x1574c]        # 34ea0 <Law_and_Order+0x600>
   1f754:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f758:	f2 0f 10 0d 68 57 01 00 	movsd  xmm1,QWORD PTR [rip+0x15768]        # 34ec8 <Law_and_Order+0x628>
   1f760:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1f764:	f2 0f 10 0d 84 57 01 00 	movsd  xmm1,QWORD PTR [rip+0x15784]        # 34ef0 <Law_and_Order+0x650>
   1f76c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f770:	e8 db 3e fe ff       	call   3650 <sin@plt>
   1f775:	f2 0f 10 0d fb 56 01 00 	movsd  xmm1,QWORD PTR [rip+0x156fb]        # 34e78 <Law_and_Order+0x5d8>
   1f77d:	f2 0f 58 c8          	addsd  xmm1,xmm0
   1f781:	f2 0f 10 05 6f 57 01 00 	movsd  xmm0,QWORD PTR [rip+0x1576f]        # 34ef8 <Law_and_Order+0x658>
   1f789:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   1f78d:	f2 0f 11 4d 88       	movsd  QWORD PTR [rbp-0x78],xmm1
   1f792:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1f796:	0f 85 ee 00 00 00    	jne    1f88a <get_scaled_exp_params+0x49c5>
   1f79c:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f79f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f7a2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f7a5:	48 89 d0             	mov    rax,rdx
   1f7a8:	48 c1 e0 02          	shl    rax,0x2
   1f7ac:	48 01 d0             	add    rax,rdx
   1f7af:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f7b7:	48 01 d0             	add    rax,rdx
   1f7ba:	48 89 ca             	mov    rdx,rcx
   1f7bd:	48 c1 e2 02          	shl    rdx,0x2
   1f7c1:	48 01 ca             	add    rdx,rcx
   1f7c4:	48 01 d0             	add    rax,rdx
   1f7c7:	48 01 f0             	add    rax,rsi
   1f7ca:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f7d2:	48 8d 05 07 02 1d 00 	lea    rax,[rip+0x1d0207]        # 1ef9e0 <mismatchExtdH>
   1f7d9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f7dc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f7e0:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f7e3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f7e6:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f7e9:	48 89 d0             	mov    rax,rdx
   1f7ec:	48 c1 e0 02          	shl    rax,0x2
   1f7f0:	48 01 d0             	add    rax,rdx
   1f7f3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f7fb:	48 01 d0             	add    rax,rdx
   1f7fe:	48 89 ca             	mov    rdx,rcx
   1f801:	48 c1 e2 02          	shl    rdx,0x2
   1f805:	48 01 ca             	add    rdx,rcx
   1f808:	48 01 d0             	add    rax,rdx
   1f80b:	48 01 f0             	add    rax,rsi
   1f80e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f816:	48 8d 05 c3 01 1d 00 	lea    rax,[rip+0x1d01c3]        # 1ef9e0 <mismatchExtdH>
   1f81d:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f820:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f823:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f826:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f829:	48 89 d0             	mov    rax,rdx
   1f82c:	48 c1 e0 02          	shl    rax,0x2
   1f830:	48 01 d0             	add    rax,rdx
   1f833:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f83b:	48 01 d0             	add    rax,rdx
   1f83e:	48 89 ca             	mov    rdx,rcx
   1f841:	48 c1 e2 02          	shl    rdx,0x2
   1f845:	48 01 ca             	add    rdx,rcx
   1f848:	48 01 d0             	add    rax,rdx
   1f84b:	48 01 f8             	add    rax,rdi
   1f84e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f856:	48 8d 05 63 fe 1c 00 	lea    rax,[rip+0x1cfe63]        # 1ef6c0 <mismatchExt37>
   1f85d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f860:	29 c6                	sub    esi,eax
   1f862:	89 f0                	mov    eax,esi
   1f864:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f868:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f86d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f871:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1f875:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f879:	f3 0f 7e 0d 1f 56 01 00 	movq   xmm1,QWORD PTR [rip+0x1561f]        # 34ea0 <Law_and_Order+0x600>
   1f881:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f885:	e9 e1 00 00 00       	jmp    1f96b <get_scaled_exp_params+0x4aa6>
   1f88a:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f88d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f890:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f893:	48 89 d0             	mov    rax,rdx
   1f896:	48 c1 e0 02          	shl    rax,0x2
   1f89a:	48 01 d0             	add    rax,rdx
   1f89d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f8a5:	48 01 d0             	add    rax,rdx
   1f8a8:	48 89 ca             	mov    rdx,rcx
   1f8ab:	48 c1 e2 02          	shl    rdx,0x2
   1f8af:	48 01 ca             	add    rdx,rcx
   1f8b2:	48 01 d0             	add    rax,rdx
   1f8b5:	48 01 f0             	add    rax,rsi
   1f8b8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f8c0:	48 8d 05 19 01 1d 00 	lea    rax,[rip+0x1d0119]        # 1ef9e0 <mismatchExtdH>
   1f8c7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f8ca:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1f8ce:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1f8d1:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f8d4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f8d7:	48 89 d0             	mov    rax,rdx
   1f8da:	48 c1 e0 02          	shl    rax,0x2
   1f8de:	48 01 d0             	add    rax,rdx
   1f8e1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f8e9:	48 01 d0             	add    rax,rdx
   1f8ec:	48 89 ca             	mov    rdx,rcx
   1f8ef:	48 c1 e2 02          	shl    rdx,0x2
   1f8f3:	48 01 ca             	add    rdx,rcx
   1f8f6:	48 01 d0             	add    rax,rdx
   1f8f9:	48 01 f0             	add    rax,rsi
   1f8fc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f904:	48 8d 05 d5 00 1d 00 	lea    rax,[rip+0x1d00d5]        # 1ef9e0 <mismatchExtdH>
   1f90b:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   1f90e:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f911:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f914:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f917:	48 89 d0             	mov    rax,rdx
   1f91a:	48 c1 e0 02          	shl    rax,0x2
   1f91e:	48 01 d0             	add    rax,rdx
   1f921:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f929:	48 01 d0             	add    rax,rdx
   1f92c:	48 89 ca             	mov    rdx,rcx
   1f92f:	48 c1 e2 02          	shl    rdx,0x2
   1f933:	48 01 ca             	add    rdx,rcx
   1f936:	48 01 d0             	add    rax,rdx
   1f939:	48 01 f8             	add    rax,rdi
   1f93c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f944:	48 8d 05 75 fd 1c 00 	lea    rax,[rip+0x1cfd75]        # 1ef6c0 <mismatchExt37>
   1f94b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1f94e:	29 c6                	sub    esi,eax
   1f950:	89 f0                	mov    eax,esi
   1f952:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1f956:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1f95b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f95f:	f3 0f 7e 0d 39 55 01 00 	movq   xmm1,QWORD PTR [rip+0x15539]        # 34ea0 <Law_and_Order+0x600>
   1f967:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1f96b:	f2 0f 10 0d 55 55 01 00 	movsd  xmm1,QWORD PTR [rip+0x15555]        # 34ec8 <Law_and_Order+0x628>
   1f973:	f2 0f 5e c1          	divsd  xmm0,xmm1
   1f977:	f2 0f 10 0d 71 55 01 00 	movsd  xmm1,QWORD PTR [rip+0x15571]        # 34ef0 <Law_and_Order+0x650>
   1f97f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1f983:	e8 c8 3c fe ff       	call   3650 <sin@plt>
   1f988:	f2 0f 10 0d e8 54 01 00 	movsd  xmm1,QWORD PTR [rip+0x154e8]        # 34e78 <Law_and_Order+0x5d8>
   1f990:	f2 0f 58 c1          	addsd  xmm0,xmm1
   1f994:	f2 0f 59 45 88       	mulsd  xmm0,QWORD PTR [rbp-0x78]
   1f999:	f2 0f 10 0d 27 55 01 00 	movsd  xmm1,QWORD PTR [rip+0x15527]        # 34ec8 <Law_and_Order+0x628>
   1f9a1:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1f9a5:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1f9aa:	e8 81 41 fe ff       	call   3b30 <exp@plt>
   1f9af:	66 48 0f 7e c6       	movq   rsi,xmm0
   1f9b4:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   1f9b8:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   1f9bc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1f9bf:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1f9c2:	48 89 d0             	mov    rax,rdx
   1f9c5:	48 c1 e0 02          	shl    rax,0x2
   1f9c9:	48 01 d0             	add    rax,rdx
   1f9cc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1f9d4:	48 01 d0             	add    rax,rdx
   1f9d7:	48 89 ca             	mov    rdx,rcx
   1f9da:	48 c1 e2 02          	shl    rdx,0x2
   1f9de:	48 01 ca             	add    rdx,rcx
   1f9e1:	48 01 d0             	add    rax,rdx
   1f9e4:	4c 01 c0             	add    rax,r8
   1f9e7:	48 05 9e 00 00 00    	add    rax,0x9e
   1f9ed:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   1f9f1:	e9 bf 00 00 00       	jmp    1fab5 <get_scaled_exp_params+0x4bf0>
   1f9f6:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   1f9fa:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1f9fd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1fa00:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1fa03:	48 89 d0             	mov    rax,rdx
   1fa06:	48 c1 e0 02          	shl    rax,0x2
   1fa0a:	48 01 d0             	add    rax,rdx
   1fa0d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fa15:	48 01 d0             	add    rax,rdx
   1fa18:	48 89 ca             	mov    rdx,rcx
   1fa1b:	48 c1 e2 02          	shl    rdx,0x2
   1fa1f:	48 01 ca             	add    rdx,rcx
   1fa22:	48 01 d0             	add    rax,rdx
   1fa25:	48 01 f8             	add    rax,rdi
   1fa28:	48 05 9e 00 00 00    	add    rax,0x9e
   1fa2e:	f2 0f 10 05 42 54 01 00 	movsd  xmm0,QWORD PTR [rip+0x15442]        # 34e78 <Law_and_Order+0x5d8>
   1fa36:	f2 0f 11 04 c6       	movsd  QWORD PTR [rsi+rax*8],xmm0
   1fa3b:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   1fa3f:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1fa42:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1fa45:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1fa48:	48 89 d0             	mov    rax,rdx
   1fa4b:	48 c1 e0 02          	shl    rax,0x2
   1fa4f:	48 01 d0             	add    rax,rdx
   1fa52:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fa5a:	48 01 d0             	add    rax,rdx
   1fa5d:	48 89 ca             	mov    rdx,rcx
   1fa60:	48 c1 e2 02          	shl    rdx,0x2
   1fa64:	48 01 ca             	add    rdx,rcx
   1fa67:	48 01 d0             	add    rax,rdx
   1fa6a:	48 01 f8             	add    rax,rdi
   1fa6d:	48 05 9e 00 00 00    	add    rax,0x9e
   1fa73:	f2 0f 10 04 c6       	movsd  xmm0,QWORD PTR [rsi+rax*8]
   1fa78:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   1fa7c:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   1fa7f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   1fa82:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   1fa85:	48 89 d0             	mov    rax,rdx
   1fa88:	48 c1 e0 02          	shl    rax,0x2
   1fa8c:	48 01 d0             	add    rax,rdx
   1fa8f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fa97:	48 01 d0             	add    rax,rdx
   1fa9a:	48 89 ca             	mov    rdx,rcx
   1fa9d:	48 c1 e2 02          	shl    rdx,0x2
   1faa1:	48 01 ca             	add    rdx,rcx
   1faa4:	48 01 d0             	add    rax,rdx
   1faa7:	48 01 f8             	add    rax,rdi
   1faaa:	48 05 86 04 00 00    	add    rax,0x486
   1fab0:	f2 0f 11 04 c6       	movsd  QWORD PTR [rsi+rax*8],xmm0
   1fab5:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   1fab9:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   1fabd:	0f 86 51 da ff ff    	jbe    1d514 <get_scaled_exp_params+0x264f>
   1fac3:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1fac7:	83 7d a4 04          	cmp    DWORD PTR [rbp-0x5c],0x4
   1facb:	0f 86 37 da ff ff    	jbe    1d508 <get_scaled_exp_params+0x2643>
   1fad1:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1fad5:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   1fad9:	0f 86 1d da ff ff    	jbe    1d4fc <get_scaled_exp_params+0x2637>
   1fadf:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1fae6:	e9 5f 03 00 00       	jmp    1fe4a <get_scaled_exp_params+0x4f85>
   1faeb:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1faf2:	e9 45 03 00 00       	jmp    1fe3c <get_scaled_exp_params+0x4f77>
   1faf7:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   1fafe:	e9 2b 03 00 00       	jmp    1fe2e <get_scaled_exp_params+0x4f69>
   1fb03:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1fb0a:	e9 11 03 00 00       	jmp    1fe20 <get_scaled_exp_params+0x4f5b>
   1fb0f:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1fb13:	0f 85 4c 01 00 00    	jne    1fc65 <get_scaled_exp_params+0x4da0>
   1fb19:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   1fb1c:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1fb1f:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   1fb22:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1fb25:	48 89 c2             	mov    rdx,rax
   1fb28:	48 c1 e2 02          	shl    rdx,0x2
   1fb2c:	48 01 c2             	add    rdx,rax
   1fb2f:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1fb37:	48 01 c2             	add    rdx,rax
   1fb3a:	48 89 f0             	mov    rax,rsi
   1fb3d:	48 c1 e0 02          	shl    rax,0x2
   1fb41:	48 01 f0             	add    rax,rsi
   1fb44:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1fb4c:	48 01 f0             	add    rax,rsi
   1fb4f:	48 c1 e0 03          	shl    rax,0x3
   1fb53:	48 01 c2             	add    rdx,rax
   1fb56:	48 89 c8             	mov    rax,rcx
   1fb59:	48 c1 e0 02          	shl    rax,0x2
   1fb5d:	48 01 c8             	add    rax,rcx
   1fb60:	48 01 d0             	add    rax,rdx
   1fb63:	48 01 f8             	add    rax,rdi
   1fb66:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fb6e:	48 8d 05 6b 24 1d 00 	lea    rax,[rip+0x1d246b]        # 1f1fe0 <int11_dH>
   1fb75:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1fb78:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1fb7c:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   1fb7f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1fb82:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   1fb85:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1fb88:	48 89 c2             	mov    rdx,rax
   1fb8b:	48 c1 e2 02          	shl    rdx,0x2
   1fb8f:	48 01 c2             	add    rdx,rax
   1fb92:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1fb9a:	48 01 c2             	add    rdx,rax
   1fb9d:	48 89 f0             	mov    rax,rsi
   1fba0:	48 c1 e0 02          	shl    rax,0x2
   1fba4:	48 01 f0             	add    rax,rsi
   1fba7:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1fbaf:	48 01 f0             	add    rax,rsi
   1fbb2:	48 c1 e0 03          	shl    rax,0x3
   1fbb6:	48 01 c2             	add    rdx,rax
   1fbb9:	48 89 c8             	mov    rax,rcx
   1fbbc:	48 c1 e0 02          	shl    rax,0x2
   1fbc0:	48 01 c8             	add    rax,rcx
   1fbc3:	48 01 d0             	add    rax,rdx
   1fbc6:	48 01 f8             	add    rax,rdi
   1fbc9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fbd1:	48 8d 05 08 24 1d 00 	lea    rax,[rip+0x1d2408]        # 1f1fe0 <int11_dH>
   1fbd8:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   1fbdb:	44 8b 45 ac          	mov    r8d,DWORD PTR [rbp-0x54]
   1fbdf:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1fbe2:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   1fbe5:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1fbe8:	48 89 c2             	mov    rdx,rax
   1fbeb:	48 c1 e2 02          	shl    rdx,0x2
   1fbef:	48 01 c2             	add    rdx,rax
   1fbf2:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1fbfa:	48 01 c2             	add    rdx,rax
   1fbfd:	48 89 f0             	mov    rax,rsi
   1fc00:	48 c1 e0 02          	shl    rax,0x2
   1fc04:	48 01 f0             	add    rax,rsi
   1fc07:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1fc0f:	48 01 f0             	add    rax,rsi
   1fc12:	48 c1 e0 03          	shl    rax,0x3
   1fc16:	48 01 c2             	add    rdx,rax
   1fc19:	48 89 c8             	mov    rax,rcx
   1fc1c:	48 c1 e0 02          	shl    rax,0x2
   1fc20:	48 01 c8             	add    rax,rcx
   1fc23:	48 01 d0             	add    rax,rdx
   1fc26:	4c 01 c0             	add    rax,r8
   1fc29:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fc31:	48 8d 05 a8 0a 1d 00 	lea    rax,[rip+0x1d0aa8]        # 1f06e0 <int11_37>
   1fc38:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1fc3b:	29 c7                	sub    edi,eax
   1fc3d:	89 f8                	mov    eax,edi
   1fc3f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1fc43:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1fc48:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1fc4c:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1fc50:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1fc54:	f3 0f 7e 0d 44 52 01 00 	movq   xmm1,QWORD PTR [rip+0x15244]        # 34ea0 <Law_and_Order+0x600>
   1fc5c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1fc60:	e9 3f 01 00 00       	jmp    1fda4 <get_scaled_exp_params+0x4edf>
   1fc65:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   1fc68:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1fc6b:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   1fc6e:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1fc71:	48 89 c2             	mov    rdx,rax
   1fc74:	48 c1 e2 02          	shl    rdx,0x2
   1fc78:	48 01 c2             	add    rdx,rax
   1fc7b:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1fc83:	48 01 c2             	add    rdx,rax
   1fc86:	48 89 f0             	mov    rax,rsi
   1fc89:	48 c1 e0 02          	shl    rax,0x2
   1fc8d:	48 01 f0             	add    rax,rsi
   1fc90:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1fc98:	48 01 f0             	add    rax,rsi
   1fc9b:	48 c1 e0 03          	shl    rax,0x3
   1fc9f:	48 01 c2             	add    rdx,rax
   1fca2:	48 89 c8             	mov    rax,rcx
   1fca5:	48 c1 e0 02          	shl    rax,0x2
   1fca9:	48 01 c8             	add    rax,rcx
   1fcac:	48 01 d0             	add    rax,rdx
   1fcaf:	48 01 f8             	add    rax,rdi
   1fcb2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fcba:	48 8d 05 1f 23 1d 00 	lea    rax,[rip+0x1d231f]        # 1f1fe0 <int11_dH>
   1fcc1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1fcc4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1fcc8:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   1fccb:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1fcce:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   1fcd1:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1fcd4:	48 89 c2             	mov    rdx,rax
   1fcd7:	48 c1 e2 02          	shl    rdx,0x2
   1fcdb:	48 01 c2             	add    rdx,rax
   1fcde:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1fce6:	48 01 c2             	add    rdx,rax
   1fce9:	48 89 f0             	mov    rax,rsi
   1fcec:	48 c1 e0 02          	shl    rax,0x2
   1fcf0:	48 01 f0             	add    rax,rsi
   1fcf3:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1fcfb:	48 01 f0             	add    rax,rsi
   1fcfe:	48 c1 e0 03          	shl    rax,0x3
   1fd02:	48 01 c2             	add    rdx,rax
   1fd05:	48 89 c8             	mov    rax,rcx
   1fd08:	48 c1 e0 02          	shl    rax,0x2
   1fd0c:	48 01 c8             	add    rax,rcx
   1fd0f:	48 01 d0             	add    rax,rdx
   1fd12:	48 01 f8             	add    rax,rdi
   1fd15:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fd1d:	48 8d 05 bc 22 1d 00 	lea    rax,[rip+0x1d22bc]        # 1f1fe0 <int11_dH>
   1fd24:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   1fd27:	44 8b 45 ac          	mov    r8d,DWORD PTR [rbp-0x54]
   1fd2b:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1fd2e:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   1fd31:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   1fd34:	48 89 c2             	mov    rdx,rax
   1fd37:	48 c1 e2 02          	shl    rdx,0x2
   1fd3b:	48 01 c2             	add    rdx,rax
   1fd3e:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   1fd46:	48 01 c2             	add    rdx,rax
   1fd49:	48 89 f0             	mov    rax,rsi
   1fd4c:	48 c1 e0 02          	shl    rax,0x2
   1fd50:	48 01 f0             	add    rax,rsi
   1fd53:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1fd5b:	48 01 f0             	add    rax,rsi
   1fd5e:	48 c1 e0 03          	shl    rax,0x3
   1fd62:	48 01 c2             	add    rdx,rax
   1fd65:	48 89 c8             	mov    rax,rcx
   1fd68:	48 c1 e0 02          	shl    rax,0x2
   1fd6c:	48 01 c8             	add    rax,rcx
   1fd6f:	48 01 d0             	add    rax,rdx
   1fd72:	4c 01 c0             	add    rax,r8
   1fd75:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fd7d:	48 8d 05 5c 09 1d 00 	lea    rax,[rip+0x1d095c]        # 1f06e0 <int11_37>
   1fd84:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1fd87:	29 c7                	sub    edi,eax
   1fd89:	89 f8                	mov    eax,edi
   1fd8b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1fd8f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1fd94:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1fd98:	f3 0f 7e 0d 00 51 01 00 	movq   xmm1,QWORD PTR [rip+0x15100]        # 34ea0 <Law_and_Order+0x600>
   1fda0:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1fda4:	f2 0f 10 0d 1c 51 01 00 	movsd  xmm1,QWORD PTR [rip+0x1511c]        # 34ec8 <Law_and_Order+0x628>
   1fdac:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   1fdb0:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   1fdb5:	e8 76 3d fe ff       	call   3b30 <exp@plt>
   1fdba:	66 48 0f 7e c7       	movq   rdi,xmm0
   1fdbf:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
   1fdc3:	44 8b 4d ac          	mov    r9d,DWORD PTR [rbp-0x54]
   1fdc7:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1fdca:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1fdcd:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   1fdd0:	48 89 d0             	mov    rax,rdx
   1fdd3:	48 c1 e0 02          	shl    rax,0x2
   1fdd7:	48 01 d0             	add    rax,rdx
   1fdda:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fde2:	48 01 d0             	add    rax,rdx
   1fde5:	48 89 f2             	mov    rdx,rsi
   1fde8:	48 c1 e2 02          	shl    rdx,0x2
   1fdec:	48 01 f2             	add    rdx,rsi
   1fdef:	48 8d 34 10          	lea    rsi,[rax+rdx*1]
   1fdf3:	48 89 c8             	mov    rax,rcx
   1fdf6:	48 c1 e0 02          	shl    rax,0x2
   1fdfa:	48 01 c8             	add    rax,rcx
   1fdfd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fe05:	48 01 d0             	add    rax,rdx
   1fe08:	48 c1 e0 03          	shl    rax,0x3
   1fe0c:	48 01 f0             	add    rax,rsi
   1fe0f:	4c 01 c8             	add    rax,r9
   1fe12:	48 05 9e 05 00 00    	add    rax,0x59e
   1fe18:	49 89 3c c0          	mov    QWORD PTR [r8+rax*8],rdi
   1fe1c:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1fe20:	83 7d ac 04          	cmp    DWORD PTR [rbp-0x54],0x4
   1fe24:	0f 86 e5 fc ff ff    	jbe    1fb0f <get_scaled_exp_params+0x4c4a>
   1fe2a:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   1fe2e:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   1fe32:	0f 86 cb fc ff ff    	jbe    1fb03 <get_scaled_exp_params+0x4c3e>
   1fe38:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1fe3c:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   1fe40:	0f 86 b1 fc ff ff    	jbe    1faf7 <get_scaled_exp_params+0x4c32>
   1fe46:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   1fe4a:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   1fe4e:	0f 86 97 fc ff ff    	jbe    1faeb <get_scaled_exp_params+0x4c26>
   1fe54:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   1fe5b:	e9 ba 03 00 00       	jmp    2021a <get_scaled_exp_params+0x5355>
   1fe60:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1fe67:	e9 a0 03 00 00       	jmp    2020c <get_scaled_exp_params+0x5347>
   1fe6c:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   1fe73:	e9 86 03 00 00       	jmp    201fe <get_scaled_exp_params+0x5339>
   1fe78:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1fe7f:	e9 6c 03 00 00       	jmp    201f0 <get_scaled_exp_params+0x532b>
   1fe84:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1fe8b:	e9 52 03 00 00       	jmp    201e2 <get_scaled_exp_params+0x531d>
   1fe90:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1fe94:	0f 85 69 01 00 00    	jne    20003 <get_scaled_exp_params+0x513e>
   1fe9a:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1fe9d:	48 63 f8             	movsxd rdi,eax
   1fea0:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1fea3:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   1fea6:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   1feaa:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1fead:	48 89 f0             	mov    rax,rsi
   1feb0:	48 c1 e0 02          	shl    rax,0x2
   1feb4:	48 01 f0             	add    rax,rsi
   1feb7:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1febf:	48 01 f0             	add    rax,rsi
   1fec2:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   1fec9:	48 01 c6             	add    rsi,rax
   1fecc:	48 89 d0             	mov    rax,rdx
   1fecf:	48 c1 e0 05          	shl    rax,0x5
   1fed3:	48 29 d0             	sub    rax,rdx
   1fed6:	48 c1 e0 02          	shl    rax,0x2
   1feda:	48 01 d0             	add    rax,rdx
   1fedd:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1fee1:	48 89 c8             	mov    rax,rcx
   1fee4:	48 c1 e0 02          	shl    rax,0x2
   1fee8:	48 01 c8             	add    rax,rcx
   1feeb:	48 01 d0             	add    rax,rdx
   1feee:	48 01 f8             	add    rax,rdi
   1fef1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1fef9:	48 8d 05 e0 b6 1d 00 	lea    rax,[rip+0x1db6e0]        # 1fb5e0 <int21_dH>
   1ff00:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ff03:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1ff07:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1ff0a:	48 63 f8             	movsxd rdi,eax
   1ff0d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ff10:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   1ff13:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   1ff17:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1ff1a:	48 89 f0             	mov    rax,rsi
   1ff1d:	48 c1 e0 02          	shl    rax,0x2
   1ff21:	48 01 f0             	add    rax,rsi
   1ff24:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1ff2c:	48 01 f0             	add    rax,rsi
   1ff2f:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   1ff36:	48 01 c6             	add    rsi,rax
   1ff39:	48 89 d0             	mov    rax,rdx
   1ff3c:	48 c1 e0 05          	shl    rax,0x5
   1ff40:	48 29 d0             	sub    rax,rdx
   1ff43:	48 c1 e0 02          	shl    rax,0x2
   1ff47:	48 01 d0             	add    rax,rdx
   1ff4a:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1ff4e:	48 89 c8             	mov    rax,rcx
   1ff51:	48 c1 e0 02          	shl    rax,0x2
   1ff55:	48 01 c8             	add    rax,rcx
   1ff58:	48 01 d0             	add    rax,rdx
   1ff5b:	48 01 f8             	add    rax,rdi
   1ff5e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ff66:	48 8d 05 73 b6 1d 00 	lea    rax,[rip+0x1db673]        # 1fb5e0 <int21_dH>
   1ff6d:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   1ff70:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1ff73:	4c 63 c0             	movsxd r8,eax
   1ff76:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   1ff79:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   1ff7c:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   1ff80:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1ff83:	48 89 f0             	mov    rax,rsi
   1ff86:	48 c1 e0 02          	shl    rax,0x2
   1ff8a:	48 01 f0             	add    rax,rsi
   1ff8d:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   1ff95:	48 01 f0             	add    rax,rsi
   1ff98:	49 69 f1 e8 03 00 00 	imul   rsi,r9,0x3e8
   1ff9f:	48 01 c6             	add    rsi,rax
   1ffa2:	48 89 d0             	mov    rax,rdx
   1ffa5:	48 c1 e0 05          	shl    rax,0x5
   1ffa9:	48 29 d0             	sub    rax,rdx
   1ffac:	48 c1 e0 02          	shl    rax,0x2
   1ffb0:	48 01 d0             	add    rax,rdx
   1ffb3:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   1ffb7:	48 89 c8             	mov    rax,rcx
   1ffba:	48 c1 e0 02          	shl    rax,0x2
   1ffbe:	48 01 c8             	add    rax,rcx
   1ffc1:	48 01 d0             	add    rax,rdx
   1ffc4:	4c 01 c0             	add    rax,r8
   1ffc7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ffcf:	48 8d 05 0a 39 1d 00 	lea    rax,[rip+0x1d390a]        # 1f38e0 <int21_37>
   1ffd6:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1ffd9:	29 c7                	sub    edi,eax
   1ffdb:	89 f8                	mov    eax,edi
   1ffdd:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   1ffe1:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   1ffe6:	f2 0f 5c c1          	subsd  xmm0,xmm1
   1ffea:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   1ffee:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   1fff2:	f3 0f 7e 0d a6 4e 01 00 	movq   xmm1,QWORD PTR [rip+0x14ea6]        # 34ea0 <Law_and_Order+0x600>
   1fffa:	66 0f 57 c1          	xorpd  xmm0,xmm1
   1fffe:	e9 5c 01 00 00       	jmp    2015f <get_scaled_exp_params+0x529a>
   20003:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   20006:	48 63 f8             	movsxd rdi,eax
   20009:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2000c:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   2000f:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   20013:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   20016:	48 89 f0             	mov    rax,rsi
   20019:	48 c1 e0 02          	shl    rax,0x2
   2001d:	48 01 f0             	add    rax,rsi
   20020:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   20028:	48 01 f0             	add    rax,rsi
   2002b:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   20032:	48 01 c6             	add    rsi,rax
   20035:	48 89 d0             	mov    rax,rdx
   20038:	48 c1 e0 05          	shl    rax,0x5
   2003c:	48 29 d0             	sub    rax,rdx
   2003f:	48 c1 e0 02          	shl    rax,0x2
   20043:	48 01 d0             	add    rax,rdx
   20046:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   2004a:	48 89 c8             	mov    rax,rcx
   2004d:	48 c1 e0 02          	shl    rax,0x2
   20051:	48 01 c8             	add    rax,rcx
   20054:	48 01 d0             	add    rax,rdx
   20057:	48 01 f8             	add    rax,rdi
   2005a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20062:	48 8d 05 77 b5 1d 00 	lea    rax,[rip+0x1db577]        # 1fb5e0 <int21_dH>
   20069:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2006c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20070:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   20073:	48 63 f8             	movsxd rdi,eax
   20076:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   20079:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   2007c:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   20080:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   20083:	48 89 f0             	mov    rax,rsi
   20086:	48 c1 e0 02          	shl    rax,0x2
   2008a:	48 01 f0             	add    rax,rsi
   2008d:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   20095:	48 01 f0             	add    rax,rsi
   20098:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   2009f:	48 01 c6             	add    rsi,rax
   200a2:	48 89 d0             	mov    rax,rdx
   200a5:	48 c1 e0 05          	shl    rax,0x5
   200a9:	48 29 d0             	sub    rax,rdx
   200ac:	48 c1 e0 02          	shl    rax,0x2
   200b0:	48 01 d0             	add    rax,rdx
   200b3:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   200b7:	48 89 c8             	mov    rax,rcx
   200ba:	48 c1 e0 02          	shl    rax,0x2
   200be:	48 01 c8             	add    rax,rcx
   200c1:	48 01 d0             	add    rax,rdx
   200c4:	48 01 f8             	add    rax,rdi
   200c7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   200cf:	48 8d 05 0a b5 1d 00 	lea    rax,[rip+0x1db50a]        # 1fb5e0 <int21_dH>
   200d6:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   200d9:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   200dc:	4c 63 c0             	movsxd r8,eax
   200df:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   200e2:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   200e5:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   200e9:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   200ec:	48 89 f0             	mov    rax,rsi
   200ef:	48 c1 e0 02          	shl    rax,0x2
   200f3:	48 01 f0             	add    rax,rsi
   200f6:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   200fe:	48 01 f0             	add    rax,rsi
   20101:	49 69 f1 e8 03 00 00 	imul   rsi,r9,0x3e8
   20108:	48 01 c6             	add    rsi,rax
   2010b:	48 89 d0             	mov    rax,rdx
   2010e:	48 c1 e0 05          	shl    rax,0x5
   20112:	48 29 d0             	sub    rax,rdx
   20115:	48 c1 e0 02          	shl    rax,0x2
   20119:	48 01 d0             	add    rax,rdx
   2011c:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   20120:	48 89 c8             	mov    rax,rcx
   20123:	48 c1 e0 02          	shl    rax,0x2
   20127:	48 01 c8             	add    rax,rcx
   2012a:	48 01 d0             	add    rax,rdx
   2012d:	4c 01 c0             	add    rax,r8
   20130:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20138:	48 8d 05 a1 37 1d 00 	lea    rax,[rip+0x1d37a1]        # 1f38e0 <int21_37>
   2013f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20142:	29 c7                	sub    edi,eax
   20144:	89 f8                	mov    eax,edi
   20146:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2014a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2014f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20153:	f3 0f 7e 0d 45 4d 01 00 	movq   xmm1,QWORD PTR [rip+0x14d45]        # 34ea0 <Law_and_Order+0x600>
   2015b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2015f:	f2 0f 10 0d 61 4d 01 00 	movsd  xmm1,QWORD PTR [rip+0x14d61]        # 34ec8 <Law_and_Order+0x628>
   20167:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2016b:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20170:	e8 bb 39 fe ff       	call   3b30 <exp@plt>
   20175:	66 48 0f 7e c7       	movq   rdi,xmm0
   2017a:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
   2017e:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   20181:	4c 63 c8             	movsxd r9,eax
   20184:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   20187:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   2018a:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   2018e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   20191:	48 89 d0             	mov    rax,rdx
   20194:	48 c1 e0 02          	shl    rax,0x2
   20198:	48 01 d0             	add    rax,rdx
   2019b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   201a3:	48 01 d0             	add    rax,rdx
   201a6:	48 89 f2             	mov    rdx,rsi
   201a9:	48 c1 e2 02          	shl    rdx,0x2
   201ad:	48 01 f2             	add    rdx,rsi
   201b0:	48 01 c2             	add    rdx,rax
   201b3:	48 89 c8             	mov    rax,rcx
   201b6:	48 c1 e0 05          	shl    rax,0x5
   201ba:	48 29 c8             	sub    rax,rcx
   201bd:	48 c1 e0 02          	shl    rax,0x2
   201c1:	48 01 c8             	add    rax,rcx
   201c4:	48 01 c2             	add    rdx,rax
   201c7:	49 69 c2 e8 03 00 00 	imul   rax,r10,0x3e8
   201ce:	48 01 d0             	add    rax,rdx
   201d1:	4c 01 c8             	add    rax,r9
   201d4:	48 05 de 0b 00 00    	add    rax,0xbde
   201da:	49 89 3c c0          	mov    QWORD PTR [r8+rax*8],rdi
   201de:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   201e2:	83 7d b0 04          	cmp    DWORD PTR [rbp-0x50],0x4
   201e6:	0f 8e a4 fc ff ff    	jle    1fe90 <get_scaled_exp_params+0x4fcb>
   201ec:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   201f0:	83 7d ac 04          	cmp    DWORD PTR [rbp-0x54],0x4
   201f4:	0f 86 8a fc ff ff    	jbe    1fe84 <get_scaled_exp_params+0x4fbf>
   201fa:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   201fe:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   20202:	0f 86 70 fc ff ff    	jbe    1fe78 <get_scaled_exp_params+0x4fb3>
   20208:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   2020c:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   20210:	0f 86 56 fc ff ff    	jbe    1fe6c <get_scaled_exp_params+0x4fa7>
   20216:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   2021a:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   2021e:	0f 86 3c fc ff ff    	jbe    1fe60 <get_scaled_exp_params+0x4f9b>
   20224:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   2022b:	e9 52 04 00 00       	jmp    20682 <get_scaled_exp_params+0x57bd>
   20230:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   20237:	e9 38 04 00 00       	jmp    20674 <get_scaled_exp_params+0x57af>
   2023c:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   20243:	e9 1e 04 00 00       	jmp    20666 <get_scaled_exp_params+0x57a1>
   20248:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   2024f:	e9 04 04 00 00       	jmp    20658 <get_scaled_exp_params+0x5793>
   20254:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   2025b:	e9 ea 03 00 00       	jmp    2064a <get_scaled_exp_params+0x5785>
   20260:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   20267:	e9 d0 03 00 00       	jmp    2063c <get_scaled_exp_params+0x5777>
   2026c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20270:	0f 85 9f 01 00 00    	jne    20415 <get_scaled_exp_params+0x5550>
   20276:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   20279:	48 63 f8             	movsxd rdi,eax
   2027c:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   2027f:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   20282:	48 63 c8             	movsxd rcx,eax
   20285:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   20289:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   2028c:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   20290:	48 89 f0             	mov    rax,rsi
   20293:	48 c1 e0 02          	shl    rax,0x2
   20297:	48 01 f0             	add    rax,rsi
   2029a:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   202a2:	48 01 f0             	add    rax,rsi
   202a5:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   202ac:	48 01 c6             	add    rsi,rax
   202af:	48 89 c8             	mov    rax,rcx
   202b2:	48 c1 e0 02          	shl    rax,0x2
   202b6:	48 01 c8             	add    rax,rcx
   202b9:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   202bd:	48 89 d0             	mov    rax,rdx
   202c0:	48 c1 e0 05          	shl    rax,0x5
   202c4:	48 29 d0             	sub    rax,rdx
   202c7:	48 c1 e0 02          	shl    rax,0x2
   202cb:	48 01 d0             	add    rax,rdx
   202ce:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   202d2:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   202d9:	48 01 d0             	add    rax,rdx
   202dc:	48 01 f8             	add    rax,rdi
   202df:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   202e7:	48 8d 05 f2 a0 20 00 	lea    rax,[rip+0x20a0f2]        # 22a3e0 <int22_dH>
   202ee:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   202f1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   202f5:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   202f8:	48 63 f8             	movsxd rdi,eax
   202fb:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   202fe:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   20301:	48 63 c8             	movsxd rcx,eax
   20304:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   20308:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   2030b:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   2030f:	48 89 f0             	mov    rax,rsi
   20312:	48 c1 e0 02          	shl    rax,0x2
   20316:	48 01 f0             	add    rax,rsi
   20319:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   20321:	48 01 f0             	add    rax,rsi
   20324:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   2032b:	48 01 c6             	add    rsi,rax
   2032e:	48 89 c8             	mov    rax,rcx
   20331:	48 c1 e0 02          	shl    rax,0x2
   20335:	48 01 c8             	add    rax,rcx
   20338:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   2033c:	48 89 d0             	mov    rax,rdx
   2033f:	48 c1 e0 05          	shl    rax,0x5
   20343:	48 29 d0             	sub    rax,rdx
   20346:	48 c1 e0 02          	shl    rax,0x2
   2034a:	48 01 d0             	add    rax,rdx
   2034d:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   20351:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   20358:	48 01 d0             	add    rax,rdx
   2035b:	48 01 f8             	add    rax,rdi
   2035e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20366:	48 8d 05 73 a0 20 00 	lea    rax,[rip+0x20a073]        # 22a3e0 <int22_dH>
   2036d:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   20370:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   20373:	4c 63 c0             	movsxd r8,eax
   20376:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   20379:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   2037c:	48 63 c8             	movsxd rcx,eax
   2037f:	44 8b 4d a4          	mov    r9d,DWORD PTR [rbp-0x5c]
   20383:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   20386:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   2038a:	48 89 f0             	mov    rax,rsi
   2038d:	48 c1 e0 02          	shl    rax,0x2
   20391:	48 01 f0             	add    rax,rsi
   20394:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2039c:	48 01 f0             	add    rax,rsi
   2039f:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   203a6:	48 01 c6             	add    rsi,rax
   203a9:	48 89 c8             	mov    rax,rcx
   203ac:	48 c1 e0 02          	shl    rax,0x2
   203b0:	48 01 c8             	add    rax,rcx
   203b3:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   203b7:	48 89 d0             	mov    rax,rdx
   203ba:	48 c1 e0 05          	shl    rax,0x5
   203be:	48 29 d0             	sub    rax,rdx
   203c1:	48 c1 e0 02          	shl    rax,0x2
   203c5:	48 01 d0             	add    rax,rdx
   203c8:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   203cc:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   203d3:	48 01 d0             	add    rax,rdx
   203d6:	4c 01 c0             	add    rax,r8
   203d9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   203e1:	48 8d 05 f8 2e 1e 00 	lea    rax,[rip+0x1e2ef8]        # 2032e0 <int22_37>
   203e8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   203eb:	29 c7                	sub    edi,eax
   203ed:	89 f8                	mov    eax,edi
   203ef:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   203f3:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   203f8:	f2 0f 5c c1          	subsd  xmm0,xmm1
   203fc:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20400:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20404:	f3 0f 7e 0d 94 4a 01 00 	movq   xmm1,QWORD PTR [rip+0x14a94]        # 34ea0 <Law_and_Order+0x600>
   2040c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20410:	e9 92 01 00 00       	jmp    205a7 <get_scaled_exp_params+0x56e2>
   20415:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   20418:	48 63 f8             	movsxd rdi,eax
   2041b:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   2041e:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   20421:	48 63 c8             	movsxd rcx,eax
   20424:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   20428:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   2042b:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   2042f:	48 89 f0             	mov    rax,rsi
   20432:	48 c1 e0 02          	shl    rax,0x2
   20436:	48 01 f0             	add    rax,rsi
   20439:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   20441:	48 01 f0             	add    rax,rsi
   20444:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   2044b:	48 01 c6             	add    rsi,rax
   2044e:	48 89 c8             	mov    rax,rcx
   20451:	48 c1 e0 02          	shl    rax,0x2
   20455:	48 01 c8             	add    rax,rcx
   20458:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   2045c:	48 89 d0             	mov    rax,rdx
   2045f:	48 c1 e0 05          	shl    rax,0x5
   20463:	48 29 d0             	sub    rax,rdx
   20466:	48 c1 e0 02          	shl    rax,0x2
   2046a:	48 01 d0             	add    rax,rdx
   2046d:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   20471:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   20478:	48 01 d0             	add    rax,rdx
   2047b:	48 01 f8             	add    rax,rdi
   2047e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20486:	48 8d 05 53 9f 20 00 	lea    rax,[rip+0x209f53]        # 22a3e0 <int22_dH>
   2048d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20490:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20494:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   20497:	48 63 f8             	movsxd rdi,eax
   2049a:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   2049d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   204a0:	48 63 c8             	movsxd rcx,eax
   204a3:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   204a7:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   204aa:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   204ae:	48 89 f0             	mov    rax,rsi
   204b1:	48 c1 e0 02          	shl    rax,0x2
   204b5:	48 01 f0             	add    rax,rsi
   204b8:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   204c0:	48 01 f0             	add    rax,rsi
   204c3:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   204ca:	48 01 c6             	add    rsi,rax
   204cd:	48 89 c8             	mov    rax,rcx
   204d0:	48 c1 e0 02          	shl    rax,0x2
   204d4:	48 01 c8             	add    rax,rcx
   204d7:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   204db:	48 89 d0             	mov    rax,rdx
   204de:	48 c1 e0 05          	shl    rax,0x5
   204e2:	48 29 d0             	sub    rax,rdx
   204e5:	48 c1 e0 02          	shl    rax,0x2
   204e9:	48 01 d0             	add    rax,rdx
   204ec:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   204f0:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   204f7:	48 01 d0             	add    rax,rdx
   204fa:	48 01 f8             	add    rax,rdi
   204fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20505:	48 8d 05 d4 9e 20 00 	lea    rax,[rip+0x209ed4]        # 22a3e0 <int22_dH>
   2050c:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   2050f:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   20512:	4c 63 c0             	movsxd r8,eax
   20515:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   20518:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   2051b:	48 63 c8             	movsxd rcx,eax
   2051e:	44 8b 4d a4          	mov    r9d,DWORD PTR [rbp-0x5c]
   20522:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   20525:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   20529:	48 89 f0             	mov    rax,rsi
   2052c:	48 c1 e0 02          	shl    rax,0x2
   20530:	48 01 f0             	add    rax,rsi
   20533:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2053b:	48 01 f0             	add    rax,rsi
   2053e:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   20545:	48 01 c6             	add    rsi,rax
   20548:	48 89 c8             	mov    rax,rcx
   2054b:	48 c1 e0 02          	shl    rax,0x2
   2054f:	48 01 c8             	add    rax,rcx
   20552:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   20556:	48 89 d0             	mov    rax,rdx
   20559:	48 c1 e0 05          	shl    rax,0x5
   2055d:	48 29 d0             	sub    rax,rdx
   20560:	48 c1 e0 02          	shl    rax,0x2
   20564:	48 01 d0             	add    rax,rdx
   20567:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2056b:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   20572:	48 01 d0             	add    rax,rdx
   20575:	4c 01 c0             	add    rax,r8
   20578:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20580:	48 8d 05 59 2d 1e 00 	lea    rax,[rip+0x1e2d59]        # 2032e0 <int22_37>
   20587:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2058a:	29 c7                	sub    edi,eax
   2058c:	89 f8                	mov    eax,edi
   2058e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20592:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20597:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2059b:	f3 0f 7e 0d fd 48 01 00 	movq   xmm1,QWORD PTR [rip+0x148fd]        # 34ea0 <Law_and_Order+0x600>
   205a3:	66 0f 57 c1          	xorpd  xmm0,xmm1
   205a7:	f2 0f 10 0d 19 49 01 00 	movsd  xmm1,QWORD PTR [rip+0x14919]        # 34ec8 <Law_and_Order+0x628>
   205af:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   205b3:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   205b8:	e8 73 35 fe ff       	call   3b30 <exp@plt>
   205bd:	66 48 0f 7e c7       	movq   rdi,xmm0
   205c2:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
   205c6:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   205c9:	4c 63 c8             	movsxd r9,eax
   205cc:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   205cf:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   205d2:	48 63 c8             	movsxd rcx,eax
   205d5:	44 8b 5d a4          	mov    r11d,DWORD PTR [rbp-0x5c]
   205d9:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   205dc:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   205e0:	48 89 f0             	mov    rax,rsi
   205e3:	48 c1 e0 02          	shl    rax,0x2
   205e7:	48 01 f0             	add    rax,rsi
   205ea:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   205f2:	48 01 f0             	add    rax,rsi
   205f5:	49 69 f3 71 02 00 00 	imul   rsi,r11,0x271
   205fc:	48 01 c6             	add    rsi,rax
   205ff:	48 89 d0             	mov    rax,rdx
   20602:	48 c1 e0 05          	shl    rax,0x5
   20606:	48 29 d0             	sub    rax,rdx
   20609:	48 c1 e0 02          	shl    rax,0x2
   2060d:	48 01 d0             	add    rax,rdx
   20610:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   20614:	48 89 c8             	mov    rax,rcx
   20617:	48 c1 e0 02          	shl    rax,0x2
   2061b:	48 01 c8             	add    rax,rcx
   2061e:	48 01 c2             	add    rdx,rax
   20621:	49 69 c2 88 13 00 00 	imul   rax,r10,0x1388
   20628:	48 01 d0             	add    rax,rdx
   2062b:	4c 01 c8             	add    rax,r9
   2062e:	48 05 1e 2b 00 00    	add    rax,0x2b1e
   20634:	49 89 3c c0          	mov    QWORD PTR [r8+rax*8],rdi
   20638:	83 45 b8 01          	add    DWORD PTR [rbp-0x48],0x1
   2063c:	83 7d b8 04          	cmp    DWORD PTR [rbp-0x48],0x4
   20640:	0f 8e 26 fc ff ff    	jle    2026c <get_scaled_exp_params+0x53a7>
   20646:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   2064a:	83 7d b4 04          	cmp    DWORD PTR [rbp-0x4c],0x4
   2064e:	0f 8e 0c fc ff ff    	jle    20260 <get_scaled_exp_params+0x539b>
   20654:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   20658:	83 7d ac 04          	cmp    DWORD PTR [rbp-0x54],0x4
   2065c:	0f 86 f2 fb ff ff    	jbe    20254 <get_scaled_exp_params+0x538f>
   20662:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   20666:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   2066a:	0f 86 d8 fb ff ff    	jbe    20248 <get_scaled_exp_params+0x5383>
   20670:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   20674:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   20678:	0f 86 be fb ff ff    	jbe    2023c <get_scaled_exp_params+0x5377>
   2067e:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   20682:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   20686:	0f 86 a4 fb ff ff    	jbe    20230 <get_scaled_exp_params+0x536b>
   2068c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   20690:	48 05 f0 43 06 00    	add    rax,0x643f0
   20696:	ba 19 01 00 00       	mov    edx,0x119
   2069b:	48 8d 35 1e fb 1c 00 	lea    rsi,[rip+0x1cfb1e]        # 1f01c0 <Tetraloops>
   206a2:	48 89 c7             	mov    rdi,rax
   206a5:	e8 c6 30 fe ff       	call   3770 <strncpy@plt>
   206aa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   206ae:	48 05 b0 4a 06 00    	add    rax,0x64ab0
   206b4:	ba f1 00 00 00       	mov    edx,0xf1
   206b9:	48 8d 35 c0 f8 1c 00 	lea    rsi,[rip+0x1cf8c0]        # 1eff80 <Triloops>
   206c0:	48 89 c7             	mov    rdi,rax
   206c3:	e8 a8 30 fe ff       	call   3770 <strncpy@plt>
   206c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   206cc:	48 05 a1 4b 06 00    	add    rax,0x64ba1
   206d2:	ba 69 01 00 00       	mov    edx,0x169
   206d7:	48 8d 35 42 fd 1c 00 	lea    rsi,[rip+0x1cfd42]        # 1f0420 <Hexaloops>
   206de:	48 89 c7             	mov    rdi,rax
   206e1:	e8 8a 30 fe ff       	call   3770 <strncpy@plt>
   206e6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   206ea:	48 83 c4 78          	add    rsp,0x78
   206ee:	5b                   	pop    rbx
   206ef:	5d                   	pop    rbp
   206f0:	c3                   	ret    

00000000000206f1 <get_exp_params_ali>:
   206f1:	f3 0f 1e fa          	endbr64 
   206f5:	55                   	push   rbp
   206f6:	48 89 e5             	mov    rbp,rsp
   206f9:	53                   	push   rbx
   206fa:	48 83 ec 78          	sub    rsp,0x78
   206fe:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   20702:	89 75 94             	mov    DWORD PTR [rbp-0x6c],esi
   20705:	f2 0f 11 45 88       	movsd  QWORD PTR [rbp-0x78],xmm0
   2070a:	bf 60 67 06 00       	mov    edi,0x66760
   2070f:	e8 fd e5 00 00       	call   2ed11 <vrna_alloc>
   20714:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   20718:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2071c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   20720:	48 05 78 5e 06 00    	add    rax,0x65e78
   20726:	48 89 d6             	mov    rsi,rdx
   20729:	ba fd 00 00 00       	mov    edx,0xfd
   2072e:	48 89 c7             	mov    rdi,rax
   20731:	48 89 d1             	mov    rcx,rdx
   20734:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   20737:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2073b:	f2 0f 10 40 08       	movsd  xmm0,QWORD PTR [rax+0x8]
   20740:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   20744:	f2 0f 11 80 70 5e 06 00 	movsd  QWORD PTR [rax+0x65e70],xmm0
   2074c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20750:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
   20754:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   20758:	f2 0f 11 80 68 5e 06 00 	movsd  QWORD PTR [rax+0x65e68],xmm0
   20760:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   20764:	f2 0f 10 45 88       	movsd  xmm0,QWORD PTR [rbp-0x78]
   20769:	f2 0f 11 80 60 5e 06 00 	movsd  QWORD PTR [rax+0x65e60],xmm0
   20771:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   20774:	48 85 c0             	test   rax,rax
   20777:	78 07                	js     20780 <get_exp_params_ali+0x8f>
   20779:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   2077e:	eb 15                	jmp    20795 <get_exp_params_ali+0xa4>
   20780:	48 89 c2             	mov    rdx,rax
   20783:	48 d1 ea             	shr    rdx,1
   20786:	83 e0 01             	and    eax,0x1
   20789:	48 09 c2             	or     rdx,rax
   2078c:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   20791:	f2 0f 58 c0          	addsd  xmm0,xmm0
   20795:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   20799:	f2 0f 10 48 08       	movsd  xmm1,QWORD PTR [rax+0x8]
   2079e:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   207a2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   207a6:	f2 0f 10 10          	movsd  xmm2,QWORD PTR [rax]
   207aa:	f2 0f 10 05 fe 46 01 00 	movsd  xmm0,QWORD PTR [rip+0x146fe]        # 34eb0 <Law_and_Order+0x610>
   207b2:	f2 0f 58 c2          	addsd  xmm0,xmm2
   207b6:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   207ba:	f2 0f 10 05 fe 46 01 00 	movsd  xmm0,QWORD PTR [rip+0x146fe]        # 34ec0 <Law_and_Order+0x620>
   207c2:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   207c6:	f2 0f 11 45 c8       	movsd  QWORD PTR [rbp-0x38],xmm0
   207cb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   207cf:	f2 0f 10 45 c8       	movsd  xmm0,QWORD PTR [rbp-0x38]
   207d4:	f2 0f 11 80 58 5e 06 00 	movsd  QWORD PTR [rax+0x65e58],xmm0
   207dc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   207e0:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   207e3:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   207e6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   207ea:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
   207ee:	f2 0f 10 05 ba 46 01 00 	movsd  xmm0,QWORD PTR [rip+0x146ba]        # 34eb0 <Law_and_Order+0x610>
   207f6:	f2 0f 58 c1          	addsd  xmm0,xmm1
   207fa:	f2 0f 10 0d fe c9 1c 00 	movsd  xmm1,QWORD PTR [rip+0x1cc9fe]        # 1ed200 <Tmeasure>
   20802:	f2 0f 5e c1          	divsd  xmm0,xmm1
   20806:	f2 0f 11 45 d0       	movsd  QWORD PTR [rbp-0x30],xmm0
   2080b:	f2 0f 10 05 f5 c9 1c 00 	movsd  xmm0,QWORD PTR [rip+0x1cc9f5]        # 1ed208 <lxc37>
   20813:	f2 0f 59 45 d0       	mulsd  xmm0,QWORD PTR [rbp-0x30]
   20818:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2081c:	f2 0f 11 80 c8 3f 06 00 	movsd  QWORD PTR [rax+0x63fc8],xmm0
   20824:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20828:	75 3d                	jne    20867 <get_exp_params_ali+0x176>
   2082a:	8b 05 08 ca 1c 00    	mov    eax,DWORD PTR [rip+0x1cca08]        # 1ed238 <DuplexInitdH>
   20830:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20834:	8b 15 fe c9 1c 00    	mov    edx,DWORD PTR [rip+0x1cc9fe]        # 1ed238 <DuplexInitdH>
   2083a:	8b 05 f4 c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc9f4]        # 1ed234 <DuplexInit37>
   20840:	29 c2                	sub    edx,eax
   20842:	89 d0                	mov    eax,edx
   20844:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20848:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2084d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20851:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20855:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20859:	f3 0f 7e 0d 3f 46 01 00 	movq   xmm1,QWORD PTR [rip+0x1463f]        # 34ea0 <Law_and_Order+0x600>
   20861:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20865:	eb 33                	jmp    2089a <get_exp_params_ali+0x1a9>
   20867:	8b 05 cb c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc9cb]        # 1ed238 <DuplexInitdH>
   2086d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20871:	8b 15 c1 c9 1c 00    	mov    edx,DWORD PTR [rip+0x1cc9c1]        # 1ed238 <DuplexInitdH>
   20877:	8b 05 b7 c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc9b7]        # 1ed234 <DuplexInit37>
   2087d:	29 c2                	sub    edx,eax
   2087f:	89 d0                	mov    eax,edx
   20881:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20885:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2088a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2088e:	f3 0f 7e 0d 0a 46 01 00 	movq   xmm1,QWORD PTR [rip+0x1460a]        # 34ea0 <Law_and_Order+0x600>
   20896:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2089a:	f2 0f 10 0d 26 46 01 00 	movsd  xmm1,QWORD PTR [rip+0x14626]        # 34ec8 <Law_and_Order+0x628>
   208a2:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   208a6:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   208ab:	e8 80 32 fe ff       	call   3b30 <exp@plt>
   208b0:	66 48 0f 7e c0       	movq   rax,xmm0
   208b5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   208b9:	48 89 82 28 40 06 00 	mov    QWORD PTR [rdx+0x64028],rax
   208c0:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   208c4:	75 3d                	jne    20903 <get_exp_params_ali+0x212>
   208c6:	8b 05 64 c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc964]        # 1ed230 <TerminalAUdH>
   208cc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   208d0:	8b 15 5a c9 1c 00    	mov    edx,DWORD PTR [rip+0x1cc95a]        # 1ed230 <TerminalAUdH>
   208d6:	8b 05 50 c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc950]        # 1ed22c <TerminalAU37>
   208dc:	29 c2                	sub    edx,eax
   208de:	89 d0                	mov    eax,edx
   208e0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   208e4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   208e9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   208ed:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   208f1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   208f5:	f3 0f 7e 0d a3 45 01 00 	movq   xmm1,QWORD PTR [rip+0x145a3]        # 34ea0 <Law_and_Order+0x600>
   208fd:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20901:	eb 33                	jmp    20936 <get_exp_params_ali+0x245>
   20903:	8b 05 27 c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc927]        # 1ed230 <TerminalAUdH>
   20909:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2090d:	8b 15 1d c9 1c 00    	mov    edx,DWORD PTR [rip+0x1cc91d]        # 1ed230 <TerminalAUdH>
   20913:	8b 05 13 c9 1c 00    	mov    eax,DWORD PTR [rip+0x1cc913]        # 1ed22c <TerminalAU37>
   20919:	29 c2                	sub    edx,eax
   2091b:	89 d0                	mov    eax,edx
   2091d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20921:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20926:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2092a:	f3 0f 7e 0d 6e 45 01 00 	movq   xmm1,QWORD PTR [rip+0x1456e]        # 34ea0 <Law_and_Order+0x600>
   20932:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20936:	f2 0f 10 0d 8a 45 01 00 	movsd  xmm1,QWORD PTR [rip+0x1458a]        # 34ec8 <Law_and_Order+0x628>
   2093e:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20942:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20947:	e8 e4 31 fe ff       	call   3b30 <exp@plt>
   2094c:	66 48 0f 7e c0       	movq   rax,xmm0
   20951:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20955:	48 89 82 20 40 06 00 	mov    QWORD PTR [rdx+0x64020],rax
   2095c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20960:	75 3d                	jne    2099f <get_exp_params_ali+0x2ae>
   20962:	8b 05 88 20 23 00    	mov    eax,DWORD PTR [rip+0x232088]        # 2529f0 <ML_BASEdH>
   20968:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2096c:	8b 15 7e 20 23 00    	mov    edx,DWORD PTR [rip+0x23207e]        # 2529f0 <ML_BASEdH>
   20972:	8b 05 74 20 23 00    	mov    eax,DWORD PTR [rip+0x232074]        # 2529ec <ML_BASE37>
   20978:	29 c2                	sub    edx,eax
   2097a:	89 d0                	mov    eax,edx
   2097c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20980:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20985:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20989:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2098d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20991:	f3 0f 7e 0d 07 45 01 00 	movq   xmm1,QWORD PTR [rip+0x14507]        # 34ea0 <Law_and_Order+0x600>
   20999:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2099d:	eb 33                	jmp    209d2 <get_exp_params_ali+0x2e1>
   2099f:	8b 05 4b 20 23 00    	mov    eax,DWORD PTR [rip+0x23204b]        # 2529f0 <ML_BASEdH>
   209a5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   209a9:	8b 15 41 20 23 00    	mov    edx,DWORD PTR [rip+0x232041]        # 2529f0 <ML_BASEdH>
   209af:	8b 05 37 20 23 00    	mov    eax,DWORD PTR [rip+0x232037]        # 2529ec <ML_BASE37>
   209b5:	29 c2                	sub    edx,eax
   209b7:	89 d0                	mov    eax,edx
   209b9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   209bd:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   209c2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   209c6:	f3 0f 7e 0d d2 44 01 00 	movq   xmm1,QWORD PTR [rip+0x144d2]        # 34ea0 <Law_and_Order+0x600>
   209ce:	66 0f 57 c1          	xorpd  xmm0,xmm1
   209d2:	f2 0f 10 0d ee 44 01 00 	movsd  xmm1,QWORD PTR [rip+0x144ee]        # 34ec8 <Law_and_Order+0x628>
   209da:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   209de:	66 0f 28 c8          	movapd xmm1,xmm0
   209e2:	f2 0f 5e 4d c8       	divsd  xmm1,QWORD PTR [rbp-0x38]
   209e7:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   209ea:	48 85 c0             	test   rax,rax
   209ed:	78 07                	js     209f6 <get_exp_params_ali+0x305>
   209ef:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   209f4:	eb 15                	jmp    20a0b <get_exp_params_ali+0x31a>
   209f6:	48 89 c2             	mov    rdx,rax
   209f9:	48 d1 ea             	shr    rdx,1
   209fc:	83 e0 01             	and    eax,0x1
   209ff:	48 09 c2             	or     rdx,rax
   20a02:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   20a07:	f2 0f 58 c0          	addsd  xmm0,xmm0
   20a0b:	f2 0f 5e c8          	divsd  xmm1,xmm0
   20a0f:	66 0f 28 c1          	movapd xmm0,xmm1
   20a13:	e8 18 31 fe ff       	call   3b30 <exp@plt>
   20a18:	66 48 0f 7e c0       	movq   rax,xmm0
   20a1d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20a21:	48 89 82 d0 3f 06 00 	mov    QWORD PTR [rdx+0x63fd0],rax
   20a28:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20a2c:	75 3d                	jne    20a6b <get_exp_params_ali+0x37a>
   20a2e:	8b 05 e8 c7 1c 00    	mov    eax,DWORD PTR [rip+0x1cc7e8]        # 1ed21c <ML_closingdH>
   20a34:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20a38:	8b 15 de c7 1c 00    	mov    edx,DWORD PTR [rip+0x1cc7de]        # 1ed21c <ML_closingdH>
   20a3e:	8b 05 d4 c7 1c 00    	mov    eax,DWORD PTR [rip+0x1cc7d4]        # 1ed218 <ML_closing37>
   20a44:	29 c2                	sub    edx,eax
   20a46:	89 d0                	mov    eax,edx
   20a48:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20a4c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20a51:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20a55:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20a59:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20a5d:	f3 0f 7e 0d 3b 44 01 00 	movq   xmm1,QWORD PTR [rip+0x1443b]        # 34ea0 <Law_and_Order+0x600>
   20a65:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20a69:	eb 33                	jmp    20a9e <get_exp_params_ali+0x3ad>
   20a6b:	8b 05 ab c7 1c 00    	mov    eax,DWORD PTR [rip+0x1cc7ab]        # 1ed21c <ML_closingdH>
   20a71:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20a75:	8b 15 a1 c7 1c 00    	mov    edx,DWORD PTR [rip+0x1cc7a1]        # 1ed21c <ML_closingdH>
   20a7b:	8b 05 97 c7 1c 00    	mov    eax,DWORD PTR [rip+0x1cc797]        # 1ed218 <ML_closing37>
   20a81:	29 c2                	sub    edx,eax
   20a83:	89 d0                	mov    eax,edx
   20a85:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20a89:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20a8e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20a92:	f3 0f 7e 0d 06 44 01 00 	movq   xmm1,QWORD PTR [rip+0x14406]        # 34ea0 <Law_and_Order+0x600>
   20a9a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20a9e:	f2 0f 10 0d 22 44 01 00 	movsd  xmm1,QWORD PTR [rip+0x14422]        # 34ec8 <Law_and_Order+0x628>
   20aa6:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20aaa:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20aaf:	e8 7c 30 fe ff       	call   3b30 <exp@plt>
   20ab4:	66 48 0f 7e c0       	movq   rax,xmm0
   20ab9:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20abd:	48 89 82 18 40 06 00 	mov    QWORD PTR [rdx+0x64018],rax
   20ac4:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20ac8:	75 3d                	jne    20b07 <get_exp_params_ali+0x416>
   20aca:	8b 05 28 1f 23 00    	mov    eax,DWORD PTR [rip+0x231f28]        # 2529f8 <GQuadLayerMismatchH>
   20ad0:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20ad4:	8b 15 1e 1f 23 00    	mov    edx,DWORD PTR [rip+0x231f1e]        # 2529f8 <GQuadLayerMismatchH>
   20ada:	8b 05 80 c7 1c 00    	mov    eax,DWORD PTR [rip+0x1cc780]        # 1ed260 <GQuadLayerMismatch37>
   20ae0:	29 c2                	sub    edx,eax
   20ae2:	89 d0                	mov    eax,edx
   20ae4:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20ae8:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20aed:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20af1:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20af5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20af9:	f3 0f 7e 0d 9f 43 01 00 	movq   xmm1,QWORD PTR [rip+0x1439f]        # 34ea0 <Law_and_Order+0x600>
   20b01:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20b05:	eb 33                	jmp    20b3a <get_exp_params_ali+0x449>
   20b07:	8b 05 eb 1e 23 00    	mov    eax,DWORD PTR [rip+0x231eeb]        # 2529f8 <GQuadLayerMismatchH>
   20b0d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20b11:	8b 15 e1 1e 23 00    	mov    edx,DWORD PTR [rip+0x231ee1]        # 2529f8 <GQuadLayerMismatchH>
   20b17:	8b 05 43 c7 1c 00    	mov    eax,DWORD PTR [rip+0x1cc743]        # 1ed260 <GQuadLayerMismatch37>
   20b1d:	29 c2                	sub    edx,eax
   20b1f:	89 d0                	mov    eax,edx
   20b21:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20b25:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20b2a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20b2e:	f3 0f 7e 0d 6a 43 01 00 	movq   xmm1,QWORD PTR [rip+0x1436a]        # 34ea0 <Law_and_Order+0x600>
   20b36:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20b3a:	f2 0f 10 0d 86 43 01 00 	movsd  xmm1,QWORD PTR [rip+0x14386]        # 34ec8 <Law_and_Order+0x628>
   20b42:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20b46:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20b4b:	e8 e0 2f fe ff       	call   3b30 <exp@plt>
   20b50:	66 48 0f 7e c0       	movq   rax,xmm0
   20b55:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20b59:	48 89 82 48 5e 06 00 	mov    QWORD PTR [rdx+0x65e48],rax
   20b60:	8b 15 fe c6 1c 00    	mov    edx,DWORD PTR [rip+0x1cc6fe]        # 1ed264 <GQuadLayerMismatchMax>
   20b66:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   20b6a:	89 90 50 5e 06 00    	mov    DWORD PTR [rax+0x65e50],edx
   20b70:	c7 45 a0 02 00 00 00 	mov    DWORD PTR [rbp-0x60],0x2
   20b77:	e9 57 01 00 00       	jmp    20cd3 <get_exp_params_ali+0x5e2>
   20b7c:	c7 45 a4 03 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x3
   20b83:	e9 3d 01 00 00       	jmp    20cc5 <get_exp_params_ali+0x5d4>
   20b88:	8b 05 ca c6 1c 00    	mov    eax,DWORD PTR [rip+0x1cc6ca]        # 1ed258 <GQuadAlphadH>
   20b8e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20b92:	8b 15 c0 c6 1c 00    	mov    edx,DWORD PTR [rip+0x1cc6c0]        # 1ed258 <GQuadAlphadH>
   20b98:	8b 05 b6 c6 1c 00    	mov    eax,DWORD PTR [rip+0x1cc6b6]        # 1ed254 <GQuadAlpha37>
   20b9e:	29 c2                	sub    edx,eax
   20ba0:	89 d0                	mov    eax,edx
   20ba2:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20ba6:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20bab:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20baf:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   20bb4:	8b 05 3a 1e 23 00    	mov    eax,DWORD PTR [rip+0x231e3a]        # 2529f4 <GQuadBetadH>
   20bba:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20bbe:	8b 15 30 1e 23 00    	mov    edx,DWORD PTR [rip+0x231e30]        # 2529f4 <GQuadBetadH>
   20bc4:	8b 05 92 c6 1c 00    	mov    eax,DWORD PTR [rip+0x1cc692]        # 1ed25c <GQuadBeta37>
   20bca:	29 c2                	sub    edx,eax
   20bcc:	89 d0                	mov    eax,edx
   20bce:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20bd2:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20bd7:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20bdb:	f2 0f 11 45 e8       	movsd  QWORD PTR [rbp-0x18],xmm0
   20be0:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20be3:	83 e8 01             	sub    eax,0x1
   20be6:	89 c0                	mov    eax,eax
   20be8:	48 85 c0             	test   rax,rax
   20beb:	78 07                	js     20bf4 <get_exp_params_ali+0x503>
   20bed:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   20bf2:	eb 15                	jmp    20c09 <get_exp_params_ali+0x518>
   20bf4:	48 89 c2             	mov    rdx,rax
   20bf7:	48 d1 ea             	shr    rdx,1
   20bfa:	83 e0 01             	and    eax,0x1
   20bfd:	48 09 c2             	or     rdx,rax
   20c00:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   20c05:	f2 0f 58 c0          	addsd  xmm0,xmm0
   20c09:	f2 0f 59 45 e0       	mulsd  xmm0,QWORD PTR [rbp-0x20]
   20c0e:	f2 0f 11 45 80       	movsd  QWORD PTR [rbp-0x80],xmm0
   20c13:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   20c16:	48 85 c0             	test   rax,rax
   20c19:	78 07                	js     20c22 <get_exp_params_ali+0x531>
   20c1b:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   20c20:	eb 15                	jmp    20c37 <get_exp_params_ali+0x546>
   20c22:	48 89 c2             	mov    rdx,rax
   20c25:	48 d1 ea             	shr    rdx,1
   20c28:	83 e0 01             	and    eax,0x1
   20c2b:	48 09 c2             	or     rdx,rax
   20c2e:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   20c33:	f2 0f 58 c0          	addsd  xmm0,xmm0
   20c37:	f2 0f 10 0d 91 42 01 00 	movsd  xmm1,QWORD PTR [rip+0x14291]        # 34ed0 <Law_and_Order+0x630>
   20c3f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20c43:	e8 d8 2b fe ff       	call   3820 <log@plt>
   20c48:	f2 0f 59 45 e8       	mulsd  xmm0,QWORD PTR [rbp-0x18]
   20c4d:	f2 0f 58 45 80       	addsd  xmm0,QWORD PTR [rbp-0x80]
   20c52:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   20c57:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20c5b:	75 1b                	jne    20c78 <get_exp_params_ali+0x587>
   20c5d:	f2 0f 10 45 d8       	movsd  xmm0,QWORD PTR [rbp-0x28]
   20c62:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20c66:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20c6a:	f3 0f 7e 0d 2e 42 01 00 	movq   xmm1,QWORD PTR [rip+0x1422e]        # 34ea0 <Law_and_Order+0x600>
   20c72:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20c76:	eb 11                	jmp    20c89 <get_exp_params_ali+0x598>
   20c78:	f2 0f 10 45 d8       	movsd  xmm0,QWORD PTR [rbp-0x28]
   20c7d:	f3 0f 7e 0d 1b 42 01 00 	movq   xmm1,QWORD PTR [rip+0x1421b]        # 34ea0 <Law_and_Order+0x600>
   20c85:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20c89:	f2 0f 10 0d 37 42 01 00 	movsd  xmm1,QWORD PTR [rip+0x14237]        # 34ec8 <Law_and_Order+0x628>
   20c91:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20c95:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20c9a:	e8 91 2e fe ff       	call   3b30 <exp@plt>
   20c9f:	66 48 0f 7e c0       	movq   rax,xmm0
   20ca4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20ca8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   20cab:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   20cae:	48 6b f6 2e          	imul   rsi,rsi,0x2e
   20cb2:	48 01 f1             	add    rcx,rsi
   20cb5:	48 81 c1 58 ca 00 00 	add    rcx,0xca58
   20cbc:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   20cc1:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   20cc5:	83 7d a4 2d          	cmp    DWORD PTR [rbp-0x5c],0x2d
   20cc9:	0f 86 b9 fe ff ff    	jbe    20b88 <get_exp_params_ali+0x497>
   20ccf:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   20cd3:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   20cd7:	0f 86 9f fe ff ff    	jbe    20b7c <get_exp_params_ali+0x48b>
   20cdd:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   20ce4:	e9 ff 00 00 00       	jmp    20de8 <get_exp_params_ali+0x6f7>
   20ce9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20ced:	75 6a                	jne    20d59 <get_exp_params_ali+0x668>
   20cef:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20cf2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20cfa:	48 8d 05 ff c7 1c 00 	lea    rax,[rip+0x1cc7ff]        # 1ed500 <hairpindH>
   20d01:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20d04:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20d08:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20d0b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20d13:	48 8d 05 e6 c7 1c 00 	lea    rax,[rip+0x1cc7e6]        # 1ed500 <hairpindH>
   20d1a:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   20d1d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20d20:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   20d28:	48 8d 05 51 c7 1c 00 	lea    rax,[rip+0x1cc751]        # 1ed480 <hairpin37>
   20d2f:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   20d32:	29 c2                	sub    edx,eax
   20d34:	89 d0                	mov    eax,edx
   20d36:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20d3a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20d3f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20d43:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20d47:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20d4b:	f3 0f 7e 0d 4d 41 01 00 	movq   xmm1,QWORD PTR [rip+0x1414d]        # 34ea0 <Law_and_Order+0x600>
   20d53:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20d57:	eb 60                	jmp    20db9 <get_exp_params_ali+0x6c8>
   20d59:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20d5c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20d64:	48 8d 05 95 c7 1c 00 	lea    rax,[rip+0x1cc795]        # 1ed500 <hairpindH>
   20d6b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20d6e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20d72:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20d75:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20d7d:	48 8d 05 7c c7 1c 00 	lea    rax,[rip+0x1cc77c]        # 1ed500 <hairpindH>
   20d84:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   20d87:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20d8a:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   20d92:	48 8d 05 e7 c6 1c 00 	lea    rax,[rip+0x1cc6e7]        # 1ed480 <hairpin37>
   20d99:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   20d9c:	29 c2                	sub    edx,eax
   20d9e:	89 d0                	mov    eax,edx
   20da0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20da4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20da9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20dad:	f3 0f 7e 0d eb 40 01 00 	movq   xmm1,QWORD PTR [rip+0x140eb]        # 34ea0 <Law_and_Order+0x600>
   20db5:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20db9:	f2 0f 10 0d 07 41 01 00 	movsd  xmm1,QWORD PTR [rip+0x14107]        # 34ec8 <Law_and_Order+0x628>
   20dc1:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20dc5:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20dca:	e8 61 2d fe ff       	call   3b30 <exp@plt>
   20dcf:	66 48 0f 7e c0       	movq   rax,xmm0
   20dd4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20dd8:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   20ddb:	48 83 c1 40          	add    rcx,0x40
   20ddf:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   20de4:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   20de8:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   20dec:	0f 86 f7 fe ff ff    	jbe    20ce9 <get_exp_params_ali+0x5f8>
   20df2:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   20df9:	eb 56                	jmp    20e51 <get_exp_params_ali+0x760>
   20dfb:	f2 0f 10 4d d0       	movsd  xmm1,QWORD PTR [rbp-0x30]
   20e00:	f2 0f 10 05 f8 40 01 00 	movsd  xmm0,QWORD PTR [rip+0x140f8]        # 34f00 <Law_and_Order+0x660>
   20e08:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20e0c:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   20e11:	f2 0f 10 45 d8       	movsd  xmm0,QWORD PTR [rbp-0x28]
   20e16:	f3 0f 7e 0d 82 40 01 00 	movq   xmm1,QWORD PTR [rip+0x14082]        # 34ea0 <Law_and_Order+0x600>
   20e1e:	66 0f 57 c8          	xorpd  xmm1,xmm0
   20e22:	f2 0f 10 05 9e 40 01 00 	movsd  xmm0,QWORD PTR [rip+0x1409e]        # 34ec8 <Law_and_Order+0x628>
   20e2a:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20e2e:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20e33:	e8 f8 2c fe ff       	call   3b30 <exp@plt>
   20e38:	66 48 0f 7e c0       	movq   rax,xmm0
   20e3d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20e41:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   20e44:	48 83 c1 40          	add    rcx,0x40
   20e48:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   20e4d:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   20e51:	83 7d a0 02          	cmp    DWORD PTR [rbp-0x60],0x2
   20e55:	76 a4                	jbe    20dfb <get_exp_params_ali+0x70a>
   20e57:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   20e5e:	e9 f9 01 00 00       	jmp    2105c <get_exp_params_ali+0x96b>
   20e63:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20e67:	75 6a                	jne    20ed3 <get_exp_params_ali+0x7e2>
   20e69:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20e6c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20e74:	48 8d 05 85 c7 1c 00 	lea    rax,[rip+0x1cc785]        # 1ed600 <bulgedH>
   20e7b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20e7e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20e82:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20e85:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20e8d:	48 8d 05 6c c7 1c 00 	lea    rax,[rip+0x1cc76c]        # 1ed600 <bulgedH>
   20e94:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   20e97:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20e9a:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   20ea2:	48 8d 05 d7 c6 1c 00 	lea    rax,[rip+0x1cc6d7]        # 1ed580 <bulge37>
   20ea9:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   20eac:	29 c2                	sub    edx,eax
   20eae:	89 d0                	mov    eax,edx
   20eb0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20eb4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20eb9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20ebd:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20ec1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20ec5:	f3 0f 7e 0d d3 3f 01 00 	movq   xmm1,QWORD PTR [rip+0x13fd3]        # 34ea0 <Law_and_Order+0x600>
   20ecd:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20ed1:	eb 60                	jmp    20f33 <get_exp_params_ali+0x842>
   20ed3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20ed6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20ede:	48 8d 05 1b c7 1c 00 	lea    rax,[rip+0x1cc71b]        # 1ed600 <bulgedH>
   20ee5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20ee8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20eec:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20eef:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20ef7:	48 8d 05 02 c7 1c 00 	lea    rax,[rip+0x1cc702]        # 1ed600 <bulgedH>
   20efe:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   20f01:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20f04:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   20f0c:	48 8d 05 6d c6 1c 00 	lea    rax,[rip+0x1cc66d]        # 1ed580 <bulge37>
   20f13:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   20f16:	29 c2                	sub    edx,eax
   20f18:	89 d0                	mov    eax,edx
   20f1a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20f1e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20f23:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20f27:	f3 0f 7e 0d 71 3f 01 00 	movq   xmm1,QWORD PTR [rip+0x13f71]        # 34ea0 <Law_and_Order+0x600>
   20f2f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20f33:	f2 0f 10 0d 8d 3f 01 00 	movsd  xmm1,QWORD PTR [rip+0x13f8d]        # 34ec8 <Law_and_Order+0x628>
   20f3b:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   20f3f:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   20f44:	e8 e7 2b fe ff       	call   3b30 <exp@plt>
   20f49:	66 48 0f 7e c0       	movq   rax,xmm0
   20f4e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   20f52:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   20f55:	48 83 c1 60          	add    rcx,0x60
   20f59:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   20f5d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   20f61:	75 6a                	jne    20fcd <get_exp_params_ali+0x8dc>
   20f63:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20f66:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20f6e:	48 8d 05 8b c7 1c 00 	lea    rax,[rip+0x1cc78b]        # 1ed700 <internal_loopdH>
   20f75:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20f78:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20f7c:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20f7f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20f87:	48 8d 05 72 c7 1c 00 	lea    rax,[rip+0x1cc772]        # 1ed700 <internal_loopdH>
   20f8e:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   20f91:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20f94:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   20f9c:	48 8d 05 dd c6 1c 00 	lea    rax,[rip+0x1cc6dd]        # 1ed680 <internal_loop37>
   20fa3:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   20fa6:	29 c2                	sub    edx,eax
   20fa8:	89 d0                	mov    eax,edx
   20faa:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   20fae:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   20fb3:	f2 0f 5c c1          	subsd  xmm0,xmm1
   20fb7:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   20fbb:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20fbf:	f3 0f 7e 0d d9 3e 01 00 	movq   xmm1,QWORD PTR [rip+0x13ed9]        # 34ea0 <Law_and_Order+0x600>
   20fc7:	66 0f 57 c1          	xorpd  xmm0,xmm1
   20fcb:	eb 60                	jmp    2102d <get_exp_params_ali+0x93c>
   20fcd:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20fd0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20fd8:	48 8d 05 21 c7 1c 00 	lea    rax,[rip+0x1cc721]        # 1ed700 <internal_loopdH>
   20fdf:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   20fe2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   20fe6:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20fe9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   20ff1:	48 8d 05 08 c7 1c 00 	lea    rax,[rip+0x1cc708]        # 1ed700 <internal_loopdH>
   20ff8:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   20ffb:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   20ffe:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   21006:	48 8d 05 73 c6 1c 00 	lea    rax,[rip+0x1cc673]        # 1ed680 <internal_loop37>
   2100d:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   21010:	29 c2                	sub    edx,eax
   21012:	89 d0                	mov    eax,edx
   21014:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21018:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2101d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21021:	f3 0f 7e 0d 77 3e 01 00 	movq   xmm1,QWORD PTR [rip+0x13e77]        # 34ea0 <Law_and_Order+0x600>
   21029:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2102d:	f2 0f 10 0d 93 3e 01 00 	movsd  xmm1,QWORD PTR [rip+0x13e93]        # 34ec8 <Law_and_Order+0x628>
   21035:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   21039:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2103e:	e8 ed 2a fe ff       	call   3b30 <exp@plt>
   21043:	66 48 0f 7e c0       	movq   rax,xmm0
   21048:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2104c:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   2104f:	48 83 c1 7e          	add    rcx,0x7e
   21053:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   21058:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   2105c:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   21060:	0f 86 fd fd ff ff    	jbe    20e63 <get_exp_params_ali+0x772>
   21066:	8b 05 4c 06 23 00    	mov    eax,DWORD PTR [rip+0x23064c]        # 2516b8 <james_rule>
   2106c:	85 c0                	test   eax,eax
   2106e:	74 22                	je     21092 <get_exp_params_ali+0x9a1>
   21070:	f2 0f 10 05 60 3e 01 00 	movsd  xmm0,QWORD PTR [rip+0x13e60]        # 34ed8 <Law_and_Order+0x638>
   21078:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2107d:	e8 ae 2a fe ff       	call   3b30 <exp@plt>
   21082:	66 48 0f 7e c0       	movq   rax,xmm0
   21087:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2108b:	48 89 82 08 04 00 00 	mov    QWORD PTR [rdx+0x408],rax
   21092:	8b 05 e0 c5 1c 00    	mov    eax,DWORD PTR [rip+0x1cc5e0]        # 1ed678 <bulgedH+0x78>
   21098:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2109c:	8b 15 d6 c5 1c 00    	mov    edx,DWORD PTR [rip+0x1cc5d6]        # 1ed678 <bulgedH+0x78>
   210a2:	8b 05 50 c5 1c 00    	mov    eax,DWORD PTR [rip+0x1cc550]        # 1ed5f8 <bulge37+0x78>
   210a8:	29 c2                	sub    edx,eax
   210aa:	89 d0                	mov    eax,edx
   210ac:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   210b0:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   210b5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   210b9:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   210be:	c7 45 a0 1f 00 00 00 	mov    DWORD PTR [rbp-0x60],0x1f
   210c5:	e9 8a 00 00 00       	jmp    21154 <get_exp_params_ali+0xa63>
   210ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   210ce:	f2 0f 10 a0 c8 3f 06 00 	movsd  xmm4,QWORD PTR [rax+0x63fc8]
   210d6:	f2 0f 11 65 80       	movsd  QWORD PTR [rbp-0x80],xmm4
   210db:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   210de:	48 85 c0             	test   rax,rax
   210e1:	78 07                	js     210ea <get_exp_params_ali+0x9f9>
   210e3:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   210e8:	eb 15                	jmp    210ff <get_exp_params_ali+0xa0e>
   210ea:	48 89 c2             	mov    rdx,rax
   210ed:	48 d1 ea             	shr    rdx,1
   210f0:	83 e0 01             	and    eax,0x1
   210f3:	48 09 c2             	or     rdx,rax
   210f6:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   210fb:	f2 0f 58 c0          	addsd  xmm0,xmm0
   210ff:	f2 0f 10 0d b1 3d 01 00 	movsd  xmm1,QWORD PTR [rip+0x13db1]        # 34eb8 <Law_and_Order+0x618>
   21107:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2110b:	e8 10 27 fe ff       	call   3820 <log@plt>
   21110:	f2 0f 59 45 80       	mulsd  xmm0,QWORD PTR [rbp-0x80]
   21115:	f2 0f 58 45 d8       	addsd  xmm0,QWORD PTR [rbp-0x28]
   2111a:	f3 0f 7e 0d 7e 3d 01 00 	movq   xmm1,QWORD PTR [rip+0x13d7e]        # 34ea0 <Law_and_Order+0x600>
   21122:	66 0f 57 c8          	xorpd  xmm1,xmm0
   21126:	f2 0f 10 05 9a 3d 01 00 	movsd  xmm0,QWORD PTR [rip+0x13d9a]        # 34ec8 <Law_and_Order+0x628>
   2112e:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   21132:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   21137:	e8 f4 29 fe ff       	call   3b30 <exp@plt>
   2113c:	66 48 0f 7e c0       	movq   rax,xmm0
   21141:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   21145:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   21148:	48 83 c1 60          	add    rcx,0x60
   2114c:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   21150:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   21154:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   21158:	0f 86 6c ff ff ff    	jbe    210ca <get_exp_params_ali+0x9d9>
   2115e:	8b 05 14 c6 1c 00    	mov    eax,DWORD PTR [rip+0x1cc614]        # 1ed778 <internal_loopdH+0x78>
   21164:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21168:	8b 15 0a c6 1c 00    	mov    edx,DWORD PTR [rip+0x1cc60a]        # 1ed778 <internal_loopdH+0x78>
   2116e:	8b 05 84 c5 1c 00    	mov    eax,DWORD PTR [rip+0x1cc584]        # 1ed6f8 <internal_loop37+0x78>
   21174:	29 c2                	sub    edx,eax
   21176:	89 d0                	mov    eax,edx
   21178:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2117c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21181:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21185:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   2118a:	c7 45 a0 1f 00 00 00 	mov    DWORD PTR [rbp-0x60],0x1f
   21191:	e9 8b 00 00 00       	jmp    21221 <get_exp_params_ali+0xb30>
   21196:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2119a:	f2 0f 10 b0 c8 3f 06 00 	movsd  xmm6,QWORD PTR [rax+0x63fc8]
   211a2:	f2 0f 11 75 80       	movsd  QWORD PTR [rbp-0x80],xmm6
   211a7:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   211aa:	48 85 c0             	test   rax,rax
   211ad:	78 07                	js     211b6 <get_exp_params_ali+0xac5>
   211af:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   211b4:	eb 15                	jmp    211cb <get_exp_params_ali+0xada>
   211b6:	48 89 c2             	mov    rdx,rax
   211b9:	48 d1 ea             	shr    rdx,1
   211bc:	83 e0 01             	and    eax,0x1
   211bf:	48 09 c2             	or     rdx,rax
   211c2:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   211c7:	f2 0f 58 c0          	addsd  xmm0,xmm0
   211cb:	f2 0f 10 0d e5 3c 01 00 	movsd  xmm1,QWORD PTR [rip+0x13ce5]        # 34eb8 <Law_and_Order+0x618>
   211d3:	f2 0f 5e c1          	divsd  xmm0,xmm1
   211d7:	e8 44 26 fe ff       	call   3820 <log@plt>
   211dc:	f2 0f 59 45 80       	mulsd  xmm0,QWORD PTR [rbp-0x80]
   211e1:	f2 0f 58 45 d8       	addsd  xmm0,QWORD PTR [rbp-0x28]
   211e6:	f3 0f 7e 0d b2 3c 01 00 	movq   xmm1,QWORD PTR [rip+0x13cb2]        # 34ea0 <Law_and_Order+0x600>
   211ee:	66 0f 57 c8          	xorpd  xmm1,xmm0
   211f2:	f2 0f 10 05 ce 3c 01 00 	movsd  xmm0,QWORD PTR [rip+0x13cce]        # 34ec8 <Law_and_Order+0x628>
   211fa:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   211fe:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   21203:	e8 28 29 fe ff       	call   3b30 <exp@plt>
   21208:	66 48 0f 7e c0       	movq   rax,xmm0
   2120d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   21211:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   21214:	48 83 c1 7e          	add    rcx,0x7e
   21218:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   2121d:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   21221:	83 7d a0 1e          	cmp    DWORD PTR [rbp-0x60],0x1e
   21225:	0f 86 6b ff ff ff    	jbe    21196 <get_exp_params_ali+0xaa5>
   2122b:	8b 05 f7 bf 1c 00    	mov    eax,DWORD PTR [rip+0x1cbff7]        # 1ed228 <niniodH>
   21231:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21235:	8b 15 ed bf 1c 00    	mov    edx,DWORD PTR [rip+0x1cbfed]        # 1ed228 <niniodH>
   2123b:	8b 05 e3 bf 1c 00    	mov    eax,DWORD PTR [rip+0x1cbfe3]        # 1ed224 <ninio37>
   21241:	29 c2                	sub    edx,eax
   21243:	89 d0                	mov    eax,edx
   21245:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21249:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2124e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21252:	f2 0f 11 45 d8       	movsd  QWORD PTR [rbp-0x28],xmm0
   21257:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   2125e:	e9 b7 00 00 00       	jmp    2131a <get_exp_params_ali+0xc29>
   21263:	8b 05 b7 bf 1c 00    	mov    eax,DWORD PTR [rip+0x1cbfb7]        # 1ed220 <MAX_NINIO>
   21269:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2126d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   21270:	48 85 c0             	test   rax,rax
   21273:	78 07                	js     2127c <get_exp_params_ali+0xb8b>
   21275:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   2127a:	eb 15                	jmp    21291 <get_exp_params_ali+0xba0>
   2127c:	48 89 c2             	mov    rdx,rax
   2127f:	48 d1 ea             	shr    rdx,1
   21282:	83 e0 01             	and    eax,0x1
   21285:	48 09 c2             	or     rdx,rax
   21288:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   2128d:	f2 0f 58 c0          	addsd  xmm0,xmm0
   21291:	f2 0f 59 45 d8       	mulsd  xmm0,QWORD PTR [rbp-0x28]
   21296:	66 0f 2f c1          	comisd xmm0,xmm1
   2129a:	76 18                	jbe    212b4 <get_exp_params_ali+0xbc3>
   2129c:	8b 05 7e bf 1c 00    	mov    eax,DWORD PTR [rip+0x1cbf7e]        # 1ed220 <MAX_NINIO>
   212a2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   212a6:	f3 0f 7e 0d f2 3b 01 00 	movq   xmm1,QWORD PTR [rip+0x13bf2]        # 34ea0 <Law_and_Order+0x600>
   212ae:	66 0f 57 c1          	xorpd  xmm0,xmm1
   212b2:	eb 35                	jmp    212e9 <get_exp_params_ali+0xbf8>
   212b4:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   212b7:	48 85 c0             	test   rax,rax
   212ba:	78 07                	js     212c3 <get_exp_params_ali+0xbd2>
   212bc:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
   212c1:	eb 15                	jmp    212d8 <get_exp_params_ali+0xbe7>
   212c3:	48 89 c2             	mov    rdx,rax
   212c6:	48 d1 ea             	shr    rdx,1
   212c9:	83 e0 01             	and    eax,0x1
   212cc:	48 09 c2             	or     rdx,rax
   212cf:	f2 48 0f 2a c2       	cvtsi2sd xmm0,rdx
   212d4:	f2 0f 58 c0          	addsd  xmm0,xmm0
   212d8:	f2 0f 59 45 d8       	mulsd  xmm0,QWORD PTR [rbp-0x28]
   212dd:	f3 0f 7e 0d bb 3b 01 00 	movq   xmm1,QWORD PTR [rip+0x13bbb]        # 34ea0 <Law_and_Order+0x600>
   212e5:	66 0f 57 c1          	xorpd  xmm0,xmm1
   212e9:	f2 0f 10 0d d7 3b 01 00 	movsd  xmm1,QWORD PTR [rip+0x13bd7]        # 34ec8 <Law_and_Order+0x628>
   212f1:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   212f5:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   212fa:	e8 31 28 fe ff       	call   3b30 <exp@plt>
   212ff:	66 48 0f 7e c0       	movq   rax,xmm0
   21304:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   21308:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2130b:	48 81 c1 9c c7 00 00 	add    rcx,0xc79c
   21312:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   21316:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   2131a:	83 7d a4 1e          	cmp    DWORD PTR [rbp-0x5c],0x1e
   2131e:	0f 86 3f ff ff ff    	jbe    21263 <get_exp_params_ali+0xb72>
   21324:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   2132b:	e9 01 01 00 00       	jmp    21431 <get_exp_params_ali+0xd40>
   21330:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21334:	75 6a                	jne    213a0 <get_exp_params_ali+0xcaf>
   21336:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21339:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21341:	48 8d 05 38 f0 1c 00 	lea    rax,[rip+0x1cf038]        # 1f0380 <TetraloopdH>
   21348:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2134b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2134f:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21352:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2135a:	48 8d 05 1f f0 1c 00 	lea    rax,[rip+0x1cf01f]        # 1f0380 <TetraloopdH>
   21361:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   21364:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21367:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2136f:	48 8d 05 6a ef 1c 00 	lea    rax,[rip+0x1cef6a]        # 1f02e0 <Tetraloop37>
   21376:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   21379:	29 c2                	sub    edx,eax
   2137b:	89 d0                	mov    eax,edx
   2137d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21381:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21386:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2138a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2138e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21392:	f3 0f 7e 0d 06 3b 01 00 	movq   xmm1,QWORD PTR [rip+0x13b06]        # 34ea0 <Law_and_Order+0x600>
   2139a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2139e:	eb 60                	jmp    21400 <get_exp_params_ali+0xd0f>
   213a0:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   213a3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   213ab:	48 8d 05 ce ef 1c 00 	lea    rax,[rip+0x1cefce]        # 1f0380 <TetraloopdH>
   213b2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   213b5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   213b9:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   213bc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   213c4:	48 8d 05 b5 ef 1c 00 	lea    rax,[rip+0x1cefb5]        # 1f0380 <TetraloopdH>
   213cb:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   213ce:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   213d1:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   213d9:	48 8d 05 00 ef 1c 00 	lea    rax,[rip+0x1cef00]        # 1f02e0 <Tetraloop37>
   213e0:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   213e3:	29 c2                	sub    edx,eax
   213e5:	89 d0                	mov    eax,edx
   213e7:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   213eb:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   213f0:	f2 0f 5c c1          	subsd  xmm0,xmm1
   213f4:	f3 0f 7e 0d a4 3a 01 00 	movq   xmm1,QWORD PTR [rip+0x13aa4]        # 34ea0 <Law_and_Order+0x600>
   213fc:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21400:	f2 0f 10 0d c0 3a 01 00 	movsd  xmm1,QWORD PTR [rip+0x13ac0]        # 34ec8 <Law_and_Order+0x628>
   21408:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2140c:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   21411:	e8 1a 27 fe ff       	call   3b30 <exp@plt>
   21416:	66 48 0f 7e c0       	movq   rax,xmm0
   2141b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2141f:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   21422:	48 81 c1 06 c8 00 00 	add    rcx,0xc806
   21429:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   2142d:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   21431:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21434:	89 d0                	mov    eax,edx
   21436:	c1 e0 03             	shl    eax,0x3
   21439:	29 d0                	sub    eax,edx
   2143b:	89 c3                	mov    ebx,eax
   2143d:	48 8d 3d 7c ed 1c 00 	lea    rdi,[rip+0x1ced7c]        # 1f01c0 <Tetraloops>
   21444:	e8 d7 22 fe ff       	call   3720 <strlen@plt>
   21449:	48 39 c3             	cmp    rbx,rax
   2144c:	0f 82 de fe ff ff    	jb     21330 <get_exp_params_ali+0xc3f>
   21452:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   21459:	e9 01 01 00 00       	jmp    2155f <get_exp_params_ali+0xe6e>
   2145e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21462:	75 6a                	jne    214ce <get_exp_params_ali+0xddd>
   21464:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21467:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2146f:	48 8d 05 aa ec 1c 00 	lea    rax,[rip+0x1cecaa]        # 1f0120 <TriloopdH>
   21476:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21479:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2147d:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21480:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21488:	48 8d 05 91 ec 1c 00 	lea    rax,[rip+0x1cec91]        # 1f0120 <TriloopdH>
   2148f:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   21492:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21495:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2149d:	48 8d 05 dc eb 1c 00 	lea    rax,[rip+0x1cebdc]        # 1f0080 <Triloop37>
   214a4:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   214a7:	29 c2                	sub    edx,eax
   214a9:	89 d0                	mov    eax,edx
   214ab:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   214af:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   214b4:	f2 0f 5c c1          	subsd  xmm0,xmm1
   214b8:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   214bc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   214c0:	f3 0f 7e 0d d8 39 01 00 	movq   xmm1,QWORD PTR [rip+0x139d8]        # 34ea0 <Law_and_Order+0x600>
   214c8:	66 0f 57 c1          	xorpd  xmm0,xmm1
   214cc:	eb 60                	jmp    2152e <get_exp_params_ali+0xe3d>
   214ce:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   214d1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   214d9:	48 8d 05 40 ec 1c 00 	lea    rax,[rip+0x1cec40]        # 1f0120 <TriloopdH>
   214e0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   214e3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   214e7:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   214ea:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   214f2:	48 8d 05 27 ec 1c 00 	lea    rax,[rip+0x1cec27]        # 1f0120 <TriloopdH>
   214f9:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   214fc:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   214ff:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   21507:	48 8d 05 72 eb 1c 00 	lea    rax,[rip+0x1ceb72]        # 1f0080 <Triloop37>
   2150e:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   21511:	29 c2                	sub    edx,eax
   21513:	89 d0                	mov    eax,edx
   21515:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21519:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2151e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21522:	f3 0f 7e 0d 76 39 01 00 	movq   xmm1,QWORD PTR [rip+0x13976]        # 34ea0 <Law_and_Order+0x600>
   2152a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2152e:	f2 0f 10 0d 92 39 01 00 	movsd  xmm1,QWORD PTR [rip+0x13992]        # 34ec8 <Law_and_Order+0x628>
   21536:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2153a:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2153f:	e8 ec 25 fe ff       	call   3b30 <exp@plt>
   21544:	66 48 0f 7e c0       	movq   rax,xmm0
   21549:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2154d:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   21550:	48 81 c1 2e c8 00 00 	add    rcx,0xc82e
   21557:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   2155b:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   2155f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21562:	89 d0                	mov    eax,edx
   21564:	c1 e0 02             	shl    eax,0x2
   21567:	01 d0                	add    eax,edx
   21569:	89 c3                	mov    ebx,eax
   2156b:	48 8d 3d 0e ea 1c 00 	lea    rdi,[rip+0x1cea0e]        # 1eff80 <Triloops>
   21572:	e8 a9 21 fe ff       	call   3720 <strlen@plt>
   21577:	48 39 c3             	cmp    rbx,rax
   2157a:	0f 82 de fe ff ff    	jb     2145e <get_exp_params_ali+0xd6d>
   21580:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   21587:	e9 01 01 00 00       	jmp    2168d <get_exp_params_ali+0xf9c>
   2158c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21590:	75 6a                	jne    215fc <get_exp_params_ali+0xf0b>
   21592:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21595:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2159d:	48 8d 05 9c f0 1c 00 	lea    rax,[rip+0x1cf09c]        # 1f0640 <HexaloopdH>
   215a4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   215a7:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   215ab:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   215ae:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   215b6:	48 8d 05 83 f0 1c 00 	lea    rax,[rip+0x1cf083]        # 1f0640 <HexaloopdH>
   215bd:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   215c0:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   215c3:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   215cb:	48 8d 05 ce ef 1c 00 	lea    rax,[rip+0x1cefce]        # 1f05a0 <Hexaloop37>
   215d2:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   215d5:	29 c2                	sub    edx,eax
   215d7:	89 d0                	mov    eax,edx
   215d9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   215dd:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   215e2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   215e6:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   215ea:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   215ee:	f3 0f 7e 0d aa 38 01 00 	movq   xmm1,QWORD PTR [rip+0x138aa]        # 34ea0 <Law_and_Order+0x600>
   215f6:	66 0f 57 c1          	xorpd  xmm0,xmm1
   215fa:	eb 60                	jmp    2165c <get_exp_params_ali+0xf6b>
   215fc:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   215ff:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21607:	48 8d 05 32 f0 1c 00 	lea    rax,[rip+0x1cf032]        # 1f0640 <HexaloopdH>
   2160e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21611:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21615:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21618:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21620:	48 8d 05 19 f0 1c 00 	lea    rax,[rip+0x1cf019]        # 1f0640 <HexaloopdH>
   21627:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   2162a:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   2162d:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   21635:	48 8d 05 64 ef 1c 00 	lea    rax,[rip+0x1cef64]        # 1f05a0 <Hexaloop37>
   2163c:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   2163f:	29 c2                	sub    edx,eax
   21641:	89 d0                	mov    eax,edx
   21643:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21647:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2164c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21650:	f3 0f 7e 0d 48 38 01 00 	movq   xmm1,QWORD PTR [rip+0x13848]        # 34ea0 <Law_and_Order+0x600>
   21658:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2165c:	f2 0f 10 0d 64 38 01 00 	movsd  xmm1,QWORD PTR [rip+0x13864]        # 34ec8 <Law_and_Order+0x628>
   21664:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   21668:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2166d:	e8 be 24 fe ff       	call   3b30 <exp@plt>
   21672:	66 48 0f 7e c0       	movq   rax,xmm0
   21677:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2167b:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   2167e:	48 81 c1 56 c8 00 00 	add    rcx,0xc856
   21685:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
   21689:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   2168d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21690:	89 d0                	mov    eax,edx
   21692:	c1 e0 03             	shl    eax,0x3
   21695:	01 d0                	add    eax,edx
   21697:	89 c3                	mov    ebx,eax
   21699:	48 8d 3d 80 ed 1c 00 	lea    rdi,[rip+0x1ced80]        # 1f0420 <Hexaloops>
   216a0:	e8 7b 20 fe ff       	call   3720 <strlen@plt>
   216a5:	48 39 c3             	cmp    rbx,rax
   216a8:	0f 82 de fe ff ff    	jb     2158c <get_exp_params_ali+0xe9b>
   216ae:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   216b5:	e9 a8 00 00 00       	jmp    21762 <get_exp_params_ali+0x1071>
   216ba:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   216be:	75 3d                	jne    216fd <get_exp_params_ali+0x100c>
   216c0:	8b 05 4e bb 1c 00    	mov    eax,DWORD PTR [rip+0x1cbb4e]        # 1ed214 <ML_interndH>
   216c6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   216ca:	8b 15 44 bb 1c 00    	mov    edx,DWORD PTR [rip+0x1cbb44]        # 1ed214 <ML_interndH>
   216d0:	8b 05 3a bb 1c 00    	mov    eax,DWORD PTR [rip+0x1cbb3a]        # 1ed210 <ML_intern37>
   216d6:	29 c2                	sub    edx,eax
   216d8:	89 d0                	mov    eax,edx
   216da:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   216de:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   216e3:	f2 0f 5c c1          	subsd  xmm0,xmm1
   216e7:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   216eb:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   216ef:	f3 0f 7e 0d a9 37 01 00 	movq   xmm1,QWORD PTR [rip+0x137a9]        # 34ea0 <Law_and_Order+0x600>
   216f7:	66 0f 57 c1          	xorpd  xmm0,xmm1
   216fb:	eb 33                	jmp    21730 <get_exp_params_ali+0x103f>
   216fd:	8b 05 11 bb 1c 00    	mov    eax,DWORD PTR [rip+0x1cbb11]        # 1ed214 <ML_interndH>
   21703:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21707:	8b 15 07 bb 1c 00    	mov    edx,DWORD PTR [rip+0x1cbb07]        # 1ed214 <ML_interndH>
   2170d:	8b 05 fd ba 1c 00    	mov    eax,DWORD PTR [rip+0x1cbafd]        # 1ed210 <ML_intern37>
   21713:	29 c2                	sub    edx,eax
   21715:	89 d0                	mov    eax,edx
   21717:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2171b:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21720:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21724:	f3 0f 7e 0d 74 37 01 00 	movq   xmm1,QWORD PTR [rip+0x13774]        # 34ea0 <Law_and_Order+0x600>
   2172c:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21730:	f2 0f 10 0d 90 37 01 00 	movsd  xmm1,QWORD PTR [rip+0x13790]        # 34ec8 <Law_and_Order+0x628>
   21738:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2173c:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   21741:	e8 ea 23 fe ff       	call   3b30 <exp@plt>
   21746:	66 48 0f 7e c0       	movq   rax,xmm0
   2174b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2174f:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   21752:	48 81 c1 fa c7 00 00 	add    rcx,0xc7fa
   21759:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   2175e:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   21762:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   21766:	0f 86 4e ff ff ff    	jbe    216ba <get_exp_params_ali+0xfc9>
   2176c:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   21773:	e9 93 13 00 00       	jmp    22b0b <get_exp_params_ali+0x241a>
   21778:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   2177f:	e9 79 13 00 00       	jmp    22afd <get_exp_params_ali+0x240c>
   21784:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   21788:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   2178b:	85 c0                	test   eax,eax
   2178d:	0f 84 f8 12 00 00    	je     22a8b <get_exp_params_ali+0x239a>
   21793:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21797:	0f 85 74 02 00 00    	jne    21a11 <get_exp_params_ali+0x1320>
   2179d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   217a1:	0f 85 92 00 00 00    	jne    21839 <get_exp_params_ali+0x1148>
   217a7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   217aa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   217ad:	48 89 d0             	mov    rax,rdx
   217b0:	48 c1 e0 02          	shl    rax,0x2
   217b4:	48 01 d0             	add    rax,rdx
   217b7:	48 01 c8             	add    rax,rcx
   217ba:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   217c2:	48 8d 05 77 e6 1c 00 	lea    rax,[rip+0x1ce677]        # 1efe40 <dangle5_dH>
   217c9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   217cc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   217d0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   217d3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   217d6:	48 89 d0             	mov    rax,rdx
   217d9:	48 c1 e0 02          	shl    rax,0x2
   217dd:	48 01 d0             	add    rax,rdx
   217e0:	48 01 c8             	add    rax,rcx
   217e3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   217eb:	48 8d 05 4e e6 1c 00 	lea    rax,[rip+0x1ce64e]        # 1efe40 <dangle5_dH>
   217f2:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   217f5:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   217f8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   217fb:	48 89 d0             	mov    rax,rdx
   217fe:	48 c1 e0 02          	shl    rax,0x2
   21802:	48 01 d0             	add    rax,rdx
   21805:	48 01 f0             	add    rax,rsi
   21808:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21810:	48 8d 05 e9 e4 1c 00 	lea    rax,[rip+0x1ce4e9]        # 1efd00 <dangle5_37>
   21817:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2181a:	29 c1                	sub    ecx,eax
   2181c:	89 c8                	mov    eax,ecx
   2181e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21822:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21827:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2182b:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2182f:	85 c0                	test   eax,eax
   21831:	0f 9f c0             	setg   al
   21834:	e9 8f 00 00 00       	jmp    218c8 <get_exp_params_ali+0x11d7>
   21839:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2183c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2183f:	48 89 d0             	mov    rax,rdx
   21842:	48 c1 e0 02          	shl    rax,0x2
   21846:	48 01 d0             	add    rax,rdx
   21849:	48 01 c8             	add    rax,rcx
   2184c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21854:	48 8d 05 e5 e5 1c 00 	lea    rax,[rip+0x1ce5e5]        # 1efe40 <dangle5_dH>
   2185b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2185e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21862:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21865:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21868:	48 89 d0             	mov    rax,rdx
   2186b:	48 c1 e0 02          	shl    rax,0x2
   2186f:	48 01 d0             	add    rax,rdx
   21872:	48 01 c8             	add    rax,rcx
   21875:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2187d:	48 8d 05 bc e5 1c 00 	lea    rax,[rip+0x1ce5bc]        # 1efe40 <dangle5_dH>
   21884:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21887:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   2188a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2188d:	48 89 d0             	mov    rax,rdx
   21890:	48 c1 e0 02          	shl    rax,0x2
   21894:	48 01 d0             	add    rax,rdx
   21897:	48 01 f0             	add    rax,rsi
   2189a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   218a2:	48 8d 05 57 e4 1c 00 	lea    rax,[rip+0x1ce457]        # 1efd00 <dangle5_37>
   218a9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   218ac:	29 c1                	sub    ecx,eax
   218ae:	89 c8                	mov    eax,ecx
   218b0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   218b4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   218b9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   218bd:	66 0f ef c9          	pxor   xmm1,xmm1
   218c1:	66 0f 2f c1          	comisd xmm0,xmm1
   218c5:	0f 97 c0             	seta   al
   218c8:	84 c0                	test   al,al
   218ca:	74 09                	je     218d5 <get_exp_params_ali+0x11e4>
   218cc:	66 0f ef c0          	pxor   xmm0,xmm0
   218d0:	e9 fd 07 00 00       	jmp    220d2 <get_exp_params_ali+0x19e1>
   218d5:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   218d9:	0f 85 9d 00 00 00    	jne    2197c <get_exp_params_ali+0x128b>
   218df:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   218e2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   218e5:	48 89 d0             	mov    rax,rdx
   218e8:	48 c1 e0 02          	shl    rax,0x2
   218ec:	48 01 d0             	add    rax,rdx
   218ef:	48 01 c8             	add    rax,rcx
   218f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   218fa:	48 8d 05 3f e5 1c 00 	lea    rax,[rip+0x1ce53f]        # 1efe40 <dangle5_dH>
   21901:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21904:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21908:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2190b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2190e:	48 89 d0             	mov    rax,rdx
   21911:	48 c1 e0 02          	shl    rax,0x2
   21915:	48 01 d0             	add    rax,rdx
   21918:	48 01 c8             	add    rax,rcx
   2191b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21923:	48 8d 05 16 e5 1c 00 	lea    rax,[rip+0x1ce516]        # 1efe40 <dangle5_dH>
   2192a:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2192d:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21930:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21933:	48 89 d0             	mov    rax,rdx
   21936:	48 c1 e0 02          	shl    rax,0x2
   2193a:	48 01 d0             	add    rax,rdx
   2193d:	48 01 f0             	add    rax,rsi
   21940:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21948:	48 8d 05 b1 e3 1c 00 	lea    rax,[rip+0x1ce3b1]        # 1efd00 <dangle5_37>
   2194f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21952:	29 c1                	sub    ecx,eax
   21954:	89 c8                	mov    eax,ecx
   21956:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2195a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2195f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21963:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   21967:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2196b:	f3 0f 7e 0d 2d 35 01 00 	movq   xmm1,QWORD PTR [rip+0x1352d]        # 34ea0 <Law_and_Order+0x600>
   21973:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21977:	e9 56 07 00 00       	jmp    220d2 <get_exp_params_ali+0x19e1>
   2197c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2197f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21982:	48 89 d0             	mov    rax,rdx
   21985:	48 c1 e0 02          	shl    rax,0x2
   21989:	48 01 d0             	add    rax,rdx
   2198c:	48 01 c8             	add    rax,rcx
   2198f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21997:	48 8d 05 a2 e4 1c 00 	lea    rax,[rip+0x1ce4a2]        # 1efe40 <dangle5_dH>
   2199e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   219a1:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   219a5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   219a8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   219ab:	48 89 d0             	mov    rax,rdx
   219ae:	48 c1 e0 02          	shl    rax,0x2
   219b2:	48 01 d0             	add    rax,rdx
   219b5:	48 01 c8             	add    rax,rcx
   219b8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   219c0:	48 8d 05 79 e4 1c 00 	lea    rax,[rip+0x1ce479]        # 1efe40 <dangle5_dH>
   219c7:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   219ca:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   219cd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   219d0:	48 89 d0             	mov    rax,rdx
   219d3:	48 c1 e0 02          	shl    rax,0x2
   219d7:	48 01 d0             	add    rax,rdx
   219da:	48 01 f0             	add    rax,rsi
   219dd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   219e5:	48 8d 05 14 e3 1c 00 	lea    rax,[rip+0x1ce314]        # 1efd00 <dangle5_37>
   219ec:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   219ef:	29 c1                	sub    ecx,eax
   219f1:	89 c8                	mov    eax,ecx
   219f3:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   219f7:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   219fc:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21a00:	f3 0f 7e 0d 98 34 01 00 	movq   xmm1,QWORD PTR [rip+0x13498]        # 34ea0 <Law_and_Order+0x600>
   21a08:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21a0c:	e9 c1 06 00 00       	jmp    220d2 <get_exp_params_ali+0x19e1>
   21a11:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21a15:	0f 85 9d 00 00 00    	jne    21ab8 <get_exp_params_ali+0x13c7>
   21a1b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21a1e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21a21:	48 89 d0             	mov    rax,rdx
   21a24:	48 c1 e0 02          	shl    rax,0x2
   21a28:	48 01 d0             	add    rax,rdx
   21a2b:	48 01 c8             	add    rax,rcx
   21a2e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21a36:	48 8d 05 03 e4 1c 00 	lea    rax,[rip+0x1ce403]        # 1efe40 <dangle5_dH>
   21a3d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21a40:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21a44:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21a47:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21a4a:	48 89 d0             	mov    rax,rdx
   21a4d:	48 c1 e0 02          	shl    rax,0x2
   21a51:	48 01 d0             	add    rax,rdx
   21a54:	48 01 c8             	add    rax,rcx
   21a57:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21a5f:	48 8d 05 da e3 1c 00 	lea    rax,[rip+0x1ce3da]        # 1efe40 <dangle5_dH>
   21a66:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21a69:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21a6c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21a6f:	48 89 d0             	mov    rax,rdx
   21a72:	48 c1 e0 02          	shl    rax,0x2
   21a76:	48 01 d0             	add    rax,rdx
   21a79:	48 01 f0             	add    rax,rsi
   21a7c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21a84:	48 8d 05 75 e2 1c 00 	lea    rax,[rip+0x1ce275]        # 1efd00 <dangle5_37>
   21a8b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21a8e:	29 c1                	sub    ecx,eax
   21a90:	89 c8                	mov    eax,ecx
   21a92:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21a96:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21a9b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21a9f:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   21aa3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21aa7:	f3 0f 7e 0d f1 33 01 00 	movq   xmm1,QWORD PTR [rip+0x133f1]        # 34ea0 <Law_and_Order+0x600>
   21aaf:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21ab3:	e9 90 00 00 00       	jmp    21b48 <get_exp_params_ali+0x1457>
   21ab8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21abb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21abe:	48 89 d0             	mov    rax,rdx
   21ac1:	48 c1 e0 02          	shl    rax,0x2
   21ac5:	48 01 d0             	add    rax,rdx
   21ac8:	48 01 c8             	add    rax,rcx
   21acb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21ad3:	48 8d 05 66 e3 1c 00 	lea    rax,[rip+0x1ce366]        # 1efe40 <dangle5_dH>
   21ada:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21add:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21ae1:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21ae4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21ae7:	48 89 d0             	mov    rax,rdx
   21aea:	48 c1 e0 02          	shl    rax,0x2
   21aee:	48 01 d0             	add    rax,rdx
   21af1:	48 01 c8             	add    rax,rcx
   21af4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21afc:	48 8d 05 3d e3 1c 00 	lea    rax,[rip+0x1ce33d]        # 1efe40 <dangle5_dH>
   21b03:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21b06:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21b09:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21b0c:	48 89 d0             	mov    rax,rdx
   21b0f:	48 c1 e0 02          	shl    rax,0x2
   21b13:	48 01 d0             	add    rax,rdx
   21b16:	48 01 f0             	add    rax,rsi
   21b19:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21b21:	48 8d 05 d8 e1 1c 00 	lea    rax,[rip+0x1ce1d8]        # 1efd00 <dangle5_37>
   21b28:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21b2b:	29 c1                	sub    ecx,eax
   21b2d:	89 c8                	mov    eax,ecx
   21b2f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21b33:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21b38:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21b3c:	f3 0f 7e 0d 5c 33 01 00 	movq   xmm1,QWORD PTR [rip+0x1335c]        # 34ea0 <Law_and_Order+0x600>
   21b44:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21b48:	f2 0f 10 0d 78 33 01 00 	movsd  xmm1,QWORD PTR [rip+0x13378]        # 34ec8 <Law_and_Order+0x628>
   21b50:	f2 0f 5e c1          	divsd  xmm0,xmm1
   21b54:	66 0f 28 c8          	movapd xmm1,xmm0
   21b58:	f2 0f 10 05 80 33 01 00 	movsd  xmm0,QWORD PTR [rip+0x13380]        # 34ee0 <Law_and_Order+0x640>
   21b60:	66 0f 2f c1          	comisd xmm0,xmm1
   21b64:	76 09                	jbe    21b6f <get_exp_params_ali+0x147e>
   21b66:	66 0f ef c0          	pxor   xmm0,xmm0
   21b6a:	e9 63 05 00 00       	jmp    220d2 <get_exp_params_ali+0x19e1>
   21b6f:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21b73:	0f 85 9d 00 00 00    	jne    21c16 <get_exp_params_ali+0x1525>
   21b79:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21b7c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21b7f:	48 89 d0             	mov    rax,rdx
   21b82:	48 c1 e0 02          	shl    rax,0x2
   21b86:	48 01 d0             	add    rax,rdx
   21b89:	48 01 c8             	add    rax,rcx
   21b8c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21b94:	48 8d 05 a5 e2 1c 00 	lea    rax,[rip+0x1ce2a5]        # 1efe40 <dangle5_dH>
   21b9b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21b9e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21ba2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21ba5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21ba8:	48 89 d0             	mov    rax,rdx
   21bab:	48 c1 e0 02          	shl    rax,0x2
   21baf:	48 01 d0             	add    rax,rdx
   21bb2:	48 01 c8             	add    rax,rcx
   21bb5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21bbd:	48 8d 05 7c e2 1c 00 	lea    rax,[rip+0x1ce27c]        # 1efe40 <dangle5_dH>
   21bc4:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21bc7:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21bca:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21bcd:	48 89 d0             	mov    rax,rdx
   21bd0:	48 c1 e0 02          	shl    rax,0x2
   21bd4:	48 01 d0             	add    rax,rdx
   21bd7:	48 01 f0             	add    rax,rsi
   21bda:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21be2:	48 8d 05 17 e1 1c 00 	lea    rax,[rip+0x1ce117]        # 1efd00 <dangle5_37>
   21be9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21bec:	29 c1                	sub    ecx,eax
   21bee:	89 c8                	mov    eax,ecx
   21bf0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21bf4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21bf9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21bfd:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   21c01:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21c05:	f3 0f 7e 0d 93 32 01 00 	movq   xmm1,QWORD PTR [rip+0x13293]        # 34ea0 <Law_and_Order+0x600>
   21c0d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21c11:	e9 90 00 00 00       	jmp    21ca6 <get_exp_params_ali+0x15b5>
   21c16:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21c19:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21c1c:	48 89 d0             	mov    rax,rdx
   21c1f:	48 c1 e0 02          	shl    rax,0x2
   21c23:	48 01 d0             	add    rax,rdx
   21c26:	48 01 c8             	add    rax,rcx
   21c29:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21c31:	48 8d 05 08 e2 1c 00 	lea    rax,[rip+0x1ce208]        # 1efe40 <dangle5_dH>
   21c38:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21c3b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21c3f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21c42:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21c45:	48 89 d0             	mov    rax,rdx
   21c48:	48 c1 e0 02          	shl    rax,0x2
   21c4c:	48 01 d0             	add    rax,rdx
   21c4f:	48 01 c8             	add    rax,rcx
   21c52:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21c5a:	48 8d 05 df e1 1c 00 	lea    rax,[rip+0x1ce1df]        # 1efe40 <dangle5_dH>
   21c61:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21c64:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21c67:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21c6a:	48 89 d0             	mov    rax,rdx
   21c6d:	48 c1 e0 02          	shl    rax,0x2
   21c71:	48 01 d0             	add    rax,rdx
   21c74:	48 01 f0             	add    rax,rsi
   21c77:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21c7f:	48 8d 05 7a e0 1c 00 	lea    rax,[rip+0x1ce07a]        # 1efd00 <dangle5_37>
   21c86:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21c89:	29 c1                	sub    ecx,eax
   21c8b:	89 c8                	mov    eax,ecx
   21c8d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21c91:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21c96:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21c9a:	f3 0f 7e 0d fe 31 01 00 	movq   xmm1,QWORD PTR [rip+0x131fe]        # 34ea0 <Law_and_Order+0x600>
   21ca2:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21ca6:	f2 0f 10 0d 1a 32 01 00 	movsd  xmm1,QWORD PTR [rip+0x1321a]        # 34ec8 <Law_and_Order+0x628>
   21cae:	f2 0f 5e c1          	divsd  xmm0,xmm1
   21cb2:	66 0f 2f 05 2e 32 01 00 	comisd xmm0,QWORD PTR [rip+0x1322e]        # 34ee8 <Law_and_Order+0x648>
   21cba:	0f 86 3c 01 00 00    	jbe    21dfc <get_exp_params_ali+0x170b>
   21cc0:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21cc4:	0f 85 9d 00 00 00    	jne    21d67 <get_exp_params_ali+0x1676>
   21cca:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21ccd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21cd0:	48 89 d0             	mov    rax,rdx
   21cd3:	48 c1 e0 02          	shl    rax,0x2
   21cd7:	48 01 d0             	add    rax,rdx
   21cda:	48 01 c8             	add    rax,rcx
   21cdd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21ce5:	48 8d 05 54 e1 1c 00 	lea    rax,[rip+0x1ce154]        # 1efe40 <dangle5_dH>
   21cec:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21cef:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21cf3:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21cf6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21cf9:	48 89 d0             	mov    rax,rdx
   21cfc:	48 c1 e0 02          	shl    rax,0x2
   21d00:	48 01 d0             	add    rax,rdx
   21d03:	48 01 c8             	add    rax,rcx
   21d06:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21d0e:	48 8d 05 2b e1 1c 00 	lea    rax,[rip+0x1ce12b]        # 1efe40 <dangle5_dH>
   21d15:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21d18:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21d1b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21d1e:	48 89 d0             	mov    rax,rdx
   21d21:	48 c1 e0 02          	shl    rax,0x2
   21d25:	48 01 d0             	add    rax,rdx
   21d28:	48 01 f0             	add    rax,rsi
   21d2b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21d33:	48 8d 05 c6 df 1c 00 	lea    rax,[rip+0x1cdfc6]        # 1efd00 <dangle5_37>
   21d3a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21d3d:	29 c1                	sub    ecx,eax
   21d3f:	89 c8                	mov    eax,ecx
   21d41:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21d45:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21d4a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21d4e:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   21d52:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21d56:	f3 0f 7e 0d 42 31 01 00 	movq   xmm1,QWORD PTR [rip+0x13142]        # 34ea0 <Law_and_Order+0x600>
   21d5e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21d62:	e9 6b 03 00 00       	jmp    220d2 <get_exp_params_ali+0x19e1>
   21d67:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21d6a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21d6d:	48 89 d0             	mov    rax,rdx
   21d70:	48 c1 e0 02          	shl    rax,0x2
   21d74:	48 01 d0             	add    rax,rdx
   21d77:	48 01 c8             	add    rax,rcx
   21d7a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21d82:	48 8d 05 b7 e0 1c 00 	lea    rax,[rip+0x1ce0b7]        # 1efe40 <dangle5_dH>
   21d89:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21d8c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21d90:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21d93:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21d96:	48 89 d0             	mov    rax,rdx
   21d99:	48 c1 e0 02          	shl    rax,0x2
   21d9d:	48 01 d0             	add    rax,rdx
   21da0:	48 01 c8             	add    rax,rcx
   21da3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21dab:	48 8d 05 8e e0 1c 00 	lea    rax,[rip+0x1ce08e]        # 1efe40 <dangle5_dH>
   21db2:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21db5:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21db8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21dbb:	48 89 d0             	mov    rax,rdx
   21dbe:	48 c1 e0 02          	shl    rax,0x2
   21dc2:	48 01 d0             	add    rax,rdx
   21dc5:	48 01 f0             	add    rax,rsi
   21dc8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21dd0:	48 8d 05 29 df 1c 00 	lea    rax,[rip+0x1cdf29]        # 1efd00 <dangle5_37>
   21dd7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21dda:	29 c1                	sub    ecx,eax
   21ddc:	89 c8                	mov    eax,ecx
   21dde:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21de2:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21de7:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21deb:	f3 0f 7e 0d ad 30 01 00 	movq   xmm1,QWORD PTR [rip+0x130ad]        # 34ea0 <Law_and_Order+0x600>
   21df3:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21df7:	e9 d6 02 00 00       	jmp    220d2 <get_exp_params_ali+0x19e1>
   21dfc:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21e00:	0f 85 9d 00 00 00    	jne    21ea3 <get_exp_params_ali+0x17b2>
   21e06:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21e09:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21e0c:	48 89 d0             	mov    rax,rdx
   21e0f:	48 c1 e0 02          	shl    rax,0x2
   21e13:	48 01 d0             	add    rax,rdx
   21e16:	48 01 c8             	add    rax,rcx
   21e19:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21e21:	48 8d 05 18 e0 1c 00 	lea    rax,[rip+0x1ce018]        # 1efe40 <dangle5_dH>
   21e28:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21e2b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21e2f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21e32:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21e35:	48 89 d0             	mov    rax,rdx
   21e38:	48 c1 e0 02          	shl    rax,0x2
   21e3c:	48 01 d0             	add    rax,rdx
   21e3f:	48 01 c8             	add    rax,rcx
   21e42:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21e4a:	48 8d 05 ef df 1c 00 	lea    rax,[rip+0x1cdfef]        # 1efe40 <dangle5_dH>
   21e51:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21e54:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21e57:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21e5a:	48 89 d0             	mov    rax,rdx
   21e5d:	48 c1 e0 02          	shl    rax,0x2
   21e61:	48 01 d0             	add    rax,rdx
   21e64:	48 01 f0             	add    rax,rsi
   21e67:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21e6f:	48 8d 05 8a de 1c 00 	lea    rax,[rip+0x1cde8a]        # 1efd00 <dangle5_37>
   21e76:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21e79:	29 c1                	sub    ecx,eax
   21e7b:	89 c8                	mov    eax,ecx
   21e7d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21e81:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21e86:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21e8a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   21e8e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21e92:	f3 0f 7e 0d 06 30 01 00 	movq   xmm1,QWORD PTR [rip+0x13006]        # 34ea0 <Law_and_Order+0x600>
   21e9a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21e9e:	e9 90 00 00 00       	jmp    21f33 <get_exp_params_ali+0x1842>
   21ea3:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21ea6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21ea9:	48 89 d0             	mov    rax,rdx
   21eac:	48 c1 e0 02          	shl    rax,0x2
   21eb0:	48 01 d0             	add    rax,rdx
   21eb3:	48 01 c8             	add    rax,rcx
   21eb6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21ebe:	48 8d 05 7b df 1c 00 	lea    rax,[rip+0x1cdf7b]        # 1efe40 <dangle5_dH>
   21ec5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21ec8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21ecc:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21ecf:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21ed2:	48 89 d0             	mov    rax,rdx
   21ed5:	48 c1 e0 02          	shl    rax,0x2
   21ed9:	48 01 d0             	add    rax,rdx
   21edc:	48 01 c8             	add    rax,rcx
   21edf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21ee7:	48 8d 05 52 df 1c 00 	lea    rax,[rip+0x1cdf52]        # 1efe40 <dangle5_dH>
   21eee:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21ef1:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21ef4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21ef7:	48 89 d0             	mov    rax,rdx
   21efa:	48 c1 e0 02          	shl    rax,0x2
   21efe:	48 01 d0             	add    rax,rdx
   21f01:	48 01 f0             	add    rax,rsi
   21f04:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21f0c:	48 8d 05 ed dd 1c 00 	lea    rax,[rip+0x1cdded]        # 1efd00 <dangle5_37>
   21f13:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21f16:	29 c1                	sub    ecx,eax
   21f18:	89 c8                	mov    eax,ecx
   21f1a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21f1e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21f23:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21f27:	f3 0f 7e 0d 71 2f 01 00 	movq   xmm1,QWORD PTR [rip+0x12f71]        # 34ea0 <Law_and_Order+0x600>
   21f2f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   21f33:	f2 0f 10 0d 8d 2f 01 00 	movsd  xmm1,QWORD PTR [rip+0x12f8d]        # 34ec8 <Law_and_Order+0x628>
   21f3b:	f2 0f 5e c1          	divsd  xmm0,xmm1
   21f3f:	f2 0f 10 0d a9 2f 01 00 	movsd  xmm1,QWORD PTR [rip+0x12fa9]        # 34ef0 <Law_and_Order+0x650>
   21f47:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21f4b:	e8 00 17 fe ff       	call   3650 <sin@plt>
   21f50:	f2 0f 10 0d 20 2f 01 00 	movsd  xmm1,QWORD PTR [rip+0x12f20]        # 34e78 <Law_and_Order+0x5d8>
   21f58:	f2 0f 58 c8          	addsd  xmm1,xmm0
   21f5c:	f2 0f 10 05 94 2f 01 00 	movsd  xmm0,QWORD PTR [rip+0x12f94]        # 34ef8 <Law_and_Order+0x658>
   21f64:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   21f68:	f2 0f 11 4d 80       	movsd  QWORD PTR [rbp-0x80],xmm1
   21f6d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   21f71:	0f 85 9d 00 00 00    	jne    22014 <get_exp_params_ali+0x1923>
   21f77:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21f7a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21f7d:	48 89 d0             	mov    rax,rdx
   21f80:	48 c1 e0 02          	shl    rax,0x2
   21f84:	48 01 d0             	add    rax,rdx
   21f87:	48 01 c8             	add    rax,rcx
   21f8a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21f92:	48 8d 05 a7 de 1c 00 	lea    rax,[rip+0x1cdea7]        # 1efe40 <dangle5_dH>
   21f99:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21f9c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21fa0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   21fa3:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21fa6:	48 89 d0             	mov    rax,rdx
   21fa9:	48 c1 e0 02          	shl    rax,0x2
   21fad:	48 01 d0             	add    rax,rdx
   21fb0:	48 01 c8             	add    rax,rcx
   21fb3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21fbb:	48 8d 05 7e de 1c 00 	lea    rax,[rip+0x1cde7e]        # 1efe40 <dangle5_dH>
   21fc2:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   21fc5:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   21fc8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   21fcb:	48 89 d0             	mov    rax,rdx
   21fce:	48 c1 e0 02          	shl    rax,0x2
   21fd2:	48 01 d0             	add    rax,rdx
   21fd5:	48 01 f0             	add    rax,rsi
   21fd8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   21fe0:	48 8d 05 19 dd 1c 00 	lea    rax,[rip+0x1cdd19]        # 1efd00 <dangle5_37>
   21fe7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   21fea:	29 c1                	sub    ecx,eax
   21fec:	89 c8                	mov    eax,ecx
   21fee:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   21ff2:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   21ff7:	f2 0f 5c c1          	subsd  xmm0,xmm1
   21ffb:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   21fff:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22003:	f3 0f 7e 0d 95 2e 01 00 	movq   xmm1,QWORD PTR [rip+0x12e95]        # 34ea0 <Law_and_Order+0x600>
   2200b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2200f:	e9 90 00 00 00       	jmp    220a4 <get_exp_params_ali+0x19b3>
   22014:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22017:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2201a:	48 89 d0             	mov    rax,rdx
   2201d:	48 c1 e0 02          	shl    rax,0x2
   22021:	48 01 d0             	add    rax,rdx
   22024:	48 01 c8             	add    rax,rcx
   22027:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2202f:	48 8d 05 0a de 1c 00 	lea    rax,[rip+0x1cde0a]        # 1efe40 <dangle5_dH>
   22036:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22039:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2203d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22040:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22043:	48 89 d0             	mov    rax,rdx
   22046:	48 c1 e0 02          	shl    rax,0x2
   2204a:	48 01 d0             	add    rax,rdx
   2204d:	48 01 c8             	add    rax,rcx
   22050:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22058:	48 8d 05 e1 dd 1c 00 	lea    rax,[rip+0x1cdde1]        # 1efe40 <dangle5_dH>
   2205f:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22062:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22065:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22068:	48 89 d0             	mov    rax,rdx
   2206b:	48 c1 e0 02          	shl    rax,0x2
   2206f:	48 01 d0             	add    rax,rdx
   22072:	48 01 f0             	add    rax,rsi
   22075:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2207d:	48 8d 05 7c dc 1c 00 	lea    rax,[rip+0x1cdc7c]        # 1efd00 <dangle5_37>
   22084:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22087:	29 c1                	sub    ecx,eax
   22089:	89 c8                	mov    eax,ecx
   2208b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2208f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22094:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22098:	f3 0f 7e 0d 00 2e 01 00 	movq   xmm1,QWORD PTR [rip+0x12e00]        # 34ea0 <Law_and_Order+0x600>
   220a0:	66 0f 57 c1          	xorpd  xmm0,xmm1
   220a4:	f2 0f 10 0d 1c 2e 01 00 	movsd  xmm1,QWORD PTR [rip+0x12e1c]        # 34ec8 <Law_and_Order+0x628>
   220ac:	f2 0f 5e c1          	divsd  xmm0,xmm1
   220b0:	f2 0f 10 0d 38 2e 01 00 	movsd  xmm1,QWORD PTR [rip+0x12e38]        # 34ef0 <Law_and_Order+0x650>
   220b8:	f2 0f 5c c1          	subsd  xmm0,xmm1
   220bc:	e8 8f 15 fe ff       	call   3650 <sin@plt>
   220c1:	f2 0f 10 0d af 2d 01 00 	movsd  xmm1,QWORD PTR [rip+0x12daf]        # 34e78 <Law_and_Order+0x5d8>
   220c9:	f2 0f 58 c1          	addsd  xmm0,xmm1
   220cd:	f2 0f 59 45 80       	mulsd  xmm0,QWORD PTR [rbp-0x80]
   220d2:	f2 0f 10 0d ee 2d 01 00 	movsd  xmm1,QWORD PTR [rip+0x12dee]        # 34ec8 <Law_and_Order+0x628>
   220da:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   220de:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   220e3:	e8 48 1a fe ff       	call   3b30 <exp@plt>
   220e8:	66 48 0f 7e c1       	movq   rcx,xmm0
   220ed:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   220f1:	8b 7d a4             	mov    edi,DWORD PTR [rbp-0x5c]
   220f4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   220f7:	48 89 d0             	mov    rax,rdx
   220fa:	48 c1 e0 02          	shl    rax,0x2
   220fe:	48 01 d0             	add    rax,rdx
   22101:	48 01 f8             	add    rax,rdi
   22104:	48 05 4e 05 00 00    	add    rax,0x54e
   2210a:	48 89 0c c6          	mov    QWORD PTR [rsi+rax*8],rcx
   2210e:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   22112:	0f 85 74 02 00 00    	jne    2238c <get_exp_params_ali+0x1c9b>
   22118:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2211c:	0f 85 92 00 00 00    	jne    221b4 <get_exp_params_ali+0x1ac3>
   22122:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22125:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22128:	48 89 d0             	mov    rax,rdx
   2212b:	48 c1 e0 02          	shl    rax,0x2
   2212f:	48 01 d0             	add    rax,rdx
   22132:	48 01 c8             	add    rax,rcx
   22135:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2213d:	48 8d 05 9c dd 1c 00 	lea    rax,[rip+0x1cdd9c]        # 1efee0 <dangle3_dH>
   22144:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22147:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2214b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2214e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22151:	48 89 d0             	mov    rax,rdx
   22154:	48 c1 e0 02          	shl    rax,0x2
   22158:	48 01 d0             	add    rax,rdx
   2215b:	48 01 c8             	add    rax,rcx
   2215e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22166:	48 8d 05 73 dd 1c 00 	lea    rax,[rip+0x1cdd73]        # 1efee0 <dangle3_dH>
   2216d:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22170:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22173:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22176:	48 89 d0             	mov    rax,rdx
   22179:	48 c1 e0 02          	shl    rax,0x2
   2217d:	48 01 d0             	add    rax,rdx
   22180:	48 01 f0             	add    rax,rsi
   22183:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2218b:	48 8d 05 0e dc 1c 00 	lea    rax,[rip+0x1cdc0e]        # 1efda0 <dangle3_37>
   22192:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22195:	29 c1                	sub    ecx,eax
   22197:	89 c8                	mov    eax,ecx
   22199:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2219d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   221a2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   221a6:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   221aa:	85 c0                	test   eax,eax
   221ac:	0f 9f c0             	setg   al
   221af:	e9 8f 00 00 00       	jmp    22243 <get_exp_params_ali+0x1b52>
   221b4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   221b7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   221ba:	48 89 d0             	mov    rax,rdx
   221bd:	48 c1 e0 02          	shl    rax,0x2
   221c1:	48 01 d0             	add    rax,rdx
   221c4:	48 01 c8             	add    rax,rcx
   221c7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   221cf:	48 8d 05 0a dd 1c 00 	lea    rax,[rip+0x1cdd0a]        # 1efee0 <dangle3_dH>
   221d6:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   221d9:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   221dd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   221e0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   221e3:	48 89 d0             	mov    rax,rdx
   221e6:	48 c1 e0 02          	shl    rax,0x2
   221ea:	48 01 d0             	add    rax,rdx
   221ed:	48 01 c8             	add    rax,rcx
   221f0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   221f8:	48 8d 05 e1 dc 1c 00 	lea    rax,[rip+0x1cdce1]        # 1efee0 <dangle3_dH>
   221ff:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22202:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22205:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22208:	48 89 d0             	mov    rax,rdx
   2220b:	48 c1 e0 02          	shl    rax,0x2
   2220f:	48 01 d0             	add    rax,rdx
   22212:	48 01 f0             	add    rax,rsi
   22215:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2221d:	48 8d 05 7c db 1c 00 	lea    rax,[rip+0x1cdb7c]        # 1efda0 <dangle3_37>
   22224:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22227:	29 c1                	sub    ecx,eax
   22229:	89 c8                	mov    eax,ecx
   2222b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2222f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22234:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22238:	66 0f ef c9          	pxor   xmm1,xmm1
   2223c:	66 0f 2f c1          	comisd xmm0,xmm1
   22240:	0f 97 c0             	seta   al
   22243:	84 c0                	test   al,al
   22245:	74 09                	je     22250 <get_exp_params_ali+0x1b5f>
   22247:	66 0f ef c0          	pxor   xmm0,xmm0
   2224b:	e9 fd 07 00 00       	jmp    22a4d <get_exp_params_ali+0x235c>
   22250:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   22254:	0f 85 9d 00 00 00    	jne    222f7 <get_exp_params_ali+0x1c06>
   2225a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2225d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22260:	48 89 d0             	mov    rax,rdx
   22263:	48 c1 e0 02          	shl    rax,0x2
   22267:	48 01 d0             	add    rax,rdx
   2226a:	48 01 c8             	add    rax,rcx
   2226d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22275:	48 8d 05 64 dc 1c 00 	lea    rax,[rip+0x1cdc64]        # 1efee0 <dangle3_dH>
   2227c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2227f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22283:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22286:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22289:	48 89 d0             	mov    rax,rdx
   2228c:	48 c1 e0 02          	shl    rax,0x2
   22290:	48 01 d0             	add    rax,rdx
   22293:	48 01 c8             	add    rax,rcx
   22296:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2229e:	48 8d 05 3b dc 1c 00 	lea    rax,[rip+0x1cdc3b]        # 1efee0 <dangle3_dH>
   222a5:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   222a8:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   222ab:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   222ae:	48 89 d0             	mov    rax,rdx
   222b1:	48 c1 e0 02          	shl    rax,0x2
   222b5:	48 01 d0             	add    rax,rdx
   222b8:	48 01 f0             	add    rax,rsi
   222bb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   222c3:	48 8d 05 d6 da 1c 00 	lea    rax,[rip+0x1cdad6]        # 1efda0 <dangle3_37>
   222ca:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   222cd:	29 c1                	sub    ecx,eax
   222cf:	89 c8                	mov    eax,ecx
   222d1:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   222d5:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   222da:	f2 0f 5c c1          	subsd  xmm0,xmm1
   222de:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   222e2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   222e6:	f3 0f 7e 0d b2 2b 01 00 	movq   xmm1,QWORD PTR [rip+0x12bb2]        # 34ea0 <Law_and_Order+0x600>
   222ee:	66 0f 57 c1          	xorpd  xmm0,xmm1
   222f2:	e9 56 07 00 00       	jmp    22a4d <get_exp_params_ali+0x235c>
   222f7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   222fa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   222fd:	48 89 d0             	mov    rax,rdx
   22300:	48 c1 e0 02          	shl    rax,0x2
   22304:	48 01 d0             	add    rax,rdx
   22307:	48 01 c8             	add    rax,rcx
   2230a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22312:	48 8d 05 c7 db 1c 00 	lea    rax,[rip+0x1cdbc7]        # 1efee0 <dangle3_dH>
   22319:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2231c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22320:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22323:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22326:	48 89 d0             	mov    rax,rdx
   22329:	48 c1 e0 02          	shl    rax,0x2
   2232d:	48 01 d0             	add    rax,rdx
   22330:	48 01 c8             	add    rax,rcx
   22333:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2233b:	48 8d 05 9e db 1c 00 	lea    rax,[rip+0x1cdb9e]        # 1efee0 <dangle3_dH>
   22342:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22345:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22348:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2234b:	48 89 d0             	mov    rax,rdx
   2234e:	48 c1 e0 02          	shl    rax,0x2
   22352:	48 01 d0             	add    rax,rdx
   22355:	48 01 f0             	add    rax,rsi
   22358:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22360:	48 8d 05 39 da 1c 00 	lea    rax,[rip+0x1cda39]        # 1efda0 <dangle3_37>
   22367:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2236a:	29 c1                	sub    ecx,eax
   2236c:	89 c8                	mov    eax,ecx
   2236e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22372:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22377:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2237b:	f3 0f 7e 0d 1d 2b 01 00 	movq   xmm1,QWORD PTR [rip+0x12b1d]        # 34ea0 <Law_and_Order+0x600>
   22383:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22387:	e9 c1 06 00 00       	jmp    22a4d <get_exp_params_ali+0x235c>
   2238c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   22390:	0f 85 9d 00 00 00    	jne    22433 <get_exp_params_ali+0x1d42>
   22396:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22399:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2239c:	48 89 d0             	mov    rax,rdx
   2239f:	48 c1 e0 02          	shl    rax,0x2
   223a3:	48 01 d0             	add    rax,rdx
   223a6:	48 01 c8             	add    rax,rcx
   223a9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   223b1:	48 8d 05 28 db 1c 00 	lea    rax,[rip+0x1cdb28]        # 1efee0 <dangle3_dH>
   223b8:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   223bb:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   223bf:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   223c2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   223c5:	48 89 d0             	mov    rax,rdx
   223c8:	48 c1 e0 02          	shl    rax,0x2
   223cc:	48 01 d0             	add    rax,rdx
   223cf:	48 01 c8             	add    rax,rcx
   223d2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   223da:	48 8d 05 ff da 1c 00 	lea    rax,[rip+0x1cdaff]        # 1efee0 <dangle3_dH>
   223e1:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   223e4:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   223e7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   223ea:	48 89 d0             	mov    rax,rdx
   223ed:	48 c1 e0 02          	shl    rax,0x2
   223f1:	48 01 d0             	add    rax,rdx
   223f4:	48 01 f0             	add    rax,rsi
   223f7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   223ff:	48 8d 05 9a d9 1c 00 	lea    rax,[rip+0x1cd99a]        # 1efda0 <dangle3_37>
   22406:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22409:	29 c1                	sub    ecx,eax
   2240b:	89 c8                	mov    eax,ecx
   2240d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22411:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22416:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2241a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2241e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22422:	f3 0f 7e 0d 76 2a 01 00 	movq   xmm1,QWORD PTR [rip+0x12a76]        # 34ea0 <Law_and_Order+0x600>
   2242a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2242e:	e9 90 00 00 00       	jmp    224c3 <get_exp_params_ali+0x1dd2>
   22433:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22436:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22439:	48 89 d0             	mov    rax,rdx
   2243c:	48 c1 e0 02          	shl    rax,0x2
   22440:	48 01 d0             	add    rax,rdx
   22443:	48 01 c8             	add    rax,rcx
   22446:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2244e:	48 8d 05 8b da 1c 00 	lea    rax,[rip+0x1cda8b]        # 1efee0 <dangle3_dH>
   22455:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22458:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2245c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2245f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22462:	48 89 d0             	mov    rax,rdx
   22465:	48 c1 e0 02          	shl    rax,0x2
   22469:	48 01 d0             	add    rax,rdx
   2246c:	48 01 c8             	add    rax,rcx
   2246f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22477:	48 8d 05 62 da 1c 00 	lea    rax,[rip+0x1cda62]        # 1efee0 <dangle3_dH>
   2247e:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22481:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22484:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22487:	48 89 d0             	mov    rax,rdx
   2248a:	48 c1 e0 02          	shl    rax,0x2
   2248e:	48 01 d0             	add    rax,rdx
   22491:	48 01 f0             	add    rax,rsi
   22494:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2249c:	48 8d 05 fd d8 1c 00 	lea    rax,[rip+0x1cd8fd]        # 1efda0 <dangle3_37>
   224a3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   224a6:	29 c1                	sub    ecx,eax
   224a8:	89 c8                	mov    eax,ecx
   224aa:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   224ae:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   224b3:	f2 0f 5c c1          	subsd  xmm0,xmm1
   224b7:	f3 0f 7e 0d e1 29 01 00 	movq   xmm1,QWORD PTR [rip+0x129e1]        # 34ea0 <Law_and_Order+0x600>
   224bf:	66 0f 57 c1          	xorpd  xmm0,xmm1
   224c3:	f2 0f 10 0d fd 29 01 00 	movsd  xmm1,QWORD PTR [rip+0x129fd]        # 34ec8 <Law_and_Order+0x628>
   224cb:	f2 0f 5e c1          	divsd  xmm0,xmm1
   224cf:	66 0f 28 c8          	movapd xmm1,xmm0
   224d3:	f2 0f 10 05 05 2a 01 00 	movsd  xmm0,QWORD PTR [rip+0x12a05]        # 34ee0 <Law_and_Order+0x640>
   224db:	66 0f 2f c1          	comisd xmm0,xmm1
   224df:	76 09                	jbe    224ea <get_exp_params_ali+0x1df9>
   224e1:	66 0f ef c0          	pxor   xmm0,xmm0
   224e5:	e9 63 05 00 00       	jmp    22a4d <get_exp_params_ali+0x235c>
   224ea:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   224ee:	0f 85 9d 00 00 00    	jne    22591 <get_exp_params_ali+0x1ea0>
   224f4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   224f7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   224fa:	48 89 d0             	mov    rax,rdx
   224fd:	48 c1 e0 02          	shl    rax,0x2
   22501:	48 01 d0             	add    rax,rdx
   22504:	48 01 c8             	add    rax,rcx
   22507:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2250f:	48 8d 05 ca d9 1c 00 	lea    rax,[rip+0x1cd9ca]        # 1efee0 <dangle3_dH>
   22516:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22519:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2251d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22520:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22523:	48 89 d0             	mov    rax,rdx
   22526:	48 c1 e0 02          	shl    rax,0x2
   2252a:	48 01 d0             	add    rax,rdx
   2252d:	48 01 c8             	add    rax,rcx
   22530:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22538:	48 8d 05 a1 d9 1c 00 	lea    rax,[rip+0x1cd9a1]        # 1efee0 <dangle3_dH>
   2253f:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22542:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22545:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22548:	48 89 d0             	mov    rax,rdx
   2254b:	48 c1 e0 02          	shl    rax,0x2
   2254f:	48 01 d0             	add    rax,rdx
   22552:	48 01 f0             	add    rax,rsi
   22555:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2255d:	48 8d 05 3c d8 1c 00 	lea    rax,[rip+0x1cd83c]        # 1efda0 <dangle3_37>
   22564:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22567:	29 c1                	sub    ecx,eax
   22569:	89 c8                	mov    eax,ecx
   2256b:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2256f:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22574:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22578:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2257c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22580:	f3 0f 7e 0d 18 29 01 00 	movq   xmm1,QWORD PTR [rip+0x12918]        # 34ea0 <Law_and_Order+0x600>
   22588:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2258c:	e9 90 00 00 00       	jmp    22621 <get_exp_params_ali+0x1f30>
   22591:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22594:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22597:	48 89 d0             	mov    rax,rdx
   2259a:	48 c1 e0 02          	shl    rax,0x2
   2259e:	48 01 d0             	add    rax,rdx
   225a1:	48 01 c8             	add    rax,rcx
   225a4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   225ac:	48 8d 05 2d d9 1c 00 	lea    rax,[rip+0x1cd92d]        # 1efee0 <dangle3_dH>
   225b3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   225b6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   225ba:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   225bd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   225c0:	48 89 d0             	mov    rax,rdx
   225c3:	48 c1 e0 02          	shl    rax,0x2
   225c7:	48 01 d0             	add    rax,rdx
   225ca:	48 01 c8             	add    rax,rcx
   225cd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   225d5:	48 8d 05 04 d9 1c 00 	lea    rax,[rip+0x1cd904]        # 1efee0 <dangle3_dH>
   225dc:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   225df:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   225e2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   225e5:	48 89 d0             	mov    rax,rdx
   225e8:	48 c1 e0 02          	shl    rax,0x2
   225ec:	48 01 d0             	add    rax,rdx
   225ef:	48 01 f0             	add    rax,rsi
   225f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   225fa:	48 8d 05 9f d7 1c 00 	lea    rax,[rip+0x1cd79f]        # 1efda0 <dangle3_37>
   22601:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22604:	29 c1                	sub    ecx,eax
   22606:	89 c8                	mov    eax,ecx
   22608:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2260c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22611:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22615:	f3 0f 7e 0d 83 28 01 00 	movq   xmm1,QWORD PTR [rip+0x12883]        # 34ea0 <Law_and_Order+0x600>
   2261d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22621:	f2 0f 10 0d 9f 28 01 00 	movsd  xmm1,QWORD PTR [rip+0x1289f]        # 34ec8 <Law_and_Order+0x628>
   22629:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2262d:	66 0f 2f 05 b3 28 01 00 	comisd xmm0,QWORD PTR [rip+0x128b3]        # 34ee8 <Law_and_Order+0x648>
   22635:	0f 86 3c 01 00 00    	jbe    22777 <get_exp_params_ali+0x2086>
   2263b:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2263f:	0f 85 9d 00 00 00    	jne    226e2 <get_exp_params_ali+0x1ff1>
   22645:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22648:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2264b:	48 89 d0             	mov    rax,rdx
   2264e:	48 c1 e0 02          	shl    rax,0x2
   22652:	48 01 d0             	add    rax,rdx
   22655:	48 01 c8             	add    rax,rcx
   22658:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22660:	48 8d 05 79 d8 1c 00 	lea    rax,[rip+0x1cd879]        # 1efee0 <dangle3_dH>
   22667:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2266a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2266e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22671:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22674:	48 89 d0             	mov    rax,rdx
   22677:	48 c1 e0 02          	shl    rax,0x2
   2267b:	48 01 d0             	add    rax,rdx
   2267e:	48 01 c8             	add    rax,rcx
   22681:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22689:	48 8d 05 50 d8 1c 00 	lea    rax,[rip+0x1cd850]        # 1efee0 <dangle3_dH>
   22690:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22693:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22696:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22699:	48 89 d0             	mov    rax,rdx
   2269c:	48 c1 e0 02          	shl    rax,0x2
   226a0:	48 01 d0             	add    rax,rdx
   226a3:	48 01 f0             	add    rax,rsi
   226a6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   226ae:	48 8d 05 eb d6 1c 00 	lea    rax,[rip+0x1cd6eb]        # 1efda0 <dangle3_37>
   226b5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   226b8:	29 c1                	sub    ecx,eax
   226ba:	89 c8                	mov    eax,ecx
   226bc:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   226c0:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   226c5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   226c9:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   226cd:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   226d1:	f3 0f 7e 0d c7 27 01 00 	movq   xmm1,QWORD PTR [rip+0x127c7]        # 34ea0 <Law_and_Order+0x600>
   226d9:	66 0f 57 c1          	xorpd  xmm0,xmm1
   226dd:	e9 6b 03 00 00       	jmp    22a4d <get_exp_params_ali+0x235c>
   226e2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   226e5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   226e8:	48 89 d0             	mov    rax,rdx
   226eb:	48 c1 e0 02          	shl    rax,0x2
   226ef:	48 01 d0             	add    rax,rdx
   226f2:	48 01 c8             	add    rax,rcx
   226f5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   226fd:	48 8d 05 dc d7 1c 00 	lea    rax,[rip+0x1cd7dc]        # 1efee0 <dangle3_dH>
   22704:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22707:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2270b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2270e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22711:	48 89 d0             	mov    rax,rdx
   22714:	48 c1 e0 02          	shl    rax,0x2
   22718:	48 01 d0             	add    rax,rdx
   2271b:	48 01 c8             	add    rax,rcx
   2271e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22726:	48 8d 05 b3 d7 1c 00 	lea    rax,[rip+0x1cd7b3]        # 1efee0 <dangle3_dH>
   2272d:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22730:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22733:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22736:	48 89 d0             	mov    rax,rdx
   22739:	48 c1 e0 02          	shl    rax,0x2
   2273d:	48 01 d0             	add    rax,rdx
   22740:	48 01 f0             	add    rax,rsi
   22743:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2274b:	48 8d 05 4e d6 1c 00 	lea    rax,[rip+0x1cd64e]        # 1efda0 <dangle3_37>
   22752:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22755:	29 c1                	sub    ecx,eax
   22757:	89 c8                	mov    eax,ecx
   22759:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2275d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22762:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22766:	f3 0f 7e 0d 32 27 01 00 	movq   xmm1,QWORD PTR [rip+0x12732]        # 34ea0 <Law_and_Order+0x600>
   2276e:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22772:	e9 d6 02 00 00       	jmp    22a4d <get_exp_params_ali+0x235c>
   22777:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2277b:	0f 85 9d 00 00 00    	jne    2281e <get_exp_params_ali+0x212d>
   22781:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22784:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22787:	48 89 d0             	mov    rax,rdx
   2278a:	48 c1 e0 02          	shl    rax,0x2
   2278e:	48 01 d0             	add    rax,rdx
   22791:	48 01 c8             	add    rax,rcx
   22794:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2279c:	48 8d 05 3d d7 1c 00 	lea    rax,[rip+0x1cd73d]        # 1efee0 <dangle3_dH>
   227a3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   227a6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   227aa:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   227ad:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   227b0:	48 89 d0             	mov    rax,rdx
   227b3:	48 c1 e0 02          	shl    rax,0x2
   227b7:	48 01 d0             	add    rax,rdx
   227ba:	48 01 c8             	add    rax,rcx
   227bd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   227c5:	48 8d 05 14 d7 1c 00 	lea    rax,[rip+0x1cd714]        # 1efee0 <dangle3_dH>
   227cc:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   227cf:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   227d2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   227d5:	48 89 d0             	mov    rax,rdx
   227d8:	48 c1 e0 02          	shl    rax,0x2
   227dc:	48 01 d0             	add    rax,rdx
   227df:	48 01 f0             	add    rax,rsi
   227e2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   227ea:	48 8d 05 af d5 1c 00 	lea    rax,[rip+0x1cd5af]        # 1efda0 <dangle3_37>
   227f1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   227f4:	29 c1                	sub    ecx,eax
   227f6:	89 c8                	mov    eax,ecx
   227f8:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   227fc:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22801:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22805:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   22809:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2280d:	f3 0f 7e 0d 8b 26 01 00 	movq   xmm1,QWORD PTR [rip+0x1268b]        # 34ea0 <Law_and_Order+0x600>
   22815:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22819:	e9 90 00 00 00       	jmp    228ae <get_exp_params_ali+0x21bd>
   2281e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22821:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22824:	48 89 d0             	mov    rax,rdx
   22827:	48 c1 e0 02          	shl    rax,0x2
   2282b:	48 01 d0             	add    rax,rdx
   2282e:	48 01 c8             	add    rax,rcx
   22831:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22839:	48 8d 05 a0 d6 1c 00 	lea    rax,[rip+0x1cd6a0]        # 1efee0 <dangle3_dH>
   22840:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22843:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22847:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2284a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2284d:	48 89 d0             	mov    rax,rdx
   22850:	48 c1 e0 02          	shl    rax,0x2
   22854:	48 01 d0             	add    rax,rdx
   22857:	48 01 c8             	add    rax,rcx
   2285a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22862:	48 8d 05 77 d6 1c 00 	lea    rax,[rip+0x1cd677]        # 1efee0 <dangle3_dH>
   22869:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2286c:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   2286f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22872:	48 89 d0             	mov    rax,rdx
   22875:	48 c1 e0 02          	shl    rax,0x2
   22879:	48 01 d0             	add    rax,rdx
   2287c:	48 01 f0             	add    rax,rsi
   2287f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22887:	48 8d 05 12 d5 1c 00 	lea    rax,[rip+0x1cd512]        # 1efda0 <dangle3_37>
   2288e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22891:	29 c1                	sub    ecx,eax
   22893:	89 c8                	mov    eax,ecx
   22895:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22899:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2289e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   228a2:	f3 0f 7e 0d f6 25 01 00 	movq   xmm1,QWORD PTR [rip+0x125f6]        # 34ea0 <Law_and_Order+0x600>
   228aa:	66 0f 57 c1          	xorpd  xmm0,xmm1
   228ae:	f2 0f 10 0d 12 26 01 00 	movsd  xmm1,QWORD PTR [rip+0x12612]        # 34ec8 <Law_and_Order+0x628>
   228b6:	f2 0f 5e c1          	divsd  xmm0,xmm1
   228ba:	f2 0f 10 0d 2e 26 01 00 	movsd  xmm1,QWORD PTR [rip+0x1262e]        # 34ef0 <Law_and_Order+0x650>
   228c2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   228c6:	e8 85 0d fe ff       	call   3650 <sin@plt>
   228cb:	f2 0f 10 0d a5 25 01 00 	movsd  xmm1,QWORD PTR [rip+0x125a5]        # 34e78 <Law_and_Order+0x5d8>
   228d3:	f2 0f 58 c8          	addsd  xmm1,xmm0
   228d7:	f2 0f 10 05 19 26 01 00 	movsd  xmm0,QWORD PTR [rip+0x12619]        # 34ef8 <Law_and_Order+0x658>
   228df:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   228e3:	f2 0f 11 4d 80       	movsd  QWORD PTR [rbp-0x80],xmm1
   228e8:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   228ec:	0f 85 9d 00 00 00    	jne    2298f <get_exp_params_ali+0x229e>
   228f2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   228f5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   228f8:	48 89 d0             	mov    rax,rdx
   228fb:	48 c1 e0 02          	shl    rax,0x2
   228ff:	48 01 d0             	add    rax,rdx
   22902:	48 01 c8             	add    rax,rcx
   22905:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2290d:	48 8d 05 cc d5 1c 00 	lea    rax,[rip+0x1cd5cc]        # 1efee0 <dangle3_dH>
   22914:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22917:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2291b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2291e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22921:	48 89 d0             	mov    rax,rdx
   22924:	48 c1 e0 02          	shl    rax,0x2
   22928:	48 01 d0             	add    rax,rdx
   2292b:	48 01 c8             	add    rax,rcx
   2292e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22936:	48 8d 05 a3 d5 1c 00 	lea    rax,[rip+0x1cd5a3]        # 1efee0 <dangle3_dH>
   2293d:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   22940:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22943:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22946:	48 89 d0             	mov    rax,rdx
   22949:	48 c1 e0 02          	shl    rax,0x2
   2294d:	48 01 d0             	add    rax,rdx
   22950:	48 01 f0             	add    rax,rsi
   22953:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2295b:	48 8d 05 3e d4 1c 00 	lea    rax,[rip+0x1cd43e]        # 1efda0 <dangle3_37>
   22962:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22965:	29 c1                	sub    ecx,eax
   22967:	89 c8                	mov    eax,ecx
   22969:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2296d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22972:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22976:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2297a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2297e:	f3 0f 7e 0d 1a 25 01 00 	movq   xmm1,QWORD PTR [rip+0x1251a]        # 34ea0 <Law_and_Order+0x600>
   22986:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2298a:	e9 90 00 00 00       	jmp    22a1f <get_exp_params_ali+0x232e>
   2298f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22992:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22995:	48 89 d0             	mov    rax,rdx
   22998:	48 c1 e0 02          	shl    rax,0x2
   2299c:	48 01 d0             	add    rax,rdx
   2299f:	48 01 c8             	add    rax,rcx
   229a2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   229aa:	48 8d 05 2f d5 1c 00 	lea    rax,[rip+0x1cd52f]        # 1efee0 <dangle3_dH>
   229b1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   229b4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   229b8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   229bb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   229be:	48 89 d0             	mov    rax,rdx
   229c1:	48 c1 e0 02          	shl    rax,0x2
   229c5:	48 01 d0             	add    rax,rdx
   229c8:	48 01 c8             	add    rax,rcx
   229cb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   229d3:	48 8d 05 06 d5 1c 00 	lea    rax,[rip+0x1cd506]        # 1efee0 <dangle3_dH>
   229da:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   229dd:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   229e0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   229e3:	48 89 d0             	mov    rax,rdx
   229e6:	48 c1 e0 02          	shl    rax,0x2
   229ea:	48 01 d0             	add    rax,rdx
   229ed:	48 01 f0             	add    rax,rsi
   229f0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   229f8:	48 8d 05 a1 d3 1c 00 	lea    rax,[rip+0x1cd3a1]        # 1efda0 <dangle3_37>
   229ff:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22a02:	29 c1                	sub    ecx,eax
   22a04:	89 c8                	mov    eax,ecx
   22a06:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22a0a:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22a0f:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22a13:	f3 0f 7e 0d 85 24 01 00 	movq   xmm1,QWORD PTR [rip+0x12485]        # 34ea0 <Law_and_Order+0x600>
   22a1b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22a1f:	f2 0f 10 0d a1 24 01 00 	movsd  xmm1,QWORD PTR [rip+0x124a1]        # 34ec8 <Law_and_Order+0x628>
   22a27:	f2 0f 5e c1          	divsd  xmm0,xmm1
   22a2b:	f2 0f 10 0d bd 24 01 00 	movsd  xmm1,QWORD PTR [rip+0x124bd]        # 34ef0 <Law_and_Order+0x650>
   22a33:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22a37:	e8 14 0c fe ff       	call   3650 <sin@plt>
   22a3c:	f2 0f 10 0d 34 24 01 00 	movsd  xmm1,QWORD PTR [rip+0x12434]        # 34e78 <Law_and_Order+0x5d8>
   22a44:	f2 0f 58 c1          	addsd  xmm0,xmm1
   22a48:	f2 0f 59 45 80       	mulsd  xmm0,QWORD PTR [rbp-0x80]
   22a4d:	f2 0f 10 0d 73 24 01 00 	movsd  xmm1,QWORD PTR [rip+0x12473]        # 34ec8 <Law_and_Order+0x628>
   22a55:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22a59:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   22a5e:	e8 cd 10 fe ff       	call   3b30 <exp@plt>
   22a63:	66 48 0f 7e c1       	movq   rcx,xmm0
   22a68:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   22a6c:	8b 7d a4             	mov    edi,DWORD PTR [rbp-0x5c]
   22a6f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22a72:	48 89 d0             	mov    rax,rdx
   22a75:	48 c1 e0 02          	shl    rax,0x2
   22a79:	48 01 d0             	add    rax,rdx
   22a7c:	48 01 f8             	add    rax,rdi
   22a7f:	48 05 76 05 00 00    	add    rax,0x576
   22a85:	48 89 0c c6          	mov    QWORD PTR [rsi+rax*8],rcx
   22a89:	eb 6e                	jmp    22af9 <get_exp_params_ali+0x2408>
   22a8b:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   22a8f:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22a92:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22a95:	48 89 d0             	mov    rax,rdx
   22a98:	48 c1 e0 02          	shl    rax,0x2
   22a9c:	48 01 d0             	add    rax,rdx
   22a9f:	48 01 f0             	add    rax,rsi
   22aa2:	48 05 4e 05 00 00    	add    rax,0x54e
   22aa8:	f2 0f 10 05 c8 23 01 00 	movsd  xmm0,QWORD PTR [rip+0x123c8]        # 34e78 <Law_and_Order+0x5d8>
   22ab0:	f2 0f 11 04 c1       	movsd  QWORD PTR [rcx+rax*8],xmm0
   22ab5:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   22ab9:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22abc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22abf:	48 89 d0             	mov    rax,rdx
   22ac2:	48 c1 e0 02          	shl    rax,0x2
   22ac6:	48 01 d0             	add    rax,rdx
   22ac9:	48 01 f0             	add    rax,rsi
   22acc:	48 05 4e 05 00 00    	add    rax,0x54e
   22ad2:	f2 0f 10 04 c1       	movsd  xmm0,QWORD PTR [rcx+rax*8]
   22ad7:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   22adb:	8b 75 a4             	mov    esi,DWORD PTR [rbp-0x5c]
   22ade:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22ae1:	48 89 d0             	mov    rax,rdx
   22ae4:	48 c1 e0 02          	shl    rax,0x2
   22ae8:	48 01 d0             	add    rax,rdx
   22aeb:	48 01 f0             	add    rax,rsi
   22aee:	48 05 76 05 00 00    	add    rax,0x576
   22af4:	f2 0f 11 04 c1       	movsd  QWORD PTR [rcx+rax*8],xmm0
   22af9:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   22afd:	83 7d a4 04          	cmp    DWORD PTR [rbp-0x5c],0x4
   22b01:	0f 86 7d ec ff ff    	jbe    21784 <get_exp_params_ali+0x1093>
   22b07:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   22b0b:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   22b0f:	0f 86 63 ec ff ff    	jbe    21778 <get_exp_params_ali+0x1087>
   22b15:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   22b1c:	e9 5f 01 00 00       	jmp    22c80 <get_exp_params_ali+0x258f>
   22b21:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   22b28:	e9 45 01 00 00       	jmp    22c72 <get_exp_params_ali+0x2581>
   22b2d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   22b31:	0f 85 88 00 00 00    	jne    22bbf <get_exp_params_ali+0x24ce>
   22b37:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   22b3a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22b3d:	48 c1 e2 03          	shl    rdx,0x3
   22b41:	48 01 d0             	add    rax,rdx
   22b44:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22b4c:	48 8d 05 2d a8 1c 00 	lea    rax,[rip+0x1ca82d]        # 1ed380 <stackdH>
   22b53:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22b56:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22b5a:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   22b5d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22b60:	48 c1 e2 03          	shl    rdx,0x3
   22b64:	48 01 d0             	add    rax,rdx
   22b67:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22b6f:	48 8d 05 0a a8 1c 00 	lea    rax,[rip+0x1ca80a]        # 1ed380 <stackdH>
   22b76:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   22b79:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   22b7c:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   22b7f:	48 c1 e1 03          	shl    rcx,0x3
   22b83:	48 01 c8             	add    rax,rcx
   22b86:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   22b8e:	48 8d 05 eb a6 1c 00 	lea    rax,[rip+0x1ca6eb]        # 1ed280 <stack37>
   22b95:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   22b98:	29 c2                	sub    edx,eax
   22b9a:	89 d0                	mov    eax,edx
   22b9c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22ba0:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22ba5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22ba9:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   22bad:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22bb1:	f3 0f 7e 0d e7 22 01 00 	movq   xmm1,QWORD PTR [rip+0x122e7]        # 34ea0 <Law_and_Order+0x600>
   22bb9:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22bbd:	eb 7e                	jmp    22c3d <get_exp_params_ali+0x254c>
   22bbf:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   22bc2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22bc5:	48 c1 e2 03          	shl    rdx,0x3
   22bc9:	48 01 d0             	add    rax,rdx
   22bcc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22bd4:	48 8d 05 a5 a7 1c 00 	lea    rax,[rip+0x1ca7a5]        # 1ed380 <stackdH>
   22bdb:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22bde:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22be2:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   22be5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22be8:	48 c1 e2 03          	shl    rdx,0x3
   22bec:	48 01 d0             	add    rax,rdx
   22bef:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22bf7:	48 8d 05 82 a7 1c 00 	lea    rax,[rip+0x1ca782]        # 1ed380 <stackdH>
   22bfe:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   22c01:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   22c04:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   22c07:	48 c1 e1 03          	shl    rcx,0x3
   22c0b:	48 01 c8             	add    rax,rcx
   22c0e:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   22c16:	48 8d 05 63 a6 1c 00 	lea    rax,[rip+0x1ca663]        # 1ed280 <stack37>
   22c1d:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   22c20:	29 c2                	sub    edx,eax
   22c22:	89 d0                	mov    eax,edx
   22c24:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22c28:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22c2d:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22c31:	f3 0f 7e 0d 67 22 01 00 	movq   xmm1,QWORD PTR [rip+0x12267]        # 34ea0 <Law_and_Order+0x600>
   22c39:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22c3d:	f2 0f 10 0d 83 22 01 00 	movsd  xmm1,QWORD PTR [rip+0x12283]        # 34ec8 <Law_and_Order+0x628>
   22c45:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22c49:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   22c4e:	e8 dd 0e fe ff       	call   3b30 <exp@plt>
   22c53:	66 48 0f 7e c0       	movq   rax,xmm0
   22c58:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   22c5c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22c5f:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   22c62:	48 c1 e6 03          	shl    rsi,0x3
   22c66:	48 01 f1             	add    rcx,rsi
   22c69:	48 89 44 ca 08       	mov    QWORD PTR [rdx+rcx*8+0x8],rax
   22c6e:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   22c72:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   22c76:	0f 86 b1 fe ff ff    	jbe    22b2d <get_exp_params_ali+0x243c>
   22c7c:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   22c80:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   22c84:	0f 86 97 fe ff ff    	jbe    22b21 <get_exp_params_ali+0x2430>
   22c8a:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   22c91:	e9 d9 25 00 00       	jmp    2526f <get_exp_params_ali+0x4b7e>
   22c96:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   22c9d:	e9 bf 25 00 00       	jmp    25261 <get_exp_params_ali+0x4b70>
   22ca2:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   22ca9:	e9 a5 25 00 00       	jmp    25253 <get_exp_params_ali+0x4b62>
   22cae:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   22cb2:	0f 85 ee 00 00 00    	jne    22da6 <get_exp_params_ali+0x26b5>
   22cb8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22cbb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22cbe:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22cc1:	48 89 d0             	mov    rax,rdx
   22cc4:	48 c1 e0 02          	shl    rax,0x2
   22cc8:	48 01 d0             	add    rax,rdx
   22ccb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22cd3:	48 01 d0             	add    rax,rdx
   22cd6:	48 89 ca             	mov    rdx,rcx
   22cd9:	48 c1 e2 02          	shl    rdx,0x2
   22cdd:	48 01 ca             	add    rdx,rcx
   22ce0:	48 01 d0             	add    rax,rdx
   22ce3:	48 01 f0             	add    rax,rsi
   22ce6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22cee:	48 8d 05 ab ad 1c 00 	lea    rax,[rip+0x1cadab]        # 1edaa0 <mismatchIdH>
   22cf5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22cf8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22cfc:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22cff:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22d02:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22d05:	48 89 d0             	mov    rax,rdx
   22d08:	48 c1 e0 02          	shl    rax,0x2
   22d0c:	48 01 d0             	add    rax,rdx
   22d0f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22d17:	48 01 d0             	add    rax,rdx
   22d1a:	48 89 ca             	mov    rdx,rcx
   22d1d:	48 c1 e2 02          	shl    rdx,0x2
   22d21:	48 01 ca             	add    rdx,rcx
   22d24:	48 01 d0             	add    rax,rdx
   22d27:	48 01 f0             	add    rax,rsi
   22d2a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22d32:	48 8d 05 67 ad 1c 00 	lea    rax,[rip+0x1cad67]        # 1edaa0 <mismatchIdH>
   22d39:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   22d3c:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   22d3f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22d42:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22d45:	48 89 d0             	mov    rax,rdx
   22d48:	48 c1 e0 02          	shl    rax,0x2
   22d4c:	48 01 d0             	add    rax,rdx
   22d4f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22d57:	48 01 d0             	add    rax,rdx
   22d5a:	48 89 ca             	mov    rdx,rcx
   22d5d:	48 c1 e2 02          	shl    rdx,0x2
   22d61:	48 01 ca             	add    rdx,rcx
   22d64:	48 01 d0             	add    rax,rdx
   22d67:	48 01 f8             	add    rax,rdi
   22d6a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22d72:	48 8d 05 07 aa 1c 00 	lea    rax,[rip+0x1caa07]        # 1ed780 <mismatchI37>
   22d79:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22d7c:	29 c6                	sub    esi,eax
   22d7e:	89 f0                	mov    eax,esi
   22d80:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22d84:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22d89:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22d8d:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   22d91:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22d95:	f3 0f 7e 0d 03 21 01 00 	movq   xmm1,QWORD PTR [rip+0x12103]        # 34ea0 <Law_and_Order+0x600>
   22d9d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22da1:	e9 e1 00 00 00       	jmp    22e87 <get_exp_params_ali+0x2796>
   22da6:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22da9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22dac:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22daf:	48 89 d0             	mov    rax,rdx
   22db2:	48 c1 e0 02          	shl    rax,0x2
   22db6:	48 01 d0             	add    rax,rdx
   22db9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22dc1:	48 01 d0             	add    rax,rdx
   22dc4:	48 89 ca             	mov    rdx,rcx
   22dc7:	48 c1 e2 02          	shl    rdx,0x2
   22dcb:	48 01 ca             	add    rdx,rcx
   22dce:	48 01 d0             	add    rax,rdx
   22dd1:	48 01 f0             	add    rax,rsi
   22dd4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22ddc:	48 8d 05 bd ac 1c 00 	lea    rax,[rip+0x1cacbd]        # 1edaa0 <mismatchIdH>
   22de3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22de6:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22dea:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22ded:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22df0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22df3:	48 89 d0             	mov    rax,rdx
   22df6:	48 c1 e0 02          	shl    rax,0x2
   22dfa:	48 01 d0             	add    rax,rdx
   22dfd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22e05:	48 01 d0             	add    rax,rdx
   22e08:	48 89 ca             	mov    rdx,rcx
   22e0b:	48 c1 e2 02          	shl    rdx,0x2
   22e0f:	48 01 ca             	add    rdx,rcx
   22e12:	48 01 d0             	add    rax,rdx
   22e15:	48 01 f0             	add    rax,rsi
   22e18:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22e20:	48 8d 05 79 ac 1c 00 	lea    rax,[rip+0x1cac79]        # 1edaa0 <mismatchIdH>
   22e27:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   22e2a:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   22e2d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22e30:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22e33:	48 89 d0             	mov    rax,rdx
   22e36:	48 c1 e0 02          	shl    rax,0x2
   22e3a:	48 01 d0             	add    rax,rdx
   22e3d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22e45:	48 01 d0             	add    rax,rdx
   22e48:	48 89 ca             	mov    rdx,rcx
   22e4b:	48 c1 e2 02          	shl    rdx,0x2
   22e4f:	48 01 ca             	add    rdx,rcx
   22e52:	48 01 d0             	add    rax,rdx
   22e55:	48 01 f8             	add    rax,rdi
   22e58:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22e60:	48 8d 05 19 a9 1c 00 	lea    rax,[rip+0x1ca919]        # 1ed780 <mismatchI37>
   22e67:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22e6a:	29 c6                	sub    esi,eax
   22e6c:	89 f0                	mov    eax,esi
   22e6e:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22e72:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22e77:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22e7b:	f3 0f 7e 0d 1d 20 01 00 	movq   xmm1,QWORD PTR [rip+0x1201d]        # 34ea0 <Law_and_Order+0x600>
   22e83:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22e87:	f2 0f 10 0d 39 20 01 00 	movsd  xmm1,QWORD PTR [rip+0x12039]        # 34ec8 <Law_and_Order+0x628>
   22e8f:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22e93:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   22e98:	e8 93 0c fe ff       	call   3b30 <exp@plt>
   22e9d:	66 48 0f 7e c6       	movq   rsi,xmm0
   22ea2:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   22ea6:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   22eaa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22ead:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22eb0:	48 89 d0             	mov    rax,rdx
   22eb3:	48 c1 e0 02          	shl    rax,0x2
   22eb7:	48 01 d0             	add    rax,rdx
   22eba:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22ec2:	48 01 d0             	add    rax,rdx
   22ec5:	48 89 ca             	mov    rdx,rcx
   22ec8:	48 c1 e2 02          	shl    rdx,0x2
   22ecc:	48 01 ca             	add    rdx,rcx
   22ecf:	48 01 d0             	add    rax,rdx
   22ed2:	4c 01 c0             	add    rax,r8
   22ed5:	48 05 66 01 00 00    	add    rax,0x166
   22edb:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   22edf:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   22ee3:	0f 85 ee 00 00 00    	jne    22fd7 <get_exp_params_ali+0x28e6>
   22ee9:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22eec:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22eef:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22ef2:	48 89 d0             	mov    rax,rdx
   22ef5:	48 c1 e0 02          	shl    rax,0x2
   22ef9:	48 01 d0             	add    rax,rdx
   22efc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22f04:	48 01 d0             	add    rax,rdx
   22f07:	48 89 ca             	mov    rdx,rcx
   22f0a:	48 c1 e2 02          	shl    rdx,0x2
   22f0e:	48 01 ca             	add    rdx,rcx
   22f11:	48 01 d0             	add    rax,rdx
   22f14:	48 01 f0             	add    rax,rsi
   22f17:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22f1f:	48 8d 05 3a be 1c 00 	lea    rax,[rip+0x1cbe3a]        # 1eed60 <mismatch1nIdH>
   22f26:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22f29:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22f2d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22f30:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22f33:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22f36:	48 89 d0             	mov    rax,rdx
   22f39:	48 c1 e0 02          	shl    rax,0x2
   22f3d:	48 01 d0             	add    rax,rdx
   22f40:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22f48:	48 01 d0             	add    rax,rdx
   22f4b:	48 89 ca             	mov    rdx,rcx
   22f4e:	48 c1 e2 02          	shl    rdx,0x2
   22f52:	48 01 ca             	add    rdx,rcx
   22f55:	48 01 d0             	add    rax,rdx
   22f58:	48 01 f0             	add    rax,rsi
   22f5b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22f63:	48 8d 05 f6 bd 1c 00 	lea    rax,[rip+0x1cbdf6]        # 1eed60 <mismatch1nIdH>
   22f6a:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   22f6d:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   22f70:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22f73:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22f76:	48 89 d0             	mov    rax,rdx
   22f79:	48 c1 e0 02          	shl    rax,0x2
   22f7d:	48 01 d0             	add    rax,rdx
   22f80:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22f88:	48 01 d0             	add    rax,rdx
   22f8b:	48 89 ca             	mov    rdx,rcx
   22f8e:	48 c1 e2 02          	shl    rdx,0x2
   22f92:	48 01 ca             	add    rdx,rcx
   22f95:	48 01 d0             	add    rax,rdx
   22f98:	48 01 f8             	add    rax,rdi
   22f9b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22fa3:	48 8d 05 96 ba 1c 00 	lea    rax,[rip+0x1cba96]        # 1eea40 <mismatch1nI37>
   22faa:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   22fad:	29 c6                	sub    esi,eax
   22faf:	89 f0                	mov    eax,esi
   22fb1:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   22fb5:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   22fba:	f2 0f 5c c1          	subsd  xmm0,xmm1
   22fbe:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   22fc2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   22fc6:	f3 0f 7e 0d d2 1e 01 00 	movq   xmm1,QWORD PTR [rip+0x11ed2]        # 34ea0 <Law_and_Order+0x600>
   22fce:	66 0f 57 c1          	xorpd  xmm0,xmm1
   22fd2:	e9 e1 00 00 00       	jmp    230b8 <get_exp_params_ali+0x29c7>
   22fd7:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   22fda:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   22fdd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   22fe0:	48 89 d0             	mov    rax,rdx
   22fe3:	48 c1 e0 02          	shl    rax,0x2
   22fe7:	48 01 d0             	add    rax,rdx
   22fea:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   22ff2:	48 01 d0             	add    rax,rdx
   22ff5:	48 89 ca             	mov    rdx,rcx
   22ff8:	48 c1 e2 02          	shl    rdx,0x2
   22ffc:	48 01 ca             	add    rdx,rcx
   22fff:	48 01 d0             	add    rax,rdx
   23002:	48 01 f0             	add    rax,rsi
   23005:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2300d:	48 8d 05 4c bd 1c 00 	lea    rax,[rip+0x1cbd4c]        # 1eed60 <mismatch1nIdH>
   23014:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23017:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2301b:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2301e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23021:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23024:	48 89 d0             	mov    rax,rdx
   23027:	48 c1 e0 02          	shl    rax,0x2
   2302b:	48 01 d0             	add    rax,rdx
   2302e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23036:	48 01 d0             	add    rax,rdx
   23039:	48 89 ca             	mov    rdx,rcx
   2303c:	48 c1 e2 02          	shl    rdx,0x2
   23040:	48 01 ca             	add    rdx,rcx
   23043:	48 01 d0             	add    rax,rdx
   23046:	48 01 f0             	add    rax,rsi
   23049:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23051:	48 8d 05 08 bd 1c 00 	lea    rax,[rip+0x1cbd08]        # 1eed60 <mismatch1nIdH>
   23058:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2305b:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   2305e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23061:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23064:	48 89 d0             	mov    rax,rdx
   23067:	48 c1 e0 02          	shl    rax,0x2
   2306b:	48 01 d0             	add    rax,rdx
   2306e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23076:	48 01 d0             	add    rax,rdx
   23079:	48 89 ca             	mov    rdx,rcx
   2307c:	48 c1 e2 02          	shl    rdx,0x2
   23080:	48 01 ca             	add    rdx,rcx
   23083:	48 01 d0             	add    rax,rdx
   23086:	48 01 f8             	add    rax,rdi
   23089:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23091:	48 8d 05 a8 b9 1c 00 	lea    rax,[rip+0x1cb9a8]        # 1eea40 <mismatch1nI37>
   23098:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2309b:	29 c6                	sub    esi,eax
   2309d:	89 f0                	mov    eax,esi
   2309f:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   230a3:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   230a8:	f2 0f 5c c1          	subsd  xmm0,xmm1
   230ac:	f3 0f 7e 0d ec 1d 01 00 	movq   xmm1,QWORD PTR [rip+0x11dec]        # 34ea0 <Law_and_Order+0x600>
   230b4:	66 0f 57 c1          	xorpd  xmm0,xmm1
   230b8:	f2 0f 10 0d 08 1e 01 00 	movsd  xmm1,QWORD PTR [rip+0x11e08]        # 34ec8 <Law_and_Order+0x628>
   230c0:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   230c4:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   230c9:	e8 62 0a fe ff       	call   3b30 <exp@plt>
   230ce:	66 48 0f 7e c6       	movq   rsi,xmm0
   230d3:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   230d7:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   230db:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   230de:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   230e1:	48 89 d0             	mov    rax,rdx
   230e4:	48 c1 e0 02          	shl    rax,0x2
   230e8:	48 01 d0             	add    rax,rdx
   230eb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   230f3:	48 01 d0             	add    rax,rdx
   230f6:	48 89 ca             	mov    rdx,rcx
   230f9:	48 c1 e2 02          	shl    rdx,0x2
   230fd:	48 01 ca             	add    rdx,rcx
   23100:	48 01 d0             	add    rax,rdx
   23103:	4c 01 c0             	add    rax,r8
   23106:	48 05 f6 02 00 00    	add    rax,0x2f6
   2310c:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   23110:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23114:	0f 85 ee 00 00 00    	jne    23208 <get_exp_params_ali+0x2b17>
   2311a:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2311d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23120:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23123:	48 89 d0             	mov    rax,rdx
   23126:	48 c1 e0 02          	shl    rax,0x2
   2312a:	48 01 d0             	add    rax,rdx
   2312d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23135:	48 01 d0             	add    rax,rdx
   23138:	48 89 ca             	mov    rdx,rcx
   2313b:	48 c1 e2 02          	shl    rdx,0x2
   2313f:	48 01 ca             	add    rdx,rcx
   23142:	48 01 d0             	add    rax,rdx
   23145:	48 01 f0             	add    rax,rsi
   23148:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23150:	48 8d 05 89 af 1c 00 	lea    rax,[rip+0x1caf89]        # 1ee0e0 <mismatchHdH>
   23157:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2315a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2315e:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23161:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23164:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23167:	48 89 d0             	mov    rax,rdx
   2316a:	48 c1 e0 02          	shl    rax,0x2
   2316e:	48 01 d0             	add    rax,rdx
   23171:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23179:	48 01 d0             	add    rax,rdx
   2317c:	48 89 ca             	mov    rdx,rcx
   2317f:	48 c1 e2 02          	shl    rdx,0x2
   23183:	48 01 ca             	add    rdx,rcx
   23186:	48 01 d0             	add    rax,rdx
   23189:	48 01 f0             	add    rax,rsi
   2318c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23194:	48 8d 05 45 af 1c 00 	lea    rax,[rip+0x1caf45]        # 1ee0e0 <mismatchHdH>
   2319b:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2319e:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   231a1:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   231a4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   231a7:	48 89 d0             	mov    rax,rdx
   231aa:	48 c1 e0 02          	shl    rax,0x2
   231ae:	48 01 d0             	add    rax,rdx
   231b1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   231b9:	48 01 d0             	add    rax,rdx
   231bc:	48 89 ca             	mov    rdx,rcx
   231bf:	48 c1 e2 02          	shl    rdx,0x2
   231c3:	48 01 ca             	add    rdx,rcx
   231c6:	48 01 d0             	add    rax,rdx
   231c9:	48 01 f8             	add    rax,rdi
   231cc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   231d4:	48 8d 05 e5 ab 1c 00 	lea    rax,[rip+0x1cabe5]        # 1eddc0 <mismatchH37>
   231db:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   231de:	29 c6                	sub    esi,eax
   231e0:	89 f0                	mov    eax,esi
   231e2:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   231e6:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   231eb:	f2 0f 5c c1          	subsd  xmm0,xmm1
   231ef:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   231f3:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   231f7:	f3 0f 7e 0d a1 1c 01 00 	movq   xmm1,QWORD PTR [rip+0x11ca1]        # 34ea0 <Law_and_Order+0x600>
   231ff:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23203:	e9 e1 00 00 00       	jmp    232e9 <get_exp_params_ali+0x2bf8>
   23208:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2320b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2320e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23211:	48 89 d0             	mov    rax,rdx
   23214:	48 c1 e0 02          	shl    rax,0x2
   23218:	48 01 d0             	add    rax,rdx
   2321b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23223:	48 01 d0             	add    rax,rdx
   23226:	48 89 ca             	mov    rdx,rcx
   23229:	48 c1 e2 02          	shl    rdx,0x2
   2322d:	48 01 ca             	add    rdx,rcx
   23230:	48 01 d0             	add    rax,rdx
   23233:	48 01 f0             	add    rax,rsi
   23236:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2323e:	48 8d 05 9b ae 1c 00 	lea    rax,[rip+0x1cae9b]        # 1ee0e0 <mismatchHdH>
   23245:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23248:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2324c:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2324f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23252:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23255:	48 89 d0             	mov    rax,rdx
   23258:	48 c1 e0 02          	shl    rax,0x2
   2325c:	48 01 d0             	add    rax,rdx
   2325f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23267:	48 01 d0             	add    rax,rdx
   2326a:	48 89 ca             	mov    rdx,rcx
   2326d:	48 c1 e2 02          	shl    rdx,0x2
   23271:	48 01 ca             	add    rdx,rcx
   23274:	48 01 d0             	add    rax,rdx
   23277:	48 01 f0             	add    rax,rsi
   2327a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23282:	48 8d 05 57 ae 1c 00 	lea    rax,[rip+0x1cae57]        # 1ee0e0 <mismatchHdH>
   23289:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2328c:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   2328f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23292:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23295:	48 89 d0             	mov    rax,rdx
   23298:	48 c1 e0 02          	shl    rax,0x2
   2329c:	48 01 d0             	add    rax,rdx
   2329f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   232a7:	48 01 d0             	add    rax,rdx
   232aa:	48 89 ca             	mov    rdx,rcx
   232ad:	48 c1 e2 02          	shl    rdx,0x2
   232b1:	48 01 ca             	add    rdx,rcx
   232b4:	48 01 d0             	add    rax,rdx
   232b7:	48 01 f8             	add    rax,rdi
   232ba:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   232c2:	48 8d 05 f7 aa 1c 00 	lea    rax,[rip+0x1caaf7]        # 1eddc0 <mismatchH37>
   232c9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   232cc:	29 c6                	sub    esi,eax
   232ce:	89 f0                	mov    eax,esi
   232d0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   232d4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   232d9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   232dd:	f3 0f 7e 0d bb 1b 01 00 	movq   xmm1,QWORD PTR [rip+0x11bbb]        # 34ea0 <Law_and_Order+0x600>
   232e5:	66 0f 57 c1          	xorpd  xmm0,xmm1
   232e9:	f2 0f 10 0d d7 1b 01 00 	movsd  xmm1,QWORD PTR [rip+0x11bd7]        # 34ec8 <Law_and_Order+0x628>
   232f1:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   232f5:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   232fa:	e8 31 08 fe ff       	call   3b30 <exp@plt>
   232ff:	66 48 0f 7e c6       	movq   rsi,xmm0
   23304:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   23308:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   2330c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2330f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23312:	48 89 d0             	mov    rax,rdx
   23315:	48 c1 e0 02          	shl    rax,0x2
   23319:	48 01 d0             	add    rax,rdx
   2331c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23324:	48 01 d0             	add    rax,rdx
   23327:	48 89 ca             	mov    rdx,rcx
   2332a:	48 c1 e2 02          	shl    rdx,0x2
   2332e:	48 01 ca             	add    rdx,rcx
   23331:	48 01 d0             	add    rax,rdx
   23334:	4c 01 c0             	add    rax,r8
   23337:	48 05 be 03 00 00    	add    rax,0x3be
   2333d:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   23341:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23345:	0f 85 ee 00 00 00    	jne    23439 <get_exp_params_ali+0x2d48>
   2334b:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2334e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23351:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23354:	48 89 d0             	mov    rax,rdx
   23357:	48 c1 e0 02          	shl    rax,0x2
   2335b:	48 01 d0             	add    rax,rdx
   2335e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23366:	48 01 d0             	add    rax,rdx
   23369:	48 89 ca             	mov    rdx,rcx
   2336c:	48 c1 e2 02          	shl    rdx,0x2
   23370:	48 01 ca             	add    rdx,rcx
   23373:	48 01 d0             	add    rax,rdx
   23376:	48 01 f0             	add    rax,rsi
   23379:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23381:	48 8d 05 18 c0 1c 00 	lea    rax,[rip+0x1cc018]        # 1ef3a0 <mismatch23IdH>
   23388:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2338b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2338f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23392:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23395:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23398:	48 89 d0             	mov    rax,rdx
   2339b:	48 c1 e0 02          	shl    rax,0x2
   2339f:	48 01 d0             	add    rax,rdx
   233a2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   233aa:	48 01 d0             	add    rax,rdx
   233ad:	48 89 ca             	mov    rdx,rcx
   233b0:	48 c1 e2 02          	shl    rdx,0x2
   233b4:	48 01 ca             	add    rdx,rcx
   233b7:	48 01 d0             	add    rax,rdx
   233ba:	48 01 f0             	add    rax,rsi
   233bd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   233c5:	48 8d 05 d4 bf 1c 00 	lea    rax,[rip+0x1cbfd4]        # 1ef3a0 <mismatch23IdH>
   233cc:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   233cf:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   233d2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   233d5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   233d8:	48 89 d0             	mov    rax,rdx
   233db:	48 c1 e0 02          	shl    rax,0x2
   233df:	48 01 d0             	add    rax,rdx
   233e2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   233ea:	48 01 d0             	add    rax,rdx
   233ed:	48 89 ca             	mov    rdx,rcx
   233f0:	48 c1 e2 02          	shl    rdx,0x2
   233f4:	48 01 ca             	add    rdx,rcx
   233f7:	48 01 d0             	add    rax,rdx
   233fa:	48 01 f8             	add    rax,rdi
   233fd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23405:	48 8d 05 74 bc 1c 00 	lea    rax,[rip+0x1cbc74]        # 1ef080 <mismatch23I37>
   2340c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2340f:	29 c6                	sub    esi,eax
   23411:	89 f0                	mov    eax,esi
   23413:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23417:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2341c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23420:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   23424:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23428:	f3 0f 7e 0d 70 1a 01 00 	movq   xmm1,QWORD PTR [rip+0x11a70]        # 34ea0 <Law_and_Order+0x600>
   23430:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23434:	e9 e1 00 00 00       	jmp    2351a <get_exp_params_ali+0x2e29>
   23439:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2343c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2343f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23442:	48 89 d0             	mov    rax,rdx
   23445:	48 c1 e0 02          	shl    rax,0x2
   23449:	48 01 d0             	add    rax,rdx
   2344c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23454:	48 01 d0             	add    rax,rdx
   23457:	48 89 ca             	mov    rdx,rcx
   2345a:	48 c1 e2 02          	shl    rdx,0x2
   2345e:	48 01 ca             	add    rdx,rcx
   23461:	48 01 d0             	add    rax,rdx
   23464:	48 01 f0             	add    rax,rsi
   23467:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2346f:	48 8d 05 2a bf 1c 00 	lea    rax,[rip+0x1cbf2a]        # 1ef3a0 <mismatch23IdH>
   23476:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23479:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2347d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23480:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23483:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23486:	48 89 d0             	mov    rax,rdx
   23489:	48 c1 e0 02          	shl    rax,0x2
   2348d:	48 01 d0             	add    rax,rdx
   23490:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23498:	48 01 d0             	add    rax,rdx
   2349b:	48 89 ca             	mov    rdx,rcx
   2349e:	48 c1 e2 02          	shl    rdx,0x2
   234a2:	48 01 ca             	add    rdx,rcx
   234a5:	48 01 d0             	add    rax,rdx
   234a8:	48 01 f0             	add    rax,rsi
   234ab:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   234b3:	48 8d 05 e6 be 1c 00 	lea    rax,[rip+0x1cbee6]        # 1ef3a0 <mismatch23IdH>
   234ba:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   234bd:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   234c0:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   234c3:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   234c6:	48 89 d0             	mov    rax,rdx
   234c9:	48 c1 e0 02          	shl    rax,0x2
   234cd:	48 01 d0             	add    rax,rdx
   234d0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   234d8:	48 01 d0             	add    rax,rdx
   234db:	48 89 ca             	mov    rdx,rcx
   234de:	48 c1 e2 02          	shl    rdx,0x2
   234e2:	48 01 ca             	add    rdx,rcx
   234e5:	48 01 d0             	add    rax,rdx
   234e8:	48 01 f8             	add    rax,rdi
   234eb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   234f3:	48 8d 05 86 bb 1c 00 	lea    rax,[rip+0x1cbb86]        # 1ef080 <mismatch23I37>
   234fa:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   234fd:	29 c6                	sub    esi,eax
   234ff:	89 f0                	mov    eax,esi
   23501:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23505:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2350a:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2350e:	f3 0f 7e 0d 8a 19 01 00 	movq   xmm1,QWORD PTR [rip+0x1198a]        # 34ea0 <Law_and_Order+0x600>
   23516:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2351a:	f2 0f 10 0d a6 19 01 00 	movsd  xmm1,QWORD PTR [rip+0x119a6]        # 34ec8 <Law_and_Order+0x628>
   23522:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   23526:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2352b:	e8 00 06 fe ff       	call   3b30 <exp@plt>
   23530:	66 48 0f 7e c6       	movq   rsi,xmm0
   23535:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   23539:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   2353d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23540:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23543:	48 89 d0             	mov    rax,rdx
   23546:	48 c1 e0 02          	shl    rax,0x2
   2354a:	48 01 d0             	add    rax,rdx
   2354d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23555:	48 01 d0             	add    rax,rdx
   23558:	48 89 ca             	mov    rdx,rcx
   2355b:	48 c1 e2 02          	shl    rdx,0x2
   2355f:	48 01 ca             	add    rdx,rcx
   23562:	48 01 d0             	add    rax,rdx
   23565:	4c 01 c0             	add    rax,r8
   23568:	48 05 2e 02 00 00    	add    rax,0x22e
   2356e:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   23572:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   23576:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   23579:	85 c0                	test   eax,eax
   2357b:	0f 84 0f 1c 00 00    	je     25190 <get_exp_params_ali+0x4a9f>
   23581:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23585:	0f 85 b8 03 00 00    	jne    23943 <get_exp_params_ali+0x3252>
   2358b:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2358f:	0f 85 e3 00 00 00    	jne    23678 <get_exp_params_ali+0x2f87>
   23595:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23598:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2359b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2359e:	48 89 d0             	mov    rax,rdx
   235a1:	48 c1 e0 02          	shl    rax,0x2
   235a5:	48 01 d0             	add    rax,rdx
   235a8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   235b0:	48 01 d0             	add    rax,rdx
   235b3:	48 89 ca             	mov    rdx,rcx
   235b6:	48 c1 e2 02          	shl    rdx,0x2
   235ba:	48 01 ca             	add    rdx,rcx
   235bd:	48 01 d0             	add    rax,rdx
   235c0:	48 01 f0             	add    rax,rsi
   235c3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   235cb:	48 8d 05 4e b1 1c 00 	lea    rax,[rip+0x1cb14e]        # 1ee720 <mismatchMdH>
   235d2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   235d5:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   235d9:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   235dc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   235df:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   235e2:	48 89 d0             	mov    rax,rdx
   235e5:	48 c1 e0 02          	shl    rax,0x2
   235e9:	48 01 d0             	add    rax,rdx
   235ec:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   235f4:	48 01 d0             	add    rax,rdx
   235f7:	48 89 ca             	mov    rdx,rcx
   235fa:	48 c1 e2 02          	shl    rdx,0x2
   235fe:	48 01 ca             	add    rdx,rcx
   23601:	48 01 d0             	add    rax,rdx
   23604:	48 01 f0             	add    rax,rsi
   23607:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2360f:	48 8d 05 0a b1 1c 00 	lea    rax,[rip+0x1cb10a]        # 1ee720 <mismatchMdH>
   23616:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23619:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   2361c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2361f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23622:	48 89 d0             	mov    rax,rdx
   23625:	48 c1 e0 02          	shl    rax,0x2
   23629:	48 01 d0             	add    rax,rdx
   2362c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23634:	48 01 d0             	add    rax,rdx
   23637:	48 89 ca             	mov    rdx,rcx
   2363a:	48 c1 e2 02          	shl    rdx,0x2
   2363e:	48 01 ca             	add    rdx,rcx
   23641:	48 01 d0             	add    rax,rdx
   23644:	48 01 f8             	add    rax,rdi
   23647:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2364f:	48 8d 05 aa ad 1c 00 	lea    rax,[rip+0x1cadaa]        # 1ee400 <mismatchM37>
   23656:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23659:	29 c6                	sub    esi,eax
   2365b:	89 f0                	mov    eax,esi
   2365d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23661:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23666:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2366a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2366e:	85 c0                	test   eax,eax
   23670:	0f 9f c0             	setg   al
   23673:	e9 e0 00 00 00       	jmp    23758 <get_exp_params_ali+0x3067>
   23678:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2367b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2367e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23681:	48 89 d0             	mov    rax,rdx
   23684:	48 c1 e0 02          	shl    rax,0x2
   23688:	48 01 d0             	add    rax,rdx
   2368b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23693:	48 01 d0             	add    rax,rdx
   23696:	48 89 ca             	mov    rdx,rcx
   23699:	48 c1 e2 02          	shl    rdx,0x2
   2369d:	48 01 ca             	add    rdx,rcx
   236a0:	48 01 d0             	add    rax,rdx
   236a3:	48 01 f0             	add    rax,rsi
   236a6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   236ae:	48 8d 05 6b b0 1c 00 	lea    rax,[rip+0x1cb06b]        # 1ee720 <mismatchMdH>
   236b5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   236b8:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   236bc:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   236bf:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   236c2:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   236c5:	48 89 d0             	mov    rax,rdx
   236c8:	48 c1 e0 02          	shl    rax,0x2
   236cc:	48 01 d0             	add    rax,rdx
   236cf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   236d7:	48 01 d0             	add    rax,rdx
   236da:	48 89 ca             	mov    rdx,rcx
   236dd:	48 c1 e2 02          	shl    rdx,0x2
   236e1:	48 01 ca             	add    rdx,rcx
   236e4:	48 01 d0             	add    rax,rdx
   236e7:	48 01 f0             	add    rax,rsi
   236ea:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   236f2:	48 8d 05 27 b0 1c 00 	lea    rax,[rip+0x1cb027]        # 1ee720 <mismatchMdH>
   236f9:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   236fc:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   236ff:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23702:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23705:	48 89 d0             	mov    rax,rdx
   23708:	48 c1 e0 02          	shl    rax,0x2
   2370c:	48 01 d0             	add    rax,rdx
   2370f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23717:	48 01 d0             	add    rax,rdx
   2371a:	48 89 ca             	mov    rdx,rcx
   2371d:	48 c1 e2 02          	shl    rdx,0x2
   23721:	48 01 ca             	add    rdx,rcx
   23724:	48 01 d0             	add    rax,rdx
   23727:	48 01 f8             	add    rax,rdi
   2372a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23732:	48 8d 05 c7 ac 1c 00 	lea    rax,[rip+0x1cacc7]        # 1ee400 <mismatchM37>
   23739:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2373c:	29 c6                	sub    esi,eax
   2373e:	89 f0                	mov    eax,esi
   23740:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23744:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23749:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2374d:	66 0f ef c9          	pxor   xmm1,xmm1
   23751:	66 0f 2f c1          	comisd xmm0,xmm1
   23755:	0f 97 c0             	seta   al
   23758:	84 c0                	test   al,al
   2375a:	74 09                	je     23765 <get_exp_params_ali+0x3074>
   2375c:	66 0f ef c0          	pxor   xmm0,xmm0
   23760:	e9 c9 0b 00 00       	jmp    2432e <get_exp_params_ali+0x3c3d>
   23765:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23769:	0f 85 ee 00 00 00    	jne    2385d <get_exp_params_ali+0x316c>
   2376f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23772:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23775:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23778:	48 89 d0             	mov    rax,rdx
   2377b:	48 c1 e0 02          	shl    rax,0x2
   2377f:	48 01 d0             	add    rax,rdx
   23782:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2378a:	48 01 d0             	add    rax,rdx
   2378d:	48 89 ca             	mov    rdx,rcx
   23790:	48 c1 e2 02          	shl    rdx,0x2
   23794:	48 01 ca             	add    rdx,rcx
   23797:	48 01 d0             	add    rax,rdx
   2379a:	48 01 f0             	add    rax,rsi
   2379d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   237a5:	48 8d 05 74 af 1c 00 	lea    rax,[rip+0x1caf74]        # 1ee720 <mismatchMdH>
   237ac:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   237af:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   237b3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   237b6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   237b9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   237bc:	48 89 d0             	mov    rax,rdx
   237bf:	48 c1 e0 02          	shl    rax,0x2
   237c3:	48 01 d0             	add    rax,rdx
   237c6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   237ce:	48 01 d0             	add    rax,rdx
   237d1:	48 89 ca             	mov    rdx,rcx
   237d4:	48 c1 e2 02          	shl    rdx,0x2
   237d8:	48 01 ca             	add    rdx,rcx
   237db:	48 01 d0             	add    rax,rdx
   237de:	48 01 f0             	add    rax,rsi
   237e1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   237e9:	48 8d 05 30 af 1c 00 	lea    rax,[rip+0x1caf30]        # 1ee720 <mismatchMdH>
   237f0:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   237f3:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   237f6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   237f9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   237fc:	48 89 d0             	mov    rax,rdx
   237ff:	48 c1 e0 02          	shl    rax,0x2
   23803:	48 01 d0             	add    rax,rdx
   23806:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2380e:	48 01 d0             	add    rax,rdx
   23811:	48 89 ca             	mov    rdx,rcx
   23814:	48 c1 e2 02          	shl    rdx,0x2
   23818:	48 01 ca             	add    rdx,rcx
   2381b:	48 01 d0             	add    rax,rdx
   2381e:	48 01 f8             	add    rax,rdi
   23821:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23829:	48 8d 05 d0 ab 1c 00 	lea    rax,[rip+0x1cabd0]        # 1ee400 <mismatchM37>
   23830:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23833:	29 c6                	sub    esi,eax
   23835:	89 f0                	mov    eax,esi
   23837:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2383b:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23840:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23844:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   23848:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2384c:	f3 0f 7e 0d 4c 16 01 00 	movq   xmm1,QWORD PTR [rip+0x1164c]        # 34ea0 <Law_and_Order+0x600>
   23854:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23858:	e9 d1 0a 00 00       	jmp    2432e <get_exp_params_ali+0x3c3d>
   2385d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23860:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23863:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23866:	48 89 d0             	mov    rax,rdx
   23869:	48 c1 e0 02          	shl    rax,0x2
   2386d:	48 01 d0             	add    rax,rdx
   23870:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23878:	48 01 d0             	add    rax,rdx
   2387b:	48 89 ca             	mov    rdx,rcx
   2387e:	48 c1 e2 02          	shl    rdx,0x2
   23882:	48 01 ca             	add    rdx,rcx
   23885:	48 01 d0             	add    rax,rdx
   23888:	48 01 f0             	add    rax,rsi
   2388b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23893:	48 8d 05 86 ae 1c 00 	lea    rax,[rip+0x1cae86]        # 1ee720 <mismatchMdH>
   2389a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2389d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   238a1:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   238a4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   238a7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   238aa:	48 89 d0             	mov    rax,rdx
   238ad:	48 c1 e0 02          	shl    rax,0x2
   238b1:	48 01 d0             	add    rax,rdx
   238b4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   238bc:	48 01 d0             	add    rax,rdx
   238bf:	48 89 ca             	mov    rdx,rcx
   238c2:	48 c1 e2 02          	shl    rdx,0x2
   238c6:	48 01 ca             	add    rdx,rcx
   238c9:	48 01 d0             	add    rax,rdx
   238cc:	48 01 f0             	add    rax,rsi
   238cf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   238d7:	48 8d 05 42 ae 1c 00 	lea    rax,[rip+0x1cae42]        # 1ee720 <mismatchMdH>
   238de:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   238e1:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   238e4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   238e7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   238ea:	48 89 d0             	mov    rax,rdx
   238ed:	48 c1 e0 02          	shl    rax,0x2
   238f1:	48 01 d0             	add    rax,rdx
   238f4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   238fc:	48 01 d0             	add    rax,rdx
   238ff:	48 89 ca             	mov    rdx,rcx
   23902:	48 c1 e2 02          	shl    rdx,0x2
   23906:	48 01 ca             	add    rdx,rcx
   23909:	48 01 d0             	add    rax,rdx
   2390c:	48 01 f8             	add    rax,rdi
   2390f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23917:	48 8d 05 e2 aa 1c 00 	lea    rax,[rip+0x1caae2]        # 1ee400 <mismatchM37>
   2391e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23921:	29 c6                	sub    esi,eax
   23923:	89 f0                	mov    eax,esi
   23925:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23929:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2392e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23932:	f3 0f 7e 0d 66 15 01 00 	movq   xmm1,QWORD PTR [rip+0x11566]        # 34ea0 <Law_and_Order+0x600>
   2393a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2393e:	e9 eb 09 00 00       	jmp    2432e <get_exp_params_ali+0x3c3d>
   23943:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23947:	0f 85 ee 00 00 00    	jne    23a3b <get_exp_params_ali+0x334a>
   2394d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23950:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23953:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23956:	48 89 d0             	mov    rax,rdx
   23959:	48 c1 e0 02          	shl    rax,0x2
   2395d:	48 01 d0             	add    rax,rdx
   23960:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23968:	48 01 d0             	add    rax,rdx
   2396b:	48 89 ca             	mov    rdx,rcx
   2396e:	48 c1 e2 02          	shl    rdx,0x2
   23972:	48 01 ca             	add    rdx,rcx
   23975:	48 01 d0             	add    rax,rdx
   23978:	48 01 f0             	add    rax,rsi
   2397b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23983:	48 8d 05 96 ad 1c 00 	lea    rax,[rip+0x1cad96]        # 1ee720 <mismatchMdH>
   2398a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2398d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23991:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23994:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23997:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2399a:	48 89 d0             	mov    rax,rdx
   2399d:	48 c1 e0 02          	shl    rax,0x2
   239a1:	48 01 d0             	add    rax,rdx
   239a4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   239ac:	48 01 d0             	add    rax,rdx
   239af:	48 89 ca             	mov    rdx,rcx
   239b2:	48 c1 e2 02          	shl    rdx,0x2
   239b6:	48 01 ca             	add    rdx,rcx
   239b9:	48 01 d0             	add    rax,rdx
   239bc:	48 01 f0             	add    rax,rsi
   239bf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   239c7:	48 8d 05 52 ad 1c 00 	lea    rax,[rip+0x1cad52]        # 1ee720 <mismatchMdH>
   239ce:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   239d1:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   239d4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   239d7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   239da:	48 89 d0             	mov    rax,rdx
   239dd:	48 c1 e0 02          	shl    rax,0x2
   239e1:	48 01 d0             	add    rax,rdx
   239e4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   239ec:	48 01 d0             	add    rax,rdx
   239ef:	48 89 ca             	mov    rdx,rcx
   239f2:	48 c1 e2 02          	shl    rdx,0x2
   239f6:	48 01 ca             	add    rdx,rcx
   239f9:	48 01 d0             	add    rax,rdx
   239fc:	48 01 f8             	add    rax,rdi
   239ff:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23a07:	48 8d 05 f2 a9 1c 00 	lea    rax,[rip+0x1ca9f2]        # 1ee400 <mismatchM37>
   23a0e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23a11:	29 c6                	sub    esi,eax
   23a13:	89 f0                	mov    eax,esi
   23a15:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23a19:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23a1e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23a22:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   23a26:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23a2a:	f3 0f 7e 0d 6e 14 01 00 	movq   xmm1,QWORD PTR [rip+0x1146e]        # 34ea0 <Law_and_Order+0x600>
   23a32:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23a36:	e9 e1 00 00 00       	jmp    23b1c <get_exp_params_ali+0x342b>
   23a3b:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23a3e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23a41:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23a44:	48 89 d0             	mov    rax,rdx
   23a47:	48 c1 e0 02          	shl    rax,0x2
   23a4b:	48 01 d0             	add    rax,rdx
   23a4e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23a56:	48 01 d0             	add    rax,rdx
   23a59:	48 89 ca             	mov    rdx,rcx
   23a5c:	48 c1 e2 02          	shl    rdx,0x2
   23a60:	48 01 ca             	add    rdx,rcx
   23a63:	48 01 d0             	add    rax,rdx
   23a66:	48 01 f0             	add    rax,rsi
   23a69:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23a71:	48 8d 05 a8 ac 1c 00 	lea    rax,[rip+0x1caca8]        # 1ee720 <mismatchMdH>
   23a78:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23a7b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23a7f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23a82:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23a85:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23a88:	48 89 d0             	mov    rax,rdx
   23a8b:	48 c1 e0 02          	shl    rax,0x2
   23a8f:	48 01 d0             	add    rax,rdx
   23a92:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23a9a:	48 01 d0             	add    rax,rdx
   23a9d:	48 89 ca             	mov    rdx,rcx
   23aa0:	48 c1 e2 02          	shl    rdx,0x2
   23aa4:	48 01 ca             	add    rdx,rcx
   23aa7:	48 01 d0             	add    rax,rdx
   23aaa:	48 01 f0             	add    rax,rsi
   23aad:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23ab5:	48 8d 05 64 ac 1c 00 	lea    rax,[rip+0x1cac64]        # 1ee720 <mismatchMdH>
   23abc:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23abf:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   23ac2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23ac5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23ac8:	48 89 d0             	mov    rax,rdx
   23acb:	48 c1 e0 02          	shl    rax,0x2
   23acf:	48 01 d0             	add    rax,rdx
   23ad2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23ada:	48 01 d0             	add    rax,rdx
   23add:	48 89 ca             	mov    rdx,rcx
   23ae0:	48 c1 e2 02          	shl    rdx,0x2
   23ae4:	48 01 ca             	add    rdx,rcx
   23ae7:	48 01 d0             	add    rax,rdx
   23aea:	48 01 f8             	add    rax,rdi
   23aed:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23af5:	48 8d 05 04 a9 1c 00 	lea    rax,[rip+0x1ca904]        # 1ee400 <mismatchM37>
   23afc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23aff:	29 c6                	sub    esi,eax
   23b01:	89 f0                	mov    eax,esi
   23b03:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23b07:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23b0c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23b10:	f3 0f 7e 0d 88 13 01 00 	movq   xmm1,QWORD PTR [rip+0x11388]        # 34ea0 <Law_and_Order+0x600>
   23b18:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23b1c:	f2 0f 10 0d a4 13 01 00 	movsd  xmm1,QWORD PTR [rip+0x113a4]        # 34ec8 <Law_and_Order+0x628>
   23b24:	f2 0f 5e c1          	divsd  xmm0,xmm1
   23b28:	66 0f 28 c8          	movapd xmm1,xmm0
   23b2c:	f2 0f 10 05 ac 13 01 00 	movsd  xmm0,QWORD PTR [rip+0x113ac]        # 34ee0 <Law_and_Order+0x640>
   23b34:	66 0f 2f c1          	comisd xmm0,xmm1
   23b38:	76 09                	jbe    23b43 <get_exp_params_ali+0x3452>
   23b3a:	66 0f ef c0          	pxor   xmm0,xmm0
   23b3e:	e9 eb 07 00 00       	jmp    2432e <get_exp_params_ali+0x3c3d>
   23b43:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23b47:	0f 85 ee 00 00 00    	jne    23c3b <get_exp_params_ali+0x354a>
   23b4d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23b50:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23b53:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23b56:	48 89 d0             	mov    rax,rdx
   23b59:	48 c1 e0 02          	shl    rax,0x2
   23b5d:	48 01 d0             	add    rax,rdx
   23b60:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23b68:	48 01 d0             	add    rax,rdx
   23b6b:	48 89 ca             	mov    rdx,rcx
   23b6e:	48 c1 e2 02          	shl    rdx,0x2
   23b72:	48 01 ca             	add    rdx,rcx
   23b75:	48 01 d0             	add    rax,rdx
   23b78:	48 01 f0             	add    rax,rsi
   23b7b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23b83:	48 8d 05 96 ab 1c 00 	lea    rax,[rip+0x1cab96]        # 1ee720 <mismatchMdH>
   23b8a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23b8d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23b91:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23b94:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23b97:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23b9a:	48 89 d0             	mov    rax,rdx
   23b9d:	48 c1 e0 02          	shl    rax,0x2
   23ba1:	48 01 d0             	add    rax,rdx
   23ba4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23bac:	48 01 d0             	add    rax,rdx
   23baf:	48 89 ca             	mov    rdx,rcx
   23bb2:	48 c1 e2 02          	shl    rdx,0x2
   23bb6:	48 01 ca             	add    rdx,rcx
   23bb9:	48 01 d0             	add    rax,rdx
   23bbc:	48 01 f0             	add    rax,rsi
   23bbf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23bc7:	48 8d 05 52 ab 1c 00 	lea    rax,[rip+0x1cab52]        # 1ee720 <mismatchMdH>
   23bce:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23bd1:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   23bd4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23bd7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23bda:	48 89 d0             	mov    rax,rdx
   23bdd:	48 c1 e0 02          	shl    rax,0x2
   23be1:	48 01 d0             	add    rax,rdx
   23be4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23bec:	48 01 d0             	add    rax,rdx
   23bef:	48 89 ca             	mov    rdx,rcx
   23bf2:	48 c1 e2 02          	shl    rdx,0x2
   23bf6:	48 01 ca             	add    rdx,rcx
   23bf9:	48 01 d0             	add    rax,rdx
   23bfc:	48 01 f8             	add    rax,rdi
   23bff:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23c07:	48 8d 05 f2 a7 1c 00 	lea    rax,[rip+0x1ca7f2]        # 1ee400 <mismatchM37>
   23c0e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23c11:	29 c6                	sub    esi,eax
   23c13:	89 f0                	mov    eax,esi
   23c15:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23c19:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23c1e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23c22:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   23c26:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23c2a:	f3 0f 7e 0d 6e 12 01 00 	movq   xmm1,QWORD PTR [rip+0x1126e]        # 34ea0 <Law_and_Order+0x600>
   23c32:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23c36:	e9 e1 00 00 00       	jmp    23d1c <get_exp_params_ali+0x362b>
   23c3b:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23c3e:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23c41:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23c44:	48 89 d0             	mov    rax,rdx
   23c47:	48 c1 e0 02          	shl    rax,0x2
   23c4b:	48 01 d0             	add    rax,rdx
   23c4e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23c56:	48 01 d0             	add    rax,rdx
   23c59:	48 89 ca             	mov    rdx,rcx
   23c5c:	48 c1 e2 02          	shl    rdx,0x2
   23c60:	48 01 ca             	add    rdx,rcx
   23c63:	48 01 d0             	add    rax,rdx
   23c66:	48 01 f0             	add    rax,rsi
   23c69:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23c71:	48 8d 05 a8 aa 1c 00 	lea    rax,[rip+0x1caaa8]        # 1ee720 <mismatchMdH>
   23c78:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23c7b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23c7f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23c82:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23c85:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23c88:	48 89 d0             	mov    rax,rdx
   23c8b:	48 c1 e0 02          	shl    rax,0x2
   23c8f:	48 01 d0             	add    rax,rdx
   23c92:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23c9a:	48 01 d0             	add    rax,rdx
   23c9d:	48 89 ca             	mov    rdx,rcx
   23ca0:	48 c1 e2 02          	shl    rdx,0x2
   23ca4:	48 01 ca             	add    rdx,rcx
   23ca7:	48 01 d0             	add    rax,rdx
   23caa:	48 01 f0             	add    rax,rsi
   23cad:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23cb5:	48 8d 05 64 aa 1c 00 	lea    rax,[rip+0x1caa64]        # 1ee720 <mismatchMdH>
   23cbc:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23cbf:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   23cc2:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23cc5:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23cc8:	48 89 d0             	mov    rax,rdx
   23ccb:	48 c1 e0 02          	shl    rax,0x2
   23ccf:	48 01 d0             	add    rax,rdx
   23cd2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23cda:	48 01 d0             	add    rax,rdx
   23cdd:	48 89 ca             	mov    rdx,rcx
   23ce0:	48 c1 e2 02          	shl    rdx,0x2
   23ce4:	48 01 ca             	add    rdx,rcx
   23ce7:	48 01 d0             	add    rax,rdx
   23cea:	48 01 f8             	add    rax,rdi
   23ced:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23cf5:	48 8d 05 04 a7 1c 00 	lea    rax,[rip+0x1ca704]        # 1ee400 <mismatchM37>
   23cfc:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23cff:	29 c6                	sub    esi,eax
   23d01:	89 f0                	mov    eax,esi
   23d03:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23d07:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23d0c:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23d10:	f3 0f 7e 0d 88 11 01 00 	movq   xmm1,QWORD PTR [rip+0x11188]        # 34ea0 <Law_and_Order+0x600>
   23d18:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23d1c:	f2 0f 10 0d a4 11 01 00 	movsd  xmm1,QWORD PTR [rip+0x111a4]        # 34ec8 <Law_and_Order+0x628>
   23d24:	f2 0f 5e c1          	divsd  xmm0,xmm1
   23d28:	66 0f 2f 05 b8 11 01 00 	comisd xmm0,QWORD PTR [rip+0x111b8]        # 34ee8 <Law_and_Order+0x648>
   23d30:	0f 86 de 01 00 00    	jbe    23f14 <get_exp_params_ali+0x3823>
   23d36:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23d3a:	0f 85 ee 00 00 00    	jne    23e2e <get_exp_params_ali+0x373d>
   23d40:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23d43:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23d46:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23d49:	48 89 d0             	mov    rax,rdx
   23d4c:	48 c1 e0 02          	shl    rax,0x2
   23d50:	48 01 d0             	add    rax,rdx
   23d53:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23d5b:	48 01 d0             	add    rax,rdx
   23d5e:	48 89 ca             	mov    rdx,rcx
   23d61:	48 c1 e2 02          	shl    rdx,0x2
   23d65:	48 01 ca             	add    rdx,rcx
   23d68:	48 01 d0             	add    rax,rdx
   23d6b:	48 01 f0             	add    rax,rsi
   23d6e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23d76:	48 8d 05 a3 a9 1c 00 	lea    rax,[rip+0x1ca9a3]        # 1ee720 <mismatchMdH>
   23d7d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23d80:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23d84:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23d87:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23d8a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23d8d:	48 89 d0             	mov    rax,rdx
   23d90:	48 c1 e0 02          	shl    rax,0x2
   23d94:	48 01 d0             	add    rax,rdx
   23d97:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23d9f:	48 01 d0             	add    rax,rdx
   23da2:	48 89 ca             	mov    rdx,rcx
   23da5:	48 c1 e2 02          	shl    rdx,0x2
   23da9:	48 01 ca             	add    rdx,rcx
   23dac:	48 01 d0             	add    rax,rdx
   23daf:	48 01 f0             	add    rax,rsi
   23db2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23dba:	48 8d 05 5f a9 1c 00 	lea    rax,[rip+0x1ca95f]        # 1ee720 <mismatchMdH>
   23dc1:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23dc4:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   23dc7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23dca:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23dcd:	48 89 d0             	mov    rax,rdx
   23dd0:	48 c1 e0 02          	shl    rax,0x2
   23dd4:	48 01 d0             	add    rax,rdx
   23dd7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23ddf:	48 01 d0             	add    rax,rdx
   23de2:	48 89 ca             	mov    rdx,rcx
   23de5:	48 c1 e2 02          	shl    rdx,0x2
   23de9:	48 01 ca             	add    rdx,rcx
   23dec:	48 01 d0             	add    rax,rdx
   23def:	48 01 f8             	add    rax,rdi
   23df2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23dfa:	48 8d 05 ff a5 1c 00 	lea    rax,[rip+0x1ca5ff]        # 1ee400 <mismatchM37>
   23e01:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23e04:	29 c6                	sub    esi,eax
   23e06:	89 f0                	mov    eax,esi
   23e08:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23e0c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23e11:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23e15:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   23e19:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23e1d:	f3 0f 7e 0d 7b 10 01 00 	movq   xmm1,QWORD PTR [rip+0x1107b]        # 34ea0 <Law_and_Order+0x600>
   23e25:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23e29:	e9 00 05 00 00       	jmp    2432e <get_exp_params_ali+0x3c3d>
   23e2e:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23e31:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23e34:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23e37:	48 89 d0             	mov    rax,rdx
   23e3a:	48 c1 e0 02          	shl    rax,0x2
   23e3e:	48 01 d0             	add    rax,rdx
   23e41:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23e49:	48 01 d0             	add    rax,rdx
   23e4c:	48 89 ca             	mov    rdx,rcx
   23e4f:	48 c1 e2 02          	shl    rdx,0x2
   23e53:	48 01 ca             	add    rdx,rcx
   23e56:	48 01 d0             	add    rax,rdx
   23e59:	48 01 f0             	add    rax,rsi
   23e5c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23e64:	48 8d 05 b5 a8 1c 00 	lea    rax,[rip+0x1ca8b5]        # 1ee720 <mismatchMdH>
   23e6b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23e6e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23e72:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23e75:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23e78:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23e7b:	48 89 d0             	mov    rax,rdx
   23e7e:	48 c1 e0 02          	shl    rax,0x2
   23e82:	48 01 d0             	add    rax,rdx
   23e85:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23e8d:	48 01 d0             	add    rax,rdx
   23e90:	48 89 ca             	mov    rdx,rcx
   23e93:	48 c1 e2 02          	shl    rdx,0x2
   23e97:	48 01 ca             	add    rdx,rcx
   23e9a:	48 01 d0             	add    rax,rdx
   23e9d:	48 01 f0             	add    rax,rsi
   23ea0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23ea8:	48 8d 05 71 a8 1c 00 	lea    rax,[rip+0x1ca871]        # 1ee720 <mismatchMdH>
   23eaf:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23eb2:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   23eb5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23eb8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23ebb:	48 89 d0             	mov    rax,rdx
   23ebe:	48 c1 e0 02          	shl    rax,0x2
   23ec2:	48 01 d0             	add    rax,rdx
   23ec5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23ecd:	48 01 d0             	add    rax,rdx
   23ed0:	48 89 ca             	mov    rdx,rcx
   23ed3:	48 c1 e2 02          	shl    rdx,0x2
   23ed7:	48 01 ca             	add    rdx,rcx
   23eda:	48 01 d0             	add    rax,rdx
   23edd:	48 01 f8             	add    rax,rdi
   23ee0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23ee8:	48 8d 05 11 a5 1c 00 	lea    rax,[rip+0x1ca511]        # 1ee400 <mismatchM37>
   23eef:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23ef2:	29 c6                	sub    esi,eax
   23ef4:	89 f0                	mov    eax,esi
   23ef6:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23efa:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23eff:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23f03:	f3 0f 7e 0d 95 0f 01 00 	movq   xmm1,QWORD PTR [rip+0x10f95]        # 34ea0 <Law_and_Order+0x600>
   23f0b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   23f0f:	e9 1a 04 00 00       	jmp    2432e <get_exp_params_ali+0x3c3d>
   23f14:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   23f18:	0f 85 ee 00 00 00    	jne    2400c <get_exp_params_ali+0x391b>
   23f1e:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23f21:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23f24:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23f27:	48 89 d0             	mov    rax,rdx
   23f2a:	48 c1 e0 02          	shl    rax,0x2
   23f2e:	48 01 d0             	add    rax,rdx
   23f31:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23f39:	48 01 d0             	add    rax,rdx
   23f3c:	48 89 ca             	mov    rdx,rcx
   23f3f:	48 c1 e2 02          	shl    rdx,0x2
   23f43:	48 01 ca             	add    rdx,rcx
   23f46:	48 01 d0             	add    rax,rdx
   23f49:	48 01 f0             	add    rax,rsi
   23f4c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23f54:	48 8d 05 c5 a7 1c 00 	lea    rax,[rip+0x1ca7c5]        # 1ee720 <mismatchMdH>
   23f5b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23f5e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23f62:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   23f65:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23f68:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23f6b:	48 89 d0             	mov    rax,rdx
   23f6e:	48 c1 e0 02          	shl    rax,0x2
   23f72:	48 01 d0             	add    rax,rdx
   23f75:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23f7d:	48 01 d0             	add    rax,rdx
   23f80:	48 89 ca             	mov    rdx,rcx
   23f83:	48 c1 e2 02          	shl    rdx,0x2
   23f87:	48 01 ca             	add    rdx,rcx
   23f8a:	48 01 d0             	add    rax,rdx
   23f8d:	48 01 f0             	add    rax,rsi
   23f90:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23f98:	48 8d 05 81 a7 1c 00 	lea    rax,[rip+0x1ca781]        # 1ee720 <mismatchMdH>
   23f9f:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   23fa2:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   23fa5:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   23fa8:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   23fab:	48 89 d0             	mov    rax,rdx
   23fae:	48 c1 e0 02          	shl    rax,0x2
   23fb2:	48 01 d0             	add    rax,rdx
   23fb5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23fbd:	48 01 d0             	add    rax,rdx
   23fc0:	48 89 ca             	mov    rdx,rcx
   23fc3:	48 c1 e2 02          	shl    rdx,0x2
   23fc7:	48 01 ca             	add    rdx,rcx
   23fca:	48 01 d0             	add    rax,rdx
   23fcd:	48 01 f8             	add    rax,rdi
   23fd0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   23fd8:	48 8d 05 21 a4 1c 00 	lea    rax,[rip+0x1ca421]        # 1ee400 <mismatchM37>
   23fdf:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   23fe2:	29 c6                	sub    esi,eax
   23fe4:	89 f0                	mov    eax,esi
   23fe6:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   23fea:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   23fef:	f2 0f 5c c1          	subsd  xmm0,xmm1
   23ff3:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   23ff7:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   23ffb:	f3 0f 7e 0d 9d 0e 01 00 	movq   xmm1,QWORD PTR [rip+0x10e9d]        # 34ea0 <Law_and_Order+0x600>
   24003:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24007:	e9 e1 00 00 00       	jmp    240ed <get_exp_params_ali+0x39fc>
   2400c:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2400f:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24012:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24015:	48 89 d0             	mov    rax,rdx
   24018:	48 c1 e0 02          	shl    rax,0x2
   2401c:	48 01 d0             	add    rax,rdx
   2401f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24027:	48 01 d0             	add    rax,rdx
   2402a:	48 89 ca             	mov    rdx,rcx
   2402d:	48 c1 e2 02          	shl    rdx,0x2
   24031:	48 01 ca             	add    rdx,rcx
   24034:	48 01 d0             	add    rax,rdx
   24037:	48 01 f0             	add    rax,rsi
   2403a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24042:	48 8d 05 d7 a6 1c 00 	lea    rax,[rip+0x1ca6d7]        # 1ee720 <mismatchMdH>
   24049:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2404c:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24050:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24053:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24056:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24059:	48 89 d0             	mov    rax,rdx
   2405c:	48 c1 e0 02          	shl    rax,0x2
   24060:	48 01 d0             	add    rax,rdx
   24063:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2406b:	48 01 d0             	add    rax,rdx
   2406e:	48 89 ca             	mov    rdx,rcx
   24071:	48 c1 e2 02          	shl    rdx,0x2
   24075:	48 01 ca             	add    rdx,rcx
   24078:	48 01 d0             	add    rax,rdx
   2407b:	48 01 f0             	add    rax,rsi
   2407e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24086:	48 8d 05 93 a6 1c 00 	lea    rax,[rip+0x1ca693]        # 1ee720 <mismatchMdH>
   2408d:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24090:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24093:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24096:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24099:	48 89 d0             	mov    rax,rdx
   2409c:	48 c1 e0 02          	shl    rax,0x2
   240a0:	48 01 d0             	add    rax,rdx
   240a3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   240ab:	48 01 d0             	add    rax,rdx
   240ae:	48 89 ca             	mov    rdx,rcx
   240b1:	48 c1 e2 02          	shl    rdx,0x2
   240b5:	48 01 ca             	add    rdx,rcx
   240b8:	48 01 d0             	add    rax,rdx
   240bb:	48 01 f8             	add    rax,rdi
   240be:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   240c6:	48 8d 05 33 a3 1c 00 	lea    rax,[rip+0x1ca333]        # 1ee400 <mismatchM37>
   240cd:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   240d0:	29 c6                	sub    esi,eax
   240d2:	89 f0                	mov    eax,esi
   240d4:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   240d8:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   240dd:	f2 0f 5c c1          	subsd  xmm0,xmm1
   240e1:	f3 0f 7e 0d b7 0d 01 00 	movq   xmm1,QWORD PTR [rip+0x10db7]        # 34ea0 <Law_and_Order+0x600>
   240e9:	66 0f 57 c1          	xorpd  xmm0,xmm1
   240ed:	f2 0f 10 0d d3 0d 01 00 	movsd  xmm1,QWORD PTR [rip+0x10dd3]        # 34ec8 <Law_and_Order+0x628>
   240f5:	f2 0f 5e c1          	divsd  xmm0,xmm1
   240f9:	f2 0f 10 0d ef 0d 01 00 	movsd  xmm1,QWORD PTR [rip+0x10def]        # 34ef0 <Law_and_Order+0x650>
   24101:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24105:	e8 46 f5 fd ff       	call   3650 <sin@plt>
   2410a:	f2 0f 10 0d 66 0d 01 00 	movsd  xmm1,QWORD PTR [rip+0x10d66]        # 34e78 <Law_and_Order+0x5d8>
   24112:	f2 0f 58 c8          	addsd  xmm1,xmm0
   24116:	f2 0f 10 05 da 0d 01 00 	movsd  xmm0,QWORD PTR [rip+0x10dda]        # 34ef8 <Law_and_Order+0x658>
   2411e:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   24122:	f2 0f 11 4d 80       	movsd  QWORD PTR [rbp-0x80],xmm1
   24127:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2412b:	0f 85 ee 00 00 00    	jne    2421f <get_exp_params_ali+0x3b2e>
   24131:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24134:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24137:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2413a:	48 89 d0             	mov    rax,rdx
   2413d:	48 c1 e0 02          	shl    rax,0x2
   24141:	48 01 d0             	add    rax,rdx
   24144:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2414c:	48 01 d0             	add    rax,rdx
   2414f:	48 89 ca             	mov    rdx,rcx
   24152:	48 c1 e2 02          	shl    rdx,0x2
   24156:	48 01 ca             	add    rdx,rcx
   24159:	48 01 d0             	add    rax,rdx
   2415c:	48 01 f0             	add    rax,rsi
   2415f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24167:	48 8d 05 b2 a5 1c 00 	lea    rax,[rip+0x1ca5b2]        # 1ee720 <mismatchMdH>
   2416e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24171:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24175:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24178:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2417b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2417e:	48 89 d0             	mov    rax,rdx
   24181:	48 c1 e0 02          	shl    rax,0x2
   24185:	48 01 d0             	add    rax,rdx
   24188:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24190:	48 01 d0             	add    rax,rdx
   24193:	48 89 ca             	mov    rdx,rcx
   24196:	48 c1 e2 02          	shl    rdx,0x2
   2419a:	48 01 ca             	add    rdx,rcx
   2419d:	48 01 d0             	add    rax,rdx
   241a0:	48 01 f0             	add    rax,rsi
   241a3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   241ab:	48 8d 05 6e a5 1c 00 	lea    rax,[rip+0x1ca56e]        # 1ee720 <mismatchMdH>
   241b2:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   241b5:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   241b8:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   241bb:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   241be:	48 89 d0             	mov    rax,rdx
   241c1:	48 c1 e0 02          	shl    rax,0x2
   241c5:	48 01 d0             	add    rax,rdx
   241c8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   241d0:	48 01 d0             	add    rax,rdx
   241d3:	48 89 ca             	mov    rdx,rcx
   241d6:	48 c1 e2 02          	shl    rdx,0x2
   241da:	48 01 ca             	add    rdx,rcx
   241dd:	48 01 d0             	add    rax,rdx
   241e0:	48 01 f8             	add    rax,rdi
   241e3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   241eb:	48 8d 05 0e a2 1c 00 	lea    rax,[rip+0x1ca20e]        # 1ee400 <mismatchM37>
   241f2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   241f5:	29 c6                	sub    esi,eax
   241f7:	89 f0                	mov    eax,esi
   241f9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   241fd:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24202:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24206:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2420a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2420e:	f3 0f 7e 0d 8a 0c 01 00 	movq   xmm1,QWORD PTR [rip+0x10c8a]        # 34ea0 <Law_and_Order+0x600>
   24216:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2421a:	e9 e1 00 00 00       	jmp    24300 <get_exp_params_ali+0x3c0f>
   2421f:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24222:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24225:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24228:	48 89 d0             	mov    rax,rdx
   2422b:	48 c1 e0 02          	shl    rax,0x2
   2422f:	48 01 d0             	add    rax,rdx
   24232:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2423a:	48 01 d0             	add    rax,rdx
   2423d:	48 89 ca             	mov    rdx,rcx
   24240:	48 c1 e2 02          	shl    rdx,0x2
   24244:	48 01 ca             	add    rdx,rcx
   24247:	48 01 d0             	add    rax,rdx
   2424a:	48 01 f0             	add    rax,rsi
   2424d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24255:	48 8d 05 c4 a4 1c 00 	lea    rax,[rip+0x1ca4c4]        # 1ee720 <mismatchMdH>
   2425c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2425f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24263:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24266:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24269:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2426c:	48 89 d0             	mov    rax,rdx
   2426f:	48 c1 e0 02          	shl    rax,0x2
   24273:	48 01 d0             	add    rax,rdx
   24276:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2427e:	48 01 d0             	add    rax,rdx
   24281:	48 89 ca             	mov    rdx,rcx
   24284:	48 c1 e2 02          	shl    rdx,0x2
   24288:	48 01 ca             	add    rdx,rcx
   2428b:	48 01 d0             	add    rax,rdx
   2428e:	48 01 f0             	add    rax,rsi
   24291:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24299:	48 8d 05 80 a4 1c 00 	lea    rax,[rip+0x1ca480]        # 1ee720 <mismatchMdH>
   242a0:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   242a3:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   242a6:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   242a9:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   242ac:	48 89 d0             	mov    rax,rdx
   242af:	48 c1 e0 02          	shl    rax,0x2
   242b3:	48 01 d0             	add    rax,rdx
   242b6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   242be:	48 01 d0             	add    rax,rdx
   242c1:	48 89 ca             	mov    rdx,rcx
   242c4:	48 c1 e2 02          	shl    rdx,0x2
   242c8:	48 01 ca             	add    rdx,rcx
   242cb:	48 01 d0             	add    rax,rdx
   242ce:	48 01 f8             	add    rax,rdi
   242d1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   242d9:	48 8d 05 20 a1 1c 00 	lea    rax,[rip+0x1ca120]        # 1ee400 <mismatchM37>
   242e0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   242e3:	29 c6                	sub    esi,eax
   242e5:	89 f0                	mov    eax,esi
   242e7:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   242eb:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   242f0:	f2 0f 5c c1          	subsd  xmm0,xmm1
   242f4:	f3 0f 7e 0d a4 0b 01 00 	movq   xmm1,QWORD PTR [rip+0x10ba4]        # 34ea0 <Law_and_Order+0x600>
   242fc:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24300:	f2 0f 10 0d c0 0b 01 00 	movsd  xmm1,QWORD PTR [rip+0x10bc0]        # 34ec8 <Law_and_Order+0x628>
   24308:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2430c:	f2 0f 10 0d dc 0b 01 00 	movsd  xmm1,QWORD PTR [rip+0x10bdc]        # 34ef0 <Law_and_Order+0x650>
   24314:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24318:	e8 33 f3 fd ff       	call   3650 <sin@plt>
   2431d:	f2 0f 10 0d 53 0b 01 00 	movsd  xmm1,QWORD PTR [rip+0x10b53]        # 34e78 <Law_and_Order+0x5d8>
   24325:	f2 0f 58 c1          	addsd  xmm0,xmm1
   24329:	f2 0f 59 45 80       	mulsd  xmm0,QWORD PTR [rbp-0x80]
   2432e:	f2 0f 10 0d 92 0b 01 00 	movsd  xmm1,QWORD PTR [rip+0x10b92]        # 34ec8 <Law_and_Order+0x628>
   24336:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2433a:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2433f:	e8 ec f7 fd ff       	call   3b30 <exp@plt>
   24344:	66 48 0f 7e c6       	movq   rsi,xmm0
   24349:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   2434d:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   24351:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24354:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24357:	48 89 d0             	mov    rax,rdx
   2435a:	48 c1 e0 02          	shl    rax,0x2
   2435e:	48 01 d0             	add    rax,rdx
   24361:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24369:	48 01 d0             	add    rax,rdx
   2436c:	48 89 ca             	mov    rdx,rcx
   2436f:	48 c1 e2 02          	shl    rdx,0x2
   24373:	48 01 ca             	add    rdx,rcx
   24376:	48 01 d0             	add    rax,rdx
   24379:	4c 01 c0             	add    rax,r8
   2437c:	48 05 86 04 00 00    	add    rax,0x486
   24382:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   24386:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2438a:	0f 85 b8 03 00 00    	jne    24748 <get_exp_params_ali+0x4057>
   24390:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   24394:	0f 85 e3 00 00 00    	jne    2447d <get_exp_params_ali+0x3d8c>
   2439a:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2439d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   243a0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   243a3:	48 89 d0             	mov    rax,rdx
   243a6:	48 c1 e0 02          	shl    rax,0x2
   243aa:	48 01 d0             	add    rax,rdx
   243ad:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   243b5:	48 01 d0             	add    rax,rdx
   243b8:	48 89 ca             	mov    rdx,rcx
   243bb:	48 c1 e2 02          	shl    rdx,0x2
   243bf:	48 01 ca             	add    rdx,rcx
   243c2:	48 01 d0             	add    rax,rdx
   243c5:	48 01 f0             	add    rax,rsi
   243c8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   243d0:	48 8d 05 09 b6 1c 00 	lea    rax,[rip+0x1cb609]        # 1ef9e0 <mismatchExtdH>
   243d7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   243da:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   243de:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   243e1:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   243e4:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   243e7:	48 89 d0             	mov    rax,rdx
   243ea:	48 c1 e0 02          	shl    rax,0x2
   243ee:	48 01 d0             	add    rax,rdx
   243f1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   243f9:	48 01 d0             	add    rax,rdx
   243fc:	48 89 ca             	mov    rdx,rcx
   243ff:	48 c1 e2 02          	shl    rdx,0x2
   24403:	48 01 ca             	add    rdx,rcx
   24406:	48 01 d0             	add    rax,rdx
   24409:	48 01 f0             	add    rax,rsi
   2440c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24414:	48 8d 05 c5 b5 1c 00 	lea    rax,[rip+0x1cb5c5]        # 1ef9e0 <mismatchExtdH>
   2441b:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2441e:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24421:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24424:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24427:	48 89 d0             	mov    rax,rdx
   2442a:	48 c1 e0 02          	shl    rax,0x2
   2442e:	48 01 d0             	add    rax,rdx
   24431:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24439:	48 01 d0             	add    rax,rdx
   2443c:	48 89 ca             	mov    rdx,rcx
   2443f:	48 c1 e2 02          	shl    rdx,0x2
   24443:	48 01 ca             	add    rdx,rcx
   24446:	48 01 d0             	add    rax,rdx
   24449:	48 01 f8             	add    rax,rdi
   2444c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24454:	48 8d 05 65 b2 1c 00 	lea    rax,[rip+0x1cb265]        # 1ef6c0 <mismatchExt37>
   2445b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2445e:	29 c6                	sub    esi,eax
   24460:	89 f0                	mov    eax,esi
   24462:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24466:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2446b:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2446f:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   24473:	85 c0                	test   eax,eax
   24475:	0f 9f c0             	setg   al
   24478:	e9 e0 00 00 00       	jmp    2455d <get_exp_params_ali+0x3e6c>
   2447d:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24480:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24483:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24486:	48 89 d0             	mov    rax,rdx
   24489:	48 c1 e0 02          	shl    rax,0x2
   2448d:	48 01 d0             	add    rax,rdx
   24490:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24498:	48 01 d0             	add    rax,rdx
   2449b:	48 89 ca             	mov    rdx,rcx
   2449e:	48 c1 e2 02          	shl    rdx,0x2
   244a2:	48 01 ca             	add    rdx,rcx
   244a5:	48 01 d0             	add    rax,rdx
   244a8:	48 01 f0             	add    rax,rsi
   244ab:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   244b3:	48 8d 05 26 b5 1c 00 	lea    rax,[rip+0x1cb526]        # 1ef9e0 <mismatchExtdH>
   244ba:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   244bd:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   244c1:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   244c4:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   244c7:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   244ca:	48 89 d0             	mov    rax,rdx
   244cd:	48 c1 e0 02          	shl    rax,0x2
   244d1:	48 01 d0             	add    rax,rdx
   244d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   244dc:	48 01 d0             	add    rax,rdx
   244df:	48 89 ca             	mov    rdx,rcx
   244e2:	48 c1 e2 02          	shl    rdx,0x2
   244e6:	48 01 ca             	add    rdx,rcx
   244e9:	48 01 d0             	add    rax,rdx
   244ec:	48 01 f0             	add    rax,rsi
   244ef:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   244f7:	48 8d 05 e2 b4 1c 00 	lea    rax,[rip+0x1cb4e2]        # 1ef9e0 <mismatchExtdH>
   244fe:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24501:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24504:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24507:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2450a:	48 89 d0             	mov    rax,rdx
   2450d:	48 c1 e0 02          	shl    rax,0x2
   24511:	48 01 d0             	add    rax,rdx
   24514:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2451c:	48 01 d0             	add    rax,rdx
   2451f:	48 89 ca             	mov    rdx,rcx
   24522:	48 c1 e2 02          	shl    rdx,0x2
   24526:	48 01 ca             	add    rdx,rcx
   24529:	48 01 d0             	add    rax,rdx
   2452c:	48 01 f8             	add    rax,rdi
   2452f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24537:	48 8d 05 82 b1 1c 00 	lea    rax,[rip+0x1cb182]        # 1ef6c0 <mismatchExt37>
   2453e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24541:	29 c6                	sub    esi,eax
   24543:	89 f0                	mov    eax,esi
   24545:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24549:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2454e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24552:	66 0f ef c9          	pxor   xmm1,xmm1
   24556:	66 0f 2f c1          	comisd xmm0,xmm1
   2455a:	0f 97 c0             	seta   al
   2455d:	84 c0                	test   al,al
   2455f:	74 09                	je     2456a <get_exp_params_ali+0x3e79>
   24561:	66 0f ef c0          	pxor   xmm0,xmm0
   24565:	e9 c9 0b 00 00       	jmp    25133 <get_exp_params_ali+0x4a42>
   2456a:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2456e:	0f 85 ee 00 00 00    	jne    24662 <get_exp_params_ali+0x3f71>
   24574:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24577:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2457a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2457d:	48 89 d0             	mov    rax,rdx
   24580:	48 c1 e0 02          	shl    rax,0x2
   24584:	48 01 d0             	add    rax,rdx
   24587:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2458f:	48 01 d0             	add    rax,rdx
   24592:	48 89 ca             	mov    rdx,rcx
   24595:	48 c1 e2 02          	shl    rdx,0x2
   24599:	48 01 ca             	add    rdx,rcx
   2459c:	48 01 d0             	add    rax,rdx
   2459f:	48 01 f0             	add    rax,rsi
   245a2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   245aa:	48 8d 05 2f b4 1c 00 	lea    rax,[rip+0x1cb42f]        # 1ef9e0 <mismatchExtdH>
   245b1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   245b4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   245b8:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   245bb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   245be:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   245c1:	48 89 d0             	mov    rax,rdx
   245c4:	48 c1 e0 02          	shl    rax,0x2
   245c8:	48 01 d0             	add    rax,rdx
   245cb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   245d3:	48 01 d0             	add    rax,rdx
   245d6:	48 89 ca             	mov    rdx,rcx
   245d9:	48 c1 e2 02          	shl    rdx,0x2
   245dd:	48 01 ca             	add    rdx,rcx
   245e0:	48 01 d0             	add    rax,rdx
   245e3:	48 01 f0             	add    rax,rsi
   245e6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   245ee:	48 8d 05 eb b3 1c 00 	lea    rax,[rip+0x1cb3eb]        # 1ef9e0 <mismatchExtdH>
   245f5:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   245f8:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   245fb:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   245fe:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24601:	48 89 d0             	mov    rax,rdx
   24604:	48 c1 e0 02          	shl    rax,0x2
   24608:	48 01 d0             	add    rax,rdx
   2460b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24613:	48 01 d0             	add    rax,rdx
   24616:	48 89 ca             	mov    rdx,rcx
   24619:	48 c1 e2 02          	shl    rdx,0x2
   2461d:	48 01 ca             	add    rdx,rcx
   24620:	48 01 d0             	add    rax,rdx
   24623:	48 01 f8             	add    rax,rdi
   24626:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2462e:	48 8d 05 8b b0 1c 00 	lea    rax,[rip+0x1cb08b]        # 1ef6c0 <mismatchExt37>
   24635:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24638:	29 c6                	sub    esi,eax
   2463a:	89 f0                	mov    eax,esi
   2463c:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24640:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24645:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24649:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2464d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24651:	f3 0f 7e 0d 47 08 01 00 	movq   xmm1,QWORD PTR [rip+0x10847]        # 34ea0 <Law_and_Order+0x600>
   24659:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2465d:	e9 d1 0a 00 00       	jmp    25133 <get_exp_params_ali+0x4a42>
   24662:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24665:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24668:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2466b:	48 89 d0             	mov    rax,rdx
   2466e:	48 c1 e0 02          	shl    rax,0x2
   24672:	48 01 d0             	add    rax,rdx
   24675:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2467d:	48 01 d0             	add    rax,rdx
   24680:	48 89 ca             	mov    rdx,rcx
   24683:	48 c1 e2 02          	shl    rdx,0x2
   24687:	48 01 ca             	add    rdx,rcx
   2468a:	48 01 d0             	add    rax,rdx
   2468d:	48 01 f0             	add    rax,rsi
   24690:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24698:	48 8d 05 41 b3 1c 00 	lea    rax,[rip+0x1cb341]        # 1ef9e0 <mismatchExtdH>
   2469f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   246a2:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   246a6:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   246a9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   246ac:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   246af:	48 89 d0             	mov    rax,rdx
   246b2:	48 c1 e0 02          	shl    rax,0x2
   246b6:	48 01 d0             	add    rax,rdx
   246b9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   246c1:	48 01 d0             	add    rax,rdx
   246c4:	48 89 ca             	mov    rdx,rcx
   246c7:	48 c1 e2 02          	shl    rdx,0x2
   246cb:	48 01 ca             	add    rdx,rcx
   246ce:	48 01 d0             	add    rax,rdx
   246d1:	48 01 f0             	add    rax,rsi
   246d4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   246dc:	48 8d 05 fd b2 1c 00 	lea    rax,[rip+0x1cb2fd]        # 1ef9e0 <mismatchExtdH>
   246e3:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   246e6:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   246e9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   246ec:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   246ef:	48 89 d0             	mov    rax,rdx
   246f2:	48 c1 e0 02          	shl    rax,0x2
   246f6:	48 01 d0             	add    rax,rdx
   246f9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24701:	48 01 d0             	add    rax,rdx
   24704:	48 89 ca             	mov    rdx,rcx
   24707:	48 c1 e2 02          	shl    rdx,0x2
   2470b:	48 01 ca             	add    rdx,rcx
   2470e:	48 01 d0             	add    rax,rdx
   24711:	48 01 f8             	add    rax,rdi
   24714:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2471c:	48 8d 05 9d af 1c 00 	lea    rax,[rip+0x1caf9d]        # 1ef6c0 <mismatchExt37>
   24723:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24726:	29 c6                	sub    esi,eax
   24728:	89 f0                	mov    eax,esi
   2472a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2472e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24733:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24737:	f3 0f 7e 0d 61 07 01 00 	movq   xmm1,QWORD PTR [rip+0x10761]        # 34ea0 <Law_and_Order+0x600>
   2473f:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24743:	e9 eb 09 00 00       	jmp    25133 <get_exp_params_ali+0x4a42>
   24748:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2474c:	0f 85 ee 00 00 00    	jne    24840 <get_exp_params_ali+0x414f>
   24752:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24755:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24758:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2475b:	48 89 d0             	mov    rax,rdx
   2475e:	48 c1 e0 02          	shl    rax,0x2
   24762:	48 01 d0             	add    rax,rdx
   24765:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2476d:	48 01 d0             	add    rax,rdx
   24770:	48 89 ca             	mov    rdx,rcx
   24773:	48 c1 e2 02          	shl    rdx,0x2
   24777:	48 01 ca             	add    rdx,rcx
   2477a:	48 01 d0             	add    rax,rdx
   2477d:	48 01 f0             	add    rax,rsi
   24780:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24788:	48 8d 05 51 b2 1c 00 	lea    rax,[rip+0x1cb251]        # 1ef9e0 <mismatchExtdH>
   2478f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24792:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24796:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24799:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2479c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2479f:	48 89 d0             	mov    rax,rdx
   247a2:	48 c1 e0 02          	shl    rax,0x2
   247a6:	48 01 d0             	add    rax,rdx
   247a9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   247b1:	48 01 d0             	add    rax,rdx
   247b4:	48 89 ca             	mov    rdx,rcx
   247b7:	48 c1 e2 02          	shl    rdx,0x2
   247bb:	48 01 ca             	add    rdx,rcx
   247be:	48 01 d0             	add    rax,rdx
   247c1:	48 01 f0             	add    rax,rsi
   247c4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   247cc:	48 8d 05 0d b2 1c 00 	lea    rax,[rip+0x1cb20d]        # 1ef9e0 <mismatchExtdH>
   247d3:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   247d6:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   247d9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   247dc:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   247df:	48 89 d0             	mov    rax,rdx
   247e2:	48 c1 e0 02          	shl    rax,0x2
   247e6:	48 01 d0             	add    rax,rdx
   247e9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   247f1:	48 01 d0             	add    rax,rdx
   247f4:	48 89 ca             	mov    rdx,rcx
   247f7:	48 c1 e2 02          	shl    rdx,0x2
   247fb:	48 01 ca             	add    rdx,rcx
   247fe:	48 01 d0             	add    rax,rdx
   24801:	48 01 f8             	add    rax,rdi
   24804:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2480c:	48 8d 05 ad ae 1c 00 	lea    rax,[rip+0x1caead]        # 1ef6c0 <mismatchExt37>
   24813:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24816:	29 c6                	sub    esi,eax
   24818:	89 f0                	mov    eax,esi
   2481a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2481e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24823:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24827:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2482b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2482f:	f3 0f 7e 0d 69 06 01 00 	movq   xmm1,QWORD PTR [rip+0x10669]        # 34ea0 <Law_and_Order+0x600>
   24837:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2483b:	e9 e1 00 00 00       	jmp    24921 <get_exp_params_ali+0x4230>
   24840:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24843:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24846:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24849:	48 89 d0             	mov    rax,rdx
   2484c:	48 c1 e0 02          	shl    rax,0x2
   24850:	48 01 d0             	add    rax,rdx
   24853:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2485b:	48 01 d0             	add    rax,rdx
   2485e:	48 89 ca             	mov    rdx,rcx
   24861:	48 c1 e2 02          	shl    rdx,0x2
   24865:	48 01 ca             	add    rdx,rcx
   24868:	48 01 d0             	add    rax,rdx
   2486b:	48 01 f0             	add    rax,rsi
   2486e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24876:	48 8d 05 63 b1 1c 00 	lea    rax,[rip+0x1cb163]        # 1ef9e0 <mismatchExtdH>
   2487d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24880:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24884:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24887:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2488a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2488d:	48 89 d0             	mov    rax,rdx
   24890:	48 c1 e0 02          	shl    rax,0x2
   24894:	48 01 d0             	add    rax,rdx
   24897:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2489f:	48 01 d0             	add    rax,rdx
   248a2:	48 89 ca             	mov    rdx,rcx
   248a5:	48 c1 e2 02          	shl    rdx,0x2
   248a9:	48 01 ca             	add    rdx,rcx
   248ac:	48 01 d0             	add    rax,rdx
   248af:	48 01 f0             	add    rax,rsi
   248b2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   248ba:	48 8d 05 1f b1 1c 00 	lea    rax,[rip+0x1cb11f]        # 1ef9e0 <mismatchExtdH>
   248c1:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   248c4:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   248c7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   248ca:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   248cd:	48 89 d0             	mov    rax,rdx
   248d0:	48 c1 e0 02          	shl    rax,0x2
   248d4:	48 01 d0             	add    rax,rdx
   248d7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   248df:	48 01 d0             	add    rax,rdx
   248e2:	48 89 ca             	mov    rdx,rcx
   248e5:	48 c1 e2 02          	shl    rdx,0x2
   248e9:	48 01 ca             	add    rdx,rcx
   248ec:	48 01 d0             	add    rax,rdx
   248ef:	48 01 f8             	add    rax,rdi
   248f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   248fa:	48 8d 05 bf ad 1c 00 	lea    rax,[rip+0x1cadbf]        # 1ef6c0 <mismatchExt37>
   24901:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24904:	29 c6                	sub    esi,eax
   24906:	89 f0                	mov    eax,esi
   24908:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2490c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24911:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24915:	f3 0f 7e 0d 83 05 01 00 	movq   xmm1,QWORD PTR [rip+0x10583]        # 34ea0 <Law_and_Order+0x600>
   2491d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24921:	f2 0f 10 0d 9f 05 01 00 	movsd  xmm1,QWORD PTR [rip+0x1059f]        # 34ec8 <Law_and_Order+0x628>
   24929:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2492d:	66 0f 28 c8          	movapd xmm1,xmm0
   24931:	f2 0f 10 05 a7 05 01 00 	movsd  xmm0,QWORD PTR [rip+0x105a7]        # 34ee0 <Law_and_Order+0x640>
   24939:	66 0f 2f c1          	comisd xmm0,xmm1
   2493d:	76 09                	jbe    24948 <get_exp_params_ali+0x4257>
   2493f:	66 0f ef c0          	pxor   xmm0,xmm0
   24943:	e9 eb 07 00 00       	jmp    25133 <get_exp_params_ali+0x4a42>
   24948:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2494c:	0f 85 ee 00 00 00    	jne    24a40 <get_exp_params_ali+0x434f>
   24952:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24955:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24958:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2495b:	48 89 d0             	mov    rax,rdx
   2495e:	48 c1 e0 02          	shl    rax,0x2
   24962:	48 01 d0             	add    rax,rdx
   24965:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2496d:	48 01 d0             	add    rax,rdx
   24970:	48 89 ca             	mov    rdx,rcx
   24973:	48 c1 e2 02          	shl    rdx,0x2
   24977:	48 01 ca             	add    rdx,rcx
   2497a:	48 01 d0             	add    rax,rdx
   2497d:	48 01 f0             	add    rax,rsi
   24980:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24988:	48 8d 05 51 b0 1c 00 	lea    rax,[rip+0x1cb051]        # 1ef9e0 <mismatchExtdH>
   2498f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24992:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24996:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24999:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2499c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2499f:	48 89 d0             	mov    rax,rdx
   249a2:	48 c1 e0 02          	shl    rax,0x2
   249a6:	48 01 d0             	add    rax,rdx
   249a9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   249b1:	48 01 d0             	add    rax,rdx
   249b4:	48 89 ca             	mov    rdx,rcx
   249b7:	48 c1 e2 02          	shl    rdx,0x2
   249bb:	48 01 ca             	add    rdx,rcx
   249be:	48 01 d0             	add    rax,rdx
   249c1:	48 01 f0             	add    rax,rsi
   249c4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   249cc:	48 8d 05 0d b0 1c 00 	lea    rax,[rip+0x1cb00d]        # 1ef9e0 <mismatchExtdH>
   249d3:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   249d6:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   249d9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   249dc:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   249df:	48 89 d0             	mov    rax,rdx
   249e2:	48 c1 e0 02          	shl    rax,0x2
   249e6:	48 01 d0             	add    rax,rdx
   249e9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   249f1:	48 01 d0             	add    rax,rdx
   249f4:	48 89 ca             	mov    rdx,rcx
   249f7:	48 c1 e2 02          	shl    rdx,0x2
   249fb:	48 01 ca             	add    rdx,rcx
   249fe:	48 01 d0             	add    rax,rdx
   24a01:	48 01 f8             	add    rax,rdi
   24a04:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24a0c:	48 8d 05 ad ac 1c 00 	lea    rax,[rip+0x1cacad]        # 1ef6c0 <mismatchExt37>
   24a13:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24a16:	29 c6                	sub    esi,eax
   24a18:	89 f0                	mov    eax,esi
   24a1a:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24a1e:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24a23:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24a27:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   24a2b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24a2f:	f3 0f 7e 0d 69 04 01 00 	movq   xmm1,QWORD PTR [rip+0x10469]        # 34ea0 <Law_and_Order+0x600>
   24a37:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24a3b:	e9 e1 00 00 00       	jmp    24b21 <get_exp_params_ali+0x4430>
   24a40:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24a43:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24a46:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24a49:	48 89 d0             	mov    rax,rdx
   24a4c:	48 c1 e0 02          	shl    rax,0x2
   24a50:	48 01 d0             	add    rax,rdx
   24a53:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24a5b:	48 01 d0             	add    rax,rdx
   24a5e:	48 89 ca             	mov    rdx,rcx
   24a61:	48 c1 e2 02          	shl    rdx,0x2
   24a65:	48 01 ca             	add    rdx,rcx
   24a68:	48 01 d0             	add    rax,rdx
   24a6b:	48 01 f0             	add    rax,rsi
   24a6e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24a76:	48 8d 05 63 af 1c 00 	lea    rax,[rip+0x1caf63]        # 1ef9e0 <mismatchExtdH>
   24a7d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24a80:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24a84:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24a87:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24a8a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24a8d:	48 89 d0             	mov    rax,rdx
   24a90:	48 c1 e0 02          	shl    rax,0x2
   24a94:	48 01 d0             	add    rax,rdx
   24a97:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24a9f:	48 01 d0             	add    rax,rdx
   24aa2:	48 89 ca             	mov    rdx,rcx
   24aa5:	48 c1 e2 02          	shl    rdx,0x2
   24aa9:	48 01 ca             	add    rdx,rcx
   24aac:	48 01 d0             	add    rax,rdx
   24aaf:	48 01 f0             	add    rax,rsi
   24ab2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24aba:	48 8d 05 1f af 1c 00 	lea    rax,[rip+0x1caf1f]        # 1ef9e0 <mismatchExtdH>
   24ac1:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24ac4:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24ac7:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24aca:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24acd:	48 89 d0             	mov    rax,rdx
   24ad0:	48 c1 e0 02          	shl    rax,0x2
   24ad4:	48 01 d0             	add    rax,rdx
   24ad7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24adf:	48 01 d0             	add    rax,rdx
   24ae2:	48 89 ca             	mov    rdx,rcx
   24ae5:	48 c1 e2 02          	shl    rdx,0x2
   24ae9:	48 01 ca             	add    rdx,rcx
   24aec:	48 01 d0             	add    rax,rdx
   24aef:	48 01 f8             	add    rax,rdi
   24af2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24afa:	48 8d 05 bf ab 1c 00 	lea    rax,[rip+0x1cabbf]        # 1ef6c0 <mismatchExt37>
   24b01:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24b04:	29 c6                	sub    esi,eax
   24b06:	89 f0                	mov    eax,esi
   24b08:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24b0c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24b11:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24b15:	f3 0f 7e 0d 83 03 01 00 	movq   xmm1,QWORD PTR [rip+0x10383]        # 34ea0 <Law_and_Order+0x600>
   24b1d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24b21:	f2 0f 10 0d 9f 03 01 00 	movsd  xmm1,QWORD PTR [rip+0x1039f]        # 34ec8 <Law_and_Order+0x628>
   24b29:	f2 0f 5e c1          	divsd  xmm0,xmm1
   24b2d:	66 0f 2f 05 b3 03 01 00 	comisd xmm0,QWORD PTR [rip+0x103b3]        # 34ee8 <Law_and_Order+0x648>
   24b35:	0f 86 de 01 00 00    	jbe    24d19 <get_exp_params_ali+0x4628>
   24b3b:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   24b3f:	0f 85 ee 00 00 00    	jne    24c33 <get_exp_params_ali+0x4542>
   24b45:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24b48:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24b4b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24b4e:	48 89 d0             	mov    rax,rdx
   24b51:	48 c1 e0 02          	shl    rax,0x2
   24b55:	48 01 d0             	add    rax,rdx
   24b58:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24b60:	48 01 d0             	add    rax,rdx
   24b63:	48 89 ca             	mov    rdx,rcx
   24b66:	48 c1 e2 02          	shl    rdx,0x2
   24b6a:	48 01 ca             	add    rdx,rcx
   24b6d:	48 01 d0             	add    rax,rdx
   24b70:	48 01 f0             	add    rax,rsi
   24b73:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24b7b:	48 8d 05 5e ae 1c 00 	lea    rax,[rip+0x1cae5e]        # 1ef9e0 <mismatchExtdH>
   24b82:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24b85:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24b89:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24b8c:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24b8f:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24b92:	48 89 d0             	mov    rax,rdx
   24b95:	48 c1 e0 02          	shl    rax,0x2
   24b99:	48 01 d0             	add    rax,rdx
   24b9c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24ba4:	48 01 d0             	add    rax,rdx
   24ba7:	48 89 ca             	mov    rdx,rcx
   24baa:	48 c1 e2 02          	shl    rdx,0x2
   24bae:	48 01 ca             	add    rdx,rcx
   24bb1:	48 01 d0             	add    rax,rdx
   24bb4:	48 01 f0             	add    rax,rsi
   24bb7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24bbf:	48 8d 05 1a ae 1c 00 	lea    rax,[rip+0x1cae1a]        # 1ef9e0 <mismatchExtdH>
   24bc6:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24bc9:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24bcc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24bcf:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24bd2:	48 89 d0             	mov    rax,rdx
   24bd5:	48 c1 e0 02          	shl    rax,0x2
   24bd9:	48 01 d0             	add    rax,rdx
   24bdc:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24be4:	48 01 d0             	add    rax,rdx
   24be7:	48 89 ca             	mov    rdx,rcx
   24bea:	48 c1 e2 02          	shl    rdx,0x2
   24bee:	48 01 ca             	add    rdx,rcx
   24bf1:	48 01 d0             	add    rax,rdx
   24bf4:	48 01 f8             	add    rax,rdi
   24bf7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24bff:	48 8d 05 ba aa 1c 00 	lea    rax,[rip+0x1caaba]        # 1ef6c0 <mismatchExt37>
   24c06:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24c09:	29 c6                	sub    esi,eax
   24c0b:	89 f0                	mov    eax,esi
   24c0d:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24c11:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24c16:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24c1a:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   24c1e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24c22:	f3 0f 7e 0d 76 02 01 00 	movq   xmm1,QWORD PTR [rip+0x10276]        # 34ea0 <Law_and_Order+0x600>
   24c2a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24c2e:	e9 00 05 00 00       	jmp    25133 <get_exp_params_ali+0x4a42>
   24c33:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24c36:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24c39:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24c3c:	48 89 d0             	mov    rax,rdx
   24c3f:	48 c1 e0 02          	shl    rax,0x2
   24c43:	48 01 d0             	add    rax,rdx
   24c46:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24c4e:	48 01 d0             	add    rax,rdx
   24c51:	48 89 ca             	mov    rdx,rcx
   24c54:	48 c1 e2 02          	shl    rdx,0x2
   24c58:	48 01 ca             	add    rdx,rcx
   24c5b:	48 01 d0             	add    rax,rdx
   24c5e:	48 01 f0             	add    rax,rsi
   24c61:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24c69:	48 8d 05 70 ad 1c 00 	lea    rax,[rip+0x1cad70]        # 1ef9e0 <mismatchExtdH>
   24c70:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24c73:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24c77:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24c7a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24c7d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24c80:	48 89 d0             	mov    rax,rdx
   24c83:	48 c1 e0 02          	shl    rax,0x2
   24c87:	48 01 d0             	add    rax,rdx
   24c8a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24c92:	48 01 d0             	add    rax,rdx
   24c95:	48 89 ca             	mov    rdx,rcx
   24c98:	48 c1 e2 02          	shl    rdx,0x2
   24c9c:	48 01 ca             	add    rdx,rcx
   24c9f:	48 01 d0             	add    rax,rdx
   24ca2:	48 01 f0             	add    rax,rsi
   24ca5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24cad:	48 8d 05 2c ad 1c 00 	lea    rax,[rip+0x1cad2c]        # 1ef9e0 <mismatchExtdH>
   24cb4:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24cb7:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24cba:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24cbd:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24cc0:	48 89 d0             	mov    rax,rdx
   24cc3:	48 c1 e0 02          	shl    rax,0x2
   24cc7:	48 01 d0             	add    rax,rdx
   24cca:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24cd2:	48 01 d0             	add    rax,rdx
   24cd5:	48 89 ca             	mov    rdx,rcx
   24cd8:	48 c1 e2 02          	shl    rdx,0x2
   24cdc:	48 01 ca             	add    rdx,rcx
   24cdf:	48 01 d0             	add    rax,rdx
   24ce2:	48 01 f8             	add    rax,rdi
   24ce5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24ced:	48 8d 05 cc a9 1c 00 	lea    rax,[rip+0x1ca9cc]        # 1ef6c0 <mismatchExt37>
   24cf4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24cf7:	29 c6                	sub    esi,eax
   24cf9:	89 f0                	mov    eax,esi
   24cfb:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24cff:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24d04:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24d08:	f3 0f 7e 0d 90 01 01 00 	movq   xmm1,QWORD PTR [rip+0x10190]        # 34ea0 <Law_and_Order+0x600>
   24d10:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24d14:	e9 1a 04 00 00       	jmp    25133 <get_exp_params_ali+0x4a42>
   24d19:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   24d1d:	0f 85 ee 00 00 00    	jne    24e11 <get_exp_params_ali+0x4720>
   24d23:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24d26:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24d29:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24d2c:	48 89 d0             	mov    rax,rdx
   24d2f:	48 c1 e0 02          	shl    rax,0x2
   24d33:	48 01 d0             	add    rax,rdx
   24d36:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24d3e:	48 01 d0             	add    rax,rdx
   24d41:	48 89 ca             	mov    rdx,rcx
   24d44:	48 c1 e2 02          	shl    rdx,0x2
   24d48:	48 01 ca             	add    rdx,rcx
   24d4b:	48 01 d0             	add    rax,rdx
   24d4e:	48 01 f0             	add    rax,rsi
   24d51:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24d59:	48 8d 05 80 ac 1c 00 	lea    rax,[rip+0x1cac80]        # 1ef9e0 <mismatchExtdH>
   24d60:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24d63:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24d67:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24d6a:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24d6d:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24d70:	48 89 d0             	mov    rax,rdx
   24d73:	48 c1 e0 02          	shl    rax,0x2
   24d77:	48 01 d0             	add    rax,rdx
   24d7a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24d82:	48 01 d0             	add    rax,rdx
   24d85:	48 89 ca             	mov    rdx,rcx
   24d88:	48 c1 e2 02          	shl    rdx,0x2
   24d8c:	48 01 ca             	add    rdx,rcx
   24d8f:	48 01 d0             	add    rax,rdx
   24d92:	48 01 f0             	add    rax,rsi
   24d95:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24d9d:	48 8d 05 3c ac 1c 00 	lea    rax,[rip+0x1cac3c]        # 1ef9e0 <mismatchExtdH>
   24da4:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24da7:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24daa:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24dad:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24db0:	48 89 d0             	mov    rax,rdx
   24db3:	48 c1 e0 02          	shl    rax,0x2
   24db7:	48 01 d0             	add    rax,rdx
   24dba:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24dc2:	48 01 d0             	add    rax,rdx
   24dc5:	48 89 ca             	mov    rdx,rcx
   24dc8:	48 c1 e2 02          	shl    rdx,0x2
   24dcc:	48 01 ca             	add    rdx,rcx
   24dcf:	48 01 d0             	add    rax,rdx
   24dd2:	48 01 f8             	add    rax,rdi
   24dd5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24ddd:	48 8d 05 dc a8 1c 00 	lea    rax,[rip+0x1ca8dc]        # 1ef6c0 <mismatchExt37>
   24de4:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24de7:	29 c6                	sub    esi,eax
   24de9:	89 f0                	mov    eax,esi
   24deb:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24def:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24df4:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24df8:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   24dfc:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24e00:	f3 0f 7e 0d 98 00 01 00 	movq   xmm1,QWORD PTR [rip+0x10098]        # 34ea0 <Law_and_Order+0x600>
   24e08:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24e0c:	e9 e1 00 00 00       	jmp    24ef2 <get_exp_params_ali+0x4801>
   24e11:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24e14:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24e17:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24e1a:	48 89 d0             	mov    rax,rdx
   24e1d:	48 c1 e0 02          	shl    rax,0x2
   24e21:	48 01 d0             	add    rax,rdx
   24e24:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24e2c:	48 01 d0             	add    rax,rdx
   24e2f:	48 89 ca             	mov    rdx,rcx
   24e32:	48 c1 e2 02          	shl    rdx,0x2
   24e36:	48 01 ca             	add    rdx,rcx
   24e39:	48 01 d0             	add    rax,rdx
   24e3c:	48 01 f0             	add    rax,rsi
   24e3f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24e47:	48 8d 05 92 ab 1c 00 	lea    rax,[rip+0x1cab92]        # 1ef9e0 <mismatchExtdH>
   24e4e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24e51:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24e55:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24e58:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24e5b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24e5e:	48 89 d0             	mov    rax,rdx
   24e61:	48 c1 e0 02          	shl    rax,0x2
   24e65:	48 01 d0             	add    rax,rdx
   24e68:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24e70:	48 01 d0             	add    rax,rdx
   24e73:	48 89 ca             	mov    rdx,rcx
   24e76:	48 c1 e2 02          	shl    rdx,0x2
   24e7a:	48 01 ca             	add    rdx,rcx
   24e7d:	48 01 d0             	add    rax,rdx
   24e80:	48 01 f0             	add    rax,rsi
   24e83:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24e8b:	48 8d 05 4e ab 1c 00 	lea    rax,[rip+0x1cab4e]        # 1ef9e0 <mismatchExtdH>
   24e92:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24e95:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24e98:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24e9b:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24e9e:	48 89 d0             	mov    rax,rdx
   24ea1:	48 c1 e0 02          	shl    rax,0x2
   24ea5:	48 01 d0             	add    rax,rdx
   24ea8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24eb0:	48 01 d0             	add    rax,rdx
   24eb3:	48 89 ca             	mov    rdx,rcx
   24eb6:	48 c1 e2 02          	shl    rdx,0x2
   24eba:	48 01 ca             	add    rdx,rcx
   24ebd:	48 01 d0             	add    rax,rdx
   24ec0:	48 01 f8             	add    rax,rdi
   24ec3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24ecb:	48 8d 05 ee a7 1c 00 	lea    rax,[rip+0x1ca7ee]        # 1ef6c0 <mismatchExt37>
   24ed2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24ed5:	29 c6                	sub    esi,eax
   24ed7:	89 f0                	mov    eax,esi
   24ed9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   24edd:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   24ee2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24ee6:	f3 0f 7e 0d b2 ff 00 00 	movq   xmm1,QWORD PTR [rip+0xffb2]        # 34ea0 <Law_and_Order+0x600>
   24eee:	66 0f 57 c1          	xorpd  xmm0,xmm1
   24ef2:	f2 0f 10 0d ce ff 00 00 	movsd  xmm1,QWORD PTR [rip+0xffce]        # 34ec8 <Law_and_Order+0x628>
   24efa:	f2 0f 5e c1          	divsd  xmm0,xmm1
   24efe:	f2 0f 10 0d ea ff 00 00 	movsd  xmm1,QWORD PTR [rip+0xffea]        # 34ef0 <Law_and_Order+0x650>
   24f06:	f2 0f 5c c1          	subsd  xmm0,xmm1
   24f0a:	e8 41 e7 fd ff       	call   3650 <sin@plt>
   24f0f:	f2 0f 10 0d 61 ff 00 00 	movsd  xmm1,QWORD PTR [rip+0xff61]        # 34e78 <Law_and_Order+0x5d8>
   24f17:	f2 0f 58 c8          	addsd  xmm1,xmm0
   24f1b:	f2 0f 10 05 d5 ff 00 00 	movsd  xmm0,QWORD PTR [rip+0xffd5]        # 34ef8 <Law_and_Order+0x658>
   24f23:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   24f27:	f2 0f 11 4d 80       	movsd  QWORD PTR [rbp-0x80],xmm1
   24f2c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   24f30:	0f 85 ee 00 00 00    	jne    25024 <get_exp_params_ali+0x4933>
   24f36:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24f39:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24f3c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24f3f:	48 89 d0             	mov    rax,rdx
   24f42:	48 c1 e0 02          	shl    rax,0x2
   24f46:	48 01 d0             	add    rax,rdx
   24f49:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24f51:	48 01 d0             	add    rax,rdx
   24f54:	48 89 ca             	mov    rdx,rcx
   24f57:	48 c1 e2 02          	shl    rdx,0x2
   24f5b:	48 01 ca             	add    rdx,rcx
   24f5e:	48 01 d0             	add    rax,rdx
   24f61:	48 01 f0             	add    rax,rsi
   24f64:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24f6c:	48 8d 05 6d aa 1c 00 	lea    rax,[rip+0x1caa6d]        # 1ef9e0 <mismatchExtdH>
   24f73:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24f76:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   24f7a:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   24f7d:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24f80:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24f83:	48 89 d0             	mov    rax,rdx
   24f86:	48 c1 e0 02          	shl    rax,0x2
   24f8a:	48 01 d0             	add    rax,rdx
   24f8d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24f95:	48 01 d0             	add    rax,rdx
   24f98:	48 89 ca             	mov    rdx,rcx
   24f9b:	48 c1 e2 02          	shl    rdx,0x2
   24f9f:	48 01 ca             	add    rdx,rcx
   24fa2:	48 01 d0             	add    rax,rdx
   24fa5:	48 01 f0             	add    rax,rsi
   24fa8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24fb0:	48 8d 05 29 aa 1c 00 	lea    rax,[rip+0x1caa29]        # 1ef9e0 <mismatchExtdH>
   24fb7:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   24fba:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   24fbd:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   24fc0:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   24fc3:	48 89 d0             	mov    rax,rdx
   24fc6:	48 c1 e0 02          	shl    rax,0x2
   24fca:	48 01 d0             	add    rax,rdx
   24fcd:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24fd5:	48 01 d0             	add    rax,rdx
   24fd8:	48 89 ca             	mov    rdx,rcx
   24fdb:	48 c1 e2 02          	shl    rdx,0x2
   24fdf:	48 01 ca             	add    rdx,rcx
   24fe2:	48 01 d0             	add    rax,rdx
   24fe5:	48 01 f8             	add    rax,rdi
   24fe8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24ff0:	48 8d 05 c9 a6 1c 00 	lea    rax,[rip+0x1ca6c9]        # 1ef6c0 <mismatchExt37>
   24ff7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   24ffa:	29 c6                	sub    esi,eax
   24ffc:	89 f0                	mov    eax,esi
   24ffe:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   25002:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   25007:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2500b:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2500f:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25013:	f3 0f 7e 0d 85 fe 00 00 	movq   xmm1,QWORD PTR [rip+0xfe85]        # 34ea0 <Law_and_Order+0x600>
   2501b:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2501f:	e9 e1 00 00 00       	jmp    25105 <get_exp_params_ali+0x4a14>
   25024:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   25027:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2502a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2502d:	48 89 d0             	mov    rax,rdx
   25030:	48 c1 e0 02          	shl    rax,0x2
   25034:	48 01 d0             	add    rax,rdx
   25037:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2503f:	48 01 d0             	add    rax,rdx
   25042:	48 89 ca             	mov    rdx,rcx
   25045:	48 c1 e2 02          	shl    rdx,0x2
   25049:	48 01 ca             	add    rdx,rcx
   2504c:	48 01 d0             	add    rax,rdx
   2504f:	48 01 f0             	add    rax,rsi
   25052:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2505a:	48 8d 05 7f a9 1c 00 	lea    rax,[rip+0x1ca97f]        # 1ef9e0 <mismatchExtdH>
   25061:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25064:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25068:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2506b:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2506e:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   25071:	48 89 d0             	mov    rax,rdx
   25074:	48 c1 e0 02          	shl    rax,0x2
   25078:	48 01 d0             	add    rax,rdx
   2507b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25083:	48 01 d0             	add    rax,rdx
   25086:	48 89 ca             	mov    rdx,rcx
   25089:	48 c1 e2 02          	shl    rdx,0x2
   2508d:	48 01 ca             	add    rdx,rcx
   25090:	48 01 d0             	add    rax,rdx
   25093:	48 01 f0             	add    rax,rsi
   25096:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2509e:	48 8d 05 3b a9 1c 00 	lea    rax,[rip+0x1ca93b]        # 1ef9e0 <mismatchExtdH>
   250a5:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   250a8:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   250ab:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   250ae:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   250b1:	48 89 d0             	mov    rax,rdx
   250b4:	48 c1 e0 02          	shl    rax,0x2
   250b8:	48 01 d0             	add    rax,rdx
   250bb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   250c3:	48 01 d0             	add    rax,rdx
   250c6:	48 89 ca             	mov    rdx,rcx
   250c9:	48 c1 e2 02          	shl    rdx,0x2
   250cd:	48 01 ca             	add    rdx,rcx
   250d0:	48 01 d0             	add    rax,rdx
   250d3:	48 01 f8             	add    rax,rdi
   250d6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   250de:	48 8d 05 db a5 1c 00 	lea    rax,[rip+0x1ca5db]        # 1ef6c0 <mismatchExt37>
   250e5:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   250e8:	29 c6                	sub    esi,eax
   250ea:	89 f0                	mov    eax,esi
   250ec:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   250f0:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   250f5:	f2 0f 5c c1          	subsd  xmm0,xmm1
   250f9:	f3 0f 7e 0d 9f fd 00 00 	movq   xmm1,QWORD PTR [rip+0xfd9f]        # 34ea0 <Law_and_Order+0x600>
   25101:	66 0f 57 c1          	xorpd  xmm0,xmm1
   25105:	f2 0f 10 0d bb fd 00 00 	movsd  xmm1,QWORD PTR [rip+0xfdbb]        # 34ec8 <Law_and_Order+0x628>
   2510d:	f2 0f 5e c1          	divsd  xmm0,xmm1
   25111:	f2 0f 10 0d d7 fd 00 00 	movsd  xmm1,QWORD PTR [rip+0xfdd7]        # 34ef0 <Law_and_Order+0x650>
   25119:	f2 0f 5c c1          	subsd  xmm0,xmm1
   2511d:	e8 2e e5 fd ff       	call   3650 <sin@plt>
   25122:	f2 0f 10 0d 4e fd 00 00 	movsd  xmm1,QWORD PTR [rip+0xfd4e]        # 34e78 <Law_and_Order+0x5d8>
   2512a:	f2 0f 58 c1          	addsd  xmm0,xmm1
   2512e:	f2 0f 59 45 80       	mulsd  xmm0,QWORD PTR [rbp-0x80]
   25133:	f2 0f 10 0d 8d fd 00 00 	movsd  xmm1,QWORD PTR [rip+0xfd8d]        # 34ec8 <Law_and_Order+0x628>
   2513b:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2513f:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   25144:	e8 e7 e9 fd ff       	call   3b30 <exp@plt>
   25149:	66 48 0f 7e c6       	movq   rsi,xmm0
   2514e:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   25152:	44 8b 45 a8          	mov    r8d,DWORD PTR [rbp-0x58]
   25156:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   25159:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2515c:	48 89 d0             	mov    rax,rdx
   2515f:	48 c1 e0 02          	shl    rax,0x2
   25163:	48 01 d0             	add    rax,rdx
   25166:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2516e:	48 01 d0             	add    rax,rdx
   25171:	48 89 ca             	mov    rdx,rcx
   25174:	48 c1 e2 02          	shl    rdx,0x2
   25178:	48 01 ca             	add    rdx,rcx
   2517b:	48 01 d0             	add    rax,rdx
   2517e:	4c 01 c0             	add    rax,r8
   25181:	48 05 9e 00 00 00    	add    rax,0x9e
   25187:	48 89 34 c7          	mov    QWORD PTR [rdi+rax*8],rsi
   2518b:	e9 bf 00 00 00       	jmp    2524f <get_exp_params_ali+0x4b5e>
   25190:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   25194:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   25197:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2519a:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2519d:	48 89 d0             	mov    rax,rdx
   251a0:	48 c1 e0 02          	shl    rax,0x2
   251a4:	48 01 d0             	add    rax,rdx
   251a7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   251af:	48 01 d0             	add    rax,rdx
   251b2:	48 89 ca             	mov    rdx,rcx
   251b5:	48 c1 e2 02          	shl    rdx,0x2
   251b9:	48 01 ca             	add    rdx,rcx
   251bc:	48 01 d0             	add    rax,rdx
   251bf:	48 01 f8             	add    rax,rdi
   251c2:	48 05 9e 00 00 00    	add    rax,0x9e
   251c8:	f2 0f 10 05 a8 fc 00 00 	movsd  xmm0,QWORD PTR [rip+0xfca8]        # 34e78 <Law_and_Order+0x5d8>
   251d0:	f2 0f 11 04 c6       	movsd  QWORD PTR [rsi+rax*8],xmm0
   251d5:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   251d9:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   251dc:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   251df:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   251e2:	48 89 d0             	mov    rax,rdx
   251e5:	48 c1 e0 02          	shl    rax,0x2
   251e9:	48 01 d0             	add    rax,rdx
   251ec:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   251f4:	48 01 d0             	add    rax,rdx
   251f7:	48 89 ca             	mov    rdx,rcx
   251fa:	48 c1 e2 02          	shl    rdx,0x2
   251fe:	48 01 ca             	add    rdx,rcx
   25201:	48 01 d0             	add    rax,rdx
   25204:	48 01 f8             	add    rax,rdi
   25207:	48 05 9e 00 00 00    	add    rax,0x9e
   2520d:	f2 0f 10 04 c6       	movsd  xmm0,QWORD PTR [rsi+rax*8]
   25212:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   25216:	8b 7d a8             	mov    edi,DWORD PTR [rbp-0x58]
   25219:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
   2521c:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2521f:	48 89 d0             	mov    rax,rdx
   25222:	48 c1 e0 02          	shl    rax,0x2
   25226:	48 01 d0             	add    rax,rdx
   25229:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25231:	48 01 d0             	add    rax,rdx
   25234:	48 89 ca             	mov    rdx,rcx
   25237:	48 c1 e2 02          	shl    rdx,0x2
   2523b:	48 01 ca             	add    rdx,rcx
   2523e:	48 01 d0             	add    rax,rdx
   25241:	48 01 f8             	add    rax,rdi
   25244:	48 05 86 04 00 00    	add    rax,0x486
   2524a:	f2 0f 11 04 c6       	movsd  QWORD PTR [rsi+rax*8],xmm0
   2524f:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   25253:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   25257:	0f 86 51 da ff ff    	jbe    22cae <get_exp_params_ali+0x25bd>
   2525d:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   25261:	83 7d a4 04          	cmp    DWORD PTR [rbp-0x5c],0x4
   25265:	0f 86 37 da ff ff    	jbe    22ca2 <get_exp_params_ali+0x25b1>
   2526b:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   2526f:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   25273:	0f 86 1d da ff ff    	jbe    22c96 <get_exp_params_ali+0x25a5>
   25279:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   25280:	e9 5f 03 00 00       	jmp    255e4 <get_exp_params_ali+0x4ef3>
   25285:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   2528c:	e9 45 03 00 00       	jmp    255d6 <get_exp_params_ali+0x4ee5>
   25291:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   25298:	e9 2b 03 00 00       	jmp    255c8 <get_exp_params_ali+0x4ed7>
   2529d:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   252a4:	e9 11 03 00 00       	jmp    255ba <get_exp_params_ali+0x4ec9>
   252a9:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   252ad:	0f 85 4c 01 00 00    	jne    253ff <get_exp_params_ali+0x4d0e>
   252b3:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   252b6:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   252b9:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   252bc:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   252bf:	48 89 c2             	mov    rdx,rax
   252c2:	48 c1 e2 02          	shl    rdx,0x2
   252c6:	48 01 c2             	add    rdx,rax
   252c9:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   252d1:	48 01 c2             	add    rdx,rax
   252d4:	48 89 f0             	mov    rax,rsi
   252d7:	48 c1 e0 02          	shl    rax,0x2
   252db:	48 01 f0             	add    rax,rsi
   252de:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   252e6:	48 01 f0             	add    rax,rsi
   252e9:	48 c1 e0 03          	shl    rax,0x3
   252ed:	48 01 c2             	add    rdx,rax
   252f0:	48 89 c8             	mov    rax,rcx
   252f3:	48 c1 e0 02          	shl    rax,0x2
   252f7:	48 01 c8             	add    rax,rcx
   252fa:	48 01 d0             	add    rax,rdx
   252fd:	48 01 f8             	add    rax,rdi
   25300:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25308:	48 8d 05 d1 cc 1c 00 	lea    rax,[rip+0x1cccd1]        # 1f1fe0 <int11_dH>
   2530f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25312:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25316:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   25319:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   2531c:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   2531f:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   25322:	48 89 c2             	mov    rdx,rax
   25325:	48 c1 e2 02          	shl    rdx,0x2
   25329:	48 01 c2             	add    rdx,rax
   2532c:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   25334:	48 01 c2             	add    rdx,rax
   25337:	48 89 f0             	mov    rax,rsi
   2533a:	48 c1 e0 02          	shl    rax,0x2
   2533e:	48 01 f0             	add    rax,rsi
   25341:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25349:	48 01 f0             	add    rax,rsi
   2534c:	48 c1 e0 03          	shl    rax,0x3
   25350:	48 01 c2             	add    rdx,rax
   25353:	48 89 c8             	mov    rax,rcx
   25356:	48 c1 e0 02          	shl    rax,0x2
   2535a:	48 01 c8             	add    rax,rcx
   2535d:	48 01 d0             	add    rax,rdx
   25360:	48 01 f8             	add    rax,rdi
   25363:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2536b:	48 8d 05 6e cc 1c 00 	lea    rax,[rip+0x1ccc6e]        # 1f1fe0 <int11_dH>
   25372:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   25375:	44 8b 45 ac          	mov    r8d,DWORD PTR [rbp-0x54]
   25379:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   2537c:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   2537f:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   25382:	48 89 c2             	mov    rdx,rax
   25385:	48 c1 e2 02          	shl    rdx,0x2
   25389:	48 01 c2             	add    rdx,rax
   2538c:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   25394:	48 01 c2             	add    rdx,rax
   25397:	48 89 f0             	mov    rax,rsi
   2539a:	48 c1 e0 02          	shl    rax,0x2
   2539e:	48 01 f0             	add    rax,rsi
   253a1:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   253a9:	48 01 f0             	add    rax,rsi
   253ac:	48 c1 e0 03          	shl    rax,0x3
   253b0:	48 01 c2             	add    rdx,rax
   253b3:	48 89 c8             	mov    rax,rcx
   253b6:	48 c1 e0 02          	shl    rax,0x2
   253ba:	48 01 c8             	add    rax,rcx
   253bd:	48 01 d0             	add    rax,rdx
   253c0:	4c 01 c0             	add    rax,r8
   253c3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   253cb:	48 8d 05 0e b3 1c 00 	lea    rax,[rip+0x1cb30e]        # 1f06e0 <int11_37>
   253d2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   253d5:	29 c7                	sub    edi,eax
   253d7:	89 f8                	mov    eax,edi
   253d9:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   253dd:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   253e2:	f2 0f 5c c1          	subsd  xmm0,xmm1
   253e6:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   253ea:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   253ee:	f3 0f 7e 0d aa fa 00 00 	movq   xmm1,QWORD PTR [rip+0xfaaa]        # 34ea0 <Law_and_Order+0x600>
   253f6:	66 0f 57 c1          	xorpd  xmm0,xmm1
   253fa:	e9 3f 01 00 00       	jmp    2553e <get_exp_params_ali+0x4e4d>
   253ff:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   25402:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   25405:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   25408:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   2540b:	48 89 c2             	mov    rdx,rax
   2540e:	48 c1 e2 02          	shl    rdx,0x2
   25412:	48 01 c2             	add    rdx,rax
   25415:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2541d:	48 01 c2             	add    rdx,rax
   25420:	48 89 f0             	mov    rax,rsi
   25423:	48 c1 e0 02          	shl    rax,0x2
   25427:	48 01 f0             	add    rax,rsi
   2542a:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25432:	48 01 f0             	add    rax,rsi
   25435:	48 c1 e0 03          	shl    rax,0x3
   25439:	48 01 c2             	add    rdx,rax
   2543c:	48 89 c8             	mov    rax,rcx
   2543f:	48 c1 e0 02          	shl    rax,0x2
   25443:	48 01 c8             	add    rax,rcx
   25446:	48 01 d0             	add    rax,rdx
   25449:	48 01 f8             	add    rax,rdi
   2544c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25454:	48 8d 05 85 cb 1c 00 	lea    rax,[rip+0x1ccb85]        # 1f1fe0 <int11_dH>
   2545b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2545e:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25462:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   25465:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   25468:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   2546b:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   2546e:	48 89 c2             	mov    rdx,rax
   25471:	48 c1 e2 02          	shl    rdx,0x2
   25475:	48 01 c2             	add    rdx,rax
   25478:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   25480:	48 01 c2             	add    rdx,rax
   25483:	48 89 f0             	mov    rax,rsi
   25486:	48 c1 e0 02          	shl    rax,0x2
   2548a:	48 01 f0             	add    rax,rsi
   2548d:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25495:	48 01 f0             	add    rax,rsi
   25498:	48 c1 e0 03          	shl    rax,0x3
   2549c:	48 01 c2             	add    rdx,rax
   2549f:	48 89 c8             	mov    rax,rcx
   254a2:	48 c1 e0 02          	shl    rax,0x2
   254a6:	48 01 c8             	add    rax,rcx
   254a9:	48 01 d0             	add    rax,rdx
   254ac:	48 01 f8             	add    rax,rdi
   254af:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   254b7:	48 8d 05 22 cb 1c 00 	lea    rax,[rip+0x1ccb22]        # 1f1fe0 <int11_dH>
   254be:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   254c1:	44 8b 45 ac          	mov    r8d,DWORD PTR [rbp-0x54]
   254c5:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   254c8:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
   254cb:	8b 75 a0             	mov    esi,DWORD PTR [rbp-0x60]
   254ce:	48 89 c2             	mov    rdx,rax
   254d1:	48 c1 e2 02          	shl    rdx,0x2
   254d5:	48 01 c2             	add    rdx,rax
   254d8:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   254e0:	48 01 c2             	add    rdx,rax
   254e3:	48 89 f0             	mov    rax,rsi
   254e6:	48 c1 e0 02          	shl    rax,0x2
   254ea:	48 01 f0             	add    rax,rsi
   254ed:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   254f5:	48 01 f0             	add    rax,rsi
   254f8:	48 c1 e0 03          	shl    rax,0x3
   254fc:	48 01 c2             	add    rdx,rax
   254ff:	48 89 c8             	mov    rax,rcx
   25502:	48 c1 e0 02          	shl    rax,0x2
   25506:	48 01 c8             	add    rax,rcx
   25509:	48 01 d0             	add    rax,rdx
   2550c:	4c 01 c0             	add    rax,r8
   2550f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25517:	48 8d 05 c2 b1 1c 00 	lea    rax,[rip+0x1cb1c2]        # 1f06e0 <int11_37>
   2551e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25521:	29 c7                	sub    edi,eax
   25523:	89 f8                	mov    eax,edi
   25525:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   25529:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   2552e:	f2 0f 5c c1          	subsd  xmm0,xmm1
   25532:	f3 0f 7e 0d 66 f9 00 00 	movq   xmm1,QWORD PTR [rip+0xf966]        # 34ea0 <Law_and_Order+0x600>
   2553a:	66 0f 57 c1          	xorpd  xmm0,xmm1
   2553e:	f2 0f 10 0d 82 f9 00 00 	movsd  xmm1,QWORD PTR [rip+0xf982]        # 34ec8 <Law_and_Order+0x628>
   25546:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2554a:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2554f:	e8 dc e5 fd ff       	call   3b30 <exp@plt>
   25554:	66 48 0f 7e c7       	movq   rdi,xmm0
   25559:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
   2555d:	44 8b 4d ac          	mov    r9d,DWORD PTR [rbp-0x54]
   25561:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   25564:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   25567:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
   2556a:	48 89 d0             	mov    rax,rdx
   2556d:	48 c1 e0 02          	shl    rax,0x2
   25571:	48 01 d0             	add    rax,rdx
   25574:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2557c:	48 01 d0             	add    rax,rdx
   2557f:	48 89 f2             	mov    rdx,rsi
   25582:	48 c1 e2 02          	shl    rdx,0x2
   25586:	48 01 f2             	add    rdx,rsi
   25589:	48 8d 34 10          	lea    rsi,[rax+rdx*1]
   2558d:	48 89 c8             	mov    rax,rcx
   25590:	48 c1 e0 02          	shl    rax,0x2
   25594:	48 01 c8             	add    rax,rcx
   25597:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2559f:	48 01 d0             	add    rax,rdx
   255a2:	48 c1 e0 03          	shl    rax,0x3
   255a6:	48 01 f0             	add    rax,rsi
   255a9:	4c 01 c8             	add    rax,r9
   255ac:	48 05 9e 05 00 00    	add    rax,0x59e
   255b2:	49 89 3c c0          	mov    QWORD PTR [r8+rax*8],rdi
   255b6:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   255ba:	83 7d ac 04          	cmp    DWORD PTR [rbp-0x54],0x4
   255be:	0f 86 e5 fc ff ff    	jbe    252a9 <get_exp_params_ali+0x4bb8>
   255c4:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   255c8:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   255cc:	0f 86 cb fc ff ff    	jbe    2529d <get_exp_params_ali+0x4bac>
   255d2:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   255d6:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   255da:	0f 86 b1 fc ff ff    	jbe    25291 <get_exp_params_ali+0x4ba0>
   255e0:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   255e4:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   255e8:	0f 86 97 fc ff ff    	jbe    25285 <get_exp_params_ali+0x4b94>
   255ee:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   255f5:	e9 ba 03 00 00       	jmp    259b4 <get_exp_params_ali+0x52c3>
   255fa:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   25601:	e9 a0 03 00 00       	jmp    259a6 <get_exp_params_ali+0x52b5>
   25606:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   2560d:	e9 86 03 00 00       	jmp    25998 <get_exp_params_ali+0x52a7>
   25612:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   25619:	e9 6c 03 00 00       	jmp    2598a <get_exp_params_ali+0x5299>
   2561e:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   25625:	e9 52 03 00 00       	jmp    2597c <get_exp_params_ali+0x528b>
   2562a:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2562e:	0f 85 69 01 00 00    	jne    2579d <get_exp_params_ali+0x50ac>
   25634:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   25637:	48 63 f8             	movsxd rdi,eax
   2563a:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2563d:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   25640:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   25644:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   25647:	48 89 f0             	mov    rax,rsi
   2564a:	48 c1 e0 02          	shl    rax,0x2
   2564e:	48 01 f0             	add    rax,rsi
   25651:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25659:	48 01 f0             	add    rax,rsi
   2565c:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   25663:	48 01 c6             	add    rsi,rax
   25666:	48 89 d0             	mov    rax,rdx
   25669:	48 c1 e0 05          	shl    rax,0x5
   2566d:	48 29 d0             	sub    rax,rdx
   25670:	48 c1 e0 02          	shl    rax,0x2
   25674:	48 01 d0             	add    rax,rdx
   25677:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   2567b:	48 89 c8             	mov    rax,rcx
   2567e:	48 c1 e0 02          	shl    rax,0x2
   25682:	48 01 c8             	add    rax,rcx
   25685:	48 01 d0             	add    rax,rdx
   25688:	48 01 f8             	add    rax,rdi
   2568b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25693:	48 8d 05 46 5f 1d 00 	lea    rax,[rip+0x1d5f46]        # 1fb5e0 <int21_dH>
   2569a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2569d:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   256a1:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   256a4:	48 63 f8             	movsxd rdi,eax
   256a7:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   256aa:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   256ad:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   256b1:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   256b4:	48 89 f0             	mov    rax,rsi
   256b7:	48 c1 e0 02          	shl    rax,0x2
   256bb:	48 01 f0             	add    rax,rsi
   256be:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   256c6:	48 01 f0             	add    rax,rsi
   256c9:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   256d0:	48 01 c6             	add    rsi,rax
   256d3:	48 89 d0             	mov    rax,rdx
   256d6:	48 c1 e0 05          	shl    rax,0x5
   256da:	48 29 d0             	sub    rax,rdx
   256dd:	48 c1 e0 02          	shl    rax,0x2
   256e1:	48 01 d0             	add    rax,rdx
   256e4:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   256e8:	48 89 c8             	mov    rax,rcx
   256eb:	48 c1 e0 02          	shl    rax,0x2
   256ef:	48 01 c8             	add    rax,rcx
   256f2:	48 01 d0             	add    rax,rdx
   256f5:	48 01 f8             	add    rax,rdi
   256f8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25700:	48 8d 05 d9 5e 1d 00 	lea    rax,[rip+0x1d5ed9]        # 1fb5e0 <int21_dH>
   25707:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   2570a:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   2570d:	4c 63 c0             	movsxd r8,eax
   25710:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   25713:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   25716:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   2571a:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   2571d:	48 89 f0             	mov    rax,rsi
   25720:	48 c1 e0 02          	shl    rax,0x2
   25724:	48 01 f0             	add    rax,rsi
   25727:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2572f:	48 01 f0             	add    rax,rsi
   25732:	49 69 f1 e8 03 00 00 	imul   rsi,r9,0x3e8
   25739:	48 01 c6             	add    rsi,rax
   2573c:	48 89 d0             	mov    rax,rdx
   2573f:	48 c1 e0 05          	shl    rax,0x5
   25743:	48 29 d0             	sub    rax,rdx
   25746:	48 c1 e0 02          	shl    rax,0x2
   2574a:	48 01 d0             	add    rax,rdx
   2574d:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   25751:	48 89 c8             	mov    rax,rcx
   25754:	48 c1 e0 02          	shl    rax,0x2
   25758:	48 01 c8             	add    rax,rcx
   2575b:	48 01 d0             	add    rax,rdx
   2575e:	4c 01 c0             	add    rax,r8
   25761:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25769:	48 8d 05 70 e1 1c 00 	lea    rax,[rip+0x1ce170]        # 1f38e0 <int21_37>
   25770:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25773:	29 c7                	sub    edi,eax
   25775:	89 f8                	mov    eax,edi
   25777:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2577b:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   25780:	f2 0f 5c c1          	subsd  xmm0,xmm1
   25784:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   25788:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2578c:	f3 0f 7e 0d 0c f7 00 00 	movq   xmm1,QWORD PTR [rip+0xf70c]        # 34ea0 <Law_and_Order+0x600>
   25794:	66 0f 57 c1          	xorpd  xmm0,xmm1
   25798:	e9 5c 01 00 00       	jmp    258f9 <get_exp_params_ali+0x5208>
   2579d:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   257a0:	48 63 f8             	movsxd rdi,eax
   257a3:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   257a6:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   257a9:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   257ad:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   257b0:	48 89 f0             	mov    rax,rsi
   257b3:	48 c1 e0 02          	shl    rax,0x2
   257b7:	48 01 f0             	add    rax,rsi
   257ba:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   257c2:	48 01 f0             	add    rax,rsi
   257c5:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   257cc:	48 01 c6             	add    rsi,rax
   257cf:	48 89 d0             	mov    rax,rdx
   257d2:	48 c1 e0 05          	shl    rax,0x5
   257d6:	48 29 d0             	sub    rax,rdx
   257d9:	48 c1 e0 02          	shl    rax,0x2
   257dd:	48 01 d0             	add    rax,rdx
   257e0:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   257e4:	48 89 c8             	mov    rax,rcx
   257e7:	48 c1 e0 02          	shl    rax,0x2
   257eb:	48 01 c8             	add    rax,rcx
   257ee:	48 01 d0             	add    rax,rdx
   257f1:	48 01 f8             	add    rax,rdi
   257f4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   257fc:	48 8d 05 dd 5d 1d 00 	lea    rax,[rip+0x1d5ddd]        # 1fb5e0 <int21_dH>
   25803:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25806:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2580a:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   2580d:	48 63 f8             	movsxd rdi,eax
   25810:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   25813:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   25816:	44 8b 45 a0          	mov    r8d,DWORD PTR [rbp-0x60]
   2581a:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   2581d:	48 89 f0             	mov    rax,rsi
   25820:	48 c1 e0 02          	shl    rax,0x2
   25824:	48 01 f0             	add    rax,rsi
   25827:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2582f:	48 01 f0             	add    rax,rsi
   25832:	49 69 f0 e8 03 00 00 	imul   rsi,r8,0x3e8
   25839:	48 01 c6             	add    rsi,rax
   2583c:	48 89 d0             	mov    rax,rdx
   2583f:	48 c1 e0 05          	shl    rax,0x5
   25843:	48 29 d0             	sub    rax,rdx
   25846:	48 c1 e0 02          	shl    rax,0x2
   2584a:	48 01 d0             	add    rax,rdx
   2584d:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   25851:	48 89 c8             	mov    rax,rcx
   25854:	48 c1 e0 02          	shl    rax,0x2
   25858:	48 01 c8             	add    rax,rcx
   2585b:	48 01 d0             	add    rax,rdx
   2585e:	48 01 f8             	add    rax,rdi
   25861:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25869:	48 8d 05 70 5d 1d 00 	lea    rax,[rip+0x1d5d70]        # 1fb5e0 <int21_dH>
   25870:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   25873:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   25876:	4c 63 c0             	movsxd r8,eax
   25879:	8b 75 a8             	mov    esi,DWORD PTR [rbp-0x58]
   2587c:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   2587f:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   25883:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   25886:	48 89 f0             	mov    rax,rsi
   25889:	48 c1 e0 02          	shl    rax,0x2
   2588d:	48 01 f0             	add    rax,rsi
   25890:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25898:	48 01 f0             	add    rax,rsi
   2589b:	49 69 f1 e8 03 00 00 	imul   rsi,r9,0x3e8
   258a2:	48 01 c6             	add    rsi,rax
   258a5:	48 89 d0             	mov    rax,rdx
   258a8:	48 c1 e0 05          	shl    rax,0x5
   258ac:	48 29 d0             	sub    rax,rdx
   258af:	48 c1 e0 02          	shl    rax,0x2
   258b3:	48 01 d0             	add    rax,rdx
   258b6:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   258ba:	48 89 c8             	mov    rax,rcx
   258bd:	48 c1 e0 02          	shl    rax,0x2
   258c1:	48 01 c8             	add    rax,rcx
   258c4:	48 01 d0             	add    rax,rdx
   258c7:	4c 01 c0             	add    rax,r8
   258ca:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   258d2:	48 8d 05 07 e0 1c 00 	lea    rax,[rip+0x1ce007]        # 1f38e0 <int21_37>
   258d9:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   258dc:	29 c7                	sub    edi,eax
   258de:	89 f8                	mov    eax,edi
   258e0:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   258e4:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   258e9:	f2 0f 5c c1          	subsd  xmm0,xmm1
   258ed:	f3 0f 7e 0d ab f5 00 00 	movq   xmm1,QWORD PTR [rip+0xf5ab]        # 34ea0 <Law_and_Order+0x600>
   258f5:	66 0f 57 c1          	xorpd  xmm0,xmm1
   258f9:	f2 0f 10 0d c7 f5 00 00 	movsd  xmm1,QWORD PTR [rip+0xf5c7]        # 34ec8 <Law_and_Order+0x628>
   25901:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   25905:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   2590a:	e8 21 e2 fd ff       	call   3b30 <exp@plt>
   2590f:	66 48 0f 7e c7       	movq   rdi,xmm0
   25914:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
   25918:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   2591b:	4c 63 c8             	movsxd r9,eax
   2591e:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25921:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25924:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   25928:	8b 4d a4             	mov    ecx,DWORD PTR [rbp-0x5c]
   2592b:	48 89 d0             	mov    rax,rdx
   2592e:	48 c1 e0 02          	shl    rax,0x2
   25932:	48 01 d0             	add    rax,rdx
   25935:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2593d:	48 01 d0             	add    rax,rdx
   25940:	48 89 f2             	mov    rdx,rsi
   25943:	48 c1 e2 02          	shl    rdx,0x2
   25947:	48 01 f2             	add    rdx,rsi
   2594a:	48 01 c2             	add    rdx,rax
   2594d:	48 89 c8             	mov    rax,rcx
   25950:	48 c1 e0 05          	shl    rax,0x5
   25954:	48 29 c8             	sub    rax,rcx
   25957:	48 c1 e0 02          	shl    rax,0x2
   2595b:	48 01 c8             	add    rax,rcx
   2595e:	48 01 c2             	add    rdx,rax
   25961:	49 69 c2 e8 03 00 00 	imul   rax,r10,0x3e8
   25968:	48 01 d0             	add    rax,rdx
   2596b:	4c 01 c8             	add    rax,r9
   2596e:	48 05 de 0b 00 00    	add    rax,0xbde
   25974:	49 89 3c c0          	mov    QWORD PTR [r8+rax*8],rdi
   25978:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   2597c:	83 7d b0 04          	cmp    DWORD PTR [rbp-0x50],0x4
   25980:	0f 8e a4 fc ff ff    	jle    2562a <get_exp_params_ali+0x4f39>
   25986:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   2598a:	83 7d ac 04          	cmp    DWORD PTR [rbp-0x54],0x4
   2598e:	0f 86 8a fc ff ff    	jbe    2561e <get_exp_params_ali+0x4f2d>
   25994:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   25998:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   2599c:	0f 86 70 fc ff ff    	jbe    25612 <get_exp_params_ali+0x4f21>
   259a2:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   259a6:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   259aa:	0f 86 56 fc ff ff    	jbe    25606 <get_exp_params_ali+0x4f15>
   259b0:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   259b4:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   259b8:	0f 86 3c fc ff ff    	jbe    255fa <get_exp_params_ali+0x4f09>
   259be:	c7 45 a0 00 00 00 00 	mov    DWORD PTR [rbp-0x60],0x0
   259c5:	e9 52 04 00 00       	jmp    25e1c <get_exp_params_ali+0x572b>
   259ca:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   259d1:	e9 38 04 00 00       	jmp    25e0e <get_exp_params_ali+0x571d>
   259d6:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0
   259dd:	e9 1e 04 00 00       	jmp    25e00 <get_exp_params_ali+0x570f>
   259e2:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   259e9:	e9 04 04 00 00       	jmp    25df2 <get_exp_params_ali+0x5701>
   259ee:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   259f5:	e9 ea 03 00 00       	jmp    25de4 <get_exp_params_ali+0x56f3>
   259fa:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   25a01:	e9 d0 03 00 00       	jmp    25dd6 <get_exp_params_ali+0x56e5>
   25a06:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   25a0a:	0f 85 9f 01 00 00    	jne    25baf <get_exp_params_ali+0x54be>
   25a10:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25a13:	48 63 f8             	movsxd rdi,eax
   25a16:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25a19:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25a1c:	48 63 c8             	movsxd rcx,eax
   25a1f:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   25a23:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25a26:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   25a2a:	48 89 f0             	mov    rax,rsi
   25a2d:	48 c1 e0 02          	shl    rax,0x2
   25a31:	48 01 f0             	add    rax,rsi
   25a34:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25a3c:	48 01 f0             	add    rax,rsi
   25a3f:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   25a46:	48 01 c6             	add    rsi,rax
   25a49:	48 89 c8             	mov    rax,rcx
   25a4c:	48 c1 e0 02          	shl    rax,0x2
   25a50:	48 01 c8             	add    rax,rcx
   25a53:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   25a57:	48 89 d0             	mov    rax,rdx
   25a5a:	48 c1 e0 05          	shl    rax,0x5
   25a5e:	48 29 d0             	sub    rax,rdx
   25a61:	48 c1 e0 02          	shl    rax,0x2
   25a65:	48 01 d0             	add    rax,rdx
   25a68:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   25a6c:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   25a73:	48 01 d0             	add    rax,rdx
   25a76:	48 01 f8             	add    rax,rdi
   25a79:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25a81:	48 8d 05 58 49 20 00 	lea    rax,[rip+0x204958]        # 22a3e0 <int22_dH>
   25a88:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25a8b:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25a8f:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25a92:	48 63 f8             	movsxd rdi,eax
   25a95:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25a98:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25a9b:	48 63 c8             	movsxd rcx,eax
   25a9e:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   25aa2:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25aa5:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   25aa9:	48 89 f0             	mov    rax,rsi
   25aac:	48 c1 e0 02          	shl    rax,0x2
   25ab0:	48 01 f0             	add    rax,rsi
   25ab3:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25abb:	48 01 f0             	add    rax,rsi
   25abe:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   25ac5:	48 01 c6             	add    rsi,rax
   25ac8:	48 89 c8             	mov    rax,rcx
   25acb:	48 c1 e0 02          	shl    rax,0x2
   25acf:	48 01 c8             	add    rax,rcx
   25ad2:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   25ad6:	48 89 d0             	mov    rax,rdx
   25ad9:	48 c1 e0 05          	shl    rax,0x5
   25add:	48 29 d0             	sub    rax,rdx
   25ae0:	48 c1 e0 02          	shl    rax,0x2
   25ae4:	48 01 d0             	add    rax,rdx
   25ae7:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   25aeb:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   25af2:	48 01 d0             	add    rax,rdx
   25af5:	48 01 f8             	add    rax,rdi
   25af8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25b00:	48 8d 05 d9 48 20 00 	lea    rax,[rip+0x2048d9]        # 22a3e0 <int22_dH>
   25b07:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   25b0a:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25b0d:	4c 63 c0             	movsxd r8,eax
   25b10:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25b13:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25b16:	48 63 c8             	movsxd rcx,eax
   25b19:	44 8b 4d a4          	mov    r9d,DWORD PTR [rbp-0x5c]
   25b1d:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25b20:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   25b24:	48 89 f0             	mov    rax,rsi
   25b27:	48 c1 e0 02          	shl    rax,0x2
   25b2b:	48 01 f0             	add    rax,rsi
   25b2e:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25b36:	48 01 f0             	add    rax,rsi
   25b39:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   25b40:	48 01 c6             	add    rsi,rax
   25b43:	48 89 c8             	mov    rax,rcx
   25b46:	48 c1 e0 02          	shl    rax,0x2
   25b4a:	48 01 c8             	add    rax,rcx
   25b4d:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   25b51:	48 89 d0             	mov    rax,rdx
   25b54:	48 c1 e0 05          	shl    rax,0x5
   25b58:	48 29 d0             	sub    rax,rdx
   25b5b:	48 c1 e0 02          	shl    rax,0x2
   25b5f:	48 01 d0             	add    rax,rdx
   25b62:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   25b66:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   25b6d:	48 01 d0             	add    rax,rdx
   25b70:	4c 01 c0             	add    rax,r8
   25b73:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25b7b:	48 8d 05 5e d7 1d 00 	lea    rax,[rip+0x1dd75e]        # 2032e0 <int22_37>
   25b82:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25b85:	29 c7                	sub    edi,eax
   25b87:	89 f8                	mov    eax,edi
   25b89:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   25b8d:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   25b92:	f2 0f 5c c1          	subsd  xmm0,xmm1
   25b96:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   25b9a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25b9e:	f3 0f 7e 0d fa f2 00 00 	movq   xmm1,QWORD PTR [rip+0xf2fa]        # 34ea0 <Law_and_Order+0x600>
   25ba6:	66 0f 57 c1          	xorpd  xmm0,xmm1
   25baa:	e9 92 01 00 00       	jmp    25d41 <get_exp_params_ali+0x5650>
   25baf:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25bb2:	48 63 f8             	movsxd rdi,eax
   25bb5:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25bb8:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25bbb:	48 63 c8             	movsxd rcx,eax
   25bbe:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   25bc2:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25bc5:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   25bc9:	48 89 f0             	mov    rax,rsi
   25bcc:	48 c1 e0 02          	shl    rax,0x2
   25bd0:	48 01 f0             	add    rax,rsi
   25bd3:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25bdb:	48 01 f0             	add    rax,rsi
   25bde:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   25be5:	48 01 c6             	add    rsi,rax
   25be8:	48 89 c8             	mov    rax,rcx
   25beb:	48 c1 e0 02          	shl    rax,0x2
   25bef:	48 01 c8             	add    rax,rcx
   25bf2:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   25bf6:	48 89 d0             	mov    rax,rdx
   25bf9:	48 c1 e0 05          	shl    rax,0x5
   25bfd:	48 29 d0             	sub    rax,rdx
   25c00:	48 c1 e0 02          	shl    rax,0x2
   25c04:	48 01 d0             	add    rax,rdx
   25c07:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   25c0b:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   25c12:	48 01 d0             	add    rax,rdx
   25c15:	48 01 f8             	add    rax,rdi
   25c18:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25c20:	48 8d 05 b9 47 20 00 	lea    rax,[rip+0x2047b9]        # 22a3e0 <int22_dH>
   25c27:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25c2a:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   25c2e:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25c31:	48 63 f8             	movsxd rdi,eax
   25c34:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25c37:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25c3a:	48 63 c8             	movsxd rcx,eax
   25c3d:	44 8b 45 a4          	mov    r8d,DWORD PTR [rbp-0x5c]
   25c41:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25c44:	44 8b 4d a0          	mov    r9d,DWORD PTR [rbp-0x60]
   25c48:	48 89 f0             	mov    rax,rsi
   25c4b:	48 c1 e0 02          	shl    rax,0x2
   25c4f:	48 01 f0             	add    rax,rsi
   25c52:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25c5a:	48 01 f0             	add    rax,rsi
   25c5d:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   25c64:	48 01 c6             	add    rsi,rax
   25c67:	48 89 c8             	mov    rax,rcx
   25c6a:	48 c1 e0 02          	shl    rax,0x2
   25c6e:	48 01 c8             	add    rax,rcx
   25c71:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   25c75:	48 89 d0             	mov    rax,rdx
   25c78:	48 c1 e0 05          	shl    rax,0x5
   25c7c:	48 29 d0             	sub    rax,rdx
   25c7f:	48 c1 e0 02          	shl    rax,0x2
   25c83:	48 01 d0             	add    rax,rdx
   25c86:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   25c8a:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   25c91:	48 01 d0             	add    rax,rdx
   25c94:	48 01 f8             	add    rax,rdi
   25c97:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25c9f:	48 8d 05 3a 47 20 00 	lea    rax,[rip+0x20473a]        # 22a3e0 <int22_dH>
   25ca6:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   25ca9:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25cac:	4c 63 c0             	movsxd r8,eax
   25caf:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25cb2:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25cb5:	48 63 c8             	movsxd rcx,eax
   25cb8:	44 8b 4d a4          	mov    r9d,DWORD PTR [rbp-0x5c]
   25cbc:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25cbf:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   25cc3:	48 89 f0             	mov    rax,rsi
   25cc6:	48 c1 e0 02          	shl    rax,0x2
   25cca:	48 01 f0             	add    rax,rsi
   25ccd:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25cd5:	48 01 f0             	add    rax,rsi
   25cd8:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   25cdf:	48 01 c6             	add    rsi,rax
   25ce2:	48 89 c8             	mov    rax,rcx
   25ce5:	48 c1 e0 02          	shl    rax,0x2
   25ce9:	48 01 c8             	add    rax,rcx
   25cec:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   25cf0:	48 89 d0             	mov    rax,rdx
   25cf3:	48 c1 e0 05          	shl    rax,0x5
   25cf7:	48 29 d0             	sub    rax,rdx
   25cfa:	48 c1 e0 02          	shl    rax,0x2
   25cfe:	48 01 d0             	add    rax,rdx
   25d01:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   25d05:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   25d0c:	48 01 d0             	add    rax,rdx
   25d0f:	4c 01 c0             	add    rax,r8
   25d12:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   25d1a:	48 8d 05 bf d5 1d 00 	lea    rax,[rip+0x1dd5bf]        # 2032e0 <int22_37>
   25d21:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   25d24:	29 c7                	sub    edi,eax
   25d26:	89 f8                	mov    eax,edi
   25d28:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   25d2c:	f2 0f 59 4d d0       	mulsd  xmm1,QWORD PTR [rbp-0x30]
   25d31:	f2 0f 5c c1          	subsd  xmm0,xmm1
   25d35:	f3 0f 7e 0d 63 f1 00 00 	movq   xmm1,QWORD PTR [rip+0xf163]        # 34ea0 <Law_and_Order+0x600>
   25d3d:	66 0f 57 c1          	xorpd  xmm0,xmm1
   25d41:	f2 0f 10 0d 7f f1 00 00 	movsd  xmm1,QWORD PTR [rip+0xf17f]        # 34ec8 <Law_and_Order+0x628>
   25d49:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   25d4d:	f2 0f 5e 45 c8       	divsd  xmm0,QWORD PTR [rbp-0x38]
   25d52:	e8 d9 dd fd ff       	call   3b30 <exp@plt>
   25d57:	66 48 0f 7e c7       	movq   rdi,xmm0
   25d5c:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
   25d60:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   25d63:	4c 63 c8             	movsxd r9,eax
   25d66:	8b 75 ac             	mov    esi,DWORD PTR [rbp-0x54]
   25d69:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   25d6c:	48 63 c8             	movsxd rcx,eax
   25d6f:	44 8b 5d a4          	mov    r11d,DWORD PTR [rbp-0x5c]
   25d73:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   25d76:	44 8b 55 a0          	mov    r10d,DWORD PTR [rbp-0x60]
   25d7a:	48 89 f0             	mov    rax,rsi
   25d7d:	48 c1 e0 02          	shl    rax,0x2
   25d81:	48 01 f0             	add    rax,rsi
   25d84:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   25d8c:	48 01 f0             	add    rax,rsi
   25d8f:	49 69 f3 71 02 00 00 	imul   rsi,r11,0x271
   25d96:	48 01 c6             	add    rsi,rax
   25d99:	48 89 d0             	mov    rax,rdx
   25d9c:	48 c1 e0 05          	shl    rax,0x5
   25da0:	48 29 d0             	sub    rax,rdx
   25da3:	48 c1 e0 02          	shl    rax,0x2
   25da7:	48 01 d0             	add    rax,rdx
   25daa:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   25dae:	48 89 c8             	mov    rax,rcx
   25db1:	48 c1 e0 02          	shl    rax,0x2
   25db5:	48 01 c8             	add    rax,rcx
   25db8:	48 01 c2             	add    rdx,rax
   25dbb:	49 69 c2 88 13 00 00 	imul   rax,r10,0x1388
   25dc2:	48 01 d0             	add    rax,rdx
   25dc5:	4c 01 c8             	add    rax,r9
   25dc8:	48 05 1e 2b 00 00    	add    rax,0x2b1e
   25dce:	49 89 3c c0          	mov    QWORD PTR [r8+rax*8],rdi
   25dd2:	83 45 b8 01          	add    DWORD PTR [rbp-0x48],0x1
   25dd6:	83 7d b8 04          	cmp    DWORD PTR [rbp-0x48],0x4
   25dda:	0f 8e 26 fc ff ff    	jle    25a06 <get_exp_params_ali+0x5315>
   25de0:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   25de4:	83 7d b4 04          	cmp    DWORD PTR [rbp-0x4c],0x4
   25de8:	0f 8e 0c fc ff ff    	jle    259fa <get_exp_params_ali+0x5309>
   25dee:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   25df2:	83 7d ac 04          	cmp    DWORD PTR [rbp-0x54],0x4
   25df6:	0f 86 f2 fb ff ff    	jbe    259ee <get_exp_params_ali+0x52fd>
   25dfc:	83 45 a8 01          	add    DWORD PTR [rbp-0x58],0x1
   25e00:	83 7d a8 04          	cmp    DWORD PTR [rbp-0x58],0x4
   25e04:	0f 86 d8 fb ff ff    	jbe    259e2 <get_exp_params_ali+0x52f1>
   25e0a:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   25e0e:	83 7d a4 07          	cmp    DWORD PTR [rbp-0x5c],0x7
   25e12:	0f 86 be fb ff ff    	jbe    259d6 <get_exp_params_ali+0x52e5>
   25e18:	83 45 a0 01          	add    DWORD PTR [rbp-0x60],0x1
   25e1c:	83 7d a0 07          	cmp    DWORD PTR [rbp-0x60],0x7
   25e20:	0f 86 a4 fb ff ff    	jbe    259ca <get_exp_params_ali+0x52d9>
   25e26:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   25e2a:	48 05 f0 43 06 00    	add    rax,0x643f0
   25e30:	ba 19 01 00 00       	mov    edx,0x119
   25e35:	48 8d 35 84 a3 1c 00 	lea    rsi,[rip+0x1ca384]        # 1f01c0 <Tetraloops>
   25e3c:	48 89 c7             	mov    rdi,rax
   25e3f:	e8 2c d9 fd ff       	call   3770 <strncpy@plt>
   25e44:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   25e48:	48 05 b0 4a 06 00    	add    rax,0x64ab0
   25e4e:	ba f1 00 00 00       	mov    edx,0xf1
   25e53:	48 8d 35 26 a1 1c 00 	lea    rsi,[rip+0x1ca126]        # 1eff80 <Triloops>
   25e5a:	48 89 c7             	mov    rdi,rax
   25e5d:	e8 0e d9 fd ff       	call   3770 <strncpy@plt>
   25e62:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   25e66:	48 05 a1 4b 06 00    	add    rax,0x64ba1
   25e6c:	ba 69 01 00 00       	mov    edx,0x169
   25e71:	48 8d 35 a8 a5 1c 00 	lea    rsi,[rip+0x1ca5a8]        # 1f0420 <Hexaloops>
   25e78:	48 89 c7             	mov    rdi,rax
   25e7b:	e8 f0 d8 fd ff       	call   3770 <strncpy@plt>
   25e80:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   25e84:	48 83 c4 78          	add    rsp,0x78
   25e88:	5b                   	pop    rbx
   25e89:	5d                   	pop    rbp
   25e8a:	c3                   	ret    

0000000000025e8b <rescale_params>:
   25e8b:	f3 0f 1e fa          	endbr64 
   25e8f:	55                   	push   rbp
   25e90:	48 89 e5             	mov    rbp,rsp
   25e93:	48 83 ec 30          	sub    rsp,0x30
   25e97:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25e9b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25e9f:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   25ea3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   25ea7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25eab:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
   25eaf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25eb3:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   25eb8:	0f 84 65 01 00 00    	je     26023 <rescale_params+0x198>
   25ebe:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   25ec3:	0f 84 5a 01 00 00    	je     26023 <rescale_params+0x198>
   25ec9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25ecd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   25ed1:	f2 0f 10 05 9f ef 00 00 	movsd  xmm0,QWORD PTR [rip+0xef9f]        # 34e78 <Law_and_Order+0x5d8>
   25ed9:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   25edd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25ee1:	f2 0f 10 88 60 5e 06 00 	movsd  xmm1,QWORD PTR [rax+0x65e60]
   25ee9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25eed:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   25ef1:	48 83 c0 08          	add    rax,0x8
   25ef5:	f2 0f 10 05 7b ef 00 00 	movsd  xmm0,QWORD PTR [rip+0xef7b]        # 34e78 <Law_and_Order+0x5d8>
   25efd:	f2 0f 5e c1          	divsd  xmm0,xmm1
   25f01:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   25f05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f09:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   25f0d:	f2 0f 10 05 63 ef 00 00 	movsd  xmm0,QWORD PTR [rip+0xef63]        # 34e78 <Law_and_Order+0x5d8>
   25f15:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   25f19:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25f1d:	f2 0f 10 80 d0 3f 06 00 	movsd  xmm0,QWORD PTR [rax+0x63fd0]
   25f25:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25f29:	f2 0f 10 88 60 5e 06 00 	movsd  xmm1,QWORD PTR [rax+0x65e60]
   25f31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f35:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   25f39:	48 83 c0 08          	add    rax,0x8
   25f3d:	f2 0f 5e c1          	divsd  xmm0,xmm1
   25f41:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   25f45:	c7 45 ec 02 00 00 00 	mov    DWORD PTR [rbp-0x14],0x2
   25f4c:	e9 c0 00 00 00       	jmp    26011 <rescale_params+0x186>
   25f51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f55:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   25f59:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   25f5c:	89 c1                	mov    ecx,eax
   25f5e:	c1 e9 1f             	shr    ecx,0x1f
   25f61:	01 c8                	add    eax,ecx
   25f63:	d1 f8                	sar    eax,1
   25f65:	48 98                	cdqe   
   25f67:	48 c1 e0 03          	shl    rax,0x3
   25f6b:	48 01 d0             	add    rax,rdx
   25f6e:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
   25f72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f76:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   25f7a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   25f7d:	89 c1                	mov    ecx,eax
   25f7f:	c1 e9 1f             	shr    ecx,0x1f
   25f82:	01 c8                	add    eax,ecx
   25f84:	d1 f8                	sar    eax,1
   25f86:	f7 d8                	neg    eax
   25f88:	89 c1                	mov    ecx,eax
   25f8a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   25f8d:	01 c8                	add    eax,ecx
   25f8f:	48 98                	cdqe   
   25f91:	48 c1 e0 03          	shl    rax,0x3
   25f95:	48 01 d0             	add    rax,rdx
   25f98:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
   25f9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fa0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   25fa4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   25fa7:	48 63 d2             	movsxd rdx,edx
   25faa:	48 c1 e2 03          	shl    rdx,0x3
   25fae:	48 01 d0             	add    rax,rdx
   25fb1:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   25fb5:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   25fb9:	f2 0f 2a 45 ec       	cvtsi2sd xmm0,DWORD PTR [rbp-0x14]
   25fbe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25fc2:	48 8b 80 d0 3f 06 00 	mov    rax,QWORD PTR [rax+0x63fd0]
   25fc9:	66 0f 28 c8          	movapd xmm1,xmm0
   25fcd:	66 48 0f 6e c0       	movq   xmm0,rax
   25fd2:	e8 19 db fd ff       	call   3af0 <pow@plt>
   25fd7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fdb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   25fdf:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   25fe2:	48 63 d2             	movsxd rdx,edx
   25fe5:	48 c1 e2 03          	shl    rdx,0x3
   25fe9:	48 01 d0             	add    rax,rdx
   25fec:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
   25ff0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25ff4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   25ff8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   25ffb:	48 63 d2             	movsxd rdx,edx
   25ffe:	48 c1 e2 03          	shl    rdx,0x3
   26002:	48 01 d0             	add    rax,rdx
   26005:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   26009:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   2600d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   26011:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26015:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   26018:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2601b:	39 c2                	cmp    edx,eax
   2601d:	0f 83 2e ff ff ff    	jae    25f51 <rescale_params+0xc6>
   26023:	90                   	nop
   26024:	c9                   	leave  
   26025:	c3                   	ret    

0000000000026026 <scale_parameters>:
   26026:	f3 0f 1e fa          	endbr64 
   2602a:	55                   	push   rbp
   2602b:	48 89 e5             	mov    rbp,rsp
   2602e:	48 81 ec f0 07 00 00 	sub    rsp,0x7f0
   26035:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2603e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   26042:	31 c0                	xor    eax,eax
   26044:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2604b:	48 89 c7             	mov    rdi,rax
   2604e:	e8 1e c2 00 00       	call   32271 <set_model_details>
   26053:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2605a:	48 89 c7             	mov    rdi,rax
   2605d:	e8 99 2c ff ff       	call   18cfb <vrna_params>
   26062:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   26066:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   2606f:	74 05                	je     26076 <scale_parameters+0x50>
   26071:	e8 7a d8 fd ff       	call   38f0 <__stack_chk_fail@plt>
   26076:	c9                   	leave  
   26077:	c3                   	ret    

0000000000026078 <get_scaled_parameters>:
   26078:	f3 0f 1e fa          	endbr64 
   2607c:	55                   	push   rbp
   2607d:	48 89 e5             	mov    rbp,rsp
   26080:	48 83 ec 10          	sub    rsp,0x10
   26084:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   26089:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   2608e:	f2 0f 11 45 10       	movsd  QWORD PTR [rbp+0x10],xmm0
   26093:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   26097:	e8 3c 34 ff ff       	call   194d8 <get_scaled_params>
   2609c:	c9                   	leave  
   2609d:	c3                   	ret    

000000000002609e <get_boltzmann_factors>:
   2609e:	f3 0f 1e fa          	endbr64 
   260a2:	55                   	push   rbp
   260a3:	48 89 e5             	mov    rbp,rsp
   260a6:	48 83 ec 20          	sub    rsp,0x20
   260aa:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   260af:	f2 0f 11 4d f0       	movsd  QWORD PTR [rbp-0x10],xmm1
   260b4:	f2 0f 11 55 e8       	movsd  QWORD PTR [rbp-0x18],xmm2
   260b9:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   260be:	f2 0f 11 45 10       	movsd  QWORD PTR [rbp+0x10],xmm0
   260c3:	f2 0f 10 45 f0       	movsd  xmm0,QWORD PTR [rbp-0x10]
   260c8:	f2 0f 11 45 18       	movsd  QWORD PTR [rbp+0x18],xmm0
   260cd:	f2 0f 10 45 e8       	movsd  xmm0,QWORD PTR [rbp-0x18]
   260d2:	f2 0f 11 05 ae b5 22 00 	movsd  QWORD PTR [rip+0x22b5ae],xmm0        # 251688 <pf_scale>
   260da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   260de:	66 48 0f 6e c0       	movq   xmm0,rax
   260e3:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   260e7:	e8 d9 4d ff ff       	call   1aec5 <get_scaled_exp_params>
   260ec:	c9                   	leave  
   260ed:	c3                   	ret    

00000000000260ee <get_scaled_pf_parameters>:
   260ee:	f3 0f 1e fa          	endbr64 
   260f2:	55                   	push   rbp
   260f3:	48 89 e5             	mov    rbp,rsp
   260f6:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   260fd:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26106:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2610a:	31 c0                	xor    eax,eax
   2610c:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   26113:	48 89 c7             	mov    rdi,rax
   26116:	e8 56 c1 00 00       	call   32271 <set_model_details>
   2611b:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   26122:	48 89 c7             	mov    rdi,rax
   26125:	e8 45 2c ff ff       	call   18d6f <vrna_exp_params>
   2612a:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
   26131:	f2 0f 10 05 4f b5 22 00 	movsd  xmm0,QWORD PTR [rip+0x22b54f]        # 251688 <pf_scale>
   26139:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   26140:	f2 0f 11 80 60 5e 06 00 	movsd  QWORD PTR [rax+0x65e60],xmm0
   26148:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   2614f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   26153:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   2615c:	74 05                	je     26163 <get_scaled_pf_parameters+0x75>
   2615e:	e8 8d d7 fd ff       	call   38f0 <__stack_chk_fail@plt>
   26163:	c9                   	leave  
   26164:	c3                   	ret    

0000000000026165 <get_boltzmann_factors_ali>:
   26165:	f3 0f 1e fa          	endbr64 
   26169:	55                   	push   rbp
   2616a:	48 89 e5             	mov    rbp,rsp
   2616d:	48 83 ec 20          	sub    rsp,0x20
   26171:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   26174:	f2 0f 11 45 f0       	movsd  QWORD PTR [rbp-0x10],xmm0
   26179:	f2 0f 11 4d e8       	movsd  QWORD PTR [rbp-0x18],xmm1
   2617e:	f2 0f 11 55 e0       	movsd  QWORD PTR [rbp-0x20],xmm2
   26183:	f2 0f 10 45 f0       	movsd  xmm0,QWORD PTR [rbp-0x10]
   26188:	f2 0f 11 45 10       	movsd  QWORD PTR [rbp+0x10],xmm0
   2618d:	f2 0f 10 45 e8       	movsd  xmm0,QWORD PTR [rbp-0x18]
   26192:	f2 0f 11 45 18       	movsd  QWORD PTR [rbp+0x18],xmm0
   26197:	f2 0f 10 45 e0       	movsd  xmm0,QWORD PTR [rbp-0x20]
   2619c:	f2 0f 11 05 e4 b4 22 00 	movsd  QWORD PTR [rip+0x22b4e4],xmm0        # 251688 <pf_scale>
   261a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   261a8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   261ab:	66 48 0f 6e c2       	movq   xmm0,rdx
   261b0:	89 c6                	mov    esi,eax
   261b2:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   261b6:	e8 36 a5 ff ff       	call   206f1 <get_exp_params_ali>
   261bb:	c9                   	leave  
   261bc:	c3                   	ret    

00000000000261bd <get_scaled_alipf_parameters>:
   261bd:	f3 0f 1e fa          	endbr64 
   261c1:	55                   	push   rbp
   261c2:	48 89 e5             	mov    rbp,rsp
   261c5:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   261cc:	89 bd 0c f8 ff ff    	mov    DWORD PTR [rbp-0x7f4],edi
   261d2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   261db:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   261df:	31 c0                	xor    eax,eax
   261e1:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   261e8:	48 89 c7             	mov    rdi,rax
   261eb:	e8 81 c0 00 00       	call   32271 <set_model_details>
   261f0:	48 8b 0d 91 b4 22 00 	mov    rcx,QWORD PTR [rip+0x22b491]        # 251688 <pf_scale>
   261f7:	8b 95 0c f8 ff ff    	mov    edx,DWORD PTR [rbp-0x7f4]
   261fd:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   26204:	66 48 0f 6e c1       	movq   xmm0,rcx
   26209:	89 d6                	mov    esi,edx
   2620b:	48 89 c7             	mov    rdi,rax
   2620e:	e8 de a4 ff ff       	call   206f1 <get_exp_params_ali>
   26213:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   26217:	64 48 33 34 25 28 00 00 00 	xor    rsi,QWORD PTR fs:0x28
   26220:	74 05                	je     26227 <get_scaled_alipf_parameters+0x6a>
   26222:	e8 c9 d6 fd ff       	call   38f0 <__stack_chk_fail@plt>
   26227:	c9                   	leave  
   26228:	c3                   	ret    

0000000000026229 <get_boltzmann_factor_copy>:
   26229:	f3 0f 1e fa          	endbr64 
   2622d:	55                   	push   rbp
   2622e:	48 89 e5             	mov    rbp,rsp
   26231:	48 83 ec 10          	sub    rsp,0x10
   26235:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26239:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2623d:	48 89 c7             	mov    rdi,rax
   26240:	e8 a3 2c ff ff       	call   18ee8 <vrna_exp_params_copy>
   26245:	c9                   	leave  
   26246:	c3                   	ret    

0000000000026247 <get_parameter_copy>:
   26247:	f3 0f 1e fa          	endbr64 
   2624b:	55                   	push   rbp
   2624c:	48 89 e5             	mov    rbp,rsp
   2624f:	48 83 ec 10          	sub    rsp,0x10
   26253:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26257:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2625b:	48 89 c7             	mov    rdi,rax
   2625e:	e8 3a 2c ff ff       	call   18e9d <vrna_params_copy>
   26263:	c9                   	leave  
   26264:	c3                   	ret    

0000000000026265 <copy_parameters>:
   26265:	f3 0f 1e fa          	endbr64 
   26269:	55                   	push   rbp
   2626a:	48 89 e5             	mov    rbp,rsp
   2626d:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   26274:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2627d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   26281:	31 c0                	xor    eax,eax
   26283:	8b 15 77 c7 22 00    	mov    edx,DWORD PTR [rip+0x22c777]        # 252a00 <p>
   26289:	8b 05 51 b2 22 00    	mov    eax,DWORD PTR [rip+0x22b251]        # 2514e0 <id>
   2628f:	39 c2                	cmp    edx,eax
   26291:	74 20                	je     262b3 <copy_parameters+0x4e>
   26293:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2629a:	48 89 c7             	mov    rdi,rax
   2629d:	e8 cf bf 00 00       	call   32271 <set_model_details>
   262a2:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   262a9:	48 89 c7             	mov    rdi,rax
   262ac:	e8 4a 2a ff ff       	call   18cfb <vrna_params>
   262b1:	eb 33                	jmp    262e6 <copy_parameters+0x81>
   262b3:	bf 80 3e 03 00       	mov    edi,0x33e80
   262b8:	e8 54 8a 00 00       	call   2ed11 <vrna_alloc>
   262bd:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
   262c4:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   262cb:	ba 80 3e 03 00       	mov    edx,0x33e80
   262d0:	48 8d 35 29 c7 22 00 	lea    rsi,[rip+0x22c729]        # 252a00 <p>
   262d7:	48 89 c7             	mov    rdi,rax
   262da:	e8 51 d5 fd ff       	call   3830 <memcpy@plt>
   262df:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   262e6:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   262ea:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   262f3:	74 05                	je     262fa <copy_parameters+0x95>
   262f5:	e8 f6 d5 fd ff       	call   38f0 <__stack_chk_fail@plt>
   262fa:	c9                   	leave  
   262fb:	c3                   	ret    

00000000000262fc <set_parameters>:
   262fc:	f3 0f 1e fa          	endbr64 
   26300:	55                   	push   rbp
   26301:	48 89 e5             	mov    rbp,rsp
   26304:	48 83 ec 10          	sub    rsp,0x10
   26308:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2630c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26310:	ba 80 3e 03 00       	mov    edx,0x33e80
   26315:	48 89 c6             	mov    rsi,rax
   26318:	48 8d 3d e1 c6 22 00 	lea    rdi,[rip+0x22c6e1]        # 252a00 <p>
   2631f:	e8 0c d5 fd ff       	call   3830 <memcpy@plt>
   26324:	48 8d 05 d5 c6 22 00 	lea    rax,[rip+0x22c6d5]        # 252a00 <p>
   2632b:	c9                   	leave  
   2632c:	c3                   	ret    

000000000002632d <copy_pf_param>:
   2632d:	f3 0f 1e fa          	endbr64 
   26331:	55                   	push   rbp
   26332:	48 89 e5             	mov    rbp,rsp
   26335:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   2633c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26345:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   26349:	31 c0                	xor    eax,eax
   2634b:	8b 15 2f 05 26 00    	mov    edx,DWORD PTR [rip+0x26052f]        # 286880 <pf>
   26351:	8b 05 8d b1 22 00    	mov    eax,DWORD PTR [rip+0x22b18d]        # 2514e4 <pf_id>
   26357:	39 c2                	cmp    edx,eax
   26359:	74 45                	je     263a0 <copy_pf_param+0x73>
   2635b:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   26362:	48 89 c7             	mov    rdi,rax
   26365:	e8 07 bf 00 00       	call   32271 <set_model_details>
   2636a:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   26371:	48 89 c7             	mov    rdi,rax
   26374:	e8 f6 29 ff ff       	call   18d6f <vrna_exp_params>
   26379:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
   26380:	f2 0f 10 05 00 b3 22 00 	movsd  xmm0,QWORD PTR [rip+0x22b300]        # 251688 <pf_scale>
   26388:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   2638f:	f2 0f 11 80 60 5e 06 00 	movsd  QWORD PTR [rax+0x65e60],xmm0
   26397:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   2639e:	eb 33                	jmp    263d3 <copy_pf_param+0xa6>
   263a0:	bf 60 67 06 00       	mov    edi,0x66760
   263a5:	e8 67 89 00 00       	call   2ed11 <vrna_alloc>
   263aa:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
   263b1:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   263b8:	ba 60 67 06 00       	mov    edx,0x66760
   263bd:	48 8d 35 bc 04 26 00 	lea    rsi,[rip+0x2604bc]        # 286880 <pf>
   263c4:	48 89 c7             	mov    rdi,rax
   263c7:	e8 64 d4 fd ff       	call   3830 <memcpy@plt>
   263cc:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   263d3:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   263d7:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   263e0:	74 05                	je     263e7 <copy_pf_param+0xba>
   263e2:	e8 09 d5 fd ff       	call   38f0 <__stack_chk_fail@plt>
   263e7:	c9                   	leave  
   263e8:	c3                   	ret    

00000000000263e9 <set_pf_param>:
   263e9:	f3 0f 1e fa          	endbr64 
   263ed:	55                   	push   rbp
   263ee:	48 89 e5             	mov    rbp,rsp
   263f1:	48 83 ec 10          	sub    rsp,0x10
   263f5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   263f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263fd:	ba 60 67 06 00       	mov    edx,0x66760
   26402:	48 89 c6             	mov    rsi,rax
   26405:	48 8d 3d 74 04 26 00 	lea    rdi,[rip+0x260474]        # 286880 <pf>
   2640c:	e8 1f d4 fd ff       	call   3830 <memcpy@plt>
   26411:	48 8d 05 68 04 26 00 	lea    rax,[rip+0x260468]        # 286880 <pf>
   26418:	c9                   	leave  
   26419:	c3                   	ret    

000000000002641a <scale_pf_parameters>:
   2641a:	f3 0f 1e fa          	endbr64 
   2641e:	55                   	push   rbp
   2641f:	48 89 e5             	mov    rbp,rsp
   26422:	48 81 ec 00 08 00 00 	sub    rsp,0x800
   26429:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26432:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   26436:	31 c0                	xor    eax,eax
   26438:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2643f:	48 89 c7             	mov    rdi,rax
   26442:	e8 2a be 00 00       	call   32271 <set_model_details>
   26447:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2644e:	48 89 c7             	mov    rdi,rax
   26451:	e8 19 29 ff ff       	call   18d6f <vrna_exp_params>
   26456:	48 89 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],rax
   2645d:	f2 0f 10 05 23 b2 22 00 	movsd  xmm0,QWORD PTR [rip+0x22b223]        # 251688 <pf_scale>
   26465:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   2646c:	f2 0f 11 80 60 5e 06 00 	movsd  QWORD PTR [rax+0x65e60],xmm0
   26474:	48 8b 85 08 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x7f8]
   2647b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2647f:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   26488:	74 05                	je     2648f <scale_pf_parameters+0x75>
   2648a:	e8 61 d4 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2648f:	c9                   	leave  
   26490:	c3                   	ret    

0000000000026491 <vrna_params_load>:
   26491:	f3 0f 1e fa          	endbr64 
   26495:	55                   	push   rbp
   26496:	48 89 e5             	mov    rbp,rsp
   26499:	48 83 ec 30          	sub    rsp,0x30
   2649d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   264a1:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   264a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   264ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   264af:	48 89 c7             	mov    rdi,rax
   264b2:	e8 47 03 00 00       	call   267fe <file2array>
   264b7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   264bb:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   264c0:	74 68                	je     2652a <vrna_params_load+0x99>
   264c2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   264c6:	48 89 c7             	mov    rdi,rax
   264c9:	e8 87 c3 00 00       	call   32855 <vrna_basename>
   264ce:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   264d2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   264d6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   264da:	48 89 d6             	mov    rsi,rdx
   264dd:	48 89 c7             	mov    rdi,rax
   264e0:	e8 43 04 00 00       	call   26928 <set_parameters_from_string>
   264e5:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   264e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264ec:	48 89 c7             	mov    rdi,rax
   264ef:	e8 4c d4 fd ff       	call   3940 <free@plt>
   264f4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   264f8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   264fc:	eb 14                	jmp    26512 <vrna_params_load+0x81>
   264fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   26502:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26505:	48 89 c7             	mov    rdi,rax
   26508:	e8 33 d4 fd ff       	call   3940 <free@plt>
   2650d:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
   26512:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   26516:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26519:	48 85 c0             	test   rax,rax
   2651c:	75 e0                	jne    264fe <vrna_params_load+0x6d>
   2651e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26522:	48 89 c7             	mov    rdi,rax
   26525:	e8 16 d4 fd ff       	call   3940 <free@plt>
   2652a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2652d:	c9                   	leave  
   2652e:	c3                   	ret    

000000000002652f <vrna_params_save>:
   2652f:	f3 0f 1e fa          	endbr64 
   26533:	55                   	push   rbp
   26534:	48 89 e5             	mov    rbp,rsp
   26537:	48 83 ec 10          	sub    rsp,0x10
   2653b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2653f:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26542:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   26545:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26549:	89 d6                	mov    esi,edx
   2654b:	48 89 c7             	mov    rdi,rax
   2654e:	e8 8d 38 00 00       	call   29de0 <save_parameter_file>
   26553:	c9                   	leave  
   26554:	c3                   	ret    

0000000000026555 <vrna_params_load_from_string>:
   26555:	f3 0f 1e fa          	endbr64 
   26559:	55                   	push   rbp
   2655a:	48 89 e5             	mov    rbp,rsp
   2655d:	53                   	push   rbx
   2655e:	48 83 ec 78          	sub    rsp,0x78
   26562:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
   26566:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
   2656a:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
   2656d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26576:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2657a:	31 c0                	xor    eax,eax
   2657c:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   26583:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   26588:	0f 84 55 01 00 00    	je     266e3 <vrna_params_load_from_string+0x18e>
   2658e:	48 c7 45 d8 00 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
   26596:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2659a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2659e:	48 c7 45 b8 00 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
   265a6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   265aa:	48 89 c7             	mov    rdi,rax
   265ad:	e8 a7 79 00 00       	call   2df59 <strdup>
   265b2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   265b6:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   265ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   265be:	48 8d 35 86 f6 1b 00 	lea    rsi,[rip+0x1bf686]        # 1e5c4b <parameter_set_rna_turner2004+0x5d2ab>
   265c5:	48 89 c7             	mov    rdi,rax
   265c8:	e8 83 d5 fd ff       	call   3b50 <strtok_r@plt>
   265cd:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   265d1:	eb 76                	jmp    26649 <vrna_params_load_from_string+0xf4>
   265d3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   265d7:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
   265db:	75 25                	jne    26602 <vrna_params_load_from_string+0xad>
   265dd:	48 81 45 d8 00 80 00 00 	add    QWORD PTR [rbp-0x28],0x8000
   265e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   265e9:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   265f0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   265f4:	89 d6                	mov    esi,edx
   265f6:	48 89 c7             	mov    rdi,rax
   265f9:	e8 9b 87 00 00       	call   2ed99 <vrna_realloc>
   265fe:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   26602:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   26606:	48 8d 50 01          	lea    rdx,[rax+0x1]
   2660a:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
   2660e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   26616:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2661a:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   2661e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   26622:	48 89 c7             	mov    rdi,rax
   26625:	e8 2f 79 00 00       	call   2df59 <strdup>
   2662a:	48 89 03             	mov    QWORD PTR [rbx],rax
   2662d:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   26631:	48 89 c2             	mov    rdx,rax
   26634:	48 8d 35 10 f6 1b 00 	lea    rsi,[rip+0x1bf610]        # 1e5c4b <parameter_set_rna_turner2004+0x5d2ab>
   2663b:	bf 00 00 00 00       	mov    edi,0x0
   26640:	e8 0b d5 fd ff       	call   3b50 <strtok_r@plt>
   26645:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   26649:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   2664e:	75 83                	jne    265d3 <vrna_params_load_from_string+0x7e>
   26650:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   26654:	48 83 c0 01          	add    rax,0x1
   26658:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   2665f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   26663:	89 d6                	mov    esi,edx
   26665:	48 89 c7             	mov    rdi,rax
   26668:	e8 2c 87 00 00       	call   2ed99 <vrna_realloc>
   2666d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   26671:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   26675:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2667d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   26681:	48 01 d0             	add    rax,rdx
   26684:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   2668b:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   2668f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   26693:	48 89 d6             	mov    rsi,rdx
   26696:	48 89 c7             	mov    rdi,rax
   26699:	e8 8a 02 00 00       	call   26928 <set_parameters_from_string>
   2669e:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   266a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   266a5:	48 89 c7             	mov    rdi,rax
   266a8:	e8 93 d2 fd ff       	call   3940 <free@plt>
   266ad:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   266b1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   266b5:	eb 14                	jmp    266cb <vrna_params_load_from_string+0x176>
   266b7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   266bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   266be:	48 89 c7             	mov    rdi,rax
   266c1:	e8 7a d2 fd ff       	call   3940 <free@plt>
   266c6:	48 83 45 c0 08       	add    QWORD PTR [rbp-0x40],0x8
   266cb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   266cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   266d2:	48 85 c0             	test   rax,rax
   266d5:	75 e0                	jne    266b7 <vrna_params_load_from_string+0x162>
   266d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   266db:	48 89 c7             	mov    rdi,rax
   266de:	e8 5d d2 fd ff       	call   3940 <free@plt>
   266e3:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   266e6:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   266ea:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   266f3:	74 05                	je     266fa <vrna_params_load_from_string+0x1a5>
   266f5:	e8 f6 d1 fd ff       	call   38f0 <__stack_chk_fail@plt>
   266fa:	48 83 c4 78          	add    rsp,0x78
   266fe:	5b                   	pop    rbx
   266ff:	5d                   	pop    rbp
   26700:	c3                   	ret    

0000000000026701 <vrna_params_load_defaults>:
   26701:	f3 0f 1e fa          	endbr64 
   26705:	55                   	push   rbp
   26706:	48 89 e5             	mov    rbp,rsp
   26709:	e8 02 00 00 00       	call   26710 <vrna_params_load_RNA_Turner2004>
   2670e:	5d                   	pop    rbp
   2670f:	c3                   	ret    

0000000000026710 <vrna_params_load_RNA_Turner2004>:
   26710:	f3 0f 1e fa          	endbr64 
   26714:	55                   	push   rbp
   26715:	48 89 e5             	mov    rbp,rsp
   26718:	ba 00 00 00 00       	mov    edx,0x0
   2671d:	48 8d 35 29 f5 1b 00 	lea    rsi,[rip+0x1bf529]        # 1e5c4d <parameter_set_rna_turner2004+0x5d2ad>
   26724:	48 8d 3d 75 22 16 00 	lea    rdi,[rip+0x162275]        # 1889a0 <parameter_set_rna_turner2004>
   2672b:	e8 25 fe ff ff       	call   26555 <vrna_params_load_from_string>
   26730:	5d                   	pop    rbp
   26731:	c3                   	ret    

0000000000026732 <vrna_params_load_RNA_Turner1999>:
   26732:	f3 0f 1e fa          	endbr64 
   26736:	55                   	push   rbp
   26737:	48 89 e5             	mov    rbp,rsp
   2673a:	ba 00 00 00 00       	mov    edx,0x0
   2673f:	48 8d 35 19 f5 1b 00 	lea    rsi,[rip+0x1bf519]        # 1e5c5f <parameter_set_rna_turner2004+0x5d2bf>
   26746:	48 8d 3d 33 4d 12 00 	lea    rdi,[rip+0x124d33]        # 14b480 <parameter_set_rna_turner1999>
   2674d:	e8 03 fe ff ff       	call   26555 <vrna_params_load_from_string>
   26752:	5d                   	pop    rbp
   26753:	c3                   	ret    

0000000000026754 <vrna_params_load_RNA_Andronescu2007>:
   26754:	f3 0f 1e fa          	endbr64 
   26758:	55                   	push   rbp
   26759:	48 89 e5             	mov    rbp,rsp
   2675c:	ba 00 00 00 00       	mov    edx,0x0
   26761:	48 8d 35 09 f5 1b 00 	lea    rsi,[rip+0x1bf509]        # 1e5c71 <parameter_set_rna_turner2004+0x5d2d1>
   26768:	48 8d 3d d1 8f 0a 00 	lea    rdi,[rip+0xa8fd1]        # cf740 <parameter_set_rna_andronescu2007>
   2676f:	e8 e1 fd ff ff       	call   26555 <vrna_params_load_from_string>
   26774:	5d                   	pop    rbp
   26775:	c3                   	ret    

0000000000026776 <vrna_params_load_RNA_Langdon2018>:
   26776:	f3 0f 1e fa          	endbr64 
   2677a:	55                   	push   rbp
   2677b:	48 89 e5             	mov    rbp,rsp
   2677e:	ba 00 00 00 00       	mov    edx,0x0
   26783:	48 8d 35 fd f4 1b 00 	lea    rsi,[rip+0x1bf4fd]        # 1e5c87 <parameter_set_rna_turner2004+0x5d2e7>
   2678a:	48 8d 3d cf 64 0e 00 	lea    rdi,[rip+0xe64cf]        # 10cc60 <parameter_set_rna_langdon2018>
   26791:	e8 bf fd ff ff       	call   26555 <vrna_params_load_from_string>
   26796:	5d                   	pop    rbp
   26797:	c3                   	ret    

0000000000026798 <vrna_params_load_RNA_misc_special_hairpins>:
   26798:	f3 0f 1e fa          	endbr64 
   2679c:	55                   	push   rbp
   2679d:	48 89 e5             	mov    rbp,rsp
   267a0:	ba 00 00 00 00       	mov    edx,0x0
   267a5:	48 8d 35 ee f4 1b 00 	lea    rsi,[rip+0x1bf4ee]        # 1e5c9a <parameter_set_rna_turner2004+0x5d2fa>
   267ac:	48 8d 3d cd 39 12 00 	lea    rdi,[rip+0x1239cd]        # 14a180 <parameter_set_rna_misc_special_hairpins>
   267b3:	e8 9d fd ff ff       	call   26555 <vrna_params_load_from_string>
   267b8:	5d                   	pop    rbp
   267b9:	c3                   	ret    

00000000000267ba <vrna_params_load_DNA_Mathews2004>:
   267ba:	f3 0f 1e fa          	endbr64 
   267be:	55                   	push   rbp
   267bf:	48 89 e5             	mov    rbp,rsp
   267c2:	ba 00 00 00 00       	mov    edx,0x0
   267c7:	48 8d 35 e9 f4 1b 00 	lea    rsi,[rip+0x1bf4e9]        # 1e5cb7 <parameter_set_rna_turner2004+0x5d317>
   267ce:	48 8d 3d 6b be 04 00 	lea    rdi,[rip+0x4be6b]        # 72640 <parameter_set_dna_mathews2004>
   267d5:	e8 7b fd ff ff       	call   26555 <vrna_params_load_from_string>
   267da:	5d                   	pop    rbp
   267db:	c3                   	ret    

00000000000267dc <vrna_params_load_DNA_Mathews1999>:
   267dc:	f3 0f 1e fa          	endbr64 
   267e0:	55                   	push   rbp
   267e1:	48 89 e5             	mov    rbp,rsp
   267e4:	ba 00 00 00 00       	mov    edx,0x0
   267e9:	48 8d 35 da f4 1b 00 	lea    rsi,[rip+0x1bf4da]        # 1e5cca <parameter_set_rna_turner2004+0x5d32a>
   267f0:	48 8d 3d 29 e7 00 00 	lea    rdi,[rip+0xe729]        # 34f20 <parameter_set_dna_mathews1999>
   267f7:	e8 59 fd ff ff       	call   26555 <vrna_params_load_from_string>
   267fc:	5d                   	pop    rbp
   267fd:	c3                   	ret    

00000000000267fe <file2array>:
   267fe:	f3 0f 1e fa          	endbr64 
   26802:	55                   	push   rbp
   26803:	48 89 e5             	mov    rbp,rsp
   26806:	48 83 ec 40          	sub    rsp,0x40
   2680a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2680e:	48 c7 45 d8 00 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
   26816:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2681a:	48 8d 35 bc f4 1b 00 	lea    rsi,[rip+0x1bf4bc]        # 1e5cdd <parameter_set_rna_turner2004+0x5d33d>
   26821:	48 89 c7             	mov    rdi,rax
   26824:	e8 07 d1 fd ff       	call   3930 <fopen@plt>
   26829:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2682d:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   26832:	0f 84 d2 00 00 00    	je     2690a <file2array+0x10c>
   26838:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   26840:	48 c7 45 e8 00 80 00 00 	mov    QWORD PTR [rbp-0x18],0x8000
   26848:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2684c:	c1 e0 03             	shl    eax,0x3
   2684f:	89 c7                	mov    edi,eax
   26851:	e8 bb 84 00 00       	call   2ed11 <vrna_alloc>
   26856:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2685a:	eb 4e                	jmp    268aa <file2array+0xac>
   2685c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   26860:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
   26864:	75 25                	jne    2688b <file2array+0x8d>
   26866:	48 81 45 e8 00 80 00 00 	add    QWORD PTR [rbp-0x18],0x8000
   2686e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   26872:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   26879:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2687d:	89 d6                	mov    esi,edx
   2687f:	48 89 c7             	mov    rdi,rax
   26882:	e8 12 85 00 00       	call   2ed99 <vrna_realloc>
   26887:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2688b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2688f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   26897:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2689b:	48 01 c2             	add    rdx,rax
   2689e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268a2:	48 89 02             	mov    QWORD PTR [rdx],rax
   268a5:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
   268aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   268ae:	48 89 c7             	mov    rdi,rax
   268b1:	e8 0b bc 00 00       	call   324c1 <vrna_read_line>
   268b6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   268ba:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   268bf:	75 9b                	jne    2685c <file2array+0x5e>
   268c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   268c5:	48 83 c0 01          	add    rax,0x1
   268c9:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   268d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   268d4:	89 d6                	mov    esi,edx
   268d6:	48 89 c7             	mov    rdi,rax
   268d9:	e8 bb 84 00 00       	call   2ed99 <vrna_realloc>
   268de:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   268e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   268e6:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   268ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   268f2:	48 01 d0             	add    rax,rdx
   268f5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   268fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26900:	48 89 c7             	mov    rdi,rax
   26903:	e8 98 cf fd ff       	call   38a0 <fclose@plt>
   26908:	eb 18                	jmp    26922 <file2array+0x124>
   2690a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2690e:	48 89 c6             	mov    rsi,rax
   26911:	48 8d 3d c8 f3 1b 00 	lea    rdi,[rip+0x1bf3c8]        # 1e5ce0 <parameter_set_rna_turner2004+0x5d340>
   26918:	b8 00 00 00 00       	mov    eax,0x0
   2691d:	e8 c9 86 00 00       	call   2efeb <vrna_message_warning>
   26922:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26926:	c9                   	leave  
   26927:	c3                   	ret    

0000000000026928 <set_parameters_from_string>:
   26928:	f3 0f 1e fa          	endbr64 
   2692c:	55                   	push   rbp
   2692d:	48 89 e5             	mov    rbp,rsp
   26930:	48 81 ec 60 01 00 00 	sub    rsp,0x160
   26937:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
   2693e:	48 89 b5 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rsi
   26945:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2694e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   26952:	31 c0                	xor    eax,eax
   26954:	48 c7 85 c0 fe ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x140],0x0
   2695f:	48 83 bd a8 fe ff ff 00 	cmp    QWORD PTR [rbp-0x158],0x0
   26967:	74 21                	je     2698a <set_parameters_from_string+0x62>
   26969:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
   26970:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   26978:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   2697f:	48 01 d0             	add    rax,rdx
   26982:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26985:	48 85 c0             	test   rax,rax
   26988:	75 0a                	jne    26994 <set_parameters_from_string+0x6c>
   2698a:	b8 00 00 00 00       	mov    eax,0x0
   2698f:	e9 96 08 00 00       	jmp    2722a <set_parameters_from_string+0x902>
   26994:	48 8b 05 45 66 2c 00 	mov    rax,QWORD PTR [rip+0x2c6645]        # 2ecfe0 <last_param_file>
   2699b:	48 89 c7             	mov    rdi,rax
   2699e:	e8 9d cf fd ff       	call   3940 <free@plt>
   269a3:	48 83 bd a0 fe ff ff 00 	cmp    QWORD PTR [rbp-0x160],0x0
   269ab:	74 11                	je     269be <set_parameters_from_string+0x96>
   269ad:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
   269b4:	48 89 c7             	mov    rdi,rax
   269b7:	e8 9d 75 00 00       	call   2df59 <strdup>
   269bc:	eb 05                	jmp    269c3 <set_parameters_from_string+0x9b>
   269be:	b8 00 00 00 00       	mov    eax,0x0
   269c3:	48 89 05 16 66 2c 00 	mov    QWORD PTR [rip+0x2c6616],rax        # 2ecfe0 <last_param_file>
   269ca:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
   269d1:	48 8d 50 01          	lea    rdx,[rax+0x1]
   269d5:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
   269dc:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   269e4:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   269eb:	48 01 d0             	add    rax,rdx
   269ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
   269f1:	ba 1e 00 00 00       	mov    edx,0x1e
   269f6:	48 8d 35 13 f3 1b 00 	lea    rsi,[rip+0x1bf313]        # 1e5d10 <parameter_set_rna_turner2004+0x5d370>
   269fd:	48 89 c7             	mov    rdi,rax
   26a00:	e8 4b cd fd ff       	call   3750 <strncmp@plt>
   26a05:	85 c0                	test   eax,eax
   26a07:	0f 84 d7 07 00 00    	je     271e4 <set_parameters_from_string+0x8bc>
   26a0d:	48 8d 3d 1c f3 1b 00 	lea    rdi,[rip+0x1bf31c]        # 1e5d30 <parameter_set_rna_turner2004+0x5d390>
   26a14:	b8 00 00 00 00       	mov    eax,0x0
   26a19:	e8 cd 85 00 00       	call   2efeb <vrna_message_warning>
   26a1e:	e9 c1 07 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26a23:	48 8d 95 f0 fe ff ff 	lea    rdx,[rbp-0x110]
   26a2a:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
   26a31:	48 8d 35 56 f3 1b 00 	lea    rsi,[rip+0x1bf356]        # 1e5d8e <parameter_set_rna_turner2004+0x5d3ee>
   26a38:	48 89 c7             	mov    rdi,rax
   26a3b:	b8 00 00 00 00       	mov    eax,0x0
   26a40:	e8 4b ce fd ff       	call   3890 <__isoc99_sscanf@plt>
   26a45:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
   26a4b:	83 bd b8 fe ff ff 01 	cmp    DWORD PTR [rbp-0x148],0x1
   26a52:	0f 85 8b 07 00 00    	jne    271e3 <set_parameters_from_string+0x8bb>
   26a58:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
   26a5f:	48 89 c7             	mov    rdi,rax
   26a62:	e8 34 52 00 00       	call   2bc9b <gettype>
   26a67:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
   26a6d:	83 bd bc fe ff ff 24 	cmp    DWORD PTR [rbp-0x144],0x24
   26a74:	0f 87 4c 07 00 00    	ja     271c6 <set_parameters_from_string+0x89e>
   26a7a:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   26a80:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   26a88:	48 8d 05 39 f3 1b 00 	lea    rax,[rip+0x1bf339]        # 1e5dc8 <parameter_set_rna_turner2004+0x5d428>
   26a8f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   26a92:	48 98                	cdqe   
   26a94:	48 8d 15 2d f3 1b 00 	lea    rdx,[rip+0x1bf32d]        # 1e5dc8 <parameter_set_rna_turner2004+0x5d428>
   26a9b:	48 01 d0             	add    rax,rdx
   26a9e:	3e ff e0             	notrack jmp rax
   26aa1:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26aa8:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26aaf:	4c 8d 05 42 aa 22 00 	lea    r8,[rip+0x22aa42]        # 2514f8 <stack_shift>
   26ab6:	48 8d 0d 33 aa 22 00 	lea    rcx,[rip+0x22aa33]        # 2514f0 <stack_dim>
   26abd:	48 8d 15 bc 67 1c 00 	lea    rdx,[rip+0x1c67bc]        # 1ed280 <stack37>
   26ac4:	48 89 c7             	mov    rdi,rax
   26ac7:	e8 97 0b 00 00       	call   27663 <rd_2dim>
   26acc:	e9 13 07 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26ad1:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26ad8:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26adf:	4c 8d 05 12 aa 22 00 	lea    r8,[rip+0x22aa12]        # 2514f8 <stack_shift>
   26ae6:	48 8d 0d 03 aa 22 00 	lea    rcx,[rip+0x22aa03]        # 2514f0 <stack_dim>
   26aed:	48 8d 15 8c 68 1c 00 	lea    rdx,[rip+0x1c688c]        # 1ed380 <stackdH>
   26af4:	48 89 c7             	mov    rdi,rax
   26af7:	e8 67 0b 00 00       	call   27663 <rd_2dim>
   26afc:	e9 e3 06 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26b01:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26b08:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26b0f:	41 b8 00 00 00 00    	mov    r8d,0x0
   26b15:	b9 1f 00 00 00       	mov    ecx,0x1f
   26b1a:	48 8d 15 5f 69 1c 00 	lea    rdx,[rip+0x1c695f]        # 1ed480 <hairpin37>
   26b21:	48 89 c7             	mov    rdi,rax
   26b24:	e8 6d 0a 00 00       	call   27596 <rd_1dim>
   26b29:	e9 b6 06 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26b2e:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26b35:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26b3c:	41 b8 00 00 00 00    	mov    r8d,0x0
   26b42:	b9 1f 00 00 00       	mov    ecx,0x1f
   26b47:	48 8d 15 b2 69 1c 00 	lea    rdx,[rip+0x1c69b2]        # 1ed500 <hairpindH>
   26b4e:	48 89 c7             	mov    rdi,rax
   26b51:	e8 40 0a 00 00       	call   27596 <rd_1dim>
   26b56:	e9 89 06 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26b5b:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26b62:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26b69:	41 b8 00 00 00 00    	mov    r8d,0x0
   26b6f:	b9 1f 00 00 00       	mov    ecx,0x1f
   26b74:	48 8d 15 05 6a 1c 00 	lea    rdx,[rip+0x1c6a05]        # 1ed580 <bulge37>
   26b7b:	48 89 c7             	mov    rdi,rax
   26b7e:	e8 13 0a 00 00       	call   27596 <rd_1dim>
   26b83:	e9 5c 06 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26b88:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26b8f:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26b96:	41 b8 00 00 00 00    	mov    r8d,0x0
   26b9c:	b9 1f 00 00 00       	mov    ecx,0x1f
   26ba1:	48 8d 15 58 6a 1c 00 	lea    rdx,[rip+0x1c6a58]        # 1ed600 <bulgedH>
   26ba8:	48 89 c7             	mov    rdi,rax
   26bab:	e8 e6 09 00 00       	call   27596 <rd_1dim>
   26bb0:	e9 2f 06 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26bb5:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26bbc:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26bc3:	41 b8 00 00 00 00    	mov    r8d,0x0
   26bc9:	b9 1f 00 00 00       	mov    ecx,0x1f
   26bce:	48 8d 15 ab 6a 1c 00 	lea    rdx,[rip+0x1c6aab]        # 1ed680 <internal_loop37>
   26bd5:	48 89 c7             	mov    rdi,rax
   26bd8:	e8 b9 09 00 00       	call   27596 <rd_1dim>
   26bdd:	e9 02 06 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26be2:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26be9:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26bf0:	41 b8 00 00 00 00    	mov    r8d,0x0
   26bf6:	b9 1f 00 00 00       	mov    ecx,0x1f
   26bfb:	48 8d 15 fe 6a 1c 00 	lea    rdx,[rip+0x1c6afe]        # 1ed700 <internal_loopdH>
   26c02:	48 89 c7             	mov    rdi,rax
   26c05:	e8 8c 09 00 00       	call   27596 <rd_1dim>
   26c0a:	e9 d5 05 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26c0f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26c16:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26c1d:	4c 8d 05 ec a8 22 00 	lea    r8,[rip+0x22a8ec]        # 251510 <mismatch_shift>
   26c24:	48 8d 0d d5 a8 22 00 	lea    rcx,[rip+0x22a8d5]        # 251500 <mismatch_dim>
   26c2b:	48 8d 15 8e 8a 1c 00 	lea    rdx,[rip+0x1c8a8e]        # 1ef6c0 <mismatchExt37>
   26c32:	48 89 c7             	mov    rdi,rax
   26c35:	e8 af 0b 00 00       	call   277e9 <rd_3dim>
   26c3a:	e9 a5 05 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26c3f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26c46:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26c4d:	4c 8d 05 bc a8 22 00 	lea    r8,[rip+0x22a8bc]        # 251510 <mismatch_shift>
   26c54:	48 8d 0d a5 a8 22 00 	lea    rcx,[rip+0x22a8a5]        # 251500 <mismatch_dim>
   26c5b:	48 8d 15 7e 8d 1c 00 	lea    rdx,[rip+0x1c8d7e]        # 1ef9e0 <mismatchExtdH>
   26c62:	48 89 c7             	mov    rdi,rax
   26c65:	e8 7f 0b 00 00       	call   277e9 <rd_3dim>
   26c6a:	e9 75 05 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26c6f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26c76:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26c7d:	4c 8d 05 8c a8 22 00 	lea    r8,[rip+0x22a88c]        # 251510 <mismatch_shift>
   26c84:	48 8d 0d 75 a8 22 00 	lea    rcx,[rip+0x22a875]        # 251500 <mismatch_dim>
   26c8b:	48 8d 15 2e 71 1c 00 	lea    rdx,[rip+0x1c712e]        # 1eddc0 <mismatchH37>
   26c92:	48 89 c7             	mov    rdi,rax
   26c95:	e8 4f 0b 00 00       	call   277e9 <rd_3dim>
   26c9a:	e9 45 05 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26c9f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26ca6:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26cad:	4c 8d 05 5c a8 22 00 	lea    r8,[rip+0x22a85c]        # 251510 <mismatch_shift>
   26cb4:	48 8d 0d 45 a8 22 00 	lea    rcx,[rip+0x22a845]        # 251500 <mismatch_dim>
   26cbb:	48 8d 15 1e 74 1c 00 	lea    rdx,[rip+0x1c741e]        # 1ee0e0 <mismatchHdH>
   26cc2:	48 89 c7             	mov    rdi,rax
   26cc5:	e8 1f 0b 00 00       	call   277e9 <rd_3dim>
   26cca:	e9 15 05 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26ccf:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26cd6:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26cdd:	4c 8d 05 2c a8 22 00 	lea    r8,[rip+0x22a82c]        # 251510 <mismatch_shift>
   26ce4:	48 8d 0d 15 a8 22 00 	lea    rcx,[rip+0x22a815]        # 251500 <mismatch_dim>
   26ceb:	48 8d 15 8e 6a 1c 00 	lea    rdx,[rip+0x1c6a8e]        # 1ed780 <mismatchI37>
   26cf2:	48 89 c7             	mov    rdi,rax
   26cf5:	e8 ef 0a 00 00       	call   277e9 <rd_3dim>
   26cfa:	e9 e5 04 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26cff:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26d06:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26d0d:	4c 8d 05 fc a7 22 00 	lea    r8,[rip+0x22a7fc]        # 251510 <mismatch_shift>
   26d14:	48 8d 0d e5 a7 22 00 	lea    rcx,[rip+0x22a7e5]        # 251500 <mismatch_dim>
   26d1b:	48 8d 15 7e 6d 1c 00 	lea    rdx,[rip+0x1c6d7e]        # 1edaa0 <mismatchIdH>
   26d22:	48 89 c7             	mov    rdi,rax
   26d25:	e8 bf 0a 00 00       	call   277e9 <rd_3dim>
   26d2a:	e9 b5 04 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26d2f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26d36:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26d3d:	4c 8d 05 cc a7 22 00 	lea    r8,[rip+0x22a7cc]        # 251510 <mismatch_shift>
   26d44:	48 8d 0d b5 a7 22 00 	lea    rcx,[rip+0x22a7b5]        # 251500 <mismatch_dim>
   26d4b:	48 8d 15 ee 7c 1c 00 	lea    rdx,[rip+0x1c7cee]        # 1eea40 <mismatch1nI37>
   26d52:	48 89 c7             	mov    rdi,rax
   26d55:	e8 8f 0a 00 00       	call   277e9 <rd_3dim>
   26d5a:	e9 85 04 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26d5f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26d66:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26d6d:	4c 8d 05 9c a7 22 00 	lea    r8,[rip+0x22a79c]        # 251510 <mismatch_shift>
   26d74:	48 8d 0d 85 a7 22 00 	lea    rcx,[rip+0x22a785]        # 251500 <mismatch_dim>
   26d7b:	48 8d 15 de 7f 1c 00 	lea    rdx,[rip+0x1c7fde]        # 1eed60 <mismatch1nIdH>
   26d82:	48 89 c7             	mov    rdi,rax
   26d85:	e8 5f 0a 00 00       	call   277e9 <rd_3dim>
   26d8a:	e9 55 04 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26d8f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26d96:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26d9d:	4c 8d 05 6c a7 22 00 	lea    r8,[rip+0x22a76c]        # 251510 <mismatch_shift>
   26da4:	48 8d 0d 55 a7 22 00 	lea    rcx,[rip+0x22a755]        # 251500 <mismatch_dim>
   26dab:	48 8d 15 ce 82 1c 00 	lea    rdx,[rip+0x1c82ce]        # 1ef080 <mismatch23I37>
   26db2:	48 89 c7             	mov    rdi,rax
   26db5:	e8 2f 0a 00 00       	call   277e9 <rd_3dim>
   26dba:	e9 25 04 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26dbf:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26dc6:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26dcd:	4c 8d 05 3c a7 22 00 	lea    r8,[rip+0x22a73c]        # 251510 <mismatch_shift>
   26dd4:	48 8d 0d 25 a7 22 00 	lea    rcx,[rip+0x22a725]        # 251500 <mismatch_dim>
   26ddb:	48 8d 15 be 85 1c 00 	lea    rdx,[rip+0x1c85be]        # 1ef3a0 <mismatch23IdH>
   26de2:	48 89 c7             	mov    rdi,rax
   26de5:	e8 ff 09 00 00       	call   277e9 <rd_3dim>
   26dea:	e9 f5 03 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26def:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26df6:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26dfd:	4c 8d 05 0c a7 22 00 	lea    r8,[rip+0x22a70c]        # 251510 <mismatch_shift>
   26e04:	48 8d 0d f5 a6 22 00 	lea    rcx,[rip+0x22a6f5]        # 251500 <mismatch_dim>
   26e0b:	48 8d 15 ee 75 1c 00 	lea    rdx,[rip+0x1c75ee]        # 1ee400 <mismatchM37>
   26e12:	48 89 c7             	mov    rdi,rax
   26e15:	e8 cf 09 00 00       	call   277e9 <rd_3dim>
   26e1a:	e9 c5 03 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26e1f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26e26:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26e2d:	4c 8d 05 dc a6 22 00 	lea    r8,[rip+0x22a6dc]        # 251510 <mismatch_shift>
   26e34:	48 8d 0d c5 a6 22 00 	lea    rcx,[rip+0x22a6c5]        # 251500 <mismatch_dim>
   26e3b:	48 8d 15 de 78 1c 00 	lea    rdx,[rip+0x1c78de]        # 1ee720 <mismatchMdH>
   26e42:	48 89 c7             	mov    rdi,rax
   26e45:	e8 9f 09 00 00       	call   277e9 <rd_3dim>
   26e4a:	e9 95 03 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26e4f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26e56:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26e5d:	4c 8d 05 cc a6 22 00 	lea    r8,[rip+0x22a6cc]        # 251530 <int11_shift>
   26e64:	48 8d 0d b5 a6 22 00 	lea    rcx,[rip+0x22a6b5]        # 251520 <int11_dim>
   26e6b:	48 8d 15 6e 98 1c 00 	lea    rdx,[rip+0x1c986e]        # 1f06e0 <int11_37>
   26e72:	48 89 c7             	mov    rdi,rax
   26e75:	e8 26 0b 00 00       	call   279a0 <rd_4dim>
   26e7a:	e9 65 03 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26e7f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26e86:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26e8d:	4c 8d 05 9c a6 22 00 	lea    r8,[rip+0x22a69c]        # 251530 <int11_shift>
   26e94:	48 8d 0d 85 a6 22 00 	lea    rcx,[rip+0x22a685]        # 251520 <int11_dim>
   26e9b:	48 8d 15 3e b1 1c 00 	lea    rdx,[rip+0x1cb13e]        # 1f1fe0 <int11_dH>
   26ea2:	48 89 c7             	mov    rdi,rax
   26ea5:	e8 f6 0a 00 00       	call   279a0 <rd_4dim>
   26eaa:	e9 35 03 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26eaf:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26eb6:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26ebd:	4c 8d 05 9c a6 22 00 	lea    r8,[rip+0x22a69c]        # 251560 <int21_shift>
   26ec4:	48 8d 0d 75 a6 22 00 	lea    rcx,[rip+0x22a675]        # 251540 <int21_dim>
   26ecb:	48 8d 15 0e ca 1c 00 	lea    rdx,[rip+0x1cca0e]        # 1f38e0 <int21_37>
   26ed2:	48 89 c7             	mov    rdi,rax
   26ed5:	e8 ba 0c 00 00       	call   27b94 <rd_5dim>
   26eda:	e9 05 03 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26edf:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26ee6:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26eed:	4c 8d 05 6c a6 22 00 	lea    r8,[rip+0x22a66c]        # 251560 <int21_shift>
   26ef4:	48 8d 0d 45 a6 22 00 	lea    rcx,[rip+0x22a645]        # 251540 <int21_dim>
   26efb:	48 8d 15 de 46 1d 00 	lea    rdx,[rip+0x1d46de]        # 1fb5e0 <int21_dH>
   26f02:	48 89 c7             	mov    rdi,rax
   26f05:	e8 8a 0c 00 00       	call   27b94 <rd_5dim>
   26f0a:	e9 d5 02 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26f0f:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26f16:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26f1d:	4c 8d 0d 9c a6 22 00 	lea    r9,[rip+0x22a69c]        # 2515c0 <int22_post>
   26f24:	4c 8d 05 75 a6 22 00 	lea    r8,[rip+0x22a675]        # 2515a0 <int22_shift>
   26f2b:	48 8d 0d 4e a6 22 00 	lea    rcx,[rip+0x22a64e]        # 251580 <int22_dim>
   26f32:	48 8d 15 a7 c3 1d 00 	lea    rdx,[rip+0x1dc3a7]        # 2032e0 <int22_37>
   26f39:	48 89 c7             	mov    rdi,rax
   26f3c:	e8 16 0f 00 00       	call   27e57 <rd_6dim_slice>
   26f41:	48 8d 3d 98 c3 1d 00 	lea    rdi,[rip+0x1dc398]        # 2032e0 <int22_37>
   26f48:	e8 80 1d 00 00       	call   28ccd <update_nst>
   26f4d:	e9 92 02 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26f52:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26f59:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26f60:	4c 8d 0d 59 a6 22 00 	lea    r9,[rip+0x22a659]        # 2515c0 <int22_post>
   26f67:	4c 8d 05 32 a6 22 00 	lea    r8,[rip+0x22a632]        # 2515a0 <int22_shift>
   26f6e:	48 8d 0d 0b a6 22 00 	lea    rcx,[rip+0x22a60b]        # 251580 <int22_dim>
   26f75:	48 8d 15 64 34 20 00 	lea    rdx,[rip+0x203464]        # 22a3e0 <int22_dH>
   26f7c:	48 89 c7             	mov    rdi,rax
   26f7f:	e8 d3 0e 00 00       	call   27e57 <rd_6dim_slice>
   26f84:	48 8d 3d 55 34 20 00 	lea    rdi,[rip+0x203455]        # 22a3e0 <int22_dH>
   26f8b:	e8 3d 1d 00 00       	call   28ccd <update_nst>
   26f90:	e9 4f 02 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26f95:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26f9c:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26fa3:	4c 8d 05 36 a6 22 00 	lea    r8,[rip+0x22a636]        # 2515e0 <dangle_shift>
   26faa:	48 8d 0d 27 a6 22 00 	lea    rcx,[rip+0x22a627]        # 2515d8 <dangle_dim>
   26fb1:	48 8d 15 48 8d 1c 00 	lea    rdx,[rip+0x1c8d48]        # 1efd00 <dangle5_37>
   26fb8:	48 89 c7             	mov    rdi,rax
   26fbb:	e8 a3 06 00 00       	call   27663 <rd_2dim>
   26fc0:	e9 1f 02 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26fc5:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26fcc:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   26fd3:	4c 8d 05 06 a6 22 00 	lea    r8,[rip+0x22a606]        # 2515e0 <dangle_shift>
   26fda:	48 8d 0d f7 a5 22 00 	lea    rcx,[rip+0x22a5f7]        # 2515d8 <dangle_dim>
   26fe1:	48 8d 15 58 8e 1c 00 	lea    rdx,[rip+0x1c8e58]        # 1efe40 <dangle5_dH>
   26fe8:	48 89 c7             	mov    rdi,rax
   26feb:	e8 73 06 00 00       	call   27663 <rd_2dim>
   26ff0:	e9 ef 01 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   26ff5:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   26ffc:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   27003:	4c 8d 05 d6 a5 22 00 	lea    r8,[rip+0x22a5d6]        # 2515e0 <dangle_shift>
   2700a:	48 8d 0d c7 a5 22 00 	lea    rcx,[rip+0x22a5c7]        # 2515d8 <dangle_dim>
   27011:	48 8d 15 88 8d 1c 00 	lea    rdx,[rip+0x1c8d88]        # 1efda0 <dangle3_37>
   27018:	48 89 c7             	mov    rdi,rax
   2701b:	e8 43 06 00 00       	call   27663 <rd_2dim>
   27020:	e9 bf 01 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   27025:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   2702c:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   27033:	4c 8d 05 a6 a5 22 00 	lea    r8,[rip+0x22a5a6]        # 2515e0 <dangle_shift>
   2703a:	48 8d 0d 97 a5 22 00 	lea    rcx,[rip+0x22a597]        # 2515d8 <dangle_dim>
   27041:	48 8d 15 98 8e 1c 00 	lea    rdx,[rip+0x1c8e98]        # 1efee0 <dangle3_dH>
   27048:	48 89 c7             	mov    rdi,rax
   2704b:	e8 13 06 00 00       	call   27663 <rd_2dim>
   27050:	e9 8f 01 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   27055:	48 8d 95 d0 fe ff ff 	lea    rdx,[rbp-0x130]
   2705c:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   27063:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   2706a:	41 b8 00 00 00 00    	mov    r8d,0x0
   27070:	b9 06 00 00 00       	mov    ecx,0x6
   27075:	48 89 c7             	mov    rdi,rax
   27078:	e8 19 05 00 00       	call   27596 <rd_1dim>
   2707d:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
   27083:	89 05 63 b9 22 00    	mov    DWORD PTR [rip+0x22b963],eax        # 2529ec <ML_BASE37>
   27089:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2708f:	89 05 5b b9 22 00    	mov    DWORD PTR [rip+0x22b95b],eax        # 2529f0 <ML_BASEdH>
   27095:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
   2709b:	89 05 77 61 1c 00    	mov    DWORD PTR [rip+0x1c6177],eax        # 1ed218 <ML_closing37>
   270a1:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
   270a7:	89 05 6f 61 1c 00    	mov    DWORD PTR [rip+0x1c616f],eax        # 1ed21c <ML_closingdH>
   270ad:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
   270b3:	89 05 57 61 1c 00    	mov    DWORD PTR [rip+0x1c6157],eax        # 1ed210 <ML_intern37>
   270b9:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
   270bf:	89 05 4f 61 1c 00    	mov    DWORD PTR [rip+0x1c614f],eax        # 1ed214 <ML_interndH>
   270c5:	e9 1a 01 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   270ca:	48 8d 95 d0 fe ff ff 	lea    rdx,[rbp-0x130]
   270d1:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   270d8:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   270df:	41 b8 00 00 00 00    	mov    r8d,0x0
   270e5:	b9 03 00 00 00       	mov    ecx,0x3
   270ea:	48 89 c7             	mov    rdi,rax
   270ed:	e8 a4 04 00 00       	call   27596 <rd_1dim>
   270f2:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
   270f8:	89 05 26 61 1c 00    	mov    DWORD PTR [rip+0x1c6126],eax        # 1ed224 <ninio37>
   270fe:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   27104:	89 05 1e 61 1c 00    	mov    DWORD PTR [rip+0x1c611e],eax        # 1ed228 <niniodH>
   2710a:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
   27110:	89 05 0a 61 1c 00    	mov    DWORD PTR [rip+0x1c610a],eax        # 1ed220 <MAX_NINIO>
   27116:	e9 c9 00 00 00       	jmp    271e4 <set_parameters_from_string+0x8bc>
   2711b:	48 8d 95 d0 fe ff ff 	lea    rdx,[rbp-0x130]
   27122:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
   27129:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   27130:	41 b8 00 00 00 00    	mov    r8d,0x0
   27136:	b9 04 00 00 00       	mov    ecx,0x4
   2713b:	48 89 c7             	mov    rdi,rax
   2713e:	e8 53 04 00 00       	call   27596 <rd_1dim>
   27143:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
   27149:	89 05 e5 60 1c 00    	mov    DWORD PTR [rip+0x1c60e5],eax        # 1ed234 <DuplexInit37>
   2714f:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   27155:	89 05 dd 60 1c 00    	mov    DWORD PTR [rip+0x1c60dd],eax        # 1ed238 <DuplexInitdH>
   2715b:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
   27161:	89 05 c5 60 1c 00    	mov    DWORD PTR [rip+0x1c60c5],eax        # 1ed22c <TerminalAU37>
   27167:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
   2716d:	89 05 bd 60 1c 00    	mov    DWORD PTR [rip+0x1c60bd],eax        # 1ed230 <TerminalAUdH>
   27173:	eb 6f                	jmp    271e4 <set_parameters_from_string+0x8bc>
   27175:	48 8d 95 c0 fe ff ff 	lea    rdx,[rbp-0x140]
   2717c:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   27183:	48 89 d6             	mov    rsi,rdx
   27186:	48 89 c7             	mov    rdi,rax
   27189:	e8 9c 0e 00 00       	call   2802a <rd_Tetraloop37>
   2718e:	eb 54                	jmp    271e4 <set_parameters_from_string+0x8bc>
   27190:	48 8d 95 c0 fe ff ff 	lea    rdx,[rbp-0x140]
   27197:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   2719e:	48 89 d6             	mov    rsi,rdx
   271a1:	48 89 c7             	mov    rdi,rax
   271a4:	e8 07 11 00 00       	call   282b0 <rd_Triloop37>
   271a9:	eb 39                	jmp    271e4 <set_parameters_from_string+0x8bc>
   271ab:	48 8d 95 c0 fe ff ff 	lea    rdx,[rbp-0x140]
   271b2:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   271b9:	48 89 d6             	mov    rsi,rdx
   271bc:	48 89 c7             	mov    rdi,rax
   271bf:	e8 a9 0f 00 00       	call   2816d <rd_Hexaloop37>
   271c4:	eb 1e                	jmp    271e4 <set_parameters_from_string+0x8bc>
   271c6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
   271cd:	48 89 c6             	mov    rsi,rax
   271d0:	48 8d 3d c1 eb 1b 00 	lea    rdi,[rip+0x1bebc1]        # 1e5d98 <parameter_set_rna_turner2004+0x5d3f8>
   271d7:	b8 00 00 00 00       	mov    eax,0x0
   271dc:	e8 0a 7e 00 00       	call   2efeb <vrna_message_warning>
   271e1:	eb 01                	jmp    271e4 <set_parameters_from_string+0x8bc>
   271e3:	90                   	nop
   271e4:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
   271eb:	48 8d 50 01          	lea    rdx,[rax+0x1]
   271ef:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
   271f6:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   271fe:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   27205:	48 01 d0             	add    rax,rdx
   27208:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2720b:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
   27212:	48 83 bd c8 fe ff ff 00 	cmp    QWORD PTR [rbp-0x138],0x0
   2721a:	0f 85 03 f8 ff ff    	jne    26a23 <set_parameters_from_string+0xfb>
   27220:	e8 60 12 00 00       	call   28485 <check_symmetry>
   27225:	b8 01 00 00 00       	mov    eax,0x1
   2722a:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2722e:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   27237:	74 05                	je     2723e <set_parameters_from_string+0x916>
   27239:	e8 b2 c6 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2723e:	c9                   	leave  
   2723f:	c3                   	ret    

0000000000027240 <display_array>:
   27240:	f3 0f 1e fa          	endbr64 
   27244:	55                   	push   rbp
   27245:	48 89 e5             	mov    rbp,rsp
   27248:	48 83 ec 30          	sub    rsp,0x30
   2724c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27250:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   27253:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   27256:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
   2725a:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
   27261:	e9 c5 00 00 00       	jmp    2732b <display_array+0xeb>
   27266:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2726a:	8b 00                	mov    eax,DWORD PTR [rax]
   2726c:	3d 80 96 98 00       	cmp    eax,0x989680
   27271:	74 15                	je     27288 <display_array+0x48>
   27273:	3d 80 96 98 00       	cmp    eax,0x989680
   27278:	7f 6b                	jg     272e5 <display_array+0xa5>
   2727a:	3d 80 69 67 ff       	cmp    eax,0xff676980
   2727f:	74 26                	je     272a7 <display_array+0x67>
   27281:	83 f8 ce             	cmp    eax,0xffffffce
   27284:	74 40                	je     272c6 <display_array+0x86>
   27286:	eb 5d                	jmp    272e5 <display_array+0xa5>
   27288:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2728c:	48 89 c1             	mov    rcx,rax
   2728f:	ba 06 00 00 00       	mov    edx,0x6
   27294:	be 01 00 00 00       	mov    esi,0x1
   27299:	48 8d 3d bc eb 1b 00 	lea    rdi,[rip+0x1bebbc]        # 1e5e5c <parameter_set_rna_turner2004+0x5d4bc>
   272a0:	e8 eb c8 fd ff       	call   3b90 <fwrite@plt>
   272a5:	eb 5d                	jmp    27304 <display_array+0xc4>
   272a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   272ab:	48 89 c1             	mov    rcx,rax
   272ae:	ba 06 00 00 00       	mov    edx,0x6
   272b3:	be 01 00 00 00       	mov    esi,0x1
   272b8:	48 8d 3d a4 eb 1b 00 	lea    rdi,[rip+0x1beba4]        # 1e5e63 <parameter_set_rna_turner2004+0x5d4c3>
   272bf:	e8 cc c8 fd ff       	call   3b90 <fwrite@plt>
   272c4:	eb 3e                	jmp    27304 <display_array+0xc4>
   272c6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   272ca:	48 89 c1             	mov    rcx,rax
   272cd:	ba 06 00 00 00       	mov    edx,0x6
   272d2:	be 01 00 00 00       	mov    esi,0x1
   272d7:	48 8d 3d 8c eb 1b 00 	lea    rdi,[rip+0x1beb8c]        # 1e5e6a <parameter_set_rna_turner2004+0x5d4ca>
   272de:	e8 ad c8 fd ff       	call   3b90 <fwrite@plt>
   272e3:	eb 1f                	jmp    27304 <display_array+0xc4>
   272e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   272e9:	8b 10                	mov    edx,DWORD PTR [rax]
   272eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   272ef:	48 8d 35 7b eb 1b 00 	lea    rsi,[rip+0x1beb7b]        # 1e5e71 <parameter_set_rna_turner2004+0x5d4d1>
   272f6:	48 89 c7             	mov    rdi,rax
   272f9:	b8 00 00 00 00       	mov    eax,0x0
   272fe:	e8 dd c6 fd ff       	call   39e0 <fprintf@plt>
   27303:	90                   	nop
   27304:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   27307:	99                   	cdq    
   27308:	f7 7d e0             	idiv   DWORD PTR [rbp-0x20]
   2730b:	89 d0                	mov    eax,edx
   2730d:	85 c0                	test   eax,eax
   2730f:	75 11                	jne    27322 <display_array+0xe2>
   27311:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27315:	48 89 c6             	mov    rsi,rax
   27318:	bf 0a 00 00 00       	mov    edi,0xa
   2731d:	e8 4e c6 fd ff       	call   3970 <fputc@plt>
   27322:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   27326:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   2732b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2732e:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
   27331:	0f 8e 2f ff ff ff    	jle    27266 <display_array+0x26>
   27337:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2733a:	99                   	cdq    
   2733b:	f7 7d e0             	idiv   DWORD PTR [rbp-0x20]
   2733e:	89 d0                	mov    eax,edx
   27340:	85 c0                	test   eax,eax
   27342:	74 12                	je     27356 <display_array+0x116>
   27344:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27348:	48 89 c6             	mov    rsi,rax
   2734b:	bf 0a 00 00 00       	mov    edi,0xa
   27350:	e8 1b c6 fd ff       	call   3970 <fputc@plt>
   27355:	90                   	nop
   27356:	90                   	nop
   27357:	c9                   	leave  
   27358:	c3                   	ret    

0000000000027359 <get_array1>:
   27359:	f3 0f 1e fa          	endbr64 
   2735d:	55                   	push   rbp
   2735e:	48 89 e5             	mov    rbp,rsp
   27361:	53                   	push   rbx
   27362:	48 83 ec 68          	sub    rsp,0x68
   27366:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   2736a:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   2736e:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   27372:	89 4d 94             	mov    DWORD PTR [rbp-0x6c],ecx
   27375:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2737e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   27382:	31 c0                	xor    eax,eax
   27384:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
   2738b:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   2738e:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
   27391:	e9 d4 01 00 00       	jmp    2756a <get_array1+0x211>
   27396:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   2739a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2739d:	48 8d 48 01          	lea    rcx,[rax+0x1]
   273a1:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   273a5:	48 89 0a             	mov    QWORD PTR [rdx],rcx
   273a8:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   273b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   273b4:	48 01 d0             	add    rax,rdx
   273b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   273ba:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   273be:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   273c3:	75 11                	jne    273d6 <get_array1+0x7d>
   273c5:	48 8d 3d ac ea 1b 00 	lea    rdi,[rip+0x1beaac]        # 1e5e78 <parameter_set_rna_turner2004+0x5d4d8>
   273cc:	b8 00 00 00 00       	mov    eax,0x0
   273d1:	e8 64 7a 00 00       	call   2ee3a <vrna_message_error>
   273d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   273da:	48 89 c7             	mov    rdi,rax
   273dd:	e8 12 10 00 00       	call   283f4 <ignore_comment>
   273e2:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
   273e9:	e9 3e 01 00 00       	jmp    2752c <get_array1+0x1d3>
   273ee:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   273f1:	01 45 bc             	add    DWORD PTR [rbp-0x44],eax
   273f4:	0f b6 45 d0          	movzx  eax,BYTE PTR [rbp-0x30]
   273f8:	3c 2a                	cmp    al,0x2a
   273fa:	75 09                	jne    27405 <get_array1+0xac>
   273fc:	83 45 b8 01          	add    DWORD PTR [rbp-0x48],0x1
   27400:	e9 27 01 00 00       	jmp    2752c <get_array1+0x1d3>
   27405:	0f b6 45 d0          	movzx  eax,BYTE PTR [rbp-0x30]
   27409:	3c 78                	cmp    al,0x78
   2740b:	75 66                	jne    27473 <get_array1+0x11a>
   2740d:	83 7d b8 00          	cmp    DWORD PTR [rbp-0x48],0x0
   27411:	75 11                	jne    27424 <get_array1+0xcb>
   27413:	48 8d 3d 83 ea 1b 00 	lea    rdi,[rip+0x1bea83]        # 1e5e9d <parameter_set_rna_turner2004+0x5d4fd>
   2741a:	b8 00 00 00 00       	mov    eax,0x0
   2741f:	e8 16 7a 00 00       	call   2ee3a <vrna_message_error>
   27424:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   27427:	48 98                	cdqe   
   27429:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   27431:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   27435:	48 01 d0             	add    rax,rdx
   27438:	8b 18                	mov    ebx,DWORD PTR [rax]
   2743a:	f2 0f 2a 45 b8       	cvtsi2sd xmm0,DWORD PTR [rbp-0x48]
   2743f:	f2 0f 2a 4d c0       	cvtsi2sd xmm1,DWORD PTR [rbp-0x40]
   27444:	f2 0f 5e c1          	divsd  xmm0,xmm1
   27448:	e8 d3 c3 fd ff       	call   3820 <log@plt>
   2744d:	f2 0f 10 0d b3 5d 1c 00 	movsd  xmm1,QWORD PTR [rip+0x1c5db3]        # 1ed208 <lxc37>
   27455:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   27459:	f2 0f 10 05 27 f1 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1bf127]        # 1e6588 <parameter_set_rna_turner2004+0x5dbe8>
   27461:	f2 0f 58 c1          	addsd  xmm0,xmm1
   27465:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   27469:	01 d8                	add    eax,ebx
   2746b:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   2746e:	e9 9a 00 00 00       	jmp    2750d <get_array1+0x1b4>
   27473:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   27477:	48 8d 35 3d ea 1b 00 	lea    rsi,[rip+0x1bea3d]        # 1e5ebb <parameter_set_rna_turner2004+0x5d51b>
   2747e:	48 89 c7             	mov    rdi,rax
   27481:	e8 3a c5 fd ff       	call   39c0 <strcmp@plt>
   27486:	85 c0                	test   eax,eax
   27488:	75 09                	jne    27493 <get_array1+0x13a>
   2748a:	c7 45 b0 ce ff ff ff 	mov    DWORD PTR [rbp-0x50],0xffffffce
   27491:	eb 7a                	jmp    2750d <get_array1+0x1b4>
   27493:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   27497:	48 8d 35 21 ea 1b 00 	lea    rsi,[rip+0x1bea21]        # 1e5ebf <parameter_set_rna_turner2004+0x5d51f>
   2749e:	48 89 c7             	mov    rdi,rax
   274a1:	e8 1a c5 fd ff       	call   39c0 <strcmp@plt>
   274a6:	85 c0                	test   eax,eax
   274a8:	75 09                	jne    274b3 <get_array1+0x15a>
   274aa:	c7 45 b0 80 96 98 00 	mov    DWORD PTR [rbp-0x50],0x989680
   274b1:	eb 5a                	jmp    2750d <get_array1+0x1b4>
   274b3:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   274b7:	48 8d 35 05 ea 1b 00 	lea    rsi,[rip+0x1bea05]        # 1e5ec3 <parameter_set_rna_turner2004+0x5d523>
   274be:	48 89 c7             	mov    rdi,rax
   274c1:	e8 fa c4 fd ff       	call   39c0 <strcmp@plt>
   274c6:	85 c0                	test   eax,eax
   274c8:	75 09                	jne    274d3 <get_array1+0x17a>
   274ca:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   274d1:	eb 3a                	jmp    2750d <get_array1+0x1b4>
   274d3:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   274d7:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   274db:	48 8d 35 e5 e9 1b 00 	lea    rsi,[rip+0x1be9e5]        # 1e5ec7 <parameter_set_rna_turner2004+0x5d527>
   274e2:	48 89 c7             	mov    rdi,rax
   274e5:	b8 00 00 00 00       	mov    eax,0x0
   274ea:	e8 a1 c3 fd ff       	call   3890 <__isoc99_sscanf@plt>
   274ef:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   274f2:	83 7d c4 01          	cmp    DWORD PTR [rbp-0x3c],0x1
   274f6:	74 0f                	je     27507 <get_array1+0x1ae>
   274f8:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   274fb:	48 63 d0             	movsxd rdx,eax
   274fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27502:	48 01 d0             	add    rax,rdx
   27505:	eb 74                	jmp    2757b <get_array1+0x222>
   27507:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   2750a:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   2750d:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   27510:	8d 50 01             	lea    edx,[rax+0x1]
   27513:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
   27516:	48 98                	cdqe   
   27518:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   27520:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   27524:	48 01 c2             	add    rdx,rax
   27527:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   2752a:	89 02                	mov    DWORD PTR [rdx],eax
   2752c:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   2752f:	3b 45 94             	cmp    eax,DWORD PTR [rbp-0x6c]
   27532:	7d 36                	jge    2756a <get_array1+0x211>
   27534:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   27537:	48 63 d0             	movsxd rdx,eax
   2753a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2753e:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   27542:	48 8d 55 b4          	lea    rdx,[rbp-0x4c]
   27546:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   2754a:	48 89 d1             	mov    rcx,rdx
   2754d:	48 89 c2             	mov    rdx,rax
   27550:	48 8d 35 73 e9 1b 00 	lea    rsi,[rip+0x1be973]        # 1e5eca <parameter_set_rna_turner2004+0x5d52a>
   27557:	b8 00 00 00 00       	mov    eax,0x0
   2755c:	e8 2f c3 fd ff       	call   3890 <__isoc99_sscanf@plt>
   27561:	83 f8 01             	cmp    eax,0x1
   27564:	0f 84 84 fe ff ff    	je     273ee <get_array1+0x95>
   2756a:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   2756d:	3b 45 94             	cmp    eax,DWORD PTR [rbp-0x6c]
   27570:	0f 8c 20 fe ff ff    	jl     27396 <get_array1+0x3d>
   27576:	b8 00 00 00 00       	mov    eax,0x0
   2757b:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   2757f:	64 48 33 1c 25 28 00 00 00 	xor    rbx,QWORD PTR fs:0x28
   27588:	74 05                	je     2758f <get_array1+0x236>
   2758a:	e8 61 c3 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2758f:	48 83 c4 68          	add    rsp,0x68
   27593:	5b                   	pop    rbx
   27594:	5d                   	pop    rbp
   27595:	c3                   	ret    

0000000000027596 <rd_1dim>:
   27596:	f3 0f 1e fa          	endbr64 
   2759a:	55                   	push   rbp
   2759b:	48 89 e5             	mov    rbp,rsp
   2759e:	48 83 ec 20          	sub    rsp,0x20
   275a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   275a6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   275aa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   275ae:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
   275b1:	44 89 45 e0          	mov    DWORD PTR [rbp-0x20],r8d
   275b5:	8b 7d e0             	mov    edi,DWORD PTR [rbp-0x20]
   275b8:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   275bb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   275bf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   275c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   275c7:	41 b9 00 00 00 00    	mov    r9d,0x0
   275cd:	41 89 f8             	mov    r8d,edi
   275d0:	48 89 c7             	mov    rdi,rax
   275d3:	e8 03 00 00 00       	call   275db <rd_1dim_slice>
   275d8:	90                   	nop
   275d9:	c9                   	leave  
   275da:	c3                   	ret    

00000000000275db <rd_1dim_slice>:
   275db:	f3 0f 1e fa          	endbr64 
   275df:	55                   	push   rbp
   275e0:	48 89 e5             	mov    rbp,rsp
   275e3:	48 83 ec 40          	sub    rsp,0x40
   275e7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   275eb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   275ef:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   275f3:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   275f6:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   275fa:	44 89 4d cc          	mov    DWORD PTR [rbp-0x34],r9d
   275fe:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   27601:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
   27604:	2b 45 cc             	sub    eax,DWORD PTR [rbp-0x34]
   27607:	89 c2                	mov    edx,eax
   27609:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2760c:	48 98                	cdqe   
   2760e:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   27616:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2761a:	48 8d 3c 01          	lea    rdi,[rcx+rax*1]
   2761e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27622:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27626:	89 d1                	mov    ecx,edx
   27628:	48 89 fa             	mov    rdx,rdi
   2762b:	48 89 c7             	mov    rdi,rax
   2762e:	e8 26 fd ff ff       	call   27359 <get_array1>
   27633:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27637:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2763c:	74 22                	je     27660 <rd_1dim_slice+0x85>
   2763e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27642:	48 89 c6             	mov    rsi,rax
   27645:	48 8d 3d 85 e8 1b 00 	lea    rdi,[rip+0x1be885]        # 1e5ed1 <parameter_set_rna_turner2004+0x5d531>
   2764c:	b8 00 00 00 00       	mov    eax,0x0
   27651:	e8 e4 77 00 00       	call   2ee3a <vrna_message_error>
   27656:	bf 01 00 00 00       	mov    edi,0x1
   2765b:	e8 f0 c2 fd ff       	call   3950 <exit@plt>
   27660:	90                   	nop
   27661:	c9                   	leave  
   27662:	c3                   	ret    

0000000000027663 <rd_2dim>:
   27663:	f3 0f 1e fa          	endbr64 
   27667:	55                   	push   rbp
   27668:	48 89 e5             	mov    rbp,rsp
   2766b:	48 83 ec 40          	sub    rsp,0x40
   2766f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27673:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27677:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2767b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2767f:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   27683:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2768c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27690:	31 c0                	xor    eax,eax
   27692:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   27699:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   276a0:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
   276a4:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
   276a8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   276ac:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   276b0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   276b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   276b8:	4d 89 c1             	mov    r9,r8
   276bb:	49 89 f8             	mov    r8,rdi
   276be:	48 89 c7             	mov    rdi,rax
   276c1:	e8 17 00 00 00       	call   276dd <rd_2dim_slice>
   276c6:	90                   	nop
   276c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   276cb:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   276d4:	74 05                	je     276db <rd_2dim+0x78>
   276d6:	e8 15 c2 fd ff       	call   38f0 <__stack_chk_fail@plt>
   276db:	c9                   	leave  
   276dc:	c3                   	ret    

00000000000276dd <rd_2dim_slice>:
   276dd:	f3 0f 1e fa          	endbr64 
   276e1:	55                   	push   rbp
   276e2:	48 89 e5             	mov    rbp,rsp
   276e5:	48 83 ec 40          	sub    rsp,0x40
   276e9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   276ed:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   276f1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   276f5:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   276f9:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   276fd:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   27701:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27705:	8b 10                	mov    edx,DWORD PTR [rax]
   27707:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2770b:	48 83 c0 04          	add    rax,0x4
   2770f:	8b 00                	mov    eax,DWORD PTR [rax]
   27711:	01 d0                	add    eax,edx
   27713:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   27716:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2771a:	8b 10                	mov    edx,DWORD PTR [rax]
   2771c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27720:	48 83 c0 04          	add    rax,0x4
   27724:	8b 00                	mov    eax,DWORD PTR [rax]
   27726:	01 d0                	add    eax,edx
   27728:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2772b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   2772e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   27731:	01 d0                	add    eax,edx
   27733:	85 c0                	test   eax,eax
   27735:	75 31                	jne    27768 <rd_2dim_slice+0x8b>
   27737:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2773b:	8b 10                	mov    edx,DWORD PTR [rax]
   2773d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27741:	48 83 c0 04          	add    rax,0x4
   27745:	8b 00                	mov    eax,DWORD PTR [rax]
   27747:	89 d1                	mov    ecx,edx
   27749:	0f af c8             	imul   ecx,eax
   2774c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   27750:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27754:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27758:	41 b8 00 00 00 00    	mov    r8d,0x0
   2775e:	48 89 c7             	mov    rdi,rax
   27761:	e8 30 fe ff ff       	call   27596 <rd_1dim>
   27766:	eb 7f                	jmp    277e7 <rd_2dim_slice+0x10a>
   27768:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2776c:	8b 00                	mov    eax,DWORD PTR [rax]
   2776e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   27771:	eb 5e                	jmp    277d1 <rd_2dim_slice+0xf4>
   27773:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27777:	48 83 c0 04          	add    rax,0x4
   2777b:	44 8b 00             	mov    r8d,DWORD PTR [rax]
   2777e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27782:	48 83 c0 04          	add    rax,0x4
   27786:	8b 08                	mov    ecx,DWORD PTR [rax]
   27788:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2778c:	48 83 c0 04          	add    rax,0x4
   27790:	8b 10                	mov    edx,DWORD PTR [rax]
   27792:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27796:	48 83 c0 04          	add    rax,0x4
   2779a:	8b 00                	mov    eax,DWORD PTR [rax]
   2779c:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   277a0:	48 98                	cdqe   
   277a2:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   277aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   277ae:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
   277b2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   277b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   277ba:	45 89 c1             	mov    r9d,r8d
   277bd:	41 89 c8             	mov    r8d,ecx
   277c0:	89 d1                	mov    ecx,edx
   277c2:	48 89 fa             	mov    rdx,rdi
   277c5:	48 89 c7             	mov    rdi,rax
   277c8:	e8 0e fe ff ff       	call   275db <rd_1dim_slice>
   277cd:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   277d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   277d5:	8b 10                	mov    edx,DWORD PTR [rax]
   277d7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   277db:	8b 00                	mov    eax,DWORD PTR [rax]
   277dd:	29 c2                	sub    edx,eax
   277df:	89 d0                	mov    eax,edx
   277e1:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   277e4:	7c 8d                	jl     27773 <rd_2dim_slice+0x96>
   277e6:	90                   	nop
   277e7:	c9                   	leave  
   277e8:	c3                   	ret    

00000000000277e9 <rd_3dim>:
   277e9:	f3 0f 1e fa          	endbr64 
   277ed:	55                   	push   rbp
   277ee:	48 89 e5             	mov    rbp,rsp
   277f1:	48 83 ec 50          	sub    rsp,0x50
   277f5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   277f9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   277fd:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   27801:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   27805:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   27809:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27812:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27816:	31 c0                	xor    eax,eax
   27818:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   2781f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   27826:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   2782d:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
   27831:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   27835:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   27839:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2783d:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   27841:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27845:	4d 89 c1             	mov    r9,r8
   27848:	49 89 f8             	mov    r8,rdi
   2784b:	48 89 c7             	mov    rdi,rax
   2784e:	e8 17 00 00 00       	call   2786a <rd_3dim_slice>
   27853:	90                   	nop
   27854:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27858:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   27861:	74 05                	je     27868 <rd_3dim+0x7f>
   27863:	e8 88 c0 fd ff       	call   38f0 <__stack_chk_fail@plt>
   27868:	c9                   	leave  
   27869:	c3                   	ret    

000000000002786a <rd_3dim_slice>:
   2786a:	f3 0f 1e fa          	endbr64 
   2786e:	55                   	push   rbp
   2786f:	48 89 e5             	mov    rbp,rsp
   27872:	48 83 ec 40          	sub    rsp,0x40
   27876:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2787a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2787e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   27882:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   27886:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   2788a:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   2788e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27892:	8b 10                	mov    edx,DWORD PTR [rax]
   27894:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27898:	48 83 c0 04          	add    rax,0x4
   2789c:	8b 00                	mov    eax,DWORD PTR [rax]
   2789e:	01 c2                	add    edx,eax
   278a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   278a4:	48 83 c0 08          	add    rax,0x8
   278a8:	8b 00                	mov    eax,DWORD PTR [rax]
   278aa:	01 d0                	add    eax,edx
   278ac:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   278af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   278b3:	8b 10                	mov    edx,DWORD PTR [rax]
   278b5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   278b9:	48 83 c0 04          	add    rax,0x4
   278bd:	8b 00                	mov    eax,DWORD PTR [rax]
   278bf:	01 c2                	add    edx,eax
   278c1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   278c5:	48 83 c0 08          	add    rax,0x8
   278c9:	8b 00                	mov    eax,DWORD PTR [rax]
   278cb:	01 d0                	add    eax,edx
   278cd:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   278d0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   278d3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   278d6:	01 d0                	add    eax,edx
   278d8:	85 c0                	test   eax,eax
   278da:	75 41                	jne    2791d <rd_3dim_slice+0xb3>
   278dc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   278e0:	8b 10                	mov    edx,DWORD PTR [rax]
   278e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   278e6:	48 83 c0 04          	add    rax,0x4
   278ea:	8b 00                	mov    eax,DWORD PTR [rax]
   278ec:	0f af d0             	imul   edx,eax
   278ef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   278f3:	48 83 c0 08          	add    rax,0x8
   278f7:	8b 00                	mov    eax,DWORD PTR [rax]
   278f9:	89 d1                	mov    ecx,edx
   278fb:	0f af c8             	imul   ecx,eax
   278fe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   27902:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27906:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2790a:	41 b8 00 00 00 00    	mov    r8d,0x0
   27910:	48 89 c7             	mov    rdi,rax
   27913:	e8 7e fc ff ff       	call   27596 <rd_1dim>
   27918:	e9 81 00 00 00       	jmp    2799e <rd_3dim_slice+0x134>
   2791d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27921:	8b 00                	mov    eax,DWORD PTR [rax]
   27923:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   27926:	eb 60                	jmp    27988 <rd_3dim_slice+0x11e>
   27928:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2792c:	4c 8d 40 04          	lea    r8,[rax+0x4]
   27930:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27934:	48 8d 78 04          	lea    rdi,[rax+0x4]
   27938:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2793c:	48 8d 48 04          	lea    rcx,[rax+0x4]
   27940:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27944:	48 83 c0 04          	add    rax,0x4
   27948:	8b 00                	mov    eax,DWORD PTR [rax]
   2794a:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   2794e:	89 c2                	mov    edx,eax
   27950:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27954:	48 83 c0 08          	add    rax,0x8
   27958:	8b 00                	mov    eax,DWORD PTR [rax]
   2795a:	0f af c2             	imul   eax,edx
   2795d:	48 98                	cdqe   
   2795f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   27967:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2796b:	48 01 c2             	add    rdx,rax
   2796e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27972:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27976:	4d 89 c1             	mov    r9,r8
   27979:	49 89 f8             	mov    r8,rdi
   2797c:	48 89 c7             	mov    rdi,rax
   2797f:	e8 59 fd ff ff       	call   276dd <rd_2dim_slice>
   27984:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   27988:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2798c:	8b 10                	mov    edx,DWORD PTR [rax]
   2798e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27992:	8b 00                	mov    eax,DWORD PTR [rax]
   27994:	29 c2                	sub    edx,eax
   27996:	89 d0                	mov    eax,edx
   27998:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   2799b:	7c 8b                	jl     27928 <rd_3dim_slice+0xbe>
   2799d:	90                   	nop
   2799e:	c9                   	leave  
   2799f:	c3                   	ret    

00000000000279a0 <rd_4dim>:
   279a0:	f3 0f 1e fa          	endbr64 
   279a4:	55                   	push   rbp
   279a5:	48 89 e5             	mov    rbp,rsp
   279a8:	48 83 ec 50          	sub    rsp,0x50
   279ac:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   279b0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   279b4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   279b8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   279bc:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   279c0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   279c9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   279cd:	31 c0                	xor    eax,eax
   279cf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   279d6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   279dd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   279e4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   279eb:	4c 8d 45 e0          	lea    r8,[rbp-0x20]
   279ef:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   279f3:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   279f7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   279fb:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   279ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27a03:	4d 89 c1             	mov    r9,r8
   27a06:	49 89 f8             	mov    r8,rdi
   27a09:	48 89 c7             	mov    rdi,rax
   27a0c:	e8 17 00 00 00       	call   27a28 <rd_4dim_slice>
   27a11:	90                   	nop
   27a12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a16:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   27a1f:	74 05                	je     27a26 <rd_4dim+0x86>
   27a21:	e8 ca be fd ff       	call   38f0 <__stack_chk_fail@plt>
   27a26:	c9                   	leave  
   27a27:	c3                   	ret    

0000000000027a28 <rd_4dim_slice>:
   27a28:	f3 0f 1e fa          	endbr64 
   27a2c:	55                   	push   rbp
   27a2d:	48 89 e5             	mov    rbp,rsp
   27a30:	48 83 ec 40          	sub    rsp,0x40
   27a34:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27a38:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27a3c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   27a40:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   27a44:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   27a48:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   27a4c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27a50:	8b 10                	mov    edx,DWORD PTR [rax]
   27a52:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27a56:	48 83 c0 04          	add    rax,0x4
   27a5a:	8b 00                	mov    eax,DWORD PTR [rax]
   27a5c:	01 c2                	add    edx,eax
   27a5e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27a62:	48 83 c0 08          	add    rax,0x8
   27a66:	8b 00                	mov    eax,DWORD PTR [rax]
   27a68:	01 c2                	add    edx,eax
   27a6a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27a6e:	48 83 c0 0c          	add    rax,0xc
   27a72:	8b 00                	mov    eax,DWORD PTR [rax]
   27a74:	01 d0                	add    eax,edx
   27a76:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   27a79:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27a7d:	8b 10                	mov    edx,DWORD PTR [rax]
   27a7f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27a83:	48 83 c0 04          	add    rax,0x4
   27a87:	8b 00                	mov    eax,DWORD PTR [rax]
   27a89:	01 c2                	add    edx,eax
   27a8b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27a8f:	48 83 c0 08          	add    rax,0x8
   27a93:	8b 00                	mov    eax,DWORD PTR [rax]
   27a95:	01 c2                	add    edx,eax
   27a97:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27a9b:	48 83 c0 0c          	add    rax,0xc
   27a9f:	8b 00                	mov    eax,DWORD PTR [rax]
   27aa1:	01 d0                	add    eax,edx
   27aa3:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   27aa6:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   27aa9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   27aac:	01 d0                	add    eax,edx
   27aae:	85 c0                	test   eax,eax
   27ab0:	75 4e                	jne    27b00 <rd_4dim_slice+0xd8>
   27ab2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27ab6:	8b 10                	mov    edx,DWORD PTR [rax]
   27ab8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27abc:	48 83 c0 04          	add    rax,0x4
   27ac0:	8b 00                	mov    eax,DWORD PTR [rax]
   27ac2:	0f af d0             	imul   edx,eax
   27ac5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27ac9:	48 83 c0 08          	add    rax,0x8
   27acd:	8b 00                	mov    eax,DWORD PTR [rax]
   27acf:	0f af d0             	imul   edx,eax
   27ad2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27ad6:	48 83 c0 0c          	add    rax,0xc
   27ada:	8b 00                	mov    eax,DWORD PTR [rax]
   27adc:	89 d1                	mov    ecx,edx
   27ade:	0f af c8             	imul   ecx,eax
   27ae1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   27ae5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27ae9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27aed:	41 b8 00 00 00 00    	mov    r8d,0x0
   27af3:	48 89 c7             	mov    rdi,rax
   27af6:	e8 9b fa ff ff       	call   27596 <rd_1dim>
   27afb:	e9 92 00 00 00       	jmp    27b92 <rd_4dim_slice+0x16a>
   27b00:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27b04:	8b 00                	mov    eax,DWORD PTR [rax]
   27b06:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   27b09:	eb 6d                	jmp    27b78 <rd_4dim_slice+0x150>
   27b0b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27b0f:	4c 8d 40 04          	lea    r8,[rax+0x4]
   27b13:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27b17:	48 8d 78 04          	lea    rdi,[rax+0x4]
   27b1b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27b1f:	48 8d 48 04          	lea    rcx,[rax+0x4]
   27b23:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27b27:	48 83 c0 04          	add    rax,0x4
   27b2b:	8b 00                	mov    eax,DWORD PTR [rax]
   27b2d:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   27b31:	89 c2                	mov    edx,eax
   27b33:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27b37:	48 83 c0 08          	add    rax,0x8
   27b3b:	8b 00                	mov    eax,DWORD PTR [rax]
   27b3d:	0f af d0             	imul   edx,eax
   27b40:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27b44:	48 83 c0 0c          	add    rax,0xc
   27b48:	8b 00                	mov    eax,DWORD PTR [rax]
   27b4a:	0f af c2             	imul   eax,edx
   27b4d:	48 98                	cdqe   
   27b4f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   27b57:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27b5b:	48 01 c2             	add    rdx,rax
   27b5e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27b62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27b66:	4d 89 c1             	mov    r9,r8
   27b69:	49 89 f8             	mov    r8,rdi
   27b6c:	48 89 c7             	mov    rdi,rax
   27b6f:	e8 f6 fc ff ff       	call   2786a <rd_3dim_slice>
   27b74:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   27b78:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27b7c:	8b 10                	mov    edx,DWORD PTR [rax]
   27b7e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27b82:	8b 00                	mov    eax,DWORD PTR [rax]
   27b84:	29 c2                	sub    edx,eax
   27b86:	89 d0                	mov    eax,edx
   27b88:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   27b8b:	0f 8c 7a ff ff ff    	jl     27b0b <rd_4dim_slice+0xe3>
   27b91:	90                   	nop
   27b92:	c9                   	leave  
   27b93:	c3                   	ret    

0000000000027b94 <rd_5dim>:
   27b94:	f3 0f 1e fa          	endbr64 
   27b98:	55                   	push   rbp
   27b99:	48 89 e5             	mov    rbp,rsp
   27b9c:	48 83 ec 50          	sub    rsp,0x50
   27ba0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   27ba4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   27ba8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   27bac:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   27bb0:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   27bb4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27bbd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27bc1:	31 c0                	xor    eax,eax
   27bc3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   27bca:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   27bd1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   27bd8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   27bdf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   27be6:	4c 8d 45 e0          	lea    r8,[rbp-0x20]
   27bea:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   27bee:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   27bf2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   27bf6:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   27bfa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27bfe:	4d 89 c1             	mov    r9,r8
   27c01:	49 89 f8             	mov    r8,rdi
   27c04:	48 89 c7             	mov    rdi,rax
   27c07:	e8 17 00 00 00       	call   27c23 <rd_5dim_slice>
   27c0c:	90                   	nop
   27c0d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27c11:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   27c1a:	74 05                	je     27c21 <rd_5dim+0x8d>
   27c1c:	e8 cf bc fd ff       	call   38f0 <__stack_chk_fail@plt>
   27c21:	c9                   	leave  
   27c22:	c3                   	ret    

0000000000027c23 <rd_5dim_slice>:
   27c23:	f3 0f 1e fa          	endbr64 
   27c27:	55                   	push   rbp
   27c28:	48 89 e5             	mov    rbp,rsp
   27c2b:	48 83 ec 40          	sub    rsp,0x40
   27c2f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27c33:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27c37:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   27c3b:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   27c3f:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   27c43:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   27c47:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27c4b:	8b 10                	mov    edx,DWORD PTR [rax]
   27c4d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27c51:	48 83 c0 04          	add    rax,0x4
   27c55:	8b 00                	mov    eax,DWORD PTR [rax]
   27c57:	01 c2                	add    edx,eax
   27c59:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27c5d:	48 83 c0 08          	add    rax,0x8
   27c61:	8b 00                	mov    eax,DWORD PTR [rax]
   27c63:	01 c2                	add    edx,eax
   27c65:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27c69:	48 83 c0 0c          	add    rax,0xc
   27c6d:	8b 00                	mov    eax,DWORD PTR [rax]
   27c6f:	01 c2                	add    edx,eax
   27c71:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27c75:	48 83 c0 10          	add    rax,0x10
   27c79:	8b 00                	mov    eax,DWORD PTR [rax]
   27c7b:	01 d0                	add    eax,edx
   27c7d:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   27c80:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27c84:	8b 10                	mov    edx,DWORD PTR [rax]
   27c86:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27c8a:	48 83 c0 04          	add    rax,0x4
   27c8e:	8b 00                	mov    eax,DWORD PTR [rax]
   27c90:	01 c2                	add    edx,eax
   27c92:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27c96:	48 83 c0 08          	add    rax,0x8
   27c9a:	8b 00                	mov    eax,DWORD PTR [rax]
   27c9c:	01 c2                	add    edx,eax
   27c9e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27ca2:	48 83 c0 0c          	add    rax,0xc
   27ca6:	8b 00                	mov    eax,DWORD PTR [rax]
   27ca8:	01 c2                	add    edx,eax
   27caa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27cae:	48 83 c0 10          	add    rax,0x10
   27cb2:	8b 00                	mov    eax,DWORD PTR [rax]
   27cb4:	01 d0                	add    eax,edx
   27cb6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   27cb9:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   27cbc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   27cbf:	01 d0                	add    eax,edx
   27cc1:	85 c0                	test   eax,eax
   27cc3:	75 5b                	jne    27d20 <rd_5dim_slice+0xfd>
   27cc5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27cc9:	8b 10                	mov    edx,DWORD PTR [rax]
   27ccb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27ccf:	48 83 c0 04          	add    rax,0x4
   27cd3:	8b 00                	mov    eax,DWORD PTR [rax]
   27cd5:	0f af d0             	imul   edx,eax
   27cd8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27cdc:	48 83 c0 08          	add    rax,0x8
   27ce0:	8b 00                	mov    eax,DWORD PTR [rax]
   27ce2:	0f af d0             	imul   edx,eax
   27ce5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27ce9:	48 83 c0 0c          	add    rax,0xc
   27ced:	8b 00                	mov    eax,DWORD PTR [rax]
   27cef:	0f af d0             	imul   edx,eax
   27cf2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27cf6:	48 83 c0 10          	add    rax,0x10
   27cfa:	8b 00                	mov    eax,DWORD PTR [rax]
   27cfc:	89 d1                	mov    ecx,edx
   27cfe:	0f af c8             	imul   ecx,eax
   27d01:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   27d05:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27d09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d0d:	41 b8 00 00 00 00    	mov    r8d,0x0
   27d13:	48 89 c7             	mov    rdi,rax
   27d16:	e8 7b f8 ff ff       	call   27596 <rd_1dim>
   27d1b:	e9 9f 00 00 00       	jmp    27dbf <rd_5dim_slice+0x19c>
   27d20:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27d24:	8b 00                	mov    eax,DWORD PTR [rax]
   27d26:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   27d29:	eb 7a                	jmp    27da5 <rd_5dim_slice+0x182>
   27d2b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27d2f:	4c 8d 40 04          	lea    r8,[rax+0x4]
   27d33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27d37:	48 8d 78 04          	lea    rdi,[rax+0x4]
   27d3b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27d3f:	48 8d 48 04          	lea    rcx,[rax+0x4]
   27d43:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27d47:	48 83 c0 04          	add    rax,0x4
   27d4b:	8b 00                	mov    eax,DWORD PTR [rax]
   27d4d:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   27d51:	89 c2                	mov    edx,eax
   27d53:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27d57:	48 83 c0 08          	add    rax,0x8
   27d5b:	8b 00                	mov    eax,DWORD PTR [rax]
   27d5d:	0f af d0             	imul   edx,eax
   27d60:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27d64:	48 83 c0 0c          	add    rax,0xc
   27d68:	8b 00                	mov    eax,DWORD PTR [rax]
   27d6a:	0f af d0             	imul   edx,eax
   27d6d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27d71:	48 83 c0 10          	add    rax,0x10
   27d75:	8b 00                	mov    eax,DWORD PTR [rax]
   27d77:	0f af c2             	imul   eax,edx
   27d7a:	48 98                	cdqe   
   27d7c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   27d84:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27d88:	48 01 c2             	add    rdx,rax
   27d8b:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27d8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d93:	4d 89 c1             	mov    r9,r8
   27d96:	49 89 f8             	mov    r8,rdi
   27d99:	48 89 c7             	mov    rdi,rax
   27d9c:	e8 87 fc ff ff       	call   27a28 <rd_4dim_slice>
   27da1:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   27da5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27da9:	8b 10                	mov    edx,DWORD PTR [rax]
   27dab:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27daf:	8b 00                	mov    eax,DWORD PTR [rax]
   27db1:	29 c2                	sub    edx,eax
   27db3:	89 d0                	mov    eax,edx
   27db5:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   27db8:	0f 8c 6d ff ff ff    	jl     27d2b <rd_5dim_slice+0x108>
   27dbe:	90                   	nop
   27dbf:	c9                   	leave  
   27dc0:	c3                   	ret    

0000000000027dc1 <rd_6dim>:
   27dc1:	f3 0f 1e fa          	endbr64 
   27dc5:	55                   	push   rbp
   27dc6:	48 89 e5             	mov    rbp,rsp
   27dc9:	48 83 ec 50          	sub    rsp,0x50
   27dcd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   27dd1:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   27dd5:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   27dd9:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   27ddd:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   27de1:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27dea:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27dee:	31 c0                	xor    eax,eax
   27df0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   27df7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   27dfe:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   27e05:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   27e0c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   27e13:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   27e1a:	4c 8d 45 e0          	lea    r8,[rbp-0x20]
   27e1e:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   27e22:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   27e26:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   27e2a:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   27e2e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27e32:	4d 89 c1             	mov    r9,r8
   27e35:	49 89 f8             	mov    r8,rdi
   27e38:	48 89 c7             	mov    rdi,rax
   27e3b:	e8 17 00 00 00       	call   27e57 <rd_6dim_slice>
   27e40:	90                   	nop
   27e41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27e45:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   27e4e:	74 05                	je     27e55 <rd_6dim+0x94>
   27e50:	e8 9b ba fd ff       	call   38f0 <__stack_chk_fail@plt>
   27e55:	c9                   	leave  
   27e56:	c3                   	ret    

0000000000027e57 <rd_6dim_slice>:
   27e57:	f3 0f 1e fa          	endbr64 
   27e5b:	55                   	push   rbp
   27e5c:	48 89 e5             	mov    rbp,rsp
   27e5f:	48 83 ec 40          	sub    rsp,0x40
   27e63:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27e67:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27e6b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   27e6f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   27e73:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   27e77:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   27e7b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27e7f:	8b 10                	mov    edx,DWORD PTR [rax]
   27e81:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27e85:	48 83 c0 04          	add    rax,0x4
   27e89:	8b 00                	mov    eax,DWORD PTR [rax]
   27e8b:	01 c2                	add    edx,eax
   27e8d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27e91:	48 83 c0 08          	add    rax,0x8
   27e95:	8b 00                	mov    eax,DWORD PTR [rax]
   27e97:	01 c2                	add    edx,eax
   27e99:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27e9d:	48 83 c0 0c          	add    rax,0xc
   27ea1:	8b 00                	mov    eax,DWORD PTR [rax]
   27ea3:	01 c2                	add    edx,eax
   27ea5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27ea9:	48 83 c0 10          	add    rax,0x10
   27ead:	8b 00                	mov    eax,DWORD PTR [rax]
   27eaf:	01 c2                	add    edx,eax
   27eb1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27eb5:	48 83 c0 14          	add    rax,0x14
   27eb9:	8b 00                	mov    eax,DWORD PTR [rax]
   27ebb:	01 d0                	add    eax,edx
   27ebd:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   27ec0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27ec4:	8b 10                	mov    edx,DWORD PTR [rax]
   27ec6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27eca:	48 83 c0 04          	add    rax,0x4
   27ece:	8b 00                	mov    eax,DWORD PTR [rax]
   27ed0:	01 c2                	add    edx,eax
   27ed2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27ed6:	48 83 c0 08          	add    rax,0x8
   27eda:	8b 00                	mov    eax,DWORD PTR [rax]
   27edc:	01 c2                	add    edx,eax
   27ede:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27ee2:	48 83 c0 0c          	add    rax,0xc
   27ee6:	8b 00                	mov    eax,DWORD PTR [rax]
   27ee8:	01 c2                	add    edx,eax
   27eea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27eee:	48 83 c0 10          	add    rax,0x10
   27ef2:	8b 00                	mov    eax,DWORD PTR [rax]
   27ef4:	01 c2                	add    edx,eax
   27ef6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27efa:	48 83 c0 14          	add    rax,0x14
   27efe:	8b 00                	mov    eax,DWORD PTR [rax]
   27f00:	01 d0                	add    eax,edx
   27f02:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   27f05:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   27f08:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   27f0b:	01 d0                	add    eax,edx
   27f0d:	85 c0                	test   eax,eax
   27f0f:	75 68                	jne    27f79 <rd_6dim_slice+0x122>
   27f11:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f15:	8b 10                	mov    edx,DWORD PTR [rax]
   27f17:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f1b:	48 83 c0 04          	add    rax,0x4
   27f1f:	8b 00                	mov    eax,DWORD PTR [rax]
   27f21:	0f af d0             	imul   edx,eax
   27f24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f28:	48 83 c0 08          	add    rax,0x8
   27f2c:	8b 00                	mov    eax,DWORD PTR [rax]
   27f2e:	0f af d0             	imul   edx,eax
   27f31:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f35:	48 83 c0 0c          	add    rax,0xc
   27f39:	8b 00                	mov    eax,DWORD PTR [rax]
   27f3b:	0f af d0             	imul   edx,eax
   27f3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f42:	48 83 c0 10          	add    rax,0x10
   27f46:	8b 00                	mov    eax,DWORD PTR [rax]
   27f48:	0f af d0             	imul   edx,eax
   27f4b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f4f:	48 83 c0 14          	add    rax,0x14
   27f53:	8b 00                	mov    eax,DWORD PTR [rax]
   27f55:	89 d1                	mov    ecx,edx
   27f57:	0f af c8             	imul   ecx,eax
   27f5a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   27f5e:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27f62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27f66:	41 b8 00 00 00 00    	mov    r8d,0x0
   27f6c:	48 89 c7             	mov    rdi,rax
   27f6f:	e8 22 f6 ff ff       	call   27596 <rd_1dim>
   27f74:	e9 af 00 00 00       	jmp    28028 <rd_6dim_slice+0x1d1>
   27f79:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27f7d:	8b 00                	mov    eax,DWORD PTR [rax]
   27f7f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   27f82:	e9 87 00 00 00       	jmp    2800e <rd_6dim_slice+0x1b7>
   27f87:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   27f8b:	4c 8d 40 04          	lea    r8,[rax+0x4]
   27f8f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27f93:	48 8d 78 04          	lea    rdi,[rax+0x4]
   27f97:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27f9b:	48 8d 48 04          	lea    rcx,[rax+0x4]
   27f9f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fa3:	48 83 c0 04          	add    rax,0x4
   27fa7:	8b 00                	mov    eax,DWORD PTR [rax]
   27fa9:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   27fad:	89 c2                	mov    edx,eax
   27faf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fb3:	48 83 c0 08          	add    rax,0x8
   27fb7:	8b 00                	mov    eax,DWORD PTR [rax]
   27fb9:	0f af d0             	imul   edx,eax
   27fbc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fc0:	48 83 c0 0c          	add    rax,0xc
   27fc4:	8b 00                	mov    eax,DWORD PTR [rax]
   27fc6:	0f af d0             	imul   edx,eax
   27fc9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fcd:	48 83 c0 10          	add    rax,0x10
   27fd1:	8b 00                	mov    eax,DWORD PTR [rax]
   27fd3:	0f af d0             	imul   edx,eax
   27fd6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fda:	48 83 c0 14          	add    rax,0x14
   27fde:	8b 00                	mov    eax,DWORD PTR [rax]
   27fe0:	0f af c2             	imul   eax,edx
   27fe3:	48 98                	cdqe   
   27fe5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   27fed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27ff1:	48 01 c2             	add    rdx,rax
   27ff4:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   27ff8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ffc:	4d 89 c1             	mov    r9,r8
   27fff:	49 89 f8             	mov    r8,rdi
   28002:	48 89 c7             	mov    rdi,rax
   28005:	e8 19 fc ff ff       	call   27c23 <rd_5dim_slice>
   2800a:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   2800e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   28012:	8b 10                	mov    edx,DWORD PTR [rax]
   28014:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28018:	8b 00                	mov    eax,DWORD PTR [rax]
   2801a:	29 c2                	sub    edx,eax
   2801c:	89 d0                	mov    eax,edx
   2801e:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   28021:	0f 8c 60 ff ff ff    	jl     27f87 <rd_6dim_slice+0x130>
   28027:	90                   	nop
   28028:	c9                   	leave  
   28029:	c3                   	ret    

000000000002802a <rd_Tetraloop37>:
   2802a:	f3 0f 1e fa          	endbr64 
   2802e:	55                   	push   rbp
   2802f:	48 89 e5             	mov    rbp,rsp
   28032:	48 83 ec 20          	sub    rsp,0x20
   28036:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2803a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2803e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   28045:	ba 19 01 00 00       	mov    edx,0x119
   2804a:	be 00 00 00 00       	mov    esi,0x0
   2804f:	48 8d 3d 6a 81 1c 00 	lea    rdi,[rip+0x1c816a]        # 1f01c0 <Tetraloops>
   28056:	e8 45 b7 fd ff       	call   37a0 <memset@plt>
   2805b:	ba a0 00 00 00       	mov    edx,0xa0
   28060:	be 00 00 00 00       	mov    esi,0x0
   28065:	48 8d 3d 74 82 1c 00 	lea    rdi,[rip+0x1c8274]        # 1f02e0 <Tetraloop37>
   2806c:	e8 2f b7 fd ff       	call   37a0 <memset@plt>
   28071:	ba a0 00 00 00       	mov    edx,0xa0
   28076:	be 00 00 00 00       	mov    esi,0x0
   2807b:	48 8d 3d fe 82 1c 00 	lea    rdi,[rip+0x1c82fe]        # 1f0380 <TetraloopdH>
   28082:	e8 19 b7 fd ff       	call   37a0 <memset@plt>
   28087:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2808b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2808e:	48 8d 48 01          	lea    rcx,[rax+0x1]
   28092:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28096:	48 89 0a             	mov    QWORD PTR [rdx],rcx
   28099:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   280a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   280a5:	48 01 d0             	add    rax,rdx
   280a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   280ab:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   280af:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   280b4:	0f 84 ae 00 00 00    	je     28168 <rd_Tetraloop37+0x13e>
   280ba:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   280bd:	48 98                	cdqe   
   280bf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   280c7:	48 8d 05 b2 82 1c 00 	lea    rax,[rip+0x1c82b2]        # 1f0380 <TetraloopdH>
   280ce:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   280d2:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   280d5:	48 98                	cdqe   
   280d7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   280df:	48 8d 05 fa 81 1c 00 	lea    rax,[rip+0x1c81fa]        # 1f02e0 <Tetraloop37>
   280e6:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   280ea:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   280ed:	89 d0                	mov    eax,edx
   280ef:	c1 e0 03             	shl    eax,0x3
   280f2:	29 d0                	sub    eax,edx
   280f4:	48 98                	cdqe   
   280f6:	48 8d 15 c3 80 1c 00 	lea    rdx,[rip+0x1c80c3]        # 1f01c0 <Tetraloops>
   280fd:	48 01 c2             	add    rdx,rax
   28100:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28104:	49 89 f0             	mov    r8,rsi
   28107:	48 8d 35 d0 dd 1b 00 	lea    rsi,[rip+0x1bddd0]        # 1e5ede <parameter_set_rna_turner2004+0x5d53e>
   2810e:	48 89 c7             	mov    rdi,rax
   28111:	b8 00 00 00 00       	mov    eax,0x0
   28116:	e8 75 b7 fd ff       	call   3890 <__isoc99_sscanf@plt>
   2811b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2811e:	48 8d 05 9b 80 1c 00 	lea    rax,[rip+0x1c809b]        # 1f01c0 <Tetraloops>
   28125:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   2812c:	48 89 c2             	mov    rdx,rax
   2812f:	b8 00 00 00 00       	mov    eax,0x0
   28134:	48 89 d7             	mov    rdi,rdx
   28137:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   28139:	48 89 c8             	mov    rax,rcx
   2813c:	48 f7 d0             	not    rax
   2813f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   28143:	48 8d 05 76 80 1c 00 	lea    rax,[rip+0x1c8076]        # 1f01c0 <Tetraloops>
   2814a:	48 01 d0             	add    rax,rdx
   2814d:	66 c7 00 20 00       	mov    WORD PTR [rax],0x20
   28152:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   28156:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   2815a:	75 0e                	jne    2816a <rd_Tetraloop37+0x140>
   2815c:	83 7d f0 27          	cmp    DWORD PTR [rbp-0x10],0x27
   28160:	0f 8e 21 ff ff ff    	jle    28087 <rd_Tetraloop37+0x5d>
   28166:	eb 01                	jmp    28169 <rd_Tetraloop37+0x13f>
   28168:	90                   	nop
   28169:	90                   	nop
   2816a:	90                   	nop
   2816b:	c9                   	leave  
   2816c:	c3                   	ret    

000000000002816d <rd_Hexaloop37>:
   2816d:	f3 0f 1e fa          	endbr64 
   28171:	55                   	push   rbp
   28172:	48 89 e5             	mov    rbp,rsp
   28175:	48 83 ec 20          	sub    rsp,0x20
   28179:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2817d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   28181:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   28188:	ba 69 01 00 00       	mov    edx,0x169
   2818d:	be 00 00 00 00       	mov    esi,0x0
   28192:	48 8d 3d 87 82 1c 00 	lea    rdi,[rip+0x1c8287]        # 1f0420 <Hexaloops>
   28199:	e8 02 b6 fd ff       	call   37a0 <memset@plt>
   2819e:	ba a0 00 00 00       	mov    edx,0xa0
   281a3:	be 00 00 00 00       	mov    esi,0x0
   281a8:	48 8d 3d f1 83 1c 00 	lea    rdi,[rip+0x1c83f1]        # 1f05a0 <Hexaloop37>
   281af:	e8 ec b5 fd ff       	call   37a0 <memset@plt>
   281b4:	ba a0 00 00 00       	mov    edx,0xa0
   281b9:	be 00 00 00 00       	mov    esi,0x0
   281be:	48 8d 3d 7b 84 1c 00 	lea    rdi,[rip+0x1c847b]        # 1f0640 <HexaloopdH>
   281c5:	e8 d6 b5 fd ff       	call   37a0 <memset@plt>
   281ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   281ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
   281d1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   281d5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   281d9:	48 89 0a             	mov    QWORD PTR [rdx],rcx
   281dc:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   281e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   281e8:	48 01 d0             	add    rax,rdx
   281eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   281ee:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   281f2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   281f7:	0f 84 ae 00 00 00    	je     282ab <rd_Hexaloop37+0x13e>
   281fd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   28200:	48 98                	cdqe   
   28202:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2820a:	48 8d 05 2f 84 1c 00 	lea    rax,[rip+0x1c842f]        # 1f0640 <HexaloopdH>
   28211:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   28215:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   28218:	48 98                	cdqe   
   2821a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28222:	48 8d 05 77 83 1c 00 	lea    rax,[rip+0x1c8377]        # 1f05a0 <Hexaloop37>
   28229:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2822d:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   28230:	89 d0                	mov    eax,edx
   28232:	c1 e0 03             	shl    eax,0x3
   28235:	01 d0                	add    eax,edx
   28237:	48 98                	cdqe   
   28239:	48 8d 15 e0 81 1c 00 	lea    rdx,[rip+0x1c81e0]        # 1f0420 <Hexaloops>
   28240:	48 01 c2             	add    rdx,rax
   28243:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28247:	49 89 f0             	mov    r8,rsi
   2824a:	48 8d 35 97 dc 1b 00 	lea    rsi,[rip+0x1bdc97]        # 1e5ee8 <parameter_set_rna_turner2004+0x5d548>
   28251:	48 89 c7             	mov    rdi,rax
   28254:	b8 00 00 00 00       	mov    eax,0x0
   28259:	e8 32 b6 fd ff       	call   3890 <__isoc99_sscanf@plt>
   2825e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   28261:	48 8d 05 b8 81 1c 00 	lea    rax,[rip+0x1c81b8]        # 1f0420 <Hexaloops>
   28268:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   2826f:	48 89 c2             	mov    rdx,rax
   28272:	b8 00 00 00 00       	mov    eax,0x0
   28277:	48 89 d7             	mov    rdi,rdx
   2827a:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   2827c:	48 89 c8             	mov    rax,rcx
   2827f:	48 f7 d0             	not    rax
   28282:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   28286:	48 8d 05 93 81 1c 00 	lea    rax,[rip+0x1c8193]        # 1f0420 <Hexaloops>
   2828d:	48 01 d0             	add    rax,rdx
   28290:	66 c7 00 20 00       	mov    WORD PTR [rax],0x20
   28295:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   28299:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   2829d:	75 0e                	jne    282ad <rd_Hexaloop37+0x140>
   2829f:	83 7d f0 27          	cmp    DWORD PTR [rbp-0x10],0x27
   282a3:	0f 8e 21 ff ff ff    	jle    281ca <rd_Hexaloop37+0x5d>
   282a9:	eb 01                	jmp    282ac <rd_Hexaloop37+0x13f>
   282ab:	90                   	nop
   282ac:	90                   	nop
   282ad:	90                   	nop
   282ae:	c9                   	leave  
   282af:	c3                   	ret    

00000000000282b0 <rd_Triloop37>:
   282b0:	f3 0f 1e fa          	endbr64 
   282b4:	55                   	push   rbp
   282b5:	48 89 e5             	mov    rbp,rsp
   282b8:	48 83 ec 20          	sub    rsp,0x20
   282bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   282c0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   282c4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   282cb:	ba f1 00 00 00       	mov    edx,0xf1
   282d0:	be 00 00 00 00       	mov    esi,0x0
   282d5:	48 8d 3d a4 7c 1c 00 	lea    rdi,[rip+0x1c7ca4]        # 1eff80 <Triloops>
   282dc:	e8 bf b4 fd ff       	call   37a0 <memset@plt>
   282e1:	ba a0 00 00 00       	mov    edx,0xa0
   282e6:	be 00 00 00 00       	mov    esi,0x0
   282eb:	48 8d 3d 8e 7d 1c 00 	lea    rdi,[rip+0x1c7d8e]        # 1f0080 <Triloop37>
   282f2:	e8 a9 b4 fd ff       	call   37a0 <memset@plt>
   282f7:	ba a0 00 00 00       	mov    edx,0xa0
   282fc:	be 00 00 00 00       	mov    esi,0x0
   28301:	48 8d 3d 18 7e 1c 00 	lea    rdi,[rip+0x1c7e18]        # 1f0120 <TriloopdH>
   28308:	e8 93 b4 fd ff       	call   37a0 <memset@plt>
   2830d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   28311:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28314:	48 8d 48 01          	lea    rcx,[rax+0x1]
   28318:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2831c:	48 89 0a             	mov    QWORD PTR [rdx],rcx
   2831f:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   28327:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2832b:	48 01 d0             	add    rax,rdx
   2832e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28331:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28335:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2833a:	0f 84 af 00 00 00    	je     283ef <rd_Triloop37+0x13f>
   28340:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   28343:	48 98                	cdqe   
   28345:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2834d:	48 8d 05 cc 7d 1c 00 	lea    rax,[rip+0x1c7dcc]        # 1f0120 <TriloopdH>
   28354:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   28358:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2835b:	48 98                	cdqe   
   2835d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28365:	48 8d 05 14 7d 1c 00 	lea    rax,[rip+0x1c7d14]        # 1f0080 <Triloop37>
   2836c:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   28370:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   28373:	89 d0                	mov    eax,edx
   28375:	01 c0                	add    eax,eax
   28377:	01 d0                	add    eax,edx
   28379:	01 c0                	add    eax,eax
   2837b:	48 98                	cdqe   
   2837d:	48 8d 15 fc 7b 1c 00 	lea    rdx,[rip+0x1c7bfc]        # 1eff80 <Triloops>
   28384:	48 01 c2             	add    rdx,rax
   28387:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2838b:	49 89 f0             	mov    r8,rsi
   2838e:	48 8d 35 5d db 1b 00 	lea    rsi,[rip+0x1bdb5d]        # 1e5ef2 <parameter_set_rna_turner2004+0x5d552>
   28395:	48 89 c7             	mov    rdi,rax
   28398:	b8 00 00 00 00       	mov    eax,0x0
   2839d:	e8 ee b4 fd ff       	call   3890 <__isoc99_sscanf@plt>
   283a2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   283a5:	48 8d 05 d4 7b 1c 00 	lea    rax,[rip+0x1c7bd4]        # 1eff80 <Triloops>
   283ac:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   283b3:	48 89 c2             	mov    rdx,rax
   283b6:	b8 00 00 00 00       	mov    eax,0x0
   283bb:	48 89 d7             	mov    rdi,rdx
   283be:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   283c0:	48 89 c8             	mov    rax,rcx
   283c3:	48 f7 d0             	not    rax
   283c6:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   283ca:	48 8d 05 af 7b 1c 00 	lea    rax,[rip+0x1c7baf]        # 1eff80 <Triloops>
   283d1:	48 01 d0             	add    rax,rdx
   283d4:	66 c7 00 20 00       	mov    WORD PTR [rax],0x20
   283d9:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   283dd:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   283e1:	75 0e                	jne    283f1 <rd_Triloop37+0x141>
   283e3:	83 7d f0 27          	cmp    DWORD PTR [rbp-0x10],0x27
   283e7:	0f 8e 20 ff ff ff    	jle    2830d <rd_Triloop37+0x5d>
   283ed:	eb 01                	jmp    283f0 <rd_Triloop37+0x140>
   283ef:	90                   	nop
   283f0:	90                   	nop
   283f1:	90                   	nop
   283f2:	c9                   	leave  
   283f3:	c3                   	ret    

00000000000283f4 <ignore_comment>:
   283f4:	f3 0f 1e fa          	endbr64 
   283f8:	55                   	push   rbp
   283f9:	48 89 e5             	mov    rbp,rsp
   283fc:	48 83 ec 20          	sub    rsp,0x20
   28400:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28404:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28408:	48 8d 35 ed da 1b 00 	lea    rsi,[rip+0x1bdaed]        # 1e5efc <parameter_set_rna_turner2004+0x5d55c>
   2840f:	48 89 c7             	mov    rdi,rax
   28412:	e8 49 b2 fd ff       	call   3660 <strstr@plt>
   28417:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2841b:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   28420:	74 60                	je     28482 <ignore_comment+0x8e>
   28422:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28426:	48 8d 35 d2 da 1b 00 	lea    rsi,[rip+0x1bdad2]        # 1e5eff <parameter_set_rna_turner2004+0x5d55f>
   2842d:	48 89 c7             	mov    rdi,rax
   28430:	e8 2b b2 fd ff       	call   3660 <strstr@plt>
   28435:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28439:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2843e:	75 11                	jne    28451 <ignore_comment+0x5d>
   28440:	48 8d 3d c1 da 1b 00 	lea    rdi,[rip+0x1bdac1]        # 1e5f08 <parameter_set_rna_turner2004+0x5d568>
   28447:	b8 00 00 00 00       	mov    eax,0x0
   2844c:	e8 e9 69 00 00       	call   2ee3a <vrna_message_error>
   28451:	48 83 45 f8 02       	add    QWORD PTR [rbp-0x8],0x2
   28456:	eb 17                	jmp    2846f <ignore_comment+0x7b>
   28458:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2845c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   2845f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28463:	88 10                	mov    BYTE PTR [rax],dl
   28465:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
   2846a:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
   2846f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28473:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   28476:	84 c0                	test   al,al
   28478:	75 de                	jne    28458 <ignore_comment+0x64>
   2847a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2847e:	c6 00 00             	mov    BYTE PTR [rax],0x0
   28481:	90                   	nop
   28482:	90                   	nop
   28483:	c9                   	leave  
   28484:	c3                   	ret    

0000000000028485 <check_symmetry>:
   28485:	f3 0f 1e fa          	endbr64 
   28489:	55                   	push   rbp
   2848a:	48 89 e5             	mov    rbp,rsp
   2848d:	48 83 ec 20          	sub    rsp,0x20
   28491:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   28498:	eb 74                	jmp    2850e <check_symmetry+0x89>
   2849a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   284a1:	eb 61                	jmp    28504 <check_symmetry+0x7f>
   284a3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   284a6:	48 98                	cdqe   
   284a8:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   284ab:	48 63 d2             	movsxd rdx,edx
   284ae:	48 c1 e2 03          	shl    rdx,0x3
   284b2:	48 01 d0             	add    rax,rdx
   284b5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   284bd:	48 8d 05 bc 4d 1c 00 	lea    rax,[rip+0x1c4dbc]        # 1ed280 <stack37>
   284c4:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   284c7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   284ca:	48 98                	cdqe   
   284cc:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   284cf:	48 63 c9             	movsxd rcx,ecx
   284d2:	48 c1 e1 03          	shl    rcx,0x3
   284d6:	48 01 c8             	add    rax,rcx
   284d9:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   284e1:	48 8d 05 98 4d 1c 00 	lea    rax,[rip+0x1c4d98]        # 1ed280 <stack37>
   284e8:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   284eb:	39 c2                	cmp    edx,eax
   284ed:	74 11                	je     28500 <check_symmetry+0x7b>
   284ef:	48 8d 3d 3a da 1b 00 	lea    rdi,[rip+0x1bda3a]        # 1e5f30 <parameter_set_rna_turner2004+0x5d590>
   284f6:	b8 00 00 00 00       	mov    eax,0x0
   284fb:	e8 eb 6a 00 00       	call   2efeb <vrna_message_warning>
   28500:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   28504:	83 7d e4 07          	cmp    DWORD PTR [rbp-0x1c],0x7
   28508:	7e 99                	jle    284a3 <check_symmetry+0x1e>
   2850a:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   2850e:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
   28512:	7e 86                	jle    2849a <check_symmetry+0x15>
   28514:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   2851b:	eb 74                	jmp    28591 <check_symmetry+0x10c>
   2851d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   28524:	eb 61                	jmp    28587 <check_symmetry+0x102>
   28526:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28529:	48 98                	cdqe   
   2852b:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   2852e:	48 63 d2             	movsxd rdx,edx
   28531:	48 c1 e2 03          	shl    rdx,0x3
   28535:	48 01 d0             	add    rax,rdx
   28538:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28540:	48 8d 05 39 4e 1c 00 	lea    rax,[rip+0x1c4e39]        # 1ed380 <stackdH>
   28547:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   2854a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   2854d:	48 98                	cdqe   
   2854f:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
   28552:	48 63 c9             	movsxd rcx,ecx
   28555:	48 c1 e1 03          	shl    rcx,0x3
   28559:	48 01 c8             	add    rax,rcx
   2855c:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   28564:	48 8d 05 15 4e 1c 00 	lea    rax,[rip+0x1c4e15]        # 1ed380 <stackdH>
   2856b:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
   2856e:	39 c2                	cmp    edx,eax
   28570:	74 11                	je     28583 <check_symmetry+0xfe>
   28572:	48 8d 3d d7 d9 1b 00 	lea    rdi,[rip+0x1bd9d7]        # 1e5f50 <parameter_set_rna_turner2004+0x5d5b0>
   28579:	b8 00 00 00 00       	mov    eax,0x0
   2857e:	e8 68 6a 00 00       	call   2efeb <vrna_message_warning>
   28583:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   28587:	83 7d e4 07          	cmp    DWORD PTR [rbp-0x1c],0x7
   2858b:	7e 99                	jle    28526 <check_symmetry+0xa1>
   2858d:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   28591:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
   28595:	7e 86                	jle    2851d <check_symmetry+0x98>
   28597:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   2859e:	e9 31 02 00 00       	jmp    287d4 <check_symmetry+0x34f>
   285a3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   285aa:	e9 17 02 00 00       	jmp    287c6 <check_symmetry+0x341>
   285af:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   285b6:	e9 fd 01 00 00       	jmp    287b8 <check_symmetry+0x333>
   285bb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   285c2:	e9 e3 01 00 00       	jmp    287aa <check_symmetry+0x325>
   285c7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   285ca:	48 63 f8             	movsxd rdi,eax
   285cd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   285d0:	48 98                	cdqe   
   285d2:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   285d5:	48 63 ca             	movsxd rcx,edx
   285d8:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   285db:	48 63 f2             	movsxd rsi,edx
   285de:	48 89 c2             	mov    rdx,rax
   285e1:	48 c1 e2 02          	shl    rdx,0x2
   285e5:	48 01 c2             	add    rdx,rax
   285e8:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   285f0:	48 01 c2             	add    rdx,rax
   285f3:	48 89 f0             	mov    rax,rsi
   285f6:	48 c1 e0 02          	shl    rax,0x2
   285fa:	48 01 f0             	add    rax,rsi
   285fd:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28605:	48 01 f0             	add    rax,rsi
   28608:	48 c1 e0 03          	shl    rax,0x3
   2860c:	48 01 c2             	add    rdx,rax
   2860f:	48 89 c8             	mov    rax,rcx
   28612:	48 c1 e0 02          	shl    rax,0x2
   28616:	48 01 c8             	add    rax,rcx
   28619:	48 01 d0             	add    rax,rdx
   2861c:	48 01 f8             	add    rax,rdi
   2861f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28627:	48 8d 05 b2 80 1c 00 	lea    rax,[rip+0x1c80b2]        # 1f06e0 <int11_37>
   2862e:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   28631:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   28634:	4c 63 c0             	movsxd r8,eax
   28637:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   2863a:	48 98                	cdqe   
   2863c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2863f:	48 63 ca             	movsxd rcx,edx
   28642:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   28645:	48 63 f2             	movsxd rsi,edx
   28648:	48 89 c2             	mov    rdx,rax
   2864b:	48 c1 e2 02          	shl    rdx,0x2
   2864f:	48 01 c2             	add    rdx,rax
   28652:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2865a:	48 01 c2             	add    rdx,rax
   2865d:	48 89 f0             	mov    rax,rsi
   28660:	48 c1 e0 02          	shl    rax,0x2
   28664:	48 01 f0             	add    rax,rsi
   28667:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2866f:	48 01 f0             	add    rax,rsi
   28672:	48 c1 e0 03          	shl    rax,0x3
   28676:	48 01 c2             	add    rdx,rax
   28679:	48 89 c8             	mov    rax,rcx
   2867c:	48 c1 e0 02          	shl    rax,0x2
   28680:	48 01 c8             	add    rax,rcx
   28683:	48 01 d0             	add    rax,rdx
   28686:	4c 01 c0             	add    rax,r8
   28689:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28691:	48 8d 05 48 80 1c 00 	lea    rax,[rip+0x1c8048]        # 1f06e0 <int11_37>
   28698:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2869b:	39 c7                	cmp    edi,eax
   2869d:	0f 84 03 01 00 00    	je     287a6 <check_symmetry+0x321>
   286a3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   286a6:	48 63 f8             	movsxd rdi,eax
   286a9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   286ac:	48 98                	cdqe   
   286ae:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   286b1:	48 63 ca             	movsxd rcx,edx
   286b4:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   286b7:	48 63 f2             	movsxd rsi,edx
   286ba:	48 89 c2             	mov    rdx,rax
   286bd:	48 c1 e2 02          	shl    rdx,0x2
   286c1:	48 01 c2             	add    rdx,rax
   286c4:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   286cc:	48 01 c2             	add    rdx,rax
   286cf:	48 89 f0             	mov    rax,rsi
   286d2:	48 c1 e0 02          	shl    rax,0x2
   286d6:	48 01 f0             	add    rax,rsi
   286d9:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   286e1:	48 01 f0             	add    rax,rsi
   286e4:	48 c1 e0 03          	shl    rax,0x3
   286e8:	48 01 c2             	add    rdx,rax
   286eb:	48 89 c8             	mov    rax,rcx
   286ee:	48 c1 e0 02          	shl    rax,0x2
   286f2:	48 01 c8             	add    rax,rcx
   286f5:	48 01 d0             	add    rax,rdx
   286f8:	48 01 f8             	add    rax,rdi
   286fb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28703:	48 8d 05 d6 7f 1c 00 	lea    rax,[rip+0x1c7fd6]        # 1f06e0 <int11_37>
   2870a:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   2870d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   28710:	4c 63 c0             	movsxd r8,eax
   28713:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28716:	48 98                	cdqe   
   28718:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   2871b:	48 63 ca             	movsxd rcx,edx
   2871e:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   28721:	48 63 f2             	movsxd rsi,edx
   28724:	48 89 c2             	mov    rdx,rax
   28727:	48 c1 e2 02          	shl    rdx,0x2
   2872b:	48 01 c2             	add    rdx,rax
   2872e:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   28736:	48 01 c2             	add    rdx,rax
   28739:	48 89 f0             	mov    rax,rsi
   2873c:	48 c1 e0 02          	shl    rax,0x2
   28740:	48 01 f0             	add    rax,rsi
   28743:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2874b:	48 01 f0             	add    rax,rsi
   2874e:	48 c1 e0 03          	shl    rax,0x3
   28752:	48 01 c2             	add    rdx,rax
   28755:	48 89 c8             	mov    rax,rcx
   28758:	48 c1 e0 02          	shl    rax,0x2
   2875c:	48 01 c8             	add    rax,rcx
   2875f:	48 01 d0             	add    rax,rdx
   28762:	4c 01 c0             	add    rax,r8
   28765:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2876d:	48 8d 05 6c 7f 1c 00 	lea    rax,[rip+0x1c7f6c]        # 1f06e0 <int11_37>
   28774:	44 8b 04 02          	mov    r8d,DWORD PTR [rdx+rax*1]
   28778:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   2877b:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
   2877e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   28781:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28784:	48 83 ec 08          	sub    rsp,0x8
   28788:	57                   	push   rdi
   28789:	45 89 c1             	mov    r9d,r8d
   2878c:	41 89 f0             	mov    r8d,esi
   2878f:	89 c6                	mov    esi,eax
   28791:	48 8d 3d e0 d7 1b 00 	lea    rdi,[rip+0x1bd7e0]        # 1e5f78 <parameter_set_rna_turner2004+0x5d5d8>
   28798:	b8 00 00 00 00       	mov    eax,0x0
   2879d:	e8 49 68 00 00       	call   2efeb <vrna_message_warning>
   287a2:	48 83 c4 10          	add    rsp,0x10
   287a6:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   287aa:	83 7d ec 04          	cmp    DWORD PTR [rbp-0x14],0x4
   287ae:	0f 8e 13 fe ff ff    	jle    285c7 <check_symmetry+0x142>
   287b4:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   287b8:	83 7d e8 04          	cmp    DWORD PTR [rbp-0x18],0x4
   287bc:	0f 8e f9 fd ff ff    	jle    285bb <check_symmetry+0x136>
   287c2:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   287c6:	83 7d e4 07          	cmp    DWORD PTR [rbp-0x1c],0x7
   287ca:	0f 8e df fd ff ff    	jle    285af <check_symmetry+0x12a>
   287d0:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   287d4:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
   287d8:	0f 8e c5 fd ff ff    	jle    285a3 <check_symmetry+0x11e>
   287de:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   287e5:	e9 3b 01 00 00       	jmp    28925 <check_symmetry+0x4a0>
   287ea:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   287f1:	e9 21 01 00 00       	jmp    28917 <check_symmetry+0x492>
   287f6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   287fd:	e9 07 01 00 00       	jmp    28909 <check_symmetry+0x484>
   28802:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   28809:	e9 ed 00 00 00       	jmp    288fb <check_symmetry+0x476>
   2880e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   28811:	48 63 f8             	movsxd rdi,eax
   28814:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28817:	48 98                	cdqe   
   28819:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   2881c:	48 63 ca             	movsxd rcx,edx
   2881f:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   28822:	48 63 f2             	movsxd rsi,edx
   28825:	48 89 c2             	mov    rdx,rax
   28828:	48 c1 e2 02          	shl    rdx,0x2
   2882c:	48 01 c2             	add    rdx,rax
   2882f:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   28837:	48 01 c2             	add    rdx,rax
   2883a:	48 89 f0             	mov    rax,rsi
   2883d:	48 c1 e0 02          	shl    rax,0x2
   28841:	48 01 f0             	add    rax,rsi
   28844:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   2884c:	48 01 f0             	add    rax,rsi
   2884f:	48 c1 e0 03          	shl    rax,0x3
   28853:	48 01 c2             	add    rdx,rax
   28856:	48 89 c8             	mov    rax,rcx
   28859:	48 c1 e0 02          	shl    rax,0x2
   2885d:	48 01 c8             	add    rax,rcx
   28860:	48 01 d0             	add    rax,rdx
   28863:	48 01 f8             	add    rax,rdi
   28866:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2886e:	48 8d 05 6b 97 1c 00 	lea    rax,[rip+0x1c976b]        # 1f1fe0 <int11_dH>
   28875:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   28878:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2887b:	4c 63 c0             	movsxd r8,eax
   2887e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28881:	48 98                	cdqe   
   28883:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   28886:	48 63 ca             	movsxd rcx,edx
   28889:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   2888c:	48 63 f2             	movsxd rsi,edx
   2888f:	48 89 c2             	mov    rdx,rax
   28892:	48 c1 e2 02          	shl    rdx,0x2
   28896:	48 01 c2             	add    rdx,rax
   28899:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   288a1:	48 01 c2             	add    rdx,rax
   288a4:	48 89 f0             	mov    rax,rsi
   288a7:	48 c1 e0 02          	shl    rax,0x2
   288ab:	48 01 f0             	add    rax,rsi
   288ae:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   288b6:	48 01 f0             	add    rax,rsi
   288b9:	48 c1 e0 03          	shl    rax,0x3
   288bd:	48 01 c2             	add    rdx,rax
   288c0:	48 89 c8             	mov    rax,rcx
   288c3:	48 c1 e0 02          	shl    rax,0x2
   288c7:	48 01 c8             	add    rax,rcx
   288ca:	48 01 d0             	add    rax,rdx
   288cd:	4c 01 c0             	add    rax,r8
   288d0:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   288d8:	48 8d 05 01 97 1c 00 	lea    rax,[rip+0x1c9701]        # 1f1fe0 <int11_dH>
   288df:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   288e2:	39 c7                	cmp    edi,eax
   288e4:	74 11                	je     288f7 <check_symmetry+0x472>
   288e6:	48 8d 3d c3 d6 1b 00 	lea    rdi,[rip+0x1bd6c3]        # 1e5fb0 <parameter_set_rna_turner2004+0x5d610>
   288ed:	b8 00 00 00 00       	mov    eax,0x0
   288f2:	e8 f4 66 00 00       	call   2efeb <vrna_message_warning>
   288f7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   288fb:	83 7d ec 04          	cmp    DWORD PTR [rbp-0x14],0x4
   288ff:	0f 8e 09 ff ff ff    	jle    2880e <check_symmetry+0x389>
   28905:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   28909:	83 7d e8 04          	cmp    DWORD PTR [rbp-0x18],0x4
   2890d:	0f 8e ef fe ff ff    	jle    28802 <check_symmetry+0x37d>
   28913:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   28917:	83 7d e4 07          	cmp    DWORD PTR [rbp-0x1c],0x7
   2891b:	0f 8e d5 fe ff ff    	jle    287f6 <check_symmetry+0x371>
   28921:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   28925:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
   28929:	0f 8e bb fe ff ff    	jle    287ea <check_symmetry+0x365>
   2892f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   28936:	e9 a5 01 00 00       	jmp    28ae0 <check_symmetry+0x65b>
   2893b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   28942:	e9 8b 01 00 00       	jmp    28ad2 <check_symmetry+0x64d>
   28947:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   2894e:	e9 71 01 00 00       	jmp    28ac4 <check_symmetry+0x63f>
   28953:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   2895a:	e9 57 01 00 00       	jmp    28ab6 <check_symmetry+0x631>
   2895f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   28966:	e9 3d 01 00 00       	jmp    28aa8 <check_symmetry+0x623>
   2896b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   28972:	e9 23 01 00 00       	jmp    28a9a <check_symmetry+0x615>
   28977:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2897a:	48 63 f8             	movsxd rdi,eax
   2897d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   28980:	48 63 f0             	movsxd rsi,eax
   28983:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   28986:	48 63 c8             	movsxd rcx,eax
   28989:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2898c:	4c 63 c0             	movsxd r8,eax
   2898f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   28992:	48 63 d0             	movsxd rdx,eax
   28995:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28998:	4c 63 c8             	movsxd r9,eax
   2899b:	48 89 f0             	mov    rax,rsi
   2899e:	48 c1 e0 02          	shl    rax,0x2
   289a2:	48 01 f0             	add    rax,rsi
   289a5:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   289ad:	48 01 f0             	add    rax,rsi
   289b0:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   289b7:	48 01 c6             	add    rsi,rax
   289ba:	48 89 c8             	mov    rax,rcx
   289bd:	48 c1 e0 02          	shl    rax,0x2
   289c1:	48 01 c8             	add    rax,rcx
   289c4:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   289c8:	48 89 d0             	mov    rax,rdx
   289cb:	48 c1 e0 05          	shl    rax,0x5
   289cf:	48 29 d0             	sub    rax,rdx
   289d2:	48 c1 e0 02          	shl    rax,0x2
   289d6:	48 01 d0             	add    rax,rdx
   289d9:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   289dd:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   289e4:	48 01 d0             	add    rax,rdx
   289e7:	48 01 f8             	add    rax,rdi
   289ea:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   289f2:	48 8d 05 e7 a8 1d 00 	lea    rax,[rip+0x1da8e7]        # 2032e0 <int22_37>
   289f9:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   289fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   289ff:	4c 63 c0             	movsxd r8,eax
   28a02:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   28a05:	48 63 f0             	movsxd rsi,eax
   28a08:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   28a0b:	48 63 c8             	movsxd rcx,eax
   28a0e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28a11:	4c 63 c8             	movsxd r9,eax
   28a14:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   28a17:	48 63 d0             	movsxd rdx,eax
   28a1a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28a1d:	4c 63 d0             	movsxd r10,eax
   28a20:	48 89 f0             	mov    rax,rsi
   28a23:	48 c1 e0 02          	shl    rax,0x2
   28a27:	48 01 f0             	add    rax,rsi
   28a2a:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28a32:	48 01 f0             	add    rax,rsi
   28a35:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   28a3c:	48 01 c6             	add    rsi,rax
   28a3f:	48 89 c8             	mov    rax,rcx
   28a42:	48 c1 e0 02          	shl    rax,0x2
   28a46:	48 01 c8             	add    rax,rcx
   28a49:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   28a4d:	48 89 d0             	mov    rax,rdx
   28a50:	48 c1 e0 05          	shl    rax,0x5
   28a54:	48 29 d0             	sub    rax,rdx
   28a57:	48 c1 e0 02          	shl    rax,0x2
   28a5b:	48 01 d0             	add    rax,rdx
   28a5e:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   28a62:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   28a69:	48 01 d0             	add    rax,rdx
   28a6c:	4c 01 c0             	add    rax,r8
   28a6f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28a77:	48 8d 05 62 a8 1d 00 	lea    rax,[rip+0x1da862]        # 2032e0 <int22_37>
   28a7e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   28a81:	39 c7                	cmp    edi,eax
   28a83:	74 11                	je     28a96 <check_symmetry+0x611>
   28a85:	48 8d 3d 43 d5 1b 00 	lea    rdi,[rip+0x1bd543]        # 1e5fcf <parameter_set_rna_turner2004+0x5d62f>
   28a8c:	b8 00 00 00 00       	mov    eax,0x0
   28a91:	e8 55 65 00 00       	call   2efeb <vrna_message_warning>
   28a96:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   28a9a:	83 7d f4 04          	cmp    DWORD PTR [rbp-0xc],0x4
   28a9e:	0f 8e d3 fe ff ff    	jle    28977 <check_symmetry+0x4f2>
   28aa4:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   28aa8:	83 7d f0 04          	cmp    DWORD PTR [rbp-0x10],0x4
   28aac:	0f 8e b9 fe ff ff    	jle    2896b <check_symmetry+0x4e6>
   28ab2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   28ab6:	83 7d ec 04          	cmp    DWORD PTR [rbp-0x14],0x4
   28aba:	0f 8e 9f fe ff ff    	jle    2895f <check_symmetry+0x4da>
   28ac0:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   28ac4:	83 7d e8 04          	cmp    DWORD PTR [rbp-0x18],0x4
   28ac8:	0f 8e 85 fe ff ff    	jle    28953 <check_symmetry+0x4ce>
   28ace:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   28ad2:	83 7d e4 07          	cmp    DWORD PTR [rbp-0x1c],0x7
   28ad6:	0f 8e 6b fe ff ff    	jle    28947 <check_symmetry+0x4c2>
   28adc:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   28ae0:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
   28ae4:	0f 8e 51 fe ff ff    	jle    2893b <check_symmetry+0x4b6>
   28aea:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   28af1:	e9 c9 01 00 00       	jmp    28cbf <check_symmetry+0x83a>
   28af6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   28afd:	e9 af 01 00 00       	jmp    28cb1 <check_symmetry+0x82c>
   28b02:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   28b09:	e9 95 01 00 00       	jmp    28ca3 <check_symmetry+0x81e>
   28b0e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   28b15:	e9 7b 01 00 00       	jmp    28c95 <check_symmetry+0x810>
   28b1a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   28b21:	e9 61 01 00 00       	jmp    28c87 <check_symmetry+0x802>
   28b26:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   28b2d:	e9 47 01 00 00       	jmp    28c79 <check_symmetry+0x7f4>
   28b32:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   28b35:	48 63 f8             	movsxd rdi,eax
   28b38:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   28b3b:	48 63 f0             	movsxd rsi,eax
   28b3e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   28b41:	48 63 c8             	movsxd rcx,eax
   28b44:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28b47:	4c 63 c0             	movsxd r8,eax
   28b4a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   28b4d:	48 63 d0             	movsxd rdx,eax
   28b50:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28b53:	4c 63 c8             	movsxd r9,eax
   28b56:	48 89 f0             	mov    rax,rsi
   28b59:	48 c1 e0 02          	shl    rax,0x2
   28b5d:	48 01 f0             	add    rax,rsi
   28b60:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28b68:	48 01 f0             	add    rax,rsi
   28b6b:	49 69 f1 88 13 00 00 	imul   rsi,r9,0x1388
   28b72:	48 01 c6             	add    rsi,rax
   28b75:	48 89 c8             	mov    rax,rcx
   28b78:	48 c1 e0 02          	shl    rax,0x2
   28b7c:	48 01 c8             	add    rax,rcx
   28b7f:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   28b83:	48 89 d0             	mov    rax,rdx
   28b86:	48 c1 e0 05          	shl    rax,0x5
   28b8a:	48 29 d0             	sub    rax,rdx
   28b8d:	48 c1 e0 02          	shl    rax,0x2
   28b91:	48 01 d0             	add    rax,rdx
   28b94:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   28b98:	49 69 c0 71 02 00 00 	imul   rax,r8,0x271
   28b9f:	48 01 d0             	add    rax,rdx
   28ba2:	48 01 f8             	add    rax,rdi
   28ba5:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28bad:	48 8d 05 2c 18 20 00 	lea    rax,[rip+0x20182c]        # 22a3e0 <int22_dH>
   28bb4:	8b 3c 02             	mov    edi,DWORD PTR [rdx+rax*1]
   28bb7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   28bba:	4c 63 c0             	movsxd r8,eax
   28bbd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   28bc0:	48 63 f0             	movsxd rsi,eax
   28bc3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   28bc6:	48 63 c8             	movsxd rcx,eax
   28bc9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28bcc:	4c 63 c8             	movsxd r9,eax
   28bcf:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   28bd2:	48 63 d0             	movsxd rdx,eax
   28bd5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28bd8:	4c 63 d0             	movsxd r10,eax
   28bdb:	48 89 f0             	mov    rax,rsi
   28bde:	48 c1 e0 02          	shl    rax,0x2
   28be2:	48 01 f0             	add    rax,rsi
   28be5:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28bed:	48 01 f0             	add    rax,rsi
   28bf0:	49 69 f2 88 13 00 00 	imul   rsi,r10,0x1388
   28bf7:	48 01 c6             	add    rsi,rax
   28bfa:	48 89 c8             	mov    rax,rcx
   28bfd:	48 c1 e0 02          	shl    rax,0x2
   28c01:	48 01 c8             	add    rax,rcx
   28c04:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   28c08:	48 89 d0             	mov    rax,rdx
   28c0b:	48 c1 e0 05          	shl    rax,0x5
   28c0f:	48 29 d0             	sub    rax,rdx
   28c12:	48 c1 e0 02          	shl    rax,0x2
   28c16:	48 01 d0             	add    rax,rdx
   28c19:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   28c1d:	49 69 c1 71 02 00 00 	imul   rax,r9,0x271
   28c24:	48 01 d0             	add    rax,rdx
   28c27:	4c 01 c0             	add    rax,r8
   28c2a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28c32:	48 8d 05 a7 17 20 00 	lea    rax,[rip+0x2017a7]        # 22a3e0 <int22_dH>
   28c39:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   28c3c:	39 c7                	cmp    edi,eax
   28c3e:	74 35                	je     28c75 <check_symmetry+0x7f0>
   28c40:	44 8b 45 f8          	mov    r8d,DWORD PTR [rbp-0x8]
   28c44:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
   28c47:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
   28c4a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   28c4d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28c50:	48 83 ec 08          	sub    rsp,0x8
   28c54:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
   28c57:	56                   	push   rsi
   28c58:	45 89 c1             	mov    r9d,r8d
   28c5b:	41 89 f8             	mov    r8d,edi
   28c5e:	89 c6                	mov    esi,eax
   28c60:	48 8d 3d 89 d3 1b 00 	lea    rdi,[rip+0x1bd389]        # 1e5ff0 <parameter_set_rna_turner2004+0x5d650>
   28c67:	b8 00 00 00 00       	mov    eax,0x0
   28c6c:	e8 7a 63 00 00       	call   2efeb <vrna_message_warning>
   28c71:	48 83 c4 10          	add    rsp,0x10
   28c75:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   28c79:	83 7d fc 04          	cmp    DWORD PTR [rbp-0x4],0x4
   28c7d:	0f 8e af fe ff ff    	jle    28b32 <check_symmetry+0x6ad>
   28c83:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   28c87:	83 7d f8 04          	cmp    DWORD PTR [rbp-0x8],0x4
   28c8b:	0f 8e 95 fe ff ff    	jle    28b26 <check_symmetry+0x6a1>
   28c91:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   28c95:	83 7d ec 04          	cmp    DWORD PTR [rbp-0x14],0x4
   28c99:	0f 8e 7b fe ff ff    	jle    28b1a <check_symmetry+0x695>
   28c9f:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   28ca3:	83 7d e8 04          	cmp    DWORD PTR [rbp-0x18],0x4
   28ca7:	0f 8e 61 fe ff ff    	jle    28b0e <check_symmetry+0x689>
   28cad:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   28cb1:	83 7d e4 07          	cmp    DWORD PTR [rbp-0x1c],0x7
   28cb5:	0f 8e 47 fe ff ff    	jle    28b02 <check_symmetry+0x67d>
   28cbb:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   28cbf:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
   28cc3:	0f 8e 2d fe ff ff    	jle    28af6 <check_symmetry+0x671>
   28cc9:	90                   	nop
   28cca:	90                   	nop
   28ccb:	c9                   	leave  
   28ccc:	c3                   	ret    

0000000000028ccd <update_nst>:
   28ccd:	f3 0f 1e fa          	endbr64 
   28cd1:	55                   	push   rbp
   28cd2:	48 89 e5             	mov    rbp,rsp
   28cd5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   28cd9:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   28ce0:	e9 49 04 00 00       	jmp    2912e <update_nst+0x461>
   28ce5:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   28cec:	e9 2f 04 00 00       	jmp    29120 <update_nst+0x453>
   28cf1:	c7 45 d8 01 00 00 00 	mov    DWORD PTR [rbp-0x28],0x1
   28cf8:	e9 15 04 00 00       	jmp    29112 <update_nst+0x445>
   28cfd:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
   28d04:	e9 fb 03 00 00       	jmp    29104 <update_nst+0x437>
   28d09:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
   28d10:	e9 e1 03 00 00       	jmp    290f6 <update_nst+0x429>
   28d15:	c7 45 f4 80 69 67 ff 	mov    DWORD PTR [rbp-0xc],0xff676980
   28d1c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   28d1f:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   28d22:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   28d25:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   28d28:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   28d2b:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   28d2e:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x1
   28d35:	e9 10 02 00 00       	jmp    28f4a <update_nst+0x27d>
   28d3a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   28d3d:	48 98                	cdqe   
   28d3f:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   28d46:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28d4a:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   28d4e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28d51:	4c 63 c0             	movsxd r8,eax
   28d54:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   28d57:	48 63 f0             	movsxd rsi,eax
   28d5a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28d5d:	48 63 c8             	movsxd rcx,eax
   28d60:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   28d63:	4c 63 c8             	movsxd r9,eax
   28d66:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   28d69:	48 63 d0             	movsxd rdx,eax
   28d6c:	48 89 f0             	mov    rax,rsi
   28d6f:	48 c1 e0 02          	shl    rax,0x2
   28d73:	48 01 f0             	add    rax,rsi
   28d76:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28d7e:	48 01 f0             	add    rax,rsi
   28d81:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   28d88:	48 01 c6             	add    rsi,rax
   28d8b:	48 89 d0             	mov    rax,rdx
   28d8e:	48 c1 e0 05          	shl    rax,0x5
   28d92:	48 29 d0             	sub    rax,rdx
   28d95:	48 c1 e0 02          	shl    rax,0x2
   28d99:	48 01 d0             	add    rax,rdx
   28d9c:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   28da0:	48 89 c8             	mov    rax,rcx
   28da3:	48 c1 e0 02          	shl    rax,0x2
   28da7:	48 01 c8             	add    rax,rcx
   28daa:	48 01 d0             	add    rax,rdx
   28dad:	4c 01 c0             	add    rax,r8
   28db0:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   28db3:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   28db6:	0f 4d 45 e8          	cmovge eax,DWORD PTR [rbp-0x18]
   28dba:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   28dbd:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   28dc0:	48 98                	cdqe   
   28dc2:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   28dc9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28dcd:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   28dd1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28dd4:	4c 63 c0             	movsxd r8,eax
   28dd7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   28dda:	48 63 f0             	movsxd rsi,eax
   28ddd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28de0:	48 63 c8             	movsxd rcx,eax
   28de3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   28de6:	4c 63 c8             	movsxd r9,eax
   28de9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   28dec:	48 63 d0             	movsxd rdx,eax
   28def:	48 89 f0             	mov    rax,rsi
   28df2:	48 c1 e0 02          	shl    rax,0x2
   28df6:	48 01 f0             	add    rax,rsi
   28df9:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28e01:	48 01 f0             	add    rax,rsi
   28e04:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   28e0b:	48 01 c6             	add    rsi,rax
   28e0e:	48 89 d0             	mov    rax,rdx
   28e11:	48 c1 e0 05          	shl    rax,0x5
   28e15:	48 29 d0             	sub    rax,rdx
   28e18:	48 c1 e0 02          	shl    rax,0x2
   28e1c:	48 01 d0             	add    rax,rdx
   28e1f:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   28e23:	48 89 c8             	mov    rax,rcx
   28e26:	48 c1 e0 02          	shl    rax,0x2
   28e2a:	48 01 c8             	add    rax,rcx
   28e2d:	48 01 d0             	add    rax,rdx
   28e30:	4c 01 c0             	add    rax,r8
   28e33:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   28e36:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   28e39:	0f 4d 45 ec          	cmovge eax,DWORD PTR [rbp-0x14]
   28e3d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   28e40:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   28e43:	48 98                	cdqe   
   28e45:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   28e4c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28e50:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   28e54:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28e57:	4c 63 c0             	movsxd r8,eax
   28e5a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28e5d:	48 63 f0             	movsxd rsi,eax
   28e60:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   28e63:	48 63 c8             	movsxd rcx,eax
   28e66:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   28e69:	4c 63 c8             	movsxd r9,eax
   28e6c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   28e6f:	48 63 d0             	movsxd rdx,eax
   28e72:	48 89 f0             	mov    rax,rsi
   28e75:	48 c1 e0 02          	shl    rax,0x2
   28e79:	48 01 f0             	add    rax,rsi
   28e7c:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28e84:	48 01 f0             	add    rax,rsi
   28e87:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   28e8e:	48 01 c6             	add    rsi,rax
   28e91:	48 89 d0             	mov    rax,rdx
   28e94:	48 c1 e0 05          	shl    rax,0x5
   28e98:	48 29 d0             	sub    rax,rdx
   28e9b:	48 c1 e0 02          	shl    rax,0x2
   28e9f:	48 01 d0             	add    rax,rdx
   28ea2:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   28ea6:	48 89 c8             	mov    rax,rcx
   28ea9:	48 c1 e0 02          	shl    rax,0x2
   28ead:	48 01 c8             	add    rax,rcx
   28eb0:	48 01 d0             	add    rax,rdx
   28eb3:	4c 01 c0             	add    rax,r8
   28eb6:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   28eb9:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   28ebc:	0f 4d 45 f0          	cmovge eax,DWORD PTR [rbp-0x10]
   28ec0:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   28ec3:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   28ec6:	48 98                	cdqe   
   28ec8:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   28ecf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28ed3:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   28ed7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28eda:	4c 63 c0             	movsxd r8,eax
   28edd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   28ee0:	48 63 f0             	movsxd rsi,eax
   28ee3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   28ee6:	48 63 c8             	movsxd rcx,eax
   28ee9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   28eec:	4c 63 c8             	movsxd r9,eax
   28eef:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   28ef2:	48 63 d0             	movsxd rdx,eax
   28ef5:	48 89 f0             	mov    rax,rsi
   28ef8:	48 c1 e0 02          	shl    rax,0x2
   28efc:	48 01 f0             	add    rax,rsi
   28eff:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   28f07:	48 01 f0             	add    rax,rsi
   28f0a:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   28f11:	48 01 c6             	add    rsi,rax
   28f14:	48 89 d0             	mov    rax,rdx
   28f17:	48 c1 e0 05          	shl    rax,0x5
   28f1b:	48 29 d0             	sub    rax,rdx
   28f1e:	48 c1 e0 02          	shl    rax,0x2
   28f22:	48 01 d0             	add    rax,rdx
   28f25:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   28f29:	48 89 c8             	mov    rax,rcx
   28f2c:	48 c1 e0 02          	shl    rax,0x2
   28f30:	48 01 c8             	add    rax,rcx
   28f33:	48 01 d0             	add    rax,rdx
   28f36:	4c 01 c0             	add    rax,r8
   28f39:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   28f3c:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   28f3f:	0f 4d 45 f4          	cmovge eax,DWORD PTR [rbp-0xc]
   28f43:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   28f46:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   28f4a:	83 7d e4 04          	cmp    DWORD PTR [rbp-0x1c],0x4
   28f4e:	0f 8e e6 fd ff ff    	jle    28d3a <update_nst+0x6d>
   28f54:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   28f57:	48 98                	cdqe   
   28f59:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   28f60:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28f64:	4c 8d 04 02          	lea    r8,[rdx+rax*1]
   28f68:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28f6b:	48 63 c8             	movsxd rcx,eax
   28f6e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   28f71:	48 63 d0             	movsxd rdx,eax
   28f74:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   28f77:	48 63 f0             	movsxd rsi,eax
   28f7a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   28f7d:	48 63 f8             	movsxd rdi,eax
   28f80:	48 89 c8             	mov    rax,rcx
   28f83:	48 c1 e0 02          	shl    rax,0x2
   28f87:	48 01 c8             	add    rax,rcx
   28f8a:	48 c1 e0 02          	shl    rax,0x2
   28f8e:	48 69 cf f4 01 00 00 	imul   rcx,rdi,0x1f4
   28f95:	48 01 c1             	add    rcx,rax
   28f98:	48 89 d0             	mov    rax,rdx
   28f9b:	48 c1 e0 02          	shl    rax,0x2
   28f9f:	48 01 d0             	add    rax,rdx
   28fa2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   28faa:	48 01 d0             	add    rax,rdx
   28fad:	48 c1 e0 02          	shl    rax,0x2
   28fb1:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   28fb5:	48 69 c6 c4 09 00 00 	imul   rax,rsi,0x9c4
   28fbc:	48 01 d0             	add    rax,rdx
   28fbf:	49 8d 14 00          	lea    rdx,[r8+rax*1]
   28fc3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   28fc6:	89 02                	mov    DWORD PTR [rdx],eax
   28fc8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   28fcb:	48 98                	cdqe   
   28fcd:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   28fd4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28fd8:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   28fdc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   28fdf:	48 63 f8             	movsxd rdi,eax
   28fe2:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   28fe5:	48 63 d0             	movsxd rdx,eax
   28fe8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   28feb:	48 63 c8             	movsxd rcx,eax
   28fee:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   28ff1:	4c 63 c0             	movsxd r8,eax
   28ff4:	48 89 d0             	mov    rax,rdx
   28ff7:	48 c1 e0 05          	shl    rax,0x5
   28ffb:	48 29 d0             	sub    rax,rdx
   28ffe:	48 c1 e0 02          	shl    rax,0x2
   29002:	48 01 d0             	add    rax,rdx
   29005:	49 69 d0 71 02 00 00 	imul   rdx,r8,0x271
   2900c:	4c 8d 04 10          	lea    r8,[rax+rdx*1]
   29010:	48 89 c8             	mov    rax,rcx
   29013:	48 c1 e0 02          	shl    rax,0x2
   29017:	48 01 c8             	add    rax,rcx
   2901a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29022:	48 01 d0             	add    rax,rdx
   29025:	4c 01 c0             	add    rax,r8
   29028:	48 8d 14 38          	lea    rdx,[rax+rdi*1]
   2902c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2902f:	89 04 96             	mov    DWORD PTR [rsi+rdx*4],eax
   29032:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29035:	48 98                	cdqe   
   29037:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2903e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29042:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   29046:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29049:	48 63 f8             	movsxd rdi,eax
   2904c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   2904f:	48 63 d0             	movsxd rdx,eax
   29052:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29055:	48 63 c8             	movsxd rcx,eax
   29058:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2905b:	4c 63 c0             	movsxd r8,eax
   2905e:	48 89 d0             	mov    rax,rdx
   29061:	48 c1 e0 05          	shl    rax,0x5
   29065:	48 29 d0             	sub    rax,rdx
   29068:	48 c1 e0 02          	shl    rax,0x2
   2906c:	48 01 d0             	add    rax,rdx
   2906f:	49 69 d0 71 02 00 00 	imul   rdx,r8,0x271
   29076:	48 01 c2             	add    rdx,rax
   29079:	48 89 c8             	mov    rax,rcx
   2907c:	48 c1 e0 02          	shl    rax,0x2
   29080:	48 01 c8             	add    rax,rcx
   29083:	48 01 d0             	add    rax,rdx
   29086:	48 8d 14 38          	lea    rdx,[rax+rdi*1]
   2908a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2908d:	89 04 96             	mov    DWORD PTR [rsi+rdx*4],eax
   29090:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29093:	48 98                	cdqe   
   29095:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2909c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   290a0:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   290a4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   290a7:	48 63 f8             	movsxd rdi,eax
   290aa:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   290ad:	48 63 c8             	movsxd rcx,eax
   290b0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   290b3:	48 63 d0             	movsxd rdx,eax
   290b6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   290b9:	4c 63 c0             	movsxd r8,eax
   290bc:	48 89 c8             	mov    rax,rcx
   290bf:	48 c1 e0 02          	shl    rax,0x2
   290c3:	48 01 c8             	add    rax,rcx
   290c6:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   290ce:	48 01 c8             	add    rax,rcx
   290d1:	49 69 c8 71 02 00 00 	imul   rcx,r8,0x271
   290d8:	48 01 c1             	add    rcx,rax
   290db:	48 89 d0             	mov    rax,rdx
   290de:	48 c1 e0 02          	shl    rax,0x2
   290e2:	48 01 d0             	add    rax,rdx
   290e5:	48 01 c8             	add    rax,rcx
   290e8:	48 8d 14 38          	lea    rdx,[rax+rdi*1]
   290ec:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   290ef:	89 04 96             	mov    DWORD PTR [rsi+rdx*4],eax
   290f2:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   290f6:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
   290fa:	0f 8e 15 fc ff ff    	jle    28d15 <update_nst+0x48>
   29100:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
   29104:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   29108:	0f 8e fb fb ff ff    	jle    28d09 <update_nst+0x3c>
   2910e:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   29112:	83 7d d8 04          	cmp    DWORD PTR [rbp-0x28],0x4
   29116:	0f 8e e1 fb ff ff    	jle    28cfd <update_nst+0x30>
   2911c:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   29120:	83 7d d4 06          	cmp    DWORD PTR [rbp-0x2c],0x6
   29124:	0f 8e c7 fb ff ff    	jle    28cf1 <update_nst+0x24>
   2912a:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   2912e:	83 7d d0 06          	cmp    DWORD PTR [rbp-0x30],0x6
   29132:	0f 8e ad fb ff ff    	jle    28ce5 <update_nst+0x18>
   29138:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   2913f:	e9 04 05 00 00       	jmp    29648 <update_nst+0x97b>
   29144:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   2914b:	e9 ea 04 00 00       	jmp    2963a <update_nst+0x96d>
   29150:	c7 45 d8 01 00 00 00 	mov    DWORD PTR [rbp-0x28],0x1
   29157:	e9 d0 04 00 00       	jmp    2962c <update_nst+0x95f>
   2915c:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
   29163:	e9 b6 04 00 00       	jmp    2961e <update_nst+0x951>
   29168:	c7 45 fc 80 69 67 ff 	mov    DWORD PTR [rbp-0x4],0xff676980
   2916f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   29172:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   29175:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   29178:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2917b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2917e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   29181:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   29184:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   29187:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2918a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   2918d:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
   29194:	e9 86 02 00 00       	jmp    2941f <update_nst+0x752>
   29199:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2919c:	48 98                	cdqe   
   2919e:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   291a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   291a9:	4c 8d 04 02          	lea    r8,[rdx+rax*1]
   291ad:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   291b0:	48 63 c8             	movsxd rcx,eax
   291b3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   291b6:	48 63 d0             	movsxd rdx,eax
   291b9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   291bc:	48 63 f0             	movsxd rsi,eax
   291bf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   291c2:	48 63 f8             	movsxd rdi,eax
   291c5:	48 89 c8             	mov    rax,rcx
   291c8:	48 c1 e0 02          	shl    rax,0x2
   291cc:	48 01 c8             	add    rax,rcx
   291cf:	48 c1 e0 02          	shl    rax,0x2
   291d3:	48 69 cf f4 01 00 00 	imul   rcx,rdi,0x1f4
   291da:	48 01 c1             	add    rcx,rax
   291dd:	48 89 d0             	mov    rax,rdx
   291e0:	48 c1 e0 02          	shl    rax,0x2
   291e4:	48 01 d0             	add    rax,rdx
   291e7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   291ef:	48 01 d0             	add    rax,rdx
   291f2:	48 c1 e0 02          	shl    rax,0x2
   291f6:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   291fa:	48 69 c6 c4 09 00 00 	imul   rax,rsi,0x9c4
   29201:	48 01 d0             	add    rax,rdx
   29204:	4c 01 c0             	add    rax,r8
   29207:	8b 00                	mov    eax,DWORD PTR [rax]
   29209:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   2920c:	0f 4d 45 e8          	cmovge eax,DWORD PTR [rbp-0x18]
   29210:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   29213:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29216:	48 98                	cdqe   
   29218:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2921f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29223:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   29227:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2922a:	48 63 f8             	movsxd rdi,eax
   2922d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29230:	48 63 d0             	movsxd rdx,eax
   29233:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29236:	48 63 c8             	movsxd rcx,eax
   29239:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2923c:	4c 63 c0             	movsxd r8,eax
   2923f:	48 89 d0             	mov    rax,rdx
   29242:	48 c1 e0 05          	shl    rax,0x5
   29246:	48 29 d0             	sub    rax,rdx
   29249:	48 c1 e0 02          	shl    rax,0x2
   2924d:	48 01 d0             	add    rax,rdx
   29250:	49 69 d0 71 02 00 00 	imul   rdx,r8,0x271
   29257:	4c 8d 04 10          	lea    r8,[rax+rdx*1]
   2925b:	48 89 c8             	mov    rax,rcx
   2925e:	48 c1 e0 02          	shl    rax,0x2
   29262:	48 01 c8             	add    rax,rcx
   29265:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2926d:	48 01 d0             	add    rax,rdx
   29270:	4c 01 c0             	add    rax,r8
   29273:	48 01 f8             	add    rax,rdi
   29276:	8b 04 86             	mov    eax,DWORD PTR [rsi+rax*4]
   29279:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   2927c:	0f 4d 45 ec          	cmovge eax,DWORD PTR [rbp-0x14]
   29280:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   29283:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29286:	48 98                	cdqe   
   29288:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2928f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29293:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   29297:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2929a:	48 63 f8             	movsxd rdi,eax
   2929d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   292a0:	48 63 d0             	movsxd rdx,eax
   292a3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   292a6:	48 63 c8             	movsxd rcx,eax
   292a9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   292ac:	4c 63 c0             	movsxd r8,eax
   292af:	48 89 d0             	mov    rax,rdx
   292b2:	48 c1 e0 05          	shl    rax,0x5
   292b6:	48 29 d0             	sub    rax,rdx
   292b9:	48 c1 e0 02          	shl    rax,0x2
   292bd:	48 01 d0             	add    rax,rdx
   292c0:	49 69 d0 71 02 00 00 	imul   rdx,r8,0x271
   292c7:	48 01 c2             	add    rdx,rax
   292ca:	48 89 c8             	mov    rax,rcx
   292cd:	48 c1 e0 02          	shl    rax,0x2
   292d1:	48 01 c8             	add    rax,rcx
   292d4:	48 01 d0             	add    rax,rdx
   292d7:	48 01 f8             	add    rax,rdi
   292da:	8b 04 86             	mov    eax,DWORD PTR [rsi+rax*4]
   292dd:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   292e0:	0f 4d 45 f0          	cmovge eax,DWORD PTR [rbp-0x10]
   292e4:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   292e7:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   292ea:	48 98                	cdqe   
   292ec:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   292f3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   292f7:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   292fb:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   292fe:	48 63 f8             	movsxd rdi,eax
   29301:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29304:	48 63 c8             	movsxd rcx,eax
   29307:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2930a:	48 63 d0             	movsxd rdx,eax
   2930d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29310:	4c 63 c0             	movsxd r8,eax
   29313:	48 89 c8             	mov    rax,rcx
   29316:	48 c1 e0 02          	shl    rax,0x2
   2931a:	48 01 c8             	add    rax,rcx
   2931d:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   29325:	48 01 c8             	add    rax,rcx
   29328:	49 69 c8 71 02 00 00 	imul   rcx,r8,0x271
   2932f:	48 01 c1             	add    rcx,rax
   29332:	48 89 d0             	mov    rax,rdx
   29335:	48 c1 e0 02          	shl    rax,0x2
   29339:	48 01 d0             	add    rax,rdx
   2933c:	48 01 c8             	add    rax,rcx
   2933f:	48 01 f8             	add    rax,rdi
   29342:	8b 04 86             	mov    eax,DWORD PTR [rsi+rax*4]
   29345:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   29348:	0f 4d 45 f4          	cmovge eax,DWORD PTR [rbp-0xc]
   2934c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2934f:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29352:	48 98                	cdqe   
   29354:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2935b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2935f:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   29363:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29366:	48 63 f8             	movsxd rdi,eax
   29369:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   2936c:	48 63 c8             	movsxd rcx,eax
   2936f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29372:	48 63 d0             	movsxd rdx,eax
   29375:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29378:	4c 63 c0             	movsxd r8,eax
   2937b:	48 89 c8             	mov    rax,rcx
   2937e:	48 c1 e0 02          	shl    rax,0x2
   29382:	48 01 c8             	add    rax,rcx
   29385:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2938d:	48 01 c8             	add    rax,rcx
   29390:	49 69 c8 71 02 00 00 	imul   rcx,r8,0x271
   29397:	48 01 c1             	add    rcx,rax
   2939a:	48 89 d0             	mov    rax,rdx
   2939d:	48 c1 e0 02          	shl    rax,0x2
   293a1:	48 01 d0             	add    rax,rdx
   293a4:	48 01 c8             	add    rax,rcx
   293a7:	48 01 f8             	add    rax,rdi
   293aa:	8b 04 86             	mov    eax,DWORD PTR [rsi+rax*4]
   293ad:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   293b0:	0f 4d 45 f8          	cmovge eax,DWORD PTR [rbp-0x8]
   293b4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   293b7:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   293ba:	48 98                	cdqe   
   293bc:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   293c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   293c7:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   293cb:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   293ce:	48 63 f8             	movsxd rdi,eax
   293d1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   293d4:	48 63 d0             	movsxd rdx,eax
   293d7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   293da:	48 63 c8             	movsxd rcx,eax
   293dd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   293e0:	4c 63 c0             	movsxd r8,eax
   293e3:	48 89 d0             	mov    rax,rdx
   293e6:	48 c1 e0 05          	shl    rax,0x5
   293ea:	48 29 d0             	sub    rax,rdx
   293ed:	48 c1 e0 02          	shl    rax,0x2
   293f1:	48 01 d0             	add    rax,rdx
   293f4:	49 69 d0 71 02 00 00 	imul   rdx,r8,0x271
   293fb:	48 01 c2             	add    rdx,rax
   293fe:	48 89 c8             	mov    rax,rcx
   29401:	48 c1 e0 02          	shl    rax,0x2
   29405:	48 01 c8             	add    rax,rcx
   29408:	48 01 d0             	add    rax,rdx
   2940b:	48 01 f8             	add    rax,rdi
   2940e:	8b 04 86             	mov    eax,DWORD PTR [rsi+rax*4]
   29411:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
   29414:	0f 4d 45 fc          	cmovge eax,DWORD PTR [rbp-0x4]
   29418:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2941b:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   2941f:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
   29423:	0f 8e 70 fd ff ff    	jle    29199 <update_nst+0x4cc>
   29429:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2942c:	48 98                	cdqe   
   2942e:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29435:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29439:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2943d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29440:	48 63 d0             	movsxd rdx,eax
   29443:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29446:	48 63 f0             	movsxd rsi,eax
   29449:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2944c:	48 63 c8             	movsxd rcx,eax
   2944f:	48 89 d0             	mov    rax,rdx
   29452:	48 c1 e0 02          	shl    rax,0x2
   29456:	48 01 d0             	add    rax,rdx
   29459:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29461:	48 01 d0             	add    rax,rdx
   29464:	48 c1 e0 02          	shl    rax,0x2
   29468:	48 69 d6 f4 01 00 00 	imul   rdx,rsi,0x1f4
   2946f:	48 01 c2             	add    rdx,rax
   29472:	48 69 c1 c4 09 00 00 	imul   rax,rcx,0x9c4
   29479:	48 01 d0             	add    rax,rdx
   2947c:	48 8d 14 07          	lea    rdx,[rdi+rax*1]
   29480:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   29483:	89 02                	mov    DWORD PTR [rdx],eax
   29485:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29488:	48 98                	cdqe   
   2948a:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29491:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29495:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   29499:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2949c:	48 63 f0             	movsxd rsi,eax
   2949f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   294a2:	48 98                	cdqe   
   294a4:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   294a7:	48 63 d2             	movsxd rdx,edx
   294aa:	48 69 f8 71 02 00 00 	imul   rdi,rax,0x271
   294b1:	48 89 d0             	mov    rax,rdx
   294b4:	48 c1 e0 05          	shl    rax,0x5
   294b8:	48 29 d0             	sub    rax,rdx
   294bb:	48 c1 e0 02          	shl    rax,0x2
   294bf:	48 01 d0             	add    rax,rdx
   294c2:	48 01 f8             	add    rax,rdi
   294c5:	48 8d 14 30          	lea    rdx,[rax+rsi*1]
   294c9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   294cc:	89 04 91             	mov    DWORD PTR [rcx+rdx*4],eax
   294cf:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   294d2:	48 98                	cdqe   
   294d4:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   294db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   294df:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   294e3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   294e6:	48 63 f0             	movsxd rsi,eax
   294e9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   294ec:	48 98                	cdqe   
   294ee:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   294f1:	48 63 d2             	movsxd rdx,edx
   294f4:	48 69 f8 71 02 00 00 	imul   rdi,rax,0x271
   294fb:	48 89 d0             	mov    rax,rdx
   294fe:	48 c1 e0 02          	shl    rax,0x2
   29502:	48 01 d0             	add    rax,rdx
   29505:	48 01 f8             	add    rax,rdi
   29508:	48 8d 14 30          	lea    rdx,[rax+rsi*1]
   2950c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2950f:	89 04 91             	mov    DWORD PTR [rcx+rdx*4],eax
   29512:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29515:	48 98                	cdqe   
   29517:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2951e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29522:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   29526:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29529:	48 63 d0             	movsxd rdx,eax
   2952c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   2952f:	48 63 f0             	movsxd rsi,eax
   29532:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29535:	48 63 c8             	movsxd rcx,eax
   29538:	48 89 d0             	mov    rax,rdx
   2953b:	48 c1 e0 02          	shl    rax,0x2
   2953f:	48 01 d0             	add    rax,rdx
   29542:	48 c1 e0 02          	shl    rax,0x2
   29546:	48 69 d6 f4 01 00 00 	imul   rdx,rsi,0x1f4
   2954d:	48 01 c2             	add    rdx,rax
   29550:	48 69 c1 c4 09 00 00 	imul   rax,rcx,0x9c4
   29557:	48 01 d0             	add    rax,rdx
   2955a:	48 8d 14 07          	lea    rdx,[rdi+rax*1]
   2955e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   29561:	89 02                	mov    DWORD PTR [rdx],eax
   29563:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29566:	48 98                	cdqe   
   29568:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2956f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29573:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   29577:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2957a:	48 63 f0             	movsxd rsi,eax
   2957d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29580:	48 98                	cdqe   
   29582:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   29585:	48 63 d2             	movsxd rdx,edx
   29588:	48 69 f8 71 02 00 00 	imul   rdi,rax,0x271
   2958f:	48 89 d0             	mov    rax,rdx
   29592:	48 c1 e0 02          	shl    rax,0x2
   29596:	48 01 d0             	add    rax,rdx
   29599:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   295a1:	48 01 d0             	add    rax,rdx
   295a4:	48 01 f8             	add    rax,rdi
   295a7:	48 8d 14 30          	lea    rdx,[rax+rsi*1]
   295ab:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   295ae:	89 04 91             	mov    DWORD PTR [rcx+rdx*4],eax
   295b1:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   295b4:	48 98                	cdqe   
   295b6:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   295bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   295c1:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   295c5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   295c8:	48 98                	cdqe   
   295ca:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   295cd:	48 63 ca             	movsxd rcx,edx
   295d0:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   295d3:	48 63 f2             	movsxd rsi,edx
   295d6:	48 89 c2             	mov    rdx,rax
   295d9:	48 c1 e2 02          	shl    rdx,0x2
   295dd:	48 01 c2             	add    rdx,rax
   295e0:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   295e8:	48 89 c2             	mov    rdx,rax
   295eb:	48 89 c8             	mov    rax,rcx
   295ee:	48 c1 e0 02          	shl    rax,0x2
   295f2:	48 01 c8             	add    rax,rcx
   295f5:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   295fd:	48 01 c8             	add    rax,rcx
   29600:	48 c1 e0 02          	shl    rax,0x2
   29604:	48 01 c2             	add    rdx,rax
   29607:	48 69 c6 c4 09 00 00 	imul   rax,rsi,0x9c4
   2960e:	48 01 d0             	add    rax,rdx
   29611:	48 8d 14 07          	lea    rdx,[rdi+rax*1]
   29615:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   29618:	89 02                	mov    DWORD PTR [rdx],eax
   2961a:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
   2961e:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   29622:	0f 8e 40 fb ff ff    	jle    29168 <update_nst+0x49b>
   29628:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   2962c:	83 7d d8 04          	cmp    DWORD PTR [rbp-0x28],0x4
   29630:	0f 8e 26 fb ff ff    	jle    2915c <update_nst+0x48f>
   29636:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   2963a:	83 7d d4 06          	cmp    DWORD PTR [rbp-0x2c],0x6
   2963e:	0f 8e 0c fb ff ff    	jle    29150 <update_nst+0x483>
   29644:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   29648:	83 7d d0 06          	cmp    DWORD PTR [rbp-0x30],0x6
   2964c:	0f 8e f2 fa ff ff    	jle    29144 <update_nst+0x477>
   29652:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   29659:	e9 c2 02 00 00       	jmp    29920 <update_nst+0xc53>
   2965e:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   29665:	e9 a8 02 00 00       	jmp    29912 <update_nst+0xc45>
   2966a:	c7 45 d8 01 00 00 00 	mov    DWORD PTR [rbp-0x28],0x1
   29671:	e9 8e 02 00 00       	jmp    29904 <update_nst+0xc37>
   29676:	c7 45 f4 80 69 67 ff 	mov    DWORD PTR [rbp-0xc],0xff676980
   2967d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   29680:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   29683:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   29686:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   29689:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2968c:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   2968f:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
   29696:	e9 67 01 00 00       	jmp    29802 <update_nst+0xb35>
   2969b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2969e:	48 98                	cdqe   
   296a0:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   296a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   296ab:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   296af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   296b2:	48 63 d0             	movsxd rdx,eax
   296b5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   296b8:	48 63 f0             	movsxd rsi,eax
   296bb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   296be:	48 63 c8             	movsxd rcx,eax
   296c1:	48 89 d0             	mov    rax,rdx
   296c4:	48 c1 e0 02          	shl    rax,0x2
   296c8:	48 01 d0             	add    rax,rdx
   296cb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   296d3:	48 01 d0             	add    rax,rdx
   296d6:	48 c1 e0 02          	shl    rax,0x2
   296da:	48 69 d6 f4 01 00 00 	imul   rdx,rsi,0x1f4
   296e1:	48 01 c2             	add    rdx,rax
   296e4:	48 69 c1 c4 09 00 00 	imul   rax,rcx,0x9c4
   296eb:	48 01 d0             	add    rax,rdx
   296ee:	48 01 f8             	add    rax,rdi
   296f1:	8b 00                	mov    eax,DWORD PTR [rax]
   296f3:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   296f6:	0f 4d 45 e8          	cmovge eax,DWORD PTR [rbp-0x18]
   296fa:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   296fd:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29700:	48 98                	cdqe   
   29702:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29709:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2970d:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   29711:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29714:	48 98                	cdqe   
   29716:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   29719:	48 63 ca             	movsxd rcx,edx
   2971c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   2971f:	48 63 f2             	movsxd rsi,edx
   29722:	48 89 c2             	mov    rdx,rax
   29725:	48 c1 e2 02          	shl    rdx,0x2
   29729:	48 01 c2             	add    rdx,rax
   2972c:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   29734:	48 89 c2             	mov    rdx,rax
   29737:	48 89 c8             	mov    rax,rcx
   2973a:	48 c1 e0 02          	shl    rax,0x2
   2973e:	48 01 c8             	add    rax,rcx
   29741:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   29749:	48 01 c8             	add    rax,rcx
   2974c:	48 c1 e0 02          	shl    rax,0x2
   29750:	48 01 c2             	add    rdx,rax
   29753:	48 69 c6 c4 09 00 00 	imul   rax,rsi,0x9c4
   2975a:	48 01 d0             	add    rax,rdx
   2975d:	48 01 f8             	add    rax,rdi
   29760:	8b 00                	mov    eax,DWORD PTR [rax]
   29762:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   29765:	0f 4d 45 ec          	cmovge eax,DWORD PTR [rbp-0x14]
   29769:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2976c:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2976f:	48 98                	cdqe   
   29771:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29778:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2977c:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   29780:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29783:	48 63 f0             	movsxd rsi,eax
   29786:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29789:	48 98                	cdqe   
   2978b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   2978e:	48 63 d2             	movsxd rdx,edx
   29791:	48 69 f8 71 02 00 00 	imul   rdi,rax,0x271
   29798:	48 89 d0             	mov    rax,rdx
   2979b:	48 c1 e0 02          	shl    rax,0x2
   2979f:	48 01 d0             	add    rax,rdx
   297a2:	48 01 f8             	add    rax,rdi
   297a5:	48 01 f0             	add    rax,rsi
   297a8:	8b 04 81             	mov    eax,DWORD PTR [rcx+rax*4]
   297ab:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   297ae:	0f 4d 45 f0          	cmovge eax,DWORD PTR [rbp-0x10]
   297b2:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   297b5:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   297b8:	48 98                	cdqe   
   297ba:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   297c1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   297c5:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   297c9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   297cc:	48 63 f0             	movsxd rsi,eax
   297cf:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   297d2:	48 98                	cdqe   
   297d4:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
   297d7:	48 63 d2             	movsxd rdx,edx
   297da:	48 69 f8 71 02 00 00 	imul   rdi,rax,0x271
   297e1:	48 89 d0             	mov    rax,rdx
   297e4:	48 c1 e0 02          	shl    rax,0x2
   297e8:	48 01 d0             	add    rax,rdx
   297eb:	48 01 f8             	add    rax,rdi
   297ee:	48 01 f0             	add    rax,rsi
   297f1:	8b 04 81             	mov    eax,DWORD PTR [rcx+rax*4]
   297f4:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   297f7:	0f 4d 45 f4          	cmovge eax,DWORD PTR [rbp-0xc]
   297fb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   297fe:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
   29802:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   29806:	0f 8e 8f fe ff ff    	jle    2969b <update_nst+0x9ce>
   2980c:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2980f:	48 98                	cdqe   
   29811:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29818:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2981c:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   29820:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29823:	48 63 d0             	movsxd rdx,eax
   29826:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29829:	48 98                	cdqe   
   2982b:	48 69 d2 f4 01 00 00 	imul   rdx,rdx,0x1f4
   29832:	48 69 c0 c4 09 00 00 	imul   rax,rax,0x9c4
   29839:	48 01 d0             	add    rax,rdx
   2983c:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   29840:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   29843:	89 02                	mov    DWORD PTR [rdx],eax
   29845:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29848:	48 98                	cdqe   
   2984a:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29851:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29855:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   29859:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   2985c:	48 63 d0             	movsxd rdx,eax
   2985f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29862:	48 63 c8             	movsxd rcx,eax
   29865:	48 89 d0             	mov    rax,rdx
   29868:	48 c1 e0 02          	shl    rax,0x2
   2986c:	48 01 d0             	add    rax,rdx
   2986f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29877:	48 01 d0             	add    rax,rdx
   2987a:	48 c1 e0 02          	shl    rax,0x2
   2987e:	48 69 d1 c4 09 00 00 	imul   rdx,rcx,0x9c4
   29885:	48 01 d0             	add    rax,rdx
   29888:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   2988c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2988f:	89 02                	mov    DWORD PTR [rdx],eax
   29891:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29894:	48 98                	cdqe   
   29896:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2989d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   298a1:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   298a5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   298a8:	48 63 d0             	movsxd rdx,eax
   298ab:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   298ae:	48 63 c8             	movsxd rcx,eax
   298b1:	48 89 d0             	mov    rax,rdx
   298b4:	48 c1 e0 02          	shl    rax,0x2
   298b8:	48 01 d0             	add    rax,rdx
   298bb:	48 c1 e0 02          	shl    rax,0x2
   298bf:	48 69 d1 c4 09 00 00 	imul   rdx,rcx,0x9c4
   298c6:	48 01 d0             	add    rax,rdx
   298c9:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   298cd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   298d0:	89 02                	mov    DWORD PTR [rdx],eax
   298d2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   298d5:	48 98                	cdqe   
   298d7:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   298de:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   298e2:	48 01 c2             	add    rdx,rax
   298e5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   298e8:	48 98                	cdqe   
   298ea:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   298ed:	48 63 c9             	movsxd rcx,ecx
   298f0:	48 69 c9 71 02 00 00 	imul   rcx,rcx,0x271
   298f7:	48 01 c1             	add    rcx,rax
   298fa:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   298fd:	89 04 8a             	mov    DWORD PTR [rdx+rcx*4],eax
   29900:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   29904:	83 7d d8 04          	cmp    DWORD PTR [rbp-0x28],0x4
   29908:	0f 8e 68 fd ff ff    	jle    29676 <update_nst+0x9a9>
   2990e:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   29912:	83 7d d4 06          	cmp    DWORD PTR [rbp-0x2c],0x6
   29916:	0f 8e 4e fd ff ff    	jle    2966a <update_nst+0x99d>
   2991c:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   29920:	83 7d d0 06          	cmp    DWORD PTR [rbp-0x30],0x6
   29924:	0f 8e 34 fd ff ff    	jle    2965e <update_nst+0x991>
   2992a:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   29931:	e9 9e 00 00 00       	jmp    299d4 <update_nst+0xd07>
   29936:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   2993d:	e9 84 00 00 00       	jmp    299c6 <update_nst+0xcf9>
   29942:	c7 45 e8 80 69 67 ff 	mov    DWORD PTR [rbp-0x18],0xff676980
   29949:	c7 45 d8 01 00 00 00 	mov    DWORD PTR [rbp-0x28],0x1
   29950:	eb 43                	jmp    29995 <update_nst+0xcc8>
   29952:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29955:	48 98                	cdqe   
   29957:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   2995e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29962:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   29966:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29969:	48 63 d0             	movsxd rdx,eax
   2996c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2996f:	48 98                	cdqe   
   29971:	48 69 d2 f4 01 00 00 	imul   rdx,rdx,0x1f4
   29978:	48 69 c0 c4 09 00 00 	imul   rax,rax,0x9c4
   2997f:	48 01 d0             	add    rax,rdx
   29982:	48 01 c8             	add    rax,rcx
   29985:	8b 00                	mov    eax,DWORD PTR [rax]
   29987:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   2998a:	0f 4d 45 e8          	cmovge eax,DWORD PTR [rbp-0x18]
   2998e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   29991:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   29995:	83 7d d8 04          	cmp    DWORD PTR [rbp-0x28],0x4
   29999:	7e b7                	jle    29952 <update_nst+0xc85>
   2999b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2999e:	48 98                	cdqe   
   299a0:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   299a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   299ab:	48 01 c2             	add    rdx,rax
   299ae:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   299b1:	48 98                	cdqe   
   299b3:	48 69 c0 c4 09 00 00 	imul   rax,rax,0x9c4
   299ba:	48 01 c2             	add    rdx,rax
   299bd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   299c0:	89 02                	mov    DWORD PTR [rdx],eax
   299c2:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   299c6:	83 7d d4 06          	cmp    DWORD PTR [rbp-0x2c],0x6
   299ca:	0f 8e 72 ff ff ff    	jle    29942 <update_nst+0xc75>
   299d0:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   299d4:	83 7d d0 06          	cmp    DWORD PTR [rbp-0x30],0x6
   299d8:	0f 8e 58 ff ff ff    	jle    29936 <update_nst+0xc69>
   299de:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   299e5:	e9 7f 02 00 00       	jmp    29c69 <update_nst+0xf9c>
   299ea:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   299f1:	e9 65 02 00 00       	jmp    29c5b <update_nst+0xf8e>
   299f6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   299fd:	e9 4b 02 00 00       	jmp    29c4d <update_nst+0xf80>
   29a02:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   29a09:	e9 31 02 00 00       	jmp    29c3f <update_nst+0xf72>
   29a0e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   29a15:	e9 17 02 00 00       	jmp    29c31 <update_nst+0xf64>
   29a1a:	c7 45 ec 80 69 67 ff 	mov    DWORD PTR [rbp-0x14],0xff676980
   29a21:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   29a24:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   29a27:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   29a2e:	e9 0a 01 00 00       	jmp    29b3d <update_nst+0xe70>
   29a33:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29a36:	48 98                	cdqe   
   29a38:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29a3f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29a43:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   29a47:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   29a4a:	4c 63 c0             	movsxd r8,eax
   29a4d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29a50:	48 63 f0             	movsxd rsi,eax
   29a53:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29a56:	48 63 c8             	movsxd rcx,eax
   29a59:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29a5c:	4c 63 c8             	movsxd r9,eax
   29a5f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29a62:	48 63 d0             	movsxd rdx,eax
   29a65:	48 89 f0             	mov    rax,rsi
   29a68:	48 c1 e0 02          	shl    rax,0x2
   29a6c:	48 01 f0             	add    rax,rsi
   29a6f:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   29a77:	48 01 f0             	add    rax,rsi
   29a7a:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   29a81:	48 01 c6             	add    rsi,rax
   29a84:	48 89 d0             	mov    rax,rdx
   29a87:	48 c1 e0 05          	shl    rax,0x5
   29a8b:	48 29 d0             	sub    rax,rdx
   29a8e:	48 c1 e0 02          	shl    rax,0x2
   29a92:	48 01 d0             	add    rax,rdx
   29a95:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   29a99:	48 89 c8             	mov    rax,rcx
   29a9c:	48 c1 e0 02          	shl    rax,0x2
   29aa0:	48 01 c8             	add    rax,rcx
   29aa3:	48 01 d0             	add    rax,rdx
   29aa6:	4c 01 c0             	add    rax,r8
   29aa9:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   29aac:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   29aaf:	0f 4d 45 e8          	cmovge eax,DWORD PTR [rbp-0x18]
   29ab3:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   29ab6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29ab9:	48 98                	cdqe   
   29abb:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29ac2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29ac6:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   29aca:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   29acd:	4c 63 c0             	movsxd r8,eax
   29ad0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29ad3:	48 63 f0             	movsxd rsi,eax
   29ad6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29ad9:	48 63 c8             	movsxd rcx,eax
   29adc:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29adf:	4c 63 c8             	movsxd r9,eax
   29ae2:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29ae5:	48 63 d0             	movsxd rdx,eax
   29ae8:	48 89 f0             	mov    rax,rsi
   29aeb:	48 c1 e0 02          	shl    rax,0x2
   29aef:	48 01 f0             	add    rax,rsi
   29af2:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   29afa:	48 01 f0             	add    rax,rsi
   29afd:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   29b04:	48 01 c6             	add    rsi,rax
   29b07:	48 89 d0             	mov    rax,rdx
   29b0a:	48 c1 e0 05          	shl    rax,0x5
   29b0e:	48 29 d0             	sub    rax,rdx
   29b11:	48 c1 e0 02          	shl    rax,0x2
   29b15:	48 01 d0             	add    rax,rdx
   29b18:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   29b1c:	48 89 c8             	mov    rax,rcx
   29b1f:	48 c1 e0 02          	shl    rax,0x2
   29b23:	48 01 c8             	add    rax,rcx
   29b26:	48 01 d0             	add    rax,rdx
   29b29:	4c 01 c0             	add    rax,r8
   29b2c:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   29b2f:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   29b32:	0f 4d 45 ec          	cmovge eax,DWORD PTR [rbp-0x14]
   29b36:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   29b39:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   29b3d:	83 7d d4 06          	cmp    DWORD PTR [rbp-0x2c],0x6
   29b41:	0f 8e ec fe ff ff    	jle    29a33 <update_nst+0xd66>
   29b47:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29b4a:	48 98                	cdqe   
   29b4c:	48 69 d0 20 4e 00 00 	imul   rdx,rax,0x4e20
   29b53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b57:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   29b5b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   29b5e:	4c 63 c0             	movsxd r8,eax
   29b61:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29b64:	48 63 d0             	movsxd rdx,eax
   29b67:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29b6a:	48 63 f0             	movsxd rsi,eax
   29b6d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29b70:	48 63 c8             	movsxd rcx,eax
   29b73:	48 89 d0             	mov    rax,rdx
   29b76:	48 c1 e0 02          	shl    rax,0x2
   29b7a:	48 01 d0             	add    rax,rdx
   29b7d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29b85:	48 01 d0             	add    rax,rdx
   29b88:	48 89 f2             	mov    rdx,rsi
   29b8b:	48 c1 e2 02          	shl    rdx,0x2
   29b8f:	48 01 f2             	add    rdx,rsi
   29b92:	48 01 c2             	add    rdx,rax
   29b95:	48 89 c8             	mov    rax,rcx
   29b98:	48 c1 e0 05          	shl    rax,0x5
   29b9c:	48 29 c8             	sub    rax,rcx
   29b9f:	48 c1 e0 02          	shl    rax,0x2
   29ba3:	48 01 c8             	add    rax,rcx
   29ba6:	48 01 d0             	add    rax,rdx
   29ba9:	4c 01 c0             	add    rax,r8
   29bac:	48 8d 90 17 11 00 00 	lea    rdx,[rax+0x1117]
   29bb3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   29bb6:	89 04 97             	mov    DWORD PTR [rdi+rdx*4],eax
   29bb9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29bbd:	48 8d b8 e0 22 02 00 	lea    rdi,[rax+0x222e0]
   29bc4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   29bc7:	4c 63 c0             	movsxd r8,eax
   29bca:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29bcd:	48 63 f0             	movsxd rsi,eax
   29bd0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29bd3:	48 63 c8             	movsxd rcx,eax
   29bd6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   29bd9:	4c 63 c8             	movsxd r9,eax
   29bdc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29bdf:	48 63 d0             	movsxd rdx,eax
   29be2:	48 89 f0             	mov    rax,rsi
   29be5:	48 c1 e0 02          	shl    rax,0x2
   29be9:	48 01 f0             	add    rax,rsi
   29bec:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   29bf4:	48 01 f0             	add    rax,rsi
   29bf7:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   29bfe:	48 01 c6             	add    rsi,rax
   29c01:	48 89 d0             	mov    rax,rdx
   29c04:	48 c1 e0 05          	shl    rax,0x5
   29c08:	48 29 d0             	sub    rax,rdx
   29c0b:	48 c1 e0 02          	shl    rax,0x2
   29c0f:	48 01 d0             	add    rax,rdx
   29c12:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   29c16:	48 89 c8             	mov    rax,rcx
   29c19:	48 c1 e0 02          	shl    rax,0x2
   29c1d:	48 01 c8             	add    rax,rcx
   29c20:	48 01 d0             	add    rax,rdx
   29c23:	4a 8d 14 00          	lea    rdx,[rax+r8*1]
   29c27:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   29c2a:	89 04 97             	mov    DWORD PTR [rdi+rdx*4],eax
   29c2d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   29c31:	83 7d e4 04          	cmp    DWORD PTR [rbp-0x1c],0x4
   29c35:	0f 8e df fd ff ff    	jle    29a1a <update_nst+0xd4d>
   29c3b:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   29c3f:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
   29c43:	0f 8e c5 fd ff ff    	jle    29a0e <update_nst+0xd41>
   29c49:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
   29c4d:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   29c51:	0f 8e ab fd ff ff    	jle    29a02 <update_nst+0xd35>
   29c57:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   29c5b:	83 7d d8 04          	cmp    DWORD PTR [rbp-0x28],0x4
   29c5f:	0f 8e 91 fd ff ff    	jle    299f6 <update_nst+0xd29>
   29c65:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   29c69:	83 7d d0 06          	cmp    DWORD PTR [rbp-0x30],0x6
   29c6d:	0f 8e 77 fd ff ff    	jle    299ea <update_nst+0xd1d>
   29c73:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   29c7a:	e9 53 01 00 00       	jmp    29dd2 <update_nst+0x1105>
   29c7f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   29c86:	e9 39 01 00 00       	jmp    29dc4 <update_nst+0x10f7>
   29c8b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   29c92:	e9 1f 01 00 00       	jmp    29db6 <update_nst+0x10e9>
   29c97:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   29c9e:	e9 05 01 00 00       	jmp    29da8 <update_nst+0x10db>
   29ca3:	c7 45 e8 80 69 67 ff 	mov    DWORD PTR [rbp-0x18],0xff676980
   29caa:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   29cb1:	eb 7e                	jmp    29d31 <update_nst+0x1064>
   29cb3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29cb7:	48 8d b8 e0 22 02 00 	lea    rdi,[rax+0x222e0]
   29cbe:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   29cc1:	4c 63 c0             	movsxd r8,eax
   29cc4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29cc7:	48 63 f0             	movsxd rsi,eax
   29cca:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29ccd:	48 63 c8             	movsxd rcx,eax
   29cd0:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   29cd3:	4c 63 c8             	movsxd r9,eax
   29cd6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29cd9:	48 63 d0             	movsxd rdx,eax
   29cdc:	48 89 f0             	mov    rax,rsi
   29cdf:	48 c1 e0 02          	shl    rax,0x2
   29ce3:	48 01 f0             	add    rax,rsi
   29ce6:	48 8d 34 85 00 00 00 00 	lea    rsi,[rax*4+0x0]
   29cee:	48 01 f0             	add    rax,rsi
   29cf1:	49 69 f1 71 02 00 00 	imul   rsi,r9,0x271
   29cf8:	48 01 c6             	add    rsi,rax
   29cfb:	48 89 d0             	mov    rax,rdx
   29cfe:	48 c1 e0 05          	shl    rax,0x5
   29d02:	48 29 d0             	sub    rax,rdx
   29d05:	48 c1 e0 02          	shl    rax,0x2
   29d09:	48 01 d0             	add    rax,rdx
   29d0c:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   29d10:	48 89 c8             	mov    rax,rcx
   29d13:	48 c1 e0 02          	shl    rax,0x2
   29d17:	48 01 c8             	add    rax,rcx
   29d1a:	48 01 d0             	add    rax,rdx
   29d1d:	4c 01 c0             	add    rax,r8
   29d20:	8b 04 87             	mov    eax,DWORD PTR [rdi+rax*4]
   29d23:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
   29d26:	0f 4d 45 e8          	cmovge eax,DWORD PTR [rbp-0x18]
   29d2a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   29d2d:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   29d31:	83 7d d4 06          	cmp    DWORD PTR [rbp-0x2c],0x6
   29d35:	0f 8e 78 ff ff ff    	jle    29cb3 <update_nst+0xfe6>
   29d3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29d3f:	48 8d b8 e0 22 02 00 	lea    rdi,[rax+0x222e0]
   29d46:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   29d49:	4c 63 c0             	movsxd r8,eax
   29d4c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   29d4f:	48 63 d0             	movsxd rdx,eax
   29d52:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   29d55:	48 63 f0             	movsxd rsi,eax
   29d58:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   29d5b:	48 63 c8             	movsxd rcx,eax
   29d5e:	48 89 d0             	mov    rax,rdx
   29d61:	48 c1 e0 02          	shl    rax,0x2
   29d65:	48 01 d0             	add    rax,rdx
   29d68:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29d70:	48 01 d0             	add    rax,rdx
   29d73:	48 89 f2             	mov    rdx,rsi
   29d76:	48 c1 e2 02          	shl    rdx,0x2
   29d7a:	48 01 f2             	add    rdx,rsi
   29d7d:	48 01 c2             	add    rdx,rax
   29d80:	48 89 c8             	mov    rax,rcx
   29d83:	48 c1 e0 05          	shl    rax,0x5
   29d87:	48 29 c8             	sub    rax,rcx
   29d8a:	48 c1 e0 02          	shl    rax,0x2
   29d8e:	48 01 c8             	add    rax,rcx
   29d91:	48 01 d0             	add    rax,rdx
   29d94:	4c 01 c0             	add    rax,r8
   29d97:	48 8d 90 17 11 00 00 	lea    rdx,[rax+0x1117]
   29d9e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   29da1:	89 04 97             	mov    DWORD PTR [rdi+rdx*4],eax
   29da4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   29da8:	83 7d e4 04          	cmp    DWORD PTR [rbp-0x1c],0x4
   29dac:	0f 8e f1 fe ff ff    	jle    29ca3 <update_nst+0xfd6>
   29db2:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
   29db6:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
   29dba:	0f 8e d7 fe ff ff    	jle    29c97 <update_nst+0xfca>
   29dc0:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
   29dc4:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   29dc8:	0f 8e bd fe ff ff    	jle    29c8b <update_nst+0xfbe>
   29dce:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   29dd2:	83 7d d8 04          	cmp    DWORD PTR [rbp-0x28],0x4
   29dd6:	0f 8e a3 fe ff ff    	jle    29c7f <update_nst+0xfb2>
   29ddc:	90                   	nop
   29ddd:	90                   	nop
   29dde:	5d                   	pop    rbp
   29ddf:	c3                   	ret    

0000000000029de0 <save_parameter_file>:
   29de0:	f3 0f 1e fa          	endbr64 
   29de4:	55                   	push   rbp
   29de5:	48 89 e5             	mov    rbp,rsp
   29de8:	53                   	push   rbx
   29de9:	48 81 ec 38 01 00 00 	sub    rsp,0x138
   29df0:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
   29df7:	89 b5 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],esi
   29dfd:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29e06:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29e0a:	31 c0                	xor    eax,eax
   29e0c:	48 8d 05 0f c2 1b 00 	lea    rax,[rip+0x1bc20f]        # 1e6022 <parameter_set_rna_turner2004+0x5d682>
   29e13:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   29e17:	48 8d 05 07 c2 1b 00 	lea    rax,[rip+0x1bc207]        # 1e6025 <parameter_set_rna_turner2004+0x5d685>
   29e1e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   29e22:	48 8d 05 ff c1 1b 00 	lea    rax,[rip+0x1bc1ff]        # 1e6028 <parameter_set_rna_turner2004+0x5d688>
   29e29:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   29e2d:	48 8d 05 f7 c1 1b 00 	lea    rax,[rip+0x1bc1f7]        # 1e602b <parameter_set_rna_turner2004+0x5d68b>
   29e34:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   29e38:	48 8d 05 ef c1 1b 00 	lea    rax,[rip+0x1bc1ef]        # 1e602e <parameter_set_rna_turner2004+0x5d68e>
   29e3f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   29e43:	48 8d 05 e7 c1 1b 00 	lea    rax,[rip+0x1bc1e7]        # 1e6031 <parameter_set_rna_turner2004+0x5d691>
   29e4a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   29e4e:	48 8d 05 df c1 1b 00 	lea    rax,[rip+0x1bc1df]        # 1e6034 <parameter_set_rna_turner2004+0x5d694>
   29e55:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   29e59:	48 8d 05 d7 c1 1b 00 	lea    rax,[rip+0x1bc1d7]        # 1e6037 <parameter_set_rna_turner2004+0x5d697>
   29e60:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29e64:	c7 45 e2 40 41 43 47 	mov    DWORD PTR [rbp-0x1e],0x47434140
   29e6b:	66 c7 45 e6 55 00    	mov    WORD PTR [rbp-0x1a],0x55
   29e71:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
   29e78:	48 8d 35 bb c1 1b 00 	lea    rsi,[rip+0x1bc1bb]        # 1e603a <parameter_set_rna_turner2004+0x5d69a>
   29e7f:	48 89 c7             	mov    rdi,rax
   29e82:	e8 a9 9a fd ff       	call   3930 <fopen@plt>
   29e87:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   29e8b:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   29e90:	75 25                	jne    29eb7 <save_parameter_file+0xd7>
   29e92:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
   29e99:	48 89 c6             	mov    rsi,rax
   29e9c:	48 8d 3d 99 c1 1b 00 	lea    rdi,[rip+0x1bc199]        # 1e603c <parameter_set_rna_turner2004+0x5d69c>
   29ea3:	b8 00 00 00 00       	mov    eax,0x0
   29ea8:	e8 3e 51 00 00       	call   2efeb <vrna_message_warning>
   29ead:	b8 00 00 00 00       	mov    eax,0x0
   29eb2:	e9 a6 1b 00 00       	jmp    2ba5d <save_parameter_file+0x1c7d>
   29eb7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29ebb:	48 89 c1             	mov    rcx,rax
   29ebe:	ba 1f 00 00 00       	mov    edx,0x1f
   29ec3:	be 01 00 00 00       	mov    esi,0x1
   29ec8:	48 8d 3d 81 c1 1b 00 	lea    rdi,[rip+0x1bc181]        # 1e6050 <parameter_set_rna_turner2004+0x5d6b0>
   29ecf:	e8 bc 9c fd ff       	call   3b90 <fwrite@plt>
   29ed4:	bf 01 00 00 00       	mov    edi,0x1
   29ed9:	e8 ce 1b 00 00       	call   2baac <settype>
   29ede:	48 89 c2             	mov    rdx,rax
   29ee1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29ee5:	48 8d 35 84 c1 1b 00 	lea    rsi,[rip+0x1bc184]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   29eec:	48 89 c7             	mov    rdi,rax
   29eef:	b8 00 00 00 00       	mov    eax,0x0
   29ef4:	e8 e7 9a fd ff       	call   39e0 <fprintf@plt>
   29ef9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29efd:	48 89 c1             	mov    rcx,rax
   29f00:	ba 2e 00 00 00       	mov    edx,0x2e
   29f05:	be 01 00 00 00       	mov    esi,0x1
   29f0a:	48 8d 3d 67 c1 1b 00 	lea    rdi,[rip+0x1bc167]        # 1e6078 <parameter_set_rna_turner2004+0x5d6d8>
   29f11:	e8 7a 9c fd ff       	call   3b90 <fwrite@plt>
   29f16:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   29f20:	eb 3a                	jmp    29f5c <save_parameter_file+0x17c>
   29f22:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   29f28:	48 98                	cdqe   
   29f2a:	48 c1 e0 05          	shl    rax,0x5
   29f2e:	48 89 c2             	mov    rdx,rax
   29f31:	48 8d 05 48 33 1c 00 	lea    rax,[rip+0x1c3348]        # 1ed280 <stack37>
   29f38:	48 01 d0             	add    rax,rdx
   29f3b:	48 8d 78 04          	lea    rdi,[rax+0x4]
   29f3f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29f43:	48 89 c1             	mov    rcx,rax
   29f46:	ba 07 00 00 00       	mov    edx,0x7
   29f4b:	be 07 00 00 00       	mov    esi,0x7
   29f50:	e8 eb d2 ff ff       	call   27240 <display_array>
   29f55:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   29f5c:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   29f63:	7e bd                	jle    29f22 <save_parameter_file+0x142>
   29f65:	bf 02 00 00 00       	mov    edi,0x2
   29f6a:	e8 3d 1b 00 00       	call   2baac <settype>
   29f6f:	48 89 c2             	mov    rdx,rax
   29f72:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29f76:	48 8d 35 f3 c0 1b 00 	lea    rsi,[rip+0x1bc0f3]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   29f7d:	48 89 c7             	mov    rdi,rax
   29f80:	b8 00 00 00 00       	mov    eax,0x0
   29f85:	e8 56 9a fd ff       	call   39e0 <fprintf@plt>
   29f8a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29f8e:	48 89 c1             	mov    rcx,rax
   29f91:	ba 2e 00 00 00       	mov    edx,0x2e
   29f96:	be 01 00 00 00       	mov    esi,0x1
   29f9b:	48 8d 3d d6 c0 1b 00 	lea    rdi,[rip+0x1bc0d6]        # 1e6078 <parameter_set_rna_turner2004+0x5d6d8>
   29fa2:	e8 e9 9b fd ff       	call   3b90 <fwrite@plt>
   29fa7:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   29fb1:	eb 3a                	jmp    29fed <save_parameter_file+0x20d>
   29fb3:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   29fb9:	48 98                	cdqe   
   29fbb:	48 c1 e0 05          	shl    rax,0x5
   29fbf:	48 89 c2             	mov    rdx,rax
   29fc2:	48 8d 05 b7 33 1c 00 	lea    rax,[rip+0x1c33b7]        # 1ed380 <stackdH>
   29fc9:	48 01 d0             	add    rax,rdx
   29fcc:	48 8d 78 04          	lea    rdi,[rax+0x4]
   29fd0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29fd4:	48 89 c1             	mov    rcx,rax
   29fd7:	ba 07 00 00 00       	mov    edx,0x7
   29fdc:	be 07 00 00 00       	mov    esi,0x7
   29fe1:	e8 5a d2 ff ff       	call   27240 <display_array>
   29fe6:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   29fed:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   29ff4:	7e bd                	jle    29fb3 <save_parameter_file+0x1d3>
   29ff6:	bf 09 00 00 00       	mov    edi,0x9
   29ffb:	e8 ac 1a 00 00       	call   2baac <settype>
   2a000:	48 89 c2             	mov    rdx,rax
   2a003:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a007:	48 8d 35 62 c0 1b 00 	lea    rsi,[rip+0x1bc062]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a00e:	48 89 c7             	mov    rdi,rax
   2a011:	b8 00 00 00 00       	mov    eax,0x0
   2a016:	e8 c5 99 fd ff       	call   39e0 <fprintf@plt>
   2a01b:	c7 85 dc fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x124],0x1
   2a025:	e9 86 00 00 00       	jmp    2a0b0 <save_parameter_file+0x2d0>
   2a02a:	c7 85 d8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x128],0x0
   2a034:	eb 6a                	jmp    2a0a0 <save_parameter_file+0x2c0>
   2a036:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
   2a03c:	48 98                	cdqe   
   2a03e:	48 89 c2             	mov    rdx,rax
   2a041:	48 c1 e2 02          	shl    rdx,0x2
   2a045:	48 01 c2             	add    rdx,rax
   2a048:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a050:	48 89 c2             	mov    rdx,rax
   2a053:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
   2a059:	48 63 c8             	movsxd rcx,eax
   2a05c:	48 89 c8             	mov    rax,rcx
   2a05f:	48 c1 e0 02          	shl    rax,0x2
   2a063:	48 01 c8             	add    rax,rcx
   2a066:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a06e:	48 01 c8             	add    rax,rcx
   2a071:	48 c1 e0 02          	shl    rax,0x2
   2a075:	48 01 c2             	add    rdx,rax
   2a078:	48 8d 05 41 3d 1c 00 	lea    rax,[rip+0x1c3d41]        # 1eddc0 <mismatchH37>
   2a07f:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a083:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a087:	48 89 c1             	mov    rcx,rax
   2a08a:	ba 05 00 00 00       	mov    edx,0x5
   2a08f:	be 05 00 00 00       	mov    esi,0x5
   2a094:	e8 a7 d1 ff ff       	call   27240 <display_array>
   2a099:	83 85 d8 fe ff ff 01 	add    DWORD PTR [rbp-0x128],0x1
   2a0a0:	83 bd d8 fe ff ff 04 	cmp    DWORD PTR [rbp-0x128],0x4
   2a0a7:	7e 8d                	jle    2a036 <save_parameter_file+0x256>
   2a0a9:	83 85 dc fe ff ff 01 	add    DWORD PTR [rbp-0x124],0x1
   2a0b0:	83 bd dc fe ff ff 07 	cmp    DWORD PTR [rbp-0x124],0x7
   2a0b7:	0f 8e 6d ff ff ff    	jle    2a02a <save_parameter_file+0x24a>
   2a0bd:	bf 0a 00 00 00       	mov    edi,0xa
   2a0c2:	e8 e5 19 00 00       	call   2baac <settype>
   2a0c7:	48 89 c2             	mov    rdx,rax
   2a0ca:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a0ce:	48 8d 35 9b bf 1b 00 	lea    rsi,[rip+0x1bbf9b]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a0d5:	48 89 c7             	mov    rdi,rax
   2a0d8:	b8 00 00 00 00       	mov    eax,0x0
   2a0dd:	e8 fe 98 fd ff       	call   39e0 <fprintf@plt>
   2a0e2:	c7 85 e4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x11c],0x1
   2a0ec:	e9 86 00 00 00       	jmp    2a177 <save_parameter_file+0x397>
   2a0f1:	c7 85 e0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x120],0x0
   2a0fb:	eb 6a                	jmp    2a167 <save_parameter_file+0x387>
   2a0fd:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
   2a103:	48 98                	cdqe   
   2a105:	48 89 c2             	mov    rdx,rax
   2a108:	48 c1 e2 02          	shl    rdx,0x2
   2a10c:	48 01 c2             	add    rdx,rax
   2a10f:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a117:	48 89 c2             	mov    rdx,rax
   2a11a:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
   2a120:	48 63 c8             	movsxd rcx,eax
   2a123:	48 89 c8             	mov    rax,rcx
   2a126:	48 c1 e0 02          	shl    rax,0x2
   2a12a:	48 01 c8             	add    rax,rcx
   2a12d:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a135:	48 01 c8             	add    rax,rcx
   2a138:	48 c1 e0 02          	shl    rax,0x2
   2a13c:	48 01 c2             	add    rdx,rax
   2a13f:	48 8d 05 9a 3f 1c 00 	lea    rax,[rip+0x1c3f9a]        # 1ee0e0 <mismatchHdH>
   2a146:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a14a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a14e:	48 89 c1             	mov    rcx,rax
   2a151:	ba 05 00 00 00       	mov    edx,0x5
   2a156:	be 05 00 00 00       	mov    esi,0x5
   2a15b:	e8 e0 d0 ff ff       	call   27240 <display_array>
   2a160:	83 85 e0 fe ff ff 01 	add    DWORD PTR [rbp-0x120],0x1
   2a167:	83 bd e0 fe ff ff 04 	cmp    DWORD PTR [rbp-0x120],0x4
   2a16e:	7e 8d                	jle    2a0fd <save_parameter_file+0x31d>
   2a170:	83 85 e4 fe ff ff 01 	add    DWORD PTR [rbp-0x11c],0x1
   2a177:	83 bd e4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x11c],0x7
   2a17e:	0f 8e 6d ff ff ff    	jle    2a0f1 <save_parameter_file+0x311>
   2a184:	bf 0b 00 00 00       	mov    edi,0xb
   2a189:	e8 1e 19 00 00       	call   2baac <settype>
   2a18e:	48 89 c2             	mov    rdx,rax
   2a191:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a195:	48 8d 35 d4 be 1b 00 	lea    rsi,[rip+0x1bbed4]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a19c:	48 89 c7             	mov    rdi,rax
   2a19f:	b8 00 00 00 00       	mov    eax,0x0
   2a1a4:	e8 37 98 fd ff       	call   39e0 <fprintf@plt>
   2a1a9:	c7 85 ec fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x114],0x1
   2a1b3:	e9 86 00 00 00       	jmp    2a23e <save_parameter_file+0x45e>
   2a1b8:	c7 85 e8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x118],0x0
   2a1c2:	eb 6a                	jmp    2a22e <save_parameter_file+0x44e>
   2a1c4:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
   2a1ca:	48 98                	cdqe   
   2a1cc:	48 89 c2             	mov    rdx,rax
   2a1cf:	48 c1 e2 02          	shl    rdx,0x2
   2a1d3:	48 01 c2             	add    rdx,rax
   2a1d6:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a1de:	48 89 c2             	mov    rdx,rax
   2a1e1:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
   2a1e7:	48 63 c8             	movsxd rcx,eax
   2a1ea:	48 89 c8             	mov    rax,rcx
   2a1ed:	48 c1 e0 02          	shl    rax,0x2
   2a1f1:	48 01 c8             	add    rax,rcx
   2a1f4:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a1fc:	48 01 c8             	add    rax,rcx
   2a1ff:	48 c1 e0 02          	shl    rax,0x2
   2a203:	48 01 c2             	add    rdx,rax
   2a206:	48 8d 05 73 35 1c 00 	lea    rax,[rip+0x1c3573]        # 1ed780 <mismatchI37>
   2a20d:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a211:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a215:	48 89 c1             	mov    rcx,rax
   2a218:	ba 05 00 00 00       	mov    edx,0x5
   2a21d:	be 05 00 00 00       	mov    esi,0x5
   2a222:	e8 19 d0 ff ff       	call   27240 <display_array>
   2a227:	83 85 e8 fe ff ff 01 	add    DWORD PTR [rbp-0x118],0x1
   2a22e:	83 bd e8 fe ff ff 04 	cmp    DWORD PTR [rbp-0x118],0x4
   2a235:	7e 8d                	jle    2a1c4 <save_parameter_file+0x3e4>
   2a237:	83 85 ec fe ff ff 01 	add    DWORD PTR [rbp-0x114],0x1
   2a23e:	83 bd ec fe ff ff 07 	cmp    DWORD PTR [rbp-0x114],0x7
   2a245:	0f 8e 6d ff ff ff    	jle    2a1b8 <save_parameter_file+0x3d8>
   2a24b:	bf 0c 00 00 00       	mov    edi,0xc
   2a250:	e8 57 18 00 00       	call   2baac <settype>
   2a255:	48 89 c2             	mov    rdx,rax
   2a258:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a25c:	48 8d 35 0d be 1b 00 	lea    rsi,[rip+0x1bbe0d]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a263:	48 89 c7             	mov    rdi,rax
   2a266:	b8 00 00 00 00       	mov    eax,0x0
   2a26b:	e8 70 97 fd ff       	call   39e0 <fprintf@plt>
   2a270:	c7 85 f4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x10c],0x1
   2a27a:	e9 86 00 00 00       	jmp    2a305 <save_parameter_file+0x525>
   2a27f:	c7 85 f0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x110],0x0
   2a289:	eb 6a                	jmp    2a2f5 <save_parameter_file+0x515>
   2a28b:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
   2a291:	48 98                	cdqe   
   2a293:	48 89 c2             	mov    rdx,rax
   2a296:	48 c1 e2 02          	shl    rdx,0x2
   2a29a:	48 01 c2             	add    rdx,rax
   2a29d:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a2a5:	48 89 c2             	mov    rdx,rax
   2a2a8:	8b 85 f4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x10c]
   2a2ae:	48 63 c8             	movsxd rcx,eax
   2a2b1:	48 89 c8             	mov    rax,rcx
   2a2b4:	48 c1 e0 02          	shl    rax,0x2
   2a2b8:	48 01 c8             	add    rax,rcx
   2a2bb:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a2c3:	48 01 c8             	add    rax,rcx
   2a2c6:	48 c1 e0 02          	shl    rax,0x2
   2a2ca:	48 01 c2             	add    rdx,rax
   2a2cd:	48 8d 05 cc 37 1c 00 	lea    rax,[rip+0x1c37cc]        # 1edaa0 <mismatchIdH>
   2a2d4:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a2d8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a2dc:	48 89 c1             	mov    rcx,rax
   2a2df:	ba 05 00 00 00       	mov    edx,0x5
   2a2e4:	be 05 00 00 00       	mov    esi,0x5
   2a2e9:	e8 52 cf ff ff       	call   27240 <display_array>
   2a2ee:	83 85 f0 fe ff ff 01 	add    DWORD PTR [rbp-0x110],0x1
   2a2f5:	83 bd f0 fe ff ff 04 	cmp    DWORD PTR [rbp-0x110],0x4
   2a2fc:	7e 8d                	jle    2a28b <save_parameter_file+0x4ab>
   2a2fe:	83 85 f4 fe ff ff 01 	add    DWORD PTR [rbp-0x10c],0x1
   2a305:	83 bd f4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x10c],0x7
   2a30c:	0f 8e 6d ff ff ff    	jle    2a27f <save_parameter_file+0x49f>
   2a312:	bf 0d 00 00 00       	mov    edi,0xd
   2a317:	e8 90 17 00 00       	call   2baac <settype>
   2a31c:	48 89 c2             	mov    rdx,rax
   2a31f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a323:	48 8d 35 46 bd 1b 00 	lea    rsi,[rip+0x1bbd46]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a32a:	48 89 c7             	mov    rdi,rax
   2a32d:	b8 00 00 00 00       	mov    eax,0x0
   2a332:	e8 a9 96 fd ff       	call   39e0 <fprintf@plt>
   2a337:	c7 85 fc fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x104],0x1
   2a341:	e9 86 00 00 00       	jmp    2a3cc <save_parameter_file+0x5ec>
   2a346:	c7 85 f8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x108],0x0
   2a350:	eb 6a                	jmp    2a3bc <save_parameter_file+0x5dc>
   2a352:	8b 85 f8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x108]
   2a358:	48 98                	cdqe   
   2a35a:	48 89 c2             	mov    rdx,rax
   2a35d:	48 c1 e2 02          	shl    rdx,0x2
   2a361:	48 01 c2             	add    rdx,rax
   2a364:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a36c:	48 89 c2             	mov    rdx,rax
   2a36f:	8b 85 fc fe ff ff    	mov    eax,DWORD PTR [rbp-0x104]
   2a375:	48 63 c8             	movsxd rcx,eax
   2a378:	48 89 c8             	mov    rax,rcx
   2a37b:	48 c1 e0 02          	shl    rax,0x2
   2a37f:	48 01 c8             	add    rax,rcx
   2a382:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a38a:	48 01 c8             	add    rax,rcx
   2a38d:	48 c1 e0 02          	shl    rax,0x2
   2a391:	48 01 c2             	add    rdx,rax
   2a394:	48 8d 05 a5 46 1c 00 	lea    rax,[rip+0x1c46a5]        # 1eea40 <mismatch1nI37>
   2a39b:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a39f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a3a3:	48 89 c1             	mov    rcx,rax
   2a3a6:	ba 05 00 00 00       	mov    edx,0x5
   2a3ab:	be 05 00 00 00       	mov    esi,0x5
   2a3b0:	e8 8b ce ff ff       	call   27240 <display_array>
   2a3b5:	83 85 f8 fe ff ff 01 	add    DWORD PTR [rbp-0x108],0x1
   2a3bc:	83 bd f8 fe ff ff 04 	cmp    DWORD PTR [rbp-0x108],0x4
   2a3c3:	7e 8d                	jle    2a352 <save_parameter_file+0x572>
   2a3c5:	83 85 fc fe ff ff 01 	add    DWORD PTR [rbp-0x104],0x1
   2a3cc:	83 bd fc fe ff ff 07 	cmp    DWORD PTR [rbp-0x104],0x7
   2a3d3:	0f 8e 6d ff ff ff    	jle    2a346 <save_parameter_file+0x566>
   2a3d9:	bf 0e 00 00 00       	mov    edi,0xe
   2a3de:	e8 c9 16 00 00       	call   2baac <settype>
   2a3e3:	48 89 c2             	mov    rdx,rax
   2a3e6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a3ea:	48 8d 35 7f bc 1b 00 	lea    rsi,[rip+0x1bbc7f]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a3f1:	48 89 c7             	mov    rdi,rax
   2a3f4:	b8 00 00 00 00       	mov    eax,0x0
   2a3f9:	e8 e2 95 fd ff       	call   39e0 <fprintf@plt>
   2a3fe:	c7 85 04 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xfc],0x1
   2a408:	e9 86 00 00 00       	jmp    2a493 <save_parameter_file+0x6b3>
   2a40d:	c7 85 00 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x100],0x0
   2a417:	eb 6a                	jmp    2a483 <save_parameter_file+0x6a3>
   2a419:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
   2a41f:	48 98                	cdqe   
   2a421:	48 89 c2             	mov    rdx,rax
   2a424:	48 c1 e2 02          	shl    rdx,0x2
   2a428:	48 01 c2             	add    rdx,rax
   2a42b:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a433:	48 89 c2             	mov    rdx,rax
   2a436:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2a43c:	48 63 c8             	movsxd rcx,eax
   2a43f:	48 89 c8             	mov    rax,rcx
   2a442:	48 c1 e0 02          	shl    rax,0x2
   2a446:	48 01 c8             	add    rax,rcx
   2a449:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a451:	48 01 c8             	add    rax,rcx
   2a454:	48 c1 e0 02          	shl    rax,0x2
   2a458:	48 01 c2             	add    rdx,rax
   2a45b:	48 8d 05 fe 48 1c 00 	lea    rax,[rip+0x1c48fe]        # 1eed60 <mismatch1nIdH>
   2a462:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a466:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a46a:	48 89 c1             	mov    rcx,rax
   2a46d:	ba 05 00 00 00       	mov    edx,0x5
   2a472:	be 05 00 00 00       	mov    esi,0x5
   2a477:	e8 c4 cd ff ff       	call   27240 <display_array>
   2a47c:	83 85 00 ff ff ff 01 	add    DWORD PTR [rbp-0x100],0x1
   2a483:	83 bd 00 ff ff ff 04 	cmp    DWORD PTR [rbp-0x100],0x4
   2a48a:	7e 8d                	jle    2a419 <save_parameter_file+0x639>
   2a48c:	83 85 04 ff ff ff 01 	add    DWORD PTR [rbp-0xfc],0x1
   2a493:	83 bd 04 ff ff ff 07 	cmp    DWORD PTR [rbp-0xfc],0x7
   2a49a:	0f 8e 6d ff ff ff    	jle    2a40d <save_parameter_file+0x62d>
   2a4a0:	bf 0f 00 00 00       	mov    edi,0xf
   2a4a5:	e8 02 16 00 00       	call   2baac <settype>
   2a4aa:	48 89 c2             	mov    rdx,rax
   2a4ad:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a4b1:	48 8d 35 b8 bb 1b 00 	lea    rsi,[rip+0x1bbbb8]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a4b8:	48 89 c7             	mov    rdi,rax
   2a4bb:	b8 00 00 00 00       	mov    eax,0x0
   2a4c0:	e8 1b 95 fd ff       	call   39e0 <fprintf@plt>
   2a4c5:	c7 85 0c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xf4],0x1
   2a4cf:	e9 86 00 00 00       	jmp    2a55a <save_parameter_file+0x77a>
   2a4d4:	c7 85 08 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x0
   2a4de:	eb 6a                	jmp    2a54a <save_parameter_file+0x76a>
   2a4e0:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2a4e6:	48 98                	cdqe   
   2a4e8:	48 89 c2             	mov    rdx,rax
   2a4eb:	48 c1 e2 02          	shl    rdx,0x2
   2a4ef:	48 01 c2             	add    rdx,rax
   2a4f2:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a4fa:	48 89 c2             	mov    rdx,rax
   2a4fd:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2a503:	48 63 c8             	movsxd rcx,eax
   2a506:	48 89 c8             	mov    rax,rcx
   2a509:	48 c1 e0 02          	shl    rax,0x2
   2a50d:	48 01 c8             	add    rax,rcx
   2a510:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a518:	48 01 c8             	add    rax,rcx
   2a51b:	48 c1 e0 02          	shl    rax,0x2
   2a51f:	48 01 c2             	add    rdx,rax
   2a522:	48 8d 05 57 4b 1c 00 	lea    rax,[rip+0x1c4b57]        # 1ef080 <mismatch23I37>
   2a529:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a52d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a531:	48 89 c1             	mov    rcx,rax
   2a534:	ba 05 00 00 00       	mov    edx,0x5
   2a539:	be 05 00 00 00       	mov    esi,0x5
   2a53e:	e8 fd cc ff ff       	call   27240 <display_array>
   2a543:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   2a54a:	83 bd 08 ff ff ff 04 	cmp    DWORD PTR [rbp-0xf8],0x4
   2a551:	7e 8d                	jle    2a4e0 <save_parameter_file+0x700>
   2a553:	83 85 0c ff ff ff 01 	add    DWORD PTR [rbp-0xf4],0x1
   2a55a:	83 bd 0c ff ff ff 07 	cmp    DWORD PTR [rbp-0xf4],0x7
   2a561:	0f 8e 6d ff ff ff    	jle    2a4d4 <save_parameter_file+0x6f4>
   2a567:	bf 10 00 00 00       	mov    edi,0x10
   2a56c:	e8 3b 15 00 00       	call   2baac <settype>
   2a571:	48 89 c2             	mov    rdx,rax
   2a574:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a578:	48 8d 35 f1 ba 1b 00 	lea    rsi,[rip+0x1bbaf1]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a57f:	48 89 c7             	mov    rdi,rax
   2a582:	b8 00 00 00 00       	mov    eax,0x0
   2a587:	e8 54 94 fd ff       	call   39e0 <fprintf@plt>
   2a58c:	c7 85 14 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xec],0x1
   2a596:	e9 86 00 00 00       	jmp    2a621 <save_parameter_file+0x841>
   2a59b:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
   2a5a5:	eb 6a                	jmp    2a611 <save_parameter_file+0x831>
   2a5a7:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2a5ad:	48 98                	cdqe   
   2a5af:	48 89 c2             	mov    rdx,rax
   2a5b2:	48 c1 e2 02          	shl    rdx,0x2
   2a5b6:	48 01 c2             	add    rdx,rax
   2a5b9:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a5c1:	48 89 c2             	mov    rdx,rax
   2a5c4:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2a5ca:	48 63 c8             	movsxd rcx,eax
   2a5cd:	48 89 c8             	mov    rax,rcx
   2a5d0:	48 c1 e0 02          	shl    rax,0x2
   2a5d4:	48 01 c8             	add    rax,rcx
   2a5d7:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a5df:	48 01 c8             	add    rax,rcx
   2a5e2:	48 c1 e0 02          	shl    rax,0x2
   2a5e6:	48 01 c2             	add    rdx,rax
   2a5e9:	48 8d 05 b0 4d 1c 00 	lea    rax,[rip+0x1c4db0]        # 1ef3a0 <mismatch23IdH>
   2a5f0:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a5f4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a5f8:	48 89 c1             	mov    rcx,rax
   2a5fb:	ba 05 00 00 00       	mov    edx,0x5
   2a600:	be 05 00 00 00       	mov    esi,0x5
   2a605:	e8 36 cc ff ff       	call   27240 <display_array>
   2a60a:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
   2a611:	83 bd 10 ff ff ff 04 	cmp    DWORD PTR [rbp-0xf0],0x4
   2a618:	7e 8d                	jle    2a5a7 <save_parameter_file+0x7c7>
   2a61a:	83 85 14 ff ff ff 01 	add    DWORD PTR [rbp-0xec],0x1
   2a621:	83 bd 14 ff ff ff 07 	cmp    DWORD PTR [rbp-0xec],0x7
   2a628:	0f 8e 6d ff ff ff    	jle    2a59b <save_parameter_file+0x7bb>
   2a62e:	bf 11 00 00 00       	mov    edi,0x11
   2a633:	e8 74 14 00 00       	call   2baac <settype>
   2a638:	48 89 c2             	mov    rdx,rax
   2a63b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a63f:	48 8d 35 2a ba 1b 00 	lea    rsi,[rip+0x1bba2a]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a646:	48 89 c7             	mov    rdi,rax
   2a649:	b8 00 00 00 00       	mov    eax,0x0
   2a64e:	e8 8d 93 fd ff       	call   39e0 <fprintf@plt>
   2a653:	c7 85 1c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xe4],0x1
   2a65d:	e9 86 00 00 00       	jmp    2a6e8 <save_parameter_file+0x908>
   2a662:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
   2a66c:	eb 6a                	jmp    2a6d8 <save_parameter_file+0x8f8>
   2a66e:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2a674:	48 98                	cdqe   
   2a676:	48 89 c2             	mov    rdx,rax
   2a679:	48 c1 e2 02          	shl    rdx,0x2
   2a67d:	48 01 c2             	add    rdx,rax
   2a680:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a688:	48 89 c2             	mov    rdx,rax
   2a68b:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2a691:	48 63 c8             	movsxd rcx,eax
   2a694:	48 89 c8             	mov    rax,rcx
   2a697:	48 c1 e0 02          	shl    rax,0x2
   2a69b:	48 01 c8             	add    rax,rcx
   2a69e:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a6a6:	48 01 c8             	add    rax,rcx
   2a6a9:	48 c1 e0 02          	shl    rax,0x2
   2a6ad:	48 01 c2             	add    rdx,rax
   2a6b0:	48 8d 05 49 3d 1c 00 	lea    rax,[rip+0x1c3d49]        # 1ee400 <mismatchM37>
   2a6b7:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a6bb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a6bf:	48 89 c1             	mov    rcx,rax
   2a6c2:	ba 05 00 00 00       	mov    edx,0x5
   2a6c7:	be 05 00 00 00       	mov    esi,0x5
   2a6cc:	e8 6f cb ff ff       	call   27240 <display_array>
   2a6d1:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
   2a6d8:	83 bd 18 ff ff ff 04 	cmp    DWORD PTR [rbp-0xe8],0x4
   2a6df:	7e 8d                	jle    2a66e <save_parameter_file+0x88e>
   2a6e1:	83 85 1c ff ff ff 01 	add    DWORD PTR [rbp-0xe4],0x1
   2a6e8:	83 bd 1c ff ff ff 07 	cmp    DWORD PTR [rbp-0xe4],0x7
   2a6ef:	0f 8e 6d ff ff ff    	jle    2a662 <save_parameter_file+0x882>
   2a6f5:	bf 12 00 00 00       	mov    edi,0x12
   2a6fa:	e8 ad 13 00 00       	call   2baac <settype>
   2a6ff:	48 89 c2             	mov    rdx,rax
   2a702:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a706:	48 8d 35 63 b9 1b 00 	lea    rsi,[rip+0x1bb963]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a70d:	48 89 c7             	mov    rdi,rax
   2a710:	b8 00 00 00 00       	mov    eax,0x0
   2a715:	e8 c6 92 fd ff       	call   39e0 <fprintf@plt>
   2a71a:	c7 85 24 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xdc],0x1
   2a724:	e9 86 00 00 00       	jmp    2a7af <save_parameter_file+0x9cf>
   2a729:	c7 85 20 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe0],0x0
   2a733:	eb 6a                	jmp    2a79f <save_parameter_file+0x9bf>
   2a735:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
   2a73b:	48 98                	cdqe   
   2a73d:	48 89 c2             	mov    rdx,rax
   2a740:	48 c1 e2 02          	shl    rdx,0x2
   2a744:	48 01 c2             	add    rdx,rax
   2a747:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a74f:	48 89 c2             	mov    rdx,rax
   2a752:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
   2a758:	48 63 c8             	movsxd rcx,eax
   2a75b:	48 89 c8             	mov    rax,rcx
   2a75e:	48 c1 e0 02          	shl    rax,0x2
   2a762:	48 01 c8             	add    rax,rcx
   2a765:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a76d:	48 01 c8             	add    rax,rcx
   2a770:	48 c1 e0 02          	shl    rax,0x2
   2a774:	48 01 c2             	add    rdx,rax
   2a777:	48 8d 05 a2 3f 1c 00 	lea    rax,[rip+0x1c3fa2]        # 1ee720 <mismatchMdH>
   2a77e:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a782:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a786:	48 89 c1             	mov    rcx,rax
   2a789:	ba 05 00 00 00       	mov    edx,0x5
   2a78e:	be 05 00 00 00       	mov    esi,0x5
   2a793:	e8 a8 ca ff ff       	call   27240 <display_array>
   2a798:	83 85 20 ff ff ff 01 	add    DWORD PTR [rbp-0xe0],0x1
   2a79f:	83 bd 20 ff ff ff 04 	cmp    DWORD PTR [rbp-0xe0],0x4
   2a7a6:	7e 8d                	jle    2a735 <save_parameter_file+0x955>
   2a7a8:	83 85 24 ff ff ff 01 	add    DWORD PTR [rbp-0xdc],0x1
   2a7af:	83 bd 24 ff ff ff 07 	cmp    DWORD PTR [rbp-0xdc],0x7
   2a7b6:	0f 8e 6d ff ff ff    	jle    2a729 <save_parameter_file+0x949>
   2a7bc:	bf 13 00 00 00       	mov    edi,0x13
   2a7c1:	e8 e6 12 00 00       	call   2baac <settype>
   2a7c6:	48 89 c2             	mov    rdx,rax
   2a7c9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a7cd:	48 8d 35 9c b8 1b 00 	lea    rsi,[rip+0x1bb89c]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a7d4:	48 89 c7             	mov    rdi,rax
   2a7d7:	b8 00 00 00 00       	mov    eax,0x0
   2a7dc:	e8 ff 91 fd ff       	call   39e0 <fprintf@plt>
   2a7e1:	c7 85 2c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xd4],0x1
   2a7eb:	e9 86 00 00 00       	jmp    2a876 <save_parameter_file+0xa96>
   2a7f0:	c7 85 28 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xd8],0x0
   2a7fa:	eb 6a                	jmp    2a866 <save_parameter_file+0xa86>
   2a7fc:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   2a802:	48 98                	cdqe   
   2a804:	48 89 c2             	mov    rdx,rax
   2a807:	48 c1 e2 02          	shl    rdx,0x2
   2a80b:	48 01 c2             	add    rdx,rax
   2a80e:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a816:	48 89 c2             	mov    rdx,rax
   2a819:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
   2a81f:	48 63 c8             	movsxd rcx,eax
   2a822:	48 89 c8             	mov    rax,rcx
   2a825:	48 c1 e0 02          	shl    rax,0x2
   2a829:	48 01 c8             	add    rax,rcx
   2a82c:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a834:	48 01 c8             	add    rax,rcx
   2a837:	48 c1 e0 02          	shl    rax,0x2
   2a83b:	48 01 c2             	add    rdx,rax
   2a83e:	48 8d 05 7b 4e 1c 00 	lea    rax,[rip+0x1c4e7b]        # 1ef6c0 <mismatchExt37>
   2a845:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a849:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a84d:	48 89 c1             	mov    rcx,rax
   2a850:	ba 05 00 00 00       	mov    edx,0x5
   2a855:	be 05 00 00 00       	mov    esi,0x5
   2a85a:	e8 e1 c9 ff ff       	call   27240 <display_array>
   2a85f:	83 85 28 ff ff ff 01 	add    DWORD PTR [rbp-0xd8],0x1
   2a866:	83 bd 28 ff ff ff 04 	cmp    DWORD PTR [rbp-0xd8],0x4
   2a86d:	7e 8d                	jle    2a7fc <save_parameter_file+0xa1c>
   2a86f:	83 85 2c ff ff ff 01 	add    DWORD PTR [rbp-0xd4],0x1
   2a876:	83 bd 2c ff ff ff 07 	cmp    DWORD PTR [rbp-0xd4],0x7
   2a87d:	0f 8e 6d ff ff ff    	jle    2a7f0 <save_parameter_file+0xa10>
   2a883:	bf 14 00 00 00       	mov    edi,0x14
   2a888:	e8 1f 12 00 00       	call   2baac <settype>
   2a88d:	48 89 c2             	mov    rdx,rax
   2a890:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a894:	48 8d 35 d5 b7 1b 00 	lea    rsi,[rip+0x1bb7d5]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a89b:	48 89 c7             	mov    rdi,rax
   2a89e:	b8 00 00 00 00       	mov    eax,0x0
   2a8a3:	e8 38 91 fd ff       	call   39e0 <fprintf@plt>
   2a8a8:	c7 85 34 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x1
   2a8b2:	e9 86 00 00 00       	jmp    2a93d <save_parameter_file+0xb5d>
   2a8b7:	c7 85 30 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x0
   2a8c1:	eb 6a                	jmp    2a92d <save_parameter_file+0xb4d>
   2a8c3:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
   2a8c9:	48 98                	cdqe   
   2a8cb:	48 89 c2             	mov    rdx,rax
   2a8ce:	48 c1 e2 02          	shl    rdx,0x2
   2a8d2:	48 01 c2             	add    rdx,rax
   2a8d5:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2a8dd:	48 89 c2             	mov    rdx,rax
   2a8e0:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   2a8e6:	48 63 c8             	movsxd rcx,eax
   2a8e9:	48 89 c8             	mov    rax,rcx
   2a8ec:	48 c1 e0 02          	shl    rax,0x2
   2a8f0:	48 01 c8             	add    rax,rcx
   2a8f3:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2a8fb:	48 01 c8             	add    rax,rcx
   2a8fe:	48 c1 e0 02          	shl    rax,0x2
   2a902:	48 01 c2             	add    rdx,rax
   2a905:	48 8d 05 d4 50 1c 00 	lea    rax,[rip+0x1c50d4]        # 1ef9e0 <mismatchExtdH>
   2a90c:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2a910:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a914:	48 89 c1             	mov    rcx,rax
   2a917:	ba 05 00 00 00       	mov    edx,0x5
   2a91c:	be 05 00 00 00       	mov    esi,0x5
   2a921:	e8 1a c9 ff ff       	call   27240 <display_array>
   2a926:	83 85 30 ff ff ff 01 	add    DWORD PTR [rbp-0xd0],0x1
   2a92d:	83 bd 30 ff ff ff 04 	cmp    DWORD PTR [rbp-0xd0],0x4
   2a934:	7e 8d                	jle    2a8c3 <save_parameter_file+0xae3>
   2a936:	83 85 34 ff ff ff 01 	add    DWORD PTR [rbp-0xcc],0x1
   2a93d:	83 bd 34 ff ff ff 07 	cmp    DWORD PTR [rbp-0xcc],0x7
   2a944:	0f 8e 6d ff ff ff    	jle    2a8b7 <save_parameter_file+0xad7>
   2a94a:	bf 15 00 00 00       	mov    edi,0x15
   2a94f:	e8 58 11 00 00       	call   2baac <settype>
   2a954:	48 89 c2             	mov    rdx,rax
   2a957:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a95b:	48 8d 35 0e b7 1b 00 	lea    rsi,[rip+0x1bb70e]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a962:	48 89 c7             	mov    rdi,rax
   2a965:	b8 00 00 00 00       	mov    eax,0x0
   2a96a:	e8 71 90 fd ff       	call   39e0 <fprintf@plt>
   2a96f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a973:	48 89 c1             	mov    rcx,rax
   2a976:	ba 23 00 00 00       	mov    edx,0x23
   2a97b:	be 01 00 00 00       	mov    esi,0x1
   2a980:	48 8d 3d 21 b7 1b 00 	lea    rdi,[rip+0x1bb721]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2a987:	e8 04 92 fd ff       	call   3b90 <fwrite@plt>
   2a98c:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2a996:	eb 3f                	jmp    2a9d7 <save_parameter_file+0xbf7>
   2a998:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2a99e:	48 63 d0             	movsxd rdx,eax
   2a9a1:	48 89 d0             	mov    rax,rdx
   2a9a4:	48 c1 e0 02          	shl    rax,0x2
   2a9a8:	48 01 d0             	add    rax,rdx
   2a9ab:	48 c1 e0 02          	shl    rax,0x2
   2a9af:	48 8d 15 4a 53 1c 00 	lea    rdx,[rip+0x1c534a]        # 1efd00 <dangle5_37>
   2a9b6:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2a9ba:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a9be:	48 89 c1             	mov    rcx,rax
   2a9c1:	ba 05 00 00 00       	mov    edx,0x5
   2a9c6:	be 05 00 00 00       	mov    esi,0x5
   2a9cb:	e8 70 c8 ff ff       	call   27240 <display_array>
   2a9d0:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2a9d7:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2a9de:	7e b8                	jle    2a998 <save_parameter_file+0xbb8>
   2a9e0:	bf 16 00 00 00       	mov    edi,0x16
   2a9e5:	e8 c2 10 00 00       	call   2baac <settype>
   2a9ea:	48 89 c2             	mov    rdx,rax
   2a9ed:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2a9f1:	48 8d 35 78 b6 1b 00 	lea    rsi,[rip+0x1bb678]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2a9f8:	48 89 c7             	mov    rdi,rax
   2a9fb:	b8 00 00 00 00       	mov    eax,0x0
   2aa00:	e8 db 8f fd ff       	call   39e0 <fprintf@plt>
   2aa05:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2aa09:	48 89 c1             	mov    rcx,rax
   2aa0c:	ba 23 00 00 00       	mov    edx,0x23
   2aa11:	be 01 00 00 00       	mov    esi,0x1
   2aa16:	48 8d 3d 8b b6 1b 00 	lea    rdi,[rip+0x1bb68b]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2aa1d:	e8 6e 91 fd ff       	call   3b90 <fwrite@plt>
   2aa22:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2aa2c:	eb 3f                	jmp    2aa6d <save_parameter_file+0xc8d>
   2aa2e:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2aa34:	48 63 d0             	movsxd rdx,eax
   2aa37:	48 89 d0             	mov    rax,rdx
   2aa3a:	48 c1 e0 02          	shl    rax,0x2
   2aa3e:	48 01 d0             	add    rax,rdx
   2aa41:	48 c1 e0 02          	shl    rax,0x2
   2aa45:	48 8d 15 f4 53 1c 00 	lea    rdx,[rip+0x1c53f4]        # 1efe40 <dangle5_dH>
   2aa4c:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2aa50:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2aa54:	48 89 c1             	mov    rcx,rax
   2aa57:	ba 05 00 00 00       	mov    edx,0x5
   2aa5c:	be 05 00 00 00       	mov    esi,0x5
   2aa61:	e8 da c7 ff ff       	call   27240 <display_array>
   2aa66:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2aa6d:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2aa74:	7e b8                	jle    2aa2e <save_parameter_file+0xc4e>
   2aa76:	bf 17 00 00 00       	mov    edi,0x17
   2aa7b:	e8 2c 10 00 00       	call   2baac <settype>
   2aa80:	48 89 c2             	mov    rdx,rax
   2aa83:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2aa87:	48 8d 35 e2 b5 1b 00 	lea    rsi,[rip+0x1bb5e2]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2aa8e:	48 89 c7             	mov    rdi,rax
   2aa91:	b8 00 00 00 00       	mov    eax,0x0
   2aa96:	e8 45 8f fd ff       	call   39e0 <fprintf@plt>
   2aa9b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2aa9f:	48 89 c1             	mov    rcx,rax
   2aaa2:	ba 23 00 00 00       	mov    edx,0x23
   2aaa7:	be 01 00 00 00       	mov    esi,0x1
   2aaac:	48 8d 3d f5 b5 1b 00 	lea    rdi,[rip+0x1bb5f5]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2aab3:	e8 d8 90 fd ff       	call   3b90 <fwrite@plt>
   2aab8:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2aac2:	eb 3f                	jmp    2ab03 <save_parameter_file+0xd23>
   2aac4:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2aaca:	48 63 d0             	movsxd rdx,eax
   2aacd:	48 89 d0             	mov    rax,rdx
   2aad0:	48 c1 e0 02          	shl    rax,0x2
   2aad4:	48 01 d0             	add    rax,rdx
   2aad7:	48 c1 e0 02          	shl    rax,0x2
   2aadb:	48 8d 15 be 52 1c 00 	lea    rdx,[rip+0x1c52be]        # 1efda0 <dangle3_37>
   2aae2:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2aae6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2aaea:	48 89 c1             	mov    rcx,rax
   2aaed:	ba 05 00 00 00       	mov    edx,0x5
   2aaf2:	be 05 00 00 00       	mov    esi,0x5
   2aaf7:	e8 44 c7 ff ff       	call   27240 <display_array>
   2aafc:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2ab03:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2ab0a:	7e b8                	jle    2aac4 <save_parameter_file+0xce4>
   2ab0c:	bf 18 00 00 00       	mov    edi,0x18
   2ab11:	e8 96 0f 00 00       	call   2baac <settype>
   2ab16:	48 89 c2             	mov    rdx,rax
   2ab19:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ab1d:	48 8d 35 4c b5 1b 00 	lea    rsi,[rip+0x1bb54c]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ab24:	48 89 c7             	mov    rdi,rax
   2ab27:	b8 00 00 00 00       	mov    eax,0x0
   2ab2c:	e8 af 8e fd ff       	call   39e0 <fprintf@plt>
   2ab31:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ab35:	48 89 c1             	mov    rcx,rax
   2ab38:	ba 23 00 00 00       	mov    edx,0x23
   2ab3d:	be 01 00 00 00       	mov    esi,0x1
   2ab42:	48 8d 3d 5f b5 1b 00 	lea    rdi,[rip+0x1bb55f]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2ab49:	e8 42 90 fd ff       	call   3b90 <fwrite@plt>
   2ab4e:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2ab58:	eb 3f                	jmp    2ab99 <save_parameter_file+0xdb9>
   2ab5a:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2ab60:	48 63 d0             	movsxd rdx,eax
   2ab63:	48 89 d0             	mov    rax,rdx
   2ab66:	48 c1 e0 02          	shl    rax,0x2
   2ab6a:	48 01 d0             	add    rax,rdx
   2ab6d:	48 c1 e0 02          	shl    rax,0x2
   2ab71:	48 8d 15 68 53 1c 00 	lea    rdx,[rip+0x1c5368]        # 1efee0 <dangle3_dH>
   2ab78:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2ab7c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ab80:	48 89 c1             	mov    rcx,rax
   2ab83:	ba 05 00 00 00       	mov    edx,0x5
   2ab88:	be 05 00 00 00       	mov    esi,0x5
   2ab8d:	e8 ae c6 ff ff       	call   27240 <display_array>
   2ab92:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2ab99:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2aba0:	7e b8                	jle    2ab5a <save_parameter_file+0xd7a>
   2aba2:	bf 19 00 00 00       	mov    edi,0x19
   2aba7:	e8 00 0f 00 00       	call   2baac <settype>
   2abac:	48 89 c2             	mov    rdx,rax
   2abaf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2abb3:	48 8d 35 b6 b4 1b 00 	lea    rsi,[rip+0x1bb4b6]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2abba:	48 89 c7             	mov    rdi,rax
   2abbd:	b8 00 00 00 00       	mov    eax,0x0
   2abc2:	e8 19 8e fd ff       	call   39e0 <fprintf@plt>
   2abc7:	c7 85 3c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xc4],0x1
   2abd1:	e9 09 01 00 00       	jmp    2acdf <save_parameter_file+0xeff>
   2abd6:	c7 85 40 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xc0],0x1
   2abe0:	e9 e6 00 00 00       	jmp    2accb <save_parameter_file+0xeeb>
   2abe5:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   2abeb:	48 98                	cdqe   
   2abed:	48 8b 4c c5 a0       	mov    rcx,QWORD PTR [rbp+rax*8-0x60]
   2abf2:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
   2abf8:	48 98                	cdqe   
   2abfa:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2abff:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ac03:	48 8d 35 c2 b4 1b 00 	lea    rsi,[rip+0x1bb4c2]        # 1e60cc <parameter_set_rna_turner2004+0x5d72c>
   2ac0a:	48 89 c7             	mov    rdi,rax
   2ac0d:	b8 00 00 00 00       	mov    eax,0x0
   2ac12:	e8 c9 8d fd ff       	call   39e0 <fprintf@plt>
   2ac17:	c7 85 38 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xc8],0x0
   2ac21:	e9 91 00 00 00       	jmp    2acb7 <save_parameter_file+0xed7>
   2ac26:	8b 85 38 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc8]
   2ac2c:	48 98                	cdqe   
   2ac2e:	48 89 c2             	mov    rdx,rax
   2ac31:	48 c1 e2 02          	shl    rdx,0x2
   2ac35:	48 01 c2             	add    rdx,rax
   2ac38:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2ac40:	48 89 c2             	mov    rdx,rax
   2ac43:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   2ac49:	48 63 c8             	movsxd rcx,eax
   2ac4c:	48 89 c8             	mov    rax,rcx
   2ac4f:	48 c1 e0 02          	shl    rax,0x2
   2ac53:	48 01 c8             	add    rax,rcx
   2ac56:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2ac5e:	48 01 c8             	add    rax,rcx
   2ac61:	48 c1 e0 02          	shl    rax,0x2
   2ac65:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2ac69:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
   2ac6f:	48 63 d0             	movsxd rdx,eax
   2ac72:	48 89 d0             	mov    rax,rdx
   2ac75:	48 c1 e0 02          	shl    rax,0x2
   2ac79:	48 01 d0             	add    rax,rdx
   2ac7c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2ac84:	48 01 d0             	add    rax,rdx
   2ac87:	48 c1 e0 05          	shl    rax,0x5
   2ac8b:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2ac8f:	48 8d 05 4a 5a 1c 00 	lea    rax,[rip+0x1c5a4a]        # 1f06e0 <int11_37>
   2ac96:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2ac9a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ac9e:	48 89 c1             	mov    rcx,rax
   2aca1:	ba 05 00 00 00       	mov    edx,0x5
   2aca6:	be 05 00 00 00       	mov    esi,0x5
   2acab:	e8 90 c5 ff ff       	call   27240 <display_array>
   2acb0:	83 85 38 ff ff ff 01 	add    DWORD PTR [rbp-0xc8],0x1
   2acb7:	83 bd 38 ff ff ff 04 	cmp    DWORD PTR [rbp-0xc8],0x4
   2acbe:	0f 8e 62 ff ff ff    	jle    2ac26 <save_parameter_file+0xe46>
   2acc4:	83 85 40 ff ff ff 01 	add    DWORD PTR [rbp-0xc0],0x1
   2accb:	83 bd 40 ff ff ff 07 	cmp    DWORD PTR [rbp-0xc0],0x7
   2acd2:	0f 8e 0d ff ff ff    	jle    2abe5 <save_parameter_file+0xe05>
   2acd8:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
   2acdf:	83 bd 3c ff ff ff 07 	cmp    DWORD PTR [rbp-0xc4],0x7
   2ace6:	0f 8e ea fe ff ff    	jle    2abd6 <save_parameter_file+0xdf6>
   2acec:	bf 1a 00 00 00       	mov    edi,0x1a
   2acf1:	e8 b6 0d 00 00       	call   2baac <settype>
   2acf6:	48 89 c2             	mov    rdx,rax
   2acf9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2acfd:	48 8d 35 6c b3 1b 00 	lea    rsi,[rip+0x1bb36c]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ad04:	48 89 c7             	mov    rdi,rax
   2ad07:	b8 00 00 00 00       	mov    eax,0x0
   2ad0c:	e8 cf 8c fd ff       	call   39e0 <fprintf@plt>
   2ad11:	c7 85 48 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xb8],0x1
   2ad1b:	e9 09 01 00 00       	jmp    2ae29 <save_parameter_file+0x1049>
   2ad20:	c7 85 4c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xb4],0x1
   2ad2a:	e9 e6 00 00 00       	jmp    2ae15 <save_parameter_file+0x1035>
   2ad2f:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
   2ad35:	48 98                	cdqe   
   2ad37:	48 8b 4c c5 a0       	mov    rcx,QWORD PTR [rbp+rax*8-0x60]
   2ad3c:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
   2ad42:	48 98                	cdqe   
   2ad44:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2ad49:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ad4d:	48 8d 35 78 b3 1b 00 	lea    rsi,[rip+0x1bb378]        # 1e60cc <parameter_set_rna_turner2004+0x5d72c>
   2ad54:	48 89 c7             	mov    rdi,rax
   2ad57:	b8 00 00 00 00       	mov    eax,0x0
   2ad5c:	e8 7f 8c fd ff       	call   39e0 <fprintf@plt>
   2ad61:	c7 85 44 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xbc],0x0
   2ad6b:	e9 91 00 00 00       	jmp    2ae01 <save_parameter_file+0x1021>
   2ad70:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   2ad76:	48 98                	cdqe   
   2ad78:	48 89 c2             	mov    rdx,rax
   2ad7b:	48 c1 e2 02          	shl    rdx,0x2
   2ad7f:	48 01 c2             	add    rdx,rax
   2ad82:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2ad8a:	48 89 c2             	mov    rdx,rax
   2ad8d:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
   2ad93:	48 63 c8             	movsxd rcx,eax
   2ad96:	48 89 c8             	mov    rax,rcx
   2ad99:	48 c1 e0 02          	shl    rax,0x2
   2ad9d:	48 01 c8             	add    rax,rcx
   2ada0:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2ada8:	48 01 c8             	add    rax,rcx
   2adab:	48 c1 e0 02          	shl    rax,0x2
   2adaf:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2adb3:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
   2adb9:	48 63 d0             	movsxd rdx,eax
   2adbc:	48 89 d0             	mov    rax,rdx
   2adbf:	48 c1 e0 02          	shl    rax,0x2
   2adc3:	48 01 d0             	add    rax,rdx
   2adc6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2adce:	48 01 d0             	add    rax,rdx
   2add1:	48 c1 e0 05          	shl    rax,0x5
   2add5:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2add9:	48 8d 05 00 72 1c 00 	lea    rax,[rip+0x1c7200]        # 1f1fe0 <int11_dH>
   2ade0:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2ade4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ade8:	48 89 c1             	mov    rcx,rax
   2adeb:	ba 05 00 00 00       	mov    edx,0x5
   2adf0:	be 05 00 00 00       	mov    esi,0x5
   2adf5:	e8 46 c4 ff ff       	call   27240 <display_array>
   2adfa:	83 85 44 ff ff ff 01 	add    DWORD PTR [rbp-0xbc],0x1
   2ae01:	83 bd 44 ff ff ff 04 	cmp    DWORD PTR [rbp-0xbc],0x4
   2ae08:	0f 8e 62 ff ff ff    	jle    2ad70 <save_parameter_file+0xf90>
   2ae0e:	83 85 4c ff ff ff 01 	add    DWORD PTR [rbp-0xb4],0x1
   2ae15:	83 bd 4c ff ff ff 07 	cmp    DWORD PTR [rbp-0xb4],0x7
   2ae1c:	0f 8e 0d ff ff ff    	jle    2ad2f <save_parameter_file+0xf4f>
   2ae22:	83 85 48 ff ff ff 01 	add    DWORD PTR [rbp-0xb8],0x1
   2ae29:	83 bd 48 ff ff ff 07 	cmp    DWORD PTR [rbp-0xb8],0x7
   2ae30:	0f 8e ea fe ff ff    	jle    2ad20 <save_parameter_file+0xf40>
   2ae36:	bf 1b 00 00 00       	mov    edi,0x1b
   2ae3b:	e8 6c 0c 00 00       	call   2baac <settype>
   2ae40:	48 89 c2             	mov    rdx,rax
   2ae43:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ae47:	48 8d 35 22 b2 1b 00 	lea    rsi,[rip+0x1bb222]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ae4e:	48 89 c7             	mov    rdi,rax
   2ae51:	b8 00 00 00 00       	mov    eax,0x0
   2ae56:	e8 85 8b fd ff       	call   39e0 <fprintf@plt>
   2ae5b:	c7 85 50 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xb0],0x1
   2ae65:	e9 3e 01 00 00       	jmp    2afa8 <save_parameter_file+0x11c8>
   2ae6a:	c7 85 54 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xac],0x1
   2ae74:	e9 1b 01 00 00       	jmp    2af94 <save_parameter_file+0x11b4>
   2ae79:	c7 85 58 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x0
   2ae83:	e9 f8 00 00 00       	jmp    2af80 <save_parameter_file+0x11a0>
   2ae88:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   2ae8e:	48 98                	cdqe   
   2ae90:	48 8b 74 c5 a0       	mov    rsi,QWORD PTR [rbp+rax*8-0x60]
   2ae95:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   2ae9b:	48 98                	cdqe   
   2ae9d:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2aea2:	0f be c8             	movsx  ecx,al
   2aea5:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   2aeab:	48 98                	cdqe   
   2aead:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2aeb2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2aeb6:	49 89 f0             	mov    r8,rsi
   2aeb9:	48 8d 35 1c b2 1b 00 	lea    rsi,[rip+0x1bb21c]        # 1e60dc <parameter_set_rna_turner2004+0x5d73c>
   2aec0:	48 89 c7             	mov    rdi,rax
   2aec3:	b8 00 00 00 00       	mov    eax,0x0
   2aec8:	e8 13 8b fd ff       	call   39e0 <fprintf@plt>
   2aecd:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   2aed7:	e9 90 00 00 00       	jmp    2af6c <save_parameter_file+0x118c>
   2aedc:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   2aee2:	48 98                	cdqe   
   2aee4:	48 89 c2             	mov    rdx,rax
   2aee7:	48 c1 e2 02          	shl    rdx,0x2
   2aeeb:	48 01 c2             	add    rdx,rax
   2aeee:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2aef6:	48 89 c2             	mov    rdx,rax
   2aef9:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   2aeff:	48 63 c8             	movsxd rcx,eax
   2af02:	48 89 c8             	mov    rax,rcx
   2af05:	48 c1 e0 02          	shl    rax,0x2
   2af09:	48 01 c8             	add    rax,rcx
   2af0c:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2af14:	48 01 c8             	add    rax,rcx
   2af17:	48 c1 e0 02          	shl    rax,0x2
   2af1b:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2af1f:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   2af25:	48 98                	cdqe   
   2af27:	48 69 d0 a0 0f 00 00 	imul   rdx,rax,0xfa0
   2af2e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   2af34:	48 98                	cdqe   
   2af36:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2af3d:	48 01 d0             	add    rax,rdx
   2af40:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2af44:	48 8d 05 95 89 1c 00 	lea    rax,[rip+0x1c8995]        # 1f38e0 <int21_37>
   2af4b:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2af4f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2af53:	48 89 c1             	mov    rcx,rax
   2af56:	ba 05 00 00 00       	mov    edx,0x5
   2af5b:	be 05 00 00 00       	mov    esi,0x5
   2af60:	e8 db c2 ff ff       	call   27240 <display_array>
   2af65:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   2af6c:	83 bd 5c ff ff ff 04 	cmp    DWORD PTR [rbp-0xa4],0x4
   2af73:	0f 8e 63 ff ff ff    	jle    2aedc <save_parameter_file+0x10fc>
   2af79:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   2af80:	83 bd 58 ff ff ff 04 	cmp    DWORD PTR [rbp-0xa8],0x4
   2af87:	0f 8e fb fe ff ff    	jle    2ae88 <save_parameter_file+0x10a8>
   2af8d:	83 85 54 ff ff ff 01 	add    DWORD PTR [rbp-0xac],0x1
   2af94:	83 bd 54 ff ff ff 07 	cmp    DWORD PTR [rbp-0xac],0x7
   2af9b:	0f 8e d8 fe ff ff    	jle    2ae79 <save_parameter_file+0x1099>
   2afa1:	83 85 50 ff ff ff 01 	add    DWORD PTR [rbp-0xb0],0x1
   2afa8:	83 bd 50 ff ff ff 07 	cmp    DWORD PTR [rbp-0xb0],0x7
   2afaf:	0f 8e b5 fe ff ff    	jle    2ae6a <save_parameter_file+0x108a>
   2afb5:	bf 1c 00 00 00       	mov    edi,0x1c
   2afba:	e8 ed 0a 00 00       	call   2baac <settype>
   2afbf:	48 89 c2             	mov    rdx,rax
   2afc2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2afc6:	48 8d 35 a3 b0 1b 00 	lea    rsi,[rip+0x1bb0a3]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2afcd:	48 89 c7             	mov    rdi,rax
   2afd0:	b8 00 00 00 00       	mov    eax,0x0
   2afd5:	e8 06 8a fd ff       	call   39e0 <fprintf@plt>
   2afda:	c7 85 60 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xa0],0x1
   2afe4:	e9 3e 01 00 00       	jmp    2b127 <save_parameter_file+0x1347>
   2afe9:	c7 85 64 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x1
   2aff3:	e9 1b 01 00 00       	jmp    2b113 <save_parameter_file+0x1333>
   2aff8:	c7 85 68 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x98],0x0
   2b002:	e9 f8 00 00 00       	jmp    2b0ff <save_parameter_file+0x131f>
   2b007:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   2b00d:	48 98                	cdqe   
   2b00f:	48 8b 74 c5 a0       	mov    rsi,QWORD PTR [rbp+rax*8-0x60]
   2b014:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   2b01a:	48 98                	cdqe   
   2b01c:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2b021:	0f be c8             	movsx  ecx,al
   2b024:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   2b02a:	48 98                	cdqe   
   2b02c:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2b031:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b035:	49 89 f0             	mov    r8,rsi
   2b038:	48 8d 35 9d b0 1b 00 	lea    rsi,[rip+0x1bb09d]        # 1e60dc <parameter_set_rna_turner2004+0x5d73c>
   2b03f:	48 89 c7             	mov    rdi,rax
   2b042:	b8 00 00 00 00       	mov    eax,0x0
   2b047:	e8 94 89 fd ff       	call   39e0 <fprintf@plt>
   2b04c:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   2b056:	e9 90 00 00 00       	jmp    2b0eb <save_parameter_file+0x130b>
   2b05b:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   2b061:	48 98                	cdqe   
   2b063:	48 89 c2             	mov    rdx,rax
   2b066:	48 c1 e2 02          	shl    rdx,0x2
   2b06a:	48 01 c2             	add    rdx,rax
   2b06d:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2b075:	48 89 c2             	mov    rdx,rax
   2b078:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   2b07e:	48 63 c8             	movsxd rcx,eax
   2b081:	48 89 c8             	mov    rax,rcx
   2b084:	48 c1 e0 02          	shl    rax,0x2
   2b088:	48 01 c8             	add    rax,rcx
   2b08b:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2b093:	48 01 c8             	add    rax,rcx
   2b096:	48 c1 e0 02          	shl    rax,0x2
   2b09a:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2b09e:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   2b0a4:	48 98                	cdqe   
   2b0a6:	48 69 d0 a0 0f 00 00 	imul   rdx,rax,0xfa0
   2b0ad:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   2b0b3:	48 98                	cdqe   
   2b0b5:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2b0bc:	48 01 d0             	add    rax,rdx
   2b0bf:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2b0c3:	48 8d 05 16 05 1d 00 	lea    rax,[rip+0x1d0516]        # 1fb5e0 <int21_dH>
   2b0ca:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2b0ce:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b0d2:	48 89 c1             	mov    rcx,rax
   2b0d5:	ba 05 00 00 00       	mov    edx,0x5
   2b0da:	be 05 00 00 00       	mov    esi,0x5
   2b0df:	e8 5c c1 ff ff       	call   27240 <display_array>
   2b0e4:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   2b0eb:	83 bd 6c ff ff ff 04 	cmp    DWORD PTR [rbp-0x94],0x4
   2b0f2:	0f 8e 63 ff ff ff    	jle    2b05b <save_parameter_file+0x127b>
   2b0f8:	83 85 68 ff ff ff 01 	add    DWORD PTR [rbp-0x98],0x1
   2b0ff:	83 bd 68 ff ff ff 04 	cmp    DWORD PTR [rbp-0x98],0x4
   2b106:	0f 8e fb fe ff ff    	jle    2b007 <save_parameter_file+0x1227>
   2b10c:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   2b113:	83 bd 64 ff ff ff 07 	cmp    DWORD PTR [rbp-0x9c],0x7
   2b11a:	0f 8e d8 fe ff ff    	jle    2aff8 <save_parameter_file+0x1218>
   2b120:	83 85 60 ff ff ff 01 	add    DWORD PTR [rbp-0xa0],0x1
   2b127:	83 bd 60 ff ff ff 07 	cmp    DWORD PTR [rbp-0xa0],0x7
   2b12e:	0f 8e b5 fe ff ff    	jle    2afe9 <save_parameter_file+0x1209>
   2b134:	bf 1d 00 00 00       	mov    edi,0x1d
   2b139:	e8 6e 09 00 00       	call   2baac <settype>
   2b13e:	48 89 c2             	mov    rdx,rax
   2b141:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b145:	48 8d 35 24 af 1b 00 	lea    rsi,[rip+0x1baf24]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b14c:	48 89 c7             	mov    rdi,rax
   2b14f:	b8 00 00 00 00       	mov    eax,0x0
   2b154:	e8 87 88 fd ff       	call   39e0 <fprintf@plt>
   2b159:	c7 85 70 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x90],0x1
   2b163:	e9 7d 01 00 00       	jmp    2b2e5 <save_parameter_file+0x1505>
   2b168:	c7 85 74 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x1
   2b172:	e9 5a 01 00 00       	jmp    2b2d1 <save_parameter_file+0x14f1>
   2b177:	c7 85 78 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x88],0x1
   2b181:	e9 37 01 00 00       	jmp    2b2bd <save_parameter_file+0x14dd>
   2b186:	c7 85 7c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x84],0x1
   2b190:	e9 14 01 00 00       	jmp    2b2a9 <save_parameter_file+0x14c9>
   2b195:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   2b19b:	48 98                	cdqe   
   2b19d:	48 8b 7c c5 a0       	mov    rdi,QWORD PTR [rbp+rax*8-0x60]
   2b1a2:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   2b1a8:	48 98                	cdqe   
   2b1aa:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2b1af:	0f be f0             	movsx  esi,al
   2b1b2:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   2b1b8:	48 98                	cdqe   
   2b1ba:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2b1bf:	0f be c8             	movsx  ecx,al
   2b1c2:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   2b1c8:	48 98                	cdqe   
   2b1ca:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2b1cf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b1d3:	49 89 f9             	mov    r9,rdi
   2b1d6:	41 89 f0             	mov    r8d,esi
   2b1d9:	48 8d 35 0f af 1b 00 	lea    rsi,[rip+0x1baf0f]        # 1e60ef <parameter_set_rna_turner2004+0x5d74f>
   2b1e0:	48 89 c7             	mov    rdi,rax
   2b1e3:	b8 00 00 00 00       	mov    eax,0x0
   2b1e8:	e8 f3 87 fd ff       	call   39e0 <fprintf@plt>
   2b1ed:	c7 45 80 01 00 00 00 	mov    DWORD PTR [rbp-0x80],0x1
   2b1f4:	e9 9f 00 00 00       	jmp    2b298 <save_parameter_file+0x14b8>
   2b1f9:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   2b1fc:	48 98                	cdqe   
   2b1fe:	48 89 c2             	mov    rdx,rax
   2b201:	48 c1 e2 02          	shl    rdx,0x2
   2b205:	48 01 c2             	add    rdx,rax
   2b208:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2b210:	48 89 c2             	mov    rdx,rax
   2b213:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   2b219:	48 63 c8             	movsxd rcx,eax
   2b21c:	48 89 c8             	mov    rax,rcx
   2b21f:	48 c1 e0 02          	shl    rax,0x2
   2b223:	48 01 c8             	add    rax,rcx
   2b226:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2b22e:	48 01 c8             	add    rax,rcx
   2b231:	48 c1 e0 02          	shl    rax,0x2
   2b235:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2b239:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   2b23f:	48 98                	cdqe   
   2b241:	48 69 d0 c4 09 00 00 	imul   rdx,rax,0x9c4
   2b248:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   2b24e:	48 98                	cdqe   
   2b250:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2b257:	48 01 d0             	add    rax,rdx
   2b25a:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2b25e:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   2b264:	48 98                	cdqe   
   2b266:	48 69 c0 20 4e 00 00 	imul   rax,rax,0x4e20
   2b26d:	48 01 c2             	add    rdx,rax
   2b270:	48 8d 05 69 80 1d 00 	lea    rax,[rip+0x1d8069]        # 2032e0 <int22_37>
   2b277:	48 01 d0             	add    rax,rdx
   2b27a:	48 8d 78 04          	lea    rdi,[rax+0x4]
   2b27e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b282:	48 89 c1             	mov    rcx,rax
   2b285:	ba 05 00 00 00       	mov    edx,0x5
   2b28a:	be 04 00 00 00       	mov    esi,0x4
   2b28f:	e8 ac bf ff ff       	call   27240 <display_array>
   2b294:	83 45 80 01          	add    DWORD PTR [rbp-0x80],0x1
   2b298:	83 7d 80 04          	cmp    DWORD PTR [rbp-0x80],0x4
   2b29c:	0f 8e 57 ff ff ff    	jle    2b1f9 <save_parameter_file+0x1419>
   2b2a2:	83 85 7c ff ff ff 01 	add    DWORD PTR [rbp-0x84],0x1
   2b2a9:	83 bd 7c ff ff ff 04 	cmp    DWORD PTR [rbp-0x84],0x4
   2b2b0:	0f 8e df fe ff ff    	jle    2b195 <save_parameter_file+0x13b5>
   2b2b6:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   2b2bd:	83 bd 78 ff ff ff 04 	cmp    DWORD PTR [rbp-0x88],0x4
   2b2c4:	0f 8e bc fe ff ff    	jle    2b186 <save_parameter_file+0x13a6>
   2b2ca:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   2b2d1:	83 bd 74 ff ff ff 06 	cmp    DWORD PTR [rbp-0x8c],0x6
   2b2d8:	0f 8e 99 fe ff ff    	jle    2b177 <save_parameter_file+0x1397>
   2b2de:	83 85 70 ff ff ff 01 	add    DWORD PTR [rbp-0x90],0x1
   2b2e5:	83 bd 70 ff ff ff 06 	cmp    DWORD PTR [rbp-0x90],0x6
   2b2ec:	0f 8e 76 fe ff ff    	jle    2b168 <save_parameter_file+0x1388>
   2b2f2:	bf 1e 00 00 00       	mov    edi,0x1e
   2b2f7:	e8 b0 07 00 00       	call   2baac <settype>
   2b2fc:	48 89 c2             	mov    rdx,rax
   2b2ff:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b303:	48 8d 35 66 ad 1b 00 	lea    rsi,[rip+0x1bad66]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b30a:	48 89 c7             	mov    rdi,rax
   2b30d:	b8 00 00 00 00       	mov    eax,0x0
   2b312:	e8 c9 86 fd ff       	call   39e0 <fprintf@plt>
   2b317:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   2b31e:	e9 47 01 00 00       	jmp    2b46a <save_parameter_file+0x168a>
   2b323:	c7 45 88 01 00 00 00 	mov    DWORD PTR [rbp-0x78],0x1
   2b32a:	e9 2d 01 00 00       	jmp    2b45c <save_parameter_file+0x167c>
   2b32f:	c7 45 8c 01 00 00 00 	mov    DWORD PTR [rbp-0x74],0x1
   2b336:	e9 13 01 00 00       	jmp    2b44e <save_parameter_file+0x166e>
   2b33b:	c7 45 90 01 00 00 00 	mov    DWORD PTR [rbp-0x70],0x1
   2b342:	e9 f9 00 00 00       	jmp    2b440 <save_parameter_file+0x1660>
   2b347:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   2b34a:	48 98                	cdqe   
   2b34c:	48 8b 7c c5 a0       	mov    rdi,QWORD PTR [rbp+rax*8-0x60]
   2b351:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   2b354:	48 98                	cdqe   
   2b356:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2b35b:	0f be f0             	movsx  esi,al
   2b35e:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   2b361:	48 98                	cdqe   
   2b363:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2b368:	0f be c8             	movsx  ecx,al
   2b36b:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   2b36e:	48 98                	cdqe   
   2b370:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2b375:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b379:	49 89 f9             	mov    r9,rdi
   2b37c:	41 89 f0             	mov    r8d,esi
   2b37f:	48 8d 35 69 ad 1b 00 	lea    rsi,[rip+0x1bad69]        # 1e60ef <parameter_set_rna_turner2004+0x5d74f>
   2b386:	48 89 c7             	mov    rdi,rax
   2b389:	b8 00 00 00 00       	mov    eax,0x0
   2b38e:	e8 4d 86 fd ff       	call   39e0 <fprintf@plt>
   2b393:	c7 45 94 01 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x1
   2b39a:	e9 93 00 00 00       	jmp    2b432 <save_parameter_file+0x1652>
   2b39f:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   2b3a2:	48 98                	cdqe   
   2b3a4:	48 89 c2             	mov    rdx,rax
   2b3a7:	48 c1 e2 02          	shl    rdx,0x2
   2b3ab:	48 01 c2             	add    rdx,rax
   2b3ae:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2b3b6:	48 89 c2             	mov    rdx,rax
   2b3b9:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   2b3bc:	48 63 c8             	movsxd rcx,eax
   2b3bf:	48 89 c8             	mov    rax,rcx
   2b3c2:	48 c1 e0 02          	shl    rax,0x2
   2b3c6:	48 01 c8             	add    rax,rcx
   2b3c9:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2b3d1:	48 01 c8             	add    rax,rcx
   2b3d4:	48 c1 e0 02          	shl    rax,0x2
   2b3d8:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2b3dc:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   2b3df:	48 98                	cdqe   
   2b3e1:	48 69 d0 c4 09 00 00 	imul   rdx,rax,0x9c4
   2b3e8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   2b3eb:	48 98                	cdqe   
   2b3ed:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2b3f4:	48 01 d0             	add    rax,rdx
   2b3f7:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2b3fb:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   2b3fe:	48 98                	cdqe   
   2b400:	48 69 c0 20 4e 00 00 	imul   rax,rax,0x4e20
   2b407:	48 01 c2             	add    rdx,rax
   2b40a:	48 8d 05 cf ef 1f 00 	lea    rax,[rip+0x1fefcf]        # 22a3e0 <int22_dH>
   2b411:	48 01 d0             	add    rax,rdx
   2b414:	48 8d 78 04          	lea    rdi,[rax+0x4]
   2b418:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b41c:	48 89 c1             	mov    rcx,rax
   2b41f:	ba 05 00 00 00       	mov    edx,0x5
   2b424:	be 04 00 00 00       	mov    esi,0x4
   2b429:	e8 12 be ff ff       	call   27240 <display_array>
   2b42e:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
   2b432:	83 7d 94 04          	cmp    DWORD PTR [rbp-0x6c],0x4
   2b436:	0f 8e 63 ff ff ff    	jle    2b39f <save_parameter_file+0x15bf>
   2b43c:	83 45 90 01          	add    DWORD PTR [rbp-0x70],0x1
   2b440:	83 7d 90 04          	cmp    DWORD PTR [rbp-0x70],0x4
   2b444:	0f 8e fd fe ff ff    	jle    2b347 <save_parameter_file+0x1567>
   2b44a:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   2b44e:	83 7d 8c 04          	cmp    DWORD PTR [rbp-0x74],0x4
   2b452:	0f 8e e3 fe ff ff    	jle    2b33b <save_parameter_file+0x155b>
   2b458:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   2b45c:	83 7d 88 06          	cmp    DWORD PTR [rbp-0x78],0x6
   2b460:	0f 8e c9 fe ff ff    	jle    2b32f <save_parameter_file+0x154f>
   2b466:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   2b46a:	83 7d 84 06          	cmp    DWORD PTR [rbp-0x7c],0x6
   2b46e:	0f 8e af fe ff ff    	jle    2b323 <save_parameter_file+0x1543>
   2b474:	bf 03 00 00 00       	mov    edi,0x3
   2b479:	e8 2e 06 00 00       	call   2baac <settype>
   2b47e:	48 89 c2             	mov    rdx,rax
   2b481:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b485:	48 8d 35 e4 ab 1b 00 	lea    rsi,[rip+0x1babe4]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b48c:	48 89 c7             	mov    rdi,rax
   2b48f:	b8 00 00 00 00       	mov    eax,0x0
   2b494:	e8 47 85 fd ff       	call   39e0 <fprintf@plt>
   2b499:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b49d:	48 89 c1             	mov    rcx,rax
   2b4a0:	ba 0a 00 00 00       	mov    edx,0xa
   2b4a5:	be 1f 00 00 00       	mov    esi,0x1f
   2b4aa:	48 8d 3d cf 1f 1c 00 	lea    rdi,[rip+0x1c1fcf]        # 1ed480 <hairpin37>
   2b4b1:	e8 8a bd ff ff       	call   27240 <display_array>
   2b4b6:	bf 04 00 00 00       	mov    edi,0x4
   2b4bb:	e8 ec 05 00 00       	call   2baac <settype>
   2b4c0:	48 89 c2             	mov    rdx,rax
   2b4c3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b4c7:	48 8d 35 a2 ab 1b 00 	lea    rsi,[rip+0x1baba2]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b4ce:	48 89 c7             	mov    rdi,rax
   2b4d1:	b8 00 00 00 00       	mov    eax,0x0
   2b4d6:	e8 05 85 fd ff       	call   39e0 <fprintf@plt>
   2b4db:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b4df:	48 89 c1             	mov    rcx,rax
   2b4e2:	ba 0a 00 00 00       	mov    edx,0xa
   2b4e7:	be 1f 00 00 00       	mov    esi,0x1f
   2b4ec:	48 8d 3d 0d 20 1c 00 	lea    rdi,[rip+0x1c200d]        # 1ed500 <hairpindH>
   2b4f3:	e8 48 bd ff ff       	call   27240 <display_array>
   2b4f8:	bf 05 00 00 00       	mov    edi,0x5
   2b4fd:	e8 aa 05 00 00       	call   2baac <settype>
   2b502:	48 89 c2             	mov    rdx,rax
   2b505:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b509:	48 8d 35 60 ab 1b 00 	lea    rsi,[rip+0x1bab60]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b510:	48 89 c7             	mov    rdi,rax
   2b513:	b8 00 00 00 00       	mov    eax,0x0
   2b518:	e8 c3 84 fd ff       	call   39e0 <fprintf@plt>
   2b51d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b521:	48 89 c1             	mov    rcx,rax
   2b524:	ba 0a 00 00 00       	mov    edx,0xa
   2b529:	be 1f 00 00 00       	mov    esi,0x1f
   2b52e:	48 8d 3d 4b 20 1c 00 	lea    rdi,[rip+0x1c204b]        # 1ed580 <bulge37>
   2b535:	e8 06 bd ff ff       	call   27240 <display_array>
   2b53a:	bf 06 00 00 00       	mov    edi,0x6
   2b53f:	e8 68 05 00 00       	call   2baac <settype>
   2b544:	48 89 c2             	mov    rdx,rax
   2b547:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b54b:	48 8d 35 1e ab 1b 00 	lea    rsi,[rip+0x1bab1e]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b552:	48 89 c7             	mov    rdi,rax
   2b555:	b8 00 00 00 00       	mov    eax,0x0
   2b55a:	e8 81 84 fd ff       	call   39e0 <fprintf@plt>
   2b55f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b563:	48 89 c1             	mov    rcx,rax
   2b566:	ba 0a 00 00 00       	mov    edx,0xa
   2b56b:	be 1f 00 00 00       	mov    esi,0x1f
   2b570:	48 8d 3d 89 20 1c 00 	lea    rdi,[rip+0x1c2089]        # 1ed600 <bulgedH>
   2b577:	e8 c4 bc ff ff       	call   27240 <display_array>
   2b57c:	bf 07 00 00 00       	mov    edi,0x7
   2b581:	e8 26 05 00 00       	call   2baac <settype>
   2b586:	48 89 c2             	mov    rdx,rax
   2b589:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b58d:	48 8d 35 dc aa 1b 00 	lea    rsi,[rip+0x1baadc]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b594:	48 89 c7             	mov    rdi,rax
   2b597:	b8 00 00 00 00       	mov    eax,0x0
   2b59c:	e8 3f 84 fd ff       	call   39e0 <fprintf@plt>
   2b5a1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b5a5:	48 89 c1             	mov    rcx,rax
   2b5a8:	ba 0a 00 00 00       	mov    edx,0xa
   2b5ad:	be 1f 00 00 00       	mov    esi,0x1f
   2b5b2:	48 8d 3d c7 20 1c 00 	lea    rdi,[rip+0x1c20c7]        # 1ed680 <internal_loop37>
   2b5b9:	e8 82 bc ff ff       	call   27240 <display_array>
   2b5be:	bf 08 00 00 00       	mov    edi,0x8
   2b5c3:	e8 e4 04 00 00       	call   2baac <settype>
   2b5c8:	48 89 c2             	mov    rdx,rax
   2b5cb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b5cf:	48 8d 35 9a aa 1b 00 	lea    rsi,[rip+0x1baa9a]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b5d6:	48 89 c7             	mov    rdi,rax
   2b5d9:	b8 00 00 00 00       	mov    eax,0x0
   2b5de:	e8 fd 83 fd ff       	call   39e0 <fprintf@plt>
   2b5e3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b5e7:	48 89 c1             	mov    rcx,rax
   2b5ea:	ba 0a 00 00 00       	mov    edx,0xa
   2b5ef:	be 1f 00 00 00       	mov    esi,0x1f
   2b5f4:	48 8d 3d 05 21 1c 00 	lea    rdi,[rip+0x1c2105]        # 1ed700 <internal_loopdH>
   2b5fb:	e8 40 bc ff ff       	call   27240 <display_array>
   2b600:	bf 1f 00 00 00       	mov    edi,0x1f
   2b605:	e8 a2 04 00 00       	call   2baac <settype>
   2b60a:	48 89 c2             	mov    rdx,rax
   2b60d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b611:	48 8d 35 58 aa 1b 00 	lea    rsi,[rip+0x1baa58]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b618:	48 89 c7             	mov    rdi,rax
   2b61b:	b8 00 00 00 00       	mov    eax,0x0
   2b620:	e8 bb 83 fd ff       	call   39e0 <fprintf@plt>
   2b625:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b629:	48 89 c1             	mov    rcx,rax
   2b62c:	ba 38 00 00 00       	mov    edx,0x38
   2b631:	be 01 00 00 00       	mov    esi,0x1
   2b636:	48 8d 3d cb aa 1b 00 	lea    rdi,[rip+0x1baacb]        # 1e6108 <parameter_set_rna_turner2004+0x5d768>
   2b63d:	e8 4e 85 fd ff       	call   3b90 <fwrite@plt>
   2b642:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b646:	48 89 c1             	mov    rcx,rax
   2b649:	ba 31 00 00 00       	mov    edx,0x31
   2b64e:	be 01 00 00 00       	mov    esi,0x1
   2b653:	48 8d 3d ee aa 1b 00 	lea    rdi,[rip+0x1baaee]        # 1e6148 <parameter_set_rna_turner2004+0x5d7a8>
   2b65a:	e8 31 85 fd ff       	call   3b90 <fwrite@plt>
   2b65f:	8b 3d af 1b 1c 00    	mov    edi,DWORD PTR [rip+0x1c1baf]        # 1ed214 <ML_interndH>
   2b665:	8b 35 a5 1b 1c 00    	mov    esi,DWORD PTR [rip+0x1c1ba5]        # 1ed210 <ML_intern37>
   2b66b:	44 8b 0d aa 1b 1c 00 	mov    r9d,DWORD PTR [rip+0x1c1baa]        # 1ed21c <ML_closingdH>
   2b672:	44 8b 05 9f 1b 1c 00 	mov    r8d,DWORD PTR [rip+0x1c1b9f]        # 1ed218 <ML_closing37>
   2b679:	8b 0d 71 73 22 00    	mov    ecx,DWORD PTR [rip+0x227371]        # 2529f0 <ML_BASEdH>
   2b67f:	8b 15 67 73 22 00    	mov    edx,DWORD PTR [rip+0x227367]        # 2529ec <ML_BASE37>
   2b685:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b689:	57                   	push   rdi
   2b68a:	56                   	push   rsi
   2b68b:	48 8d 35 e8 aa 1b 00 	lea    rsi,[rip+0x1baae8]        # 1e617a <parameter_set_rna_turner2004+0x5d7da>
   2b692:	48 89 c7             	mov    rdi,rax
   2b695:	b8 00 00 00 00       	mov    eax,0x0
   2b69a:	e8 41 83 fd ff       	call   39e0 <fprintf@plt>
   2b69f:	48 83 c4 10          	add    rsp,0x10
   2b6a3:	bf 23 00 00 00       	mov    edi,0x23
   2b6a8:	e8 ff 03 00 00       	call   2baac <settype>
   2b6ad:	48 89 c2             	mov    rdx,rax
   2b6b0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b6b4:	48 8d 35 b5 a9 1b 00 	lea    rsi,[rip+0x1ba9b5]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b6bb:	48 89 c7             	mov    rdi,rax
   2b6be:	b8 00 00 00 00       	mov    eax,0x0
   2b6c3:	e8 18 83 fd ff       	call   39e0 <fprintf@plt>
   2b6c8:	8b 35 52 1b 1c 00    	mov    esi,DWORD PTR [rip+0x1c1b52]        # 1ed220 <MAX_NINIO>
   2b6ce:	8b 0d 54 1b 1c 00    	mov    ecx,DWORD PTR [rip+0x1c1b54]        # 1ed228 <niniodH>
   2b6d4:	8b 15 4a 1b 1c 00    	mov    edx,DWORD PTR [rip+0x1c1b4a]        # 1ed224 <ninio37>
   2b6da:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b6de:	41 89 f0             	mov    r8d,esi
   2b6e1:	48 8d 35 b0 aa 1b 00 	lea    rsi,[rip+0x1baab0]        # 1e6198 <parameter_set_rna_turner2004+0x5d7f8>
   2b6e8:	48 89 c7             	mov    rdi,rax
   2b6eb:	b8 00 00 00 00       	mov    eax,0x0
   2b6f0:	e8 eb 82 fd ff       	call   39e0 <fprintf@plt>
   2b6f5:	bf 24 00 00 00       	mov    edi,0x24
   2b6fa:	e8 ad 03 00 00       	call   2baac <settype>
   2b6ff:	48 89 c2             	mov    rdx,rax
   2b702:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b706:	48 8d 35 63 a9 1b 00 	lea    rsi,[rip+0x1ba963]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b70d:	48 89 c7             	mov    rdi,rax
   2b710:	b8 00 00 00 00       	mov    eax,0x0
   2b715:	e8 c6 82 fd ff       	call   39e0 <fprintf@plt>
   2b71a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b71e:	48 89 c1             	mov    rcx,rax
   2b721:	ba 34 00 00 00       	mov    edx,0x34
   2b726:	be 01 00 00 00       	mov    esi,0x1
   2b72b:	48 8d 3d b6 aa 1b 00 	lea    rdi,[rip+0x1baab6]        # 1e61e8 <parameter_set_rna_turner2004+0x5d848>
   2b732:	e8 59 84 fd ff       	call   3b90 <fwrite@plt>
   2b737:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b73b:	48 89 c1             	mov    rcx,rax
   2b73e:	ba 2c 00 00 00       	mov    edx,0x2c
   2b743:	be 01 00 00 00       	mov    esi,0x1
   2b748:	48 8d 3d d1 aa 1b 00 	lea    rdi,[rip+0x1baad1]        # 1e6220 <parameter_set_rna_turner2004+0x5d880>
   2b74f:	e8 3c 84 fd ff       	call   3b90 <fwrite@plt>
   2b754:	48 8b 35 ad 1a 1c 00 	mov    rsi,QWORD PTR [rip+0x1c1aad]        # 1ed208 <lxc37>
   2b75b:	44 8b 05 ce 1a 1c 00 	mov    r8d,DWORD PTR [rip+0x1c1ace]        # 1ed230 <TerminalAUdH>
   2b762:	8b 3d c4 1a 1c 00    	mov    edi,DWORD PTR [rip+0x1c1ac4]        # 1ed22c <TerminalAU37>
   2b768:	8b 0d ca 1a 1c 00    	mov    ecx,DWORD PTR [rip+0x1c1aca]        # 1ed238 <DuplexInitdH>
   2b76e:	8b 15 c0 1a 1c 00    	mov    edx,DWORD PTR [rip+0x1c1ac0]        # 1ed234 <DuplexInit37>
   2b774:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b778:	48 83 ec 08          	sub    rsp,0x8
   2b77c:	6a 00                	push   0x0
   2b77e:	66 48 0f 6e c6       	movq   xmm0,rsi
   2b783:	45 89 c1             	mov    r9d,r8d
   2b786:	41 89 f8             	mov    r8d,edi
   2b789:	48 8d 35 c0 aa 1b 00 	lea    rsi,[rip+0x1baac0]        # 1e6250 <parameter_set_rna_turner2004+0x5d8b0>
   2b790:	48 89 c7             	mov    rdi,rax
   2b793:	b8 01 00 00 00       	mov    eax,0x1
   2b798:	e8 43 82 fd ff       	call   39e0 <fprintf@plt>
   2b79d:	48 83 c4 10          	add    rsp,0x10
   2b7a1:	bf 22 00 00 00       	mov    edi,0x22
   2b7a6:	e8 01 03 00 00       	call   2baac <settype>
   2b7ab:	48 89 c2             	mov    rdx,rax
   2b7ae:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b7b2:	48 8d 35 b7 a8 1b 00 	lea    rsi,[rip+0x1ba8b7]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b7b9:	48 89 c7             	mov    rdi,rax
   2b7bc:	b8 00 00 00 00       	mov    eax,0x0
   2b7c1:	e8 1a 82 fd ff       	call   39e0 <fprintf@plt>
   2b7c6:	c7 85 d4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x0
   2b7d0:	eb 6f                	jmp    2b841 <save_parameter_file+0x1a61>
   2b7d2:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b7d8:	48 98                	cdqe   
   2b7da:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b7e2:	48 8d 05 57 4e 1c 00 	lea    rax,[rip+0x1c4e57]        # 1f0640 <HexaloopdH>
   2b7e9:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2b7ec:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b7f2:	48 98                	cdqe   
   2b7f4:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b7fc:	48 8d 05 9d 4d 1c 00 	lea    rax,[rip+0x1c4d9d]        # 1f05a0 <Hexaloop37>
   2b803:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2b806:	8b 95 d4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x12c]
   2b80c:	89 d0                	mov    eax,edx
   2b80e:	c1 e0 03             	shl    eax,0x3
   2b811:	01 d0                	add    eax,edx
   2b813:	48 98                	cdqe   
   2b815:	48 8d 15 04 4c 1c 00 	lea    rdx,[rip+0x1c4c04]        # 1f0420 <Hexaloops>
   2b81c:	48 01 c2             	add    rdx,rax
   2b81f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b823:	41 89 f0             	mov    r8d,esi
   2b826:	48 8d 35 42 aa 1b 00 	lea    rsi,[rip+0x1baa42]        # 1e626f <parameter_set_rna_turner2004+0x5d8cf>
   2b82d:	48 89 c7             	mov    rdi,rax
   2b830:	b8 00 00 00 00       	mov    eax,0x0
   2b835:	e8 a6 81 fd ff       	call   39e0 <fprintf@plt>
   2b83a:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2b841:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b847:	48 63 d8             	movsxd rbx,eax
   2b84a:	48 8d 3d cf 4b 1c 00 	lea    rdi,[rip+0x1c4bcf]        # 1f0420 <Hexaloops>
   2b851:	e8 ca 7e fd ff       	call   3720 <strlen@plt>
   2b856:	48 ba 8f e3 38 8e e3 38 8e e3 	movabs rdx,0xe38e38e38e38e38f
   2b860:	48 f7 e2             	mul    rdx
   2b863:	48 89 d0             	mov    rax,rdx
   2b866:	48 c1 e8 03          	shr    rax,0x3
   2b86a:	48 39 c3             	cmp    rbx,rax
   2b86d:	0f 82 5f ff ff ff    	jb     2b7d2 <save_parameter_file+0x19f2>
   2b873:	bf 20 00 00 00       	mov    edi,0x20
   2b878:	e8 2f 02 00 00       	call   2baac <settype>
   2b87d:	48 89 c2             	mov    rdx,rax
   2b880:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b884:	48 8d 35 e5 a7 1b 00 	lea    rsi,[rip+0x1ba7e5]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b88b:	48 89 c7             	mov    rdi,rax
   2b88e:	b8 00 00 00 00       	mov    eax,0x0
   2b893:	e8 48 81 fd ff       	call   39e0 <fprintf@plt>
   2b898:	c7 85 d4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x0
   2b8a2:	eb 6f                	jmp    2b913 <save_parameter_file+0x1b33>
   2b8a4:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b8aa:	48 98                	cdqe   
   2b8ac:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b8b4:	48 8d 05 c5 4a 1c 00 	lea    rax,[rip+0x1c4ac5]        # 1f0380 <TetraloopdH>
   2b8bb:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2b8be:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b8c4:	48 98                	cdqe   
   2b8c6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b8ce:	48 8d 05 0b 4a 1c 00 	lea    rax,[rip+0x1c4a0b]        # 1f02e0 <Tetraloop37>
   2b8d5:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2b8d8:	8b 95 d4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x12c]
   2b8de:	89 d0                	mov    eax,edx
   2b8e0:	c1 e0 03             	shl    eax,0x3
   2b8e3:	29 d0                	sub    eax,edx
   2b8e5:	48 98                	cdqe   
   2b8e7:	48 8d 15 d2 48 1c 00 	lea    rdx,[rip+0x1c48d2]        # 1f01c0 <Tetraloops>
   2b8ee:	48 01 c2             	add    rdx,rax
   2b8f1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b8f5:	41 89 f0             	mov    r8d,esi
   2b8f8:	48 8d 35 7f a9 1b 00 	lea    rsi,[rip+0x1ba97f]        # 1e627e <parameter_set_rna_turner2004+0x5d8de>
   2b8ff:	48 89 c7             	mov    rdi,rax
   2b902:	b8 00 00 00 00       	mov    eax,0x0
   2b907:	e8 d4 80 fd ff       	call   39e0 <fprintf@plt>
   2b90c:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2b913:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b919:	48 63 d8             	movsxd rbx,eax
   2b91c:	48 8d 3d 9d 48 1c 00 	lea    rdi,[rip+0x1c489d]        # 1f01c0 <Tetraloops>
   2b923:	e8 f8 7d fd ff       	call   3720 <strlen@plt>
   2b928:	48 89 c1             	mov    rcx,rax
   2b92b:	48 ba 93 24 49 92 24 49 92 24 	movabs rdx,0x2492492492492493
   2b935:	48 89 c8             	mov    rax,rcx
   2b938:	48 f7 e2             	mul    rdx
   2b93b:	48 89 c8             	mov    rax,rcx
   2b93e:	48 29 d0             	sub    rax,rdx
   2b941:	48 d1 e8             	shr    rax,1
   2b944:	48 01 d0             	add    rax,rdx
   2b947:	48 c1 e8 02          	shr    rax,0x2
   2b94b:	48 39 c3             	cmp    rbx,rax
   2b94e:	0f 82 50 ff ff ff    	jb     2b8a4 <save_parameter_file+0x1ac4>
   2b954:	bf 21 00 00 00       	mov    edi,0x21
   2b959:	e8 4e 01 00 00       	call   2baac <settype>
   2b95e:	48 89 c2             	mov    rdx,rax
   2b961:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b965:	48 8d 35 04 a7 1b 00 	lea    rsi,[rip+0x1ba704]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2b96c:	48 89 c7             	mov    rdi,rax
   2b96f:	b8 00 00 00 00       	mov    eax,0x0
   2b974:	e8 67 80 fd ff       	call   39e0 <fprintf@plt>
   2b979:	c7 85 d4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x0
   2b983:	eb 70                	jmp    2b9f5 <save_parameter_file+0x1c15>
   2b985:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b98b:	48 98                	cdqe   
   2b98d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b995:	48 8d 05 84 47 1c 00 	lea    rax,[rip+0x1c4784]        # 1f0120 <TriloopdH>
   2b99c:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2b99f:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b9a5:	48 98                	cdqe   
   2b9a7:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b9af:	48 8d 05 ca 46 1c 00 	lea    rax,[rip+0x1c46ca]        # 1f0080 <Triloop37>
   2b9b6:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2b9b9:	8b 95 d4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x12c]
   2b9bf:	89 d0                	mov    eax,edx
   2b9c1:	01 c0                	add    eax,eax
   2b9c3:	01 d0                	add    eax,edx
   2b9c5:	01 c0                	add    eax,eax
   2b9c7:	48 98                	cdqe   
   2b9c9:	48 8d 15 b0 45 1c 00 	lea    rdx,[rip+0x1c45b0]        # 1eff80 <Triloops>
   2b9d0:	48 01 c2             	add    rdx,rax
   2b9d3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2b9d7:	41 89 f0             	mov    r8d,esi
   2b9da:	48 8d 35 ac a8 1b 00 	lea    rsi,[rip+0x1ba8ac]        # 1e628d <parameter_set_rna_turner2004+0x5d8ed>
   2b9e1:	48 89 c7             	mov    rdi,rax
   2b9e4:	b8 00 00 00 00       	mov    eax,0x0
   2b9e9:	e8 f2 7f fd ff       	call   39e0 <fprintf@plt>
   2b9ee:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2b9f5:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2b9fb:	48 63 d8             	movsxd rbx,eax
   2b9fe:	48 8d 3d 7b 45 1c 00 	lea    rdi,[rip+0x1c457b]        # 1eff80 <Triloops>
   2ba05:	e8 16 7d fd ff       	call   3720 <strlen@plt>
   2ba0a:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   2ba14:	48 f7 e2             	mul    rdx
   2ba17:	48 89 d0             	mov    rax,rdx
   2ba1a:	48 c1 e8 02          	shr    rax,0x2
   2ba1e:	48 39 c3             	cmp    rbx,rax
   2ba21:	0f 82 5e ff ff ff    	jb     2b985 <save_parameter_file+0x1ba5>
   2ba27:	bf 00 00 00 00       	mov    edi,0x0
   2ba2c:	e8 7b 00 00 00       	call   2baac <settype>
   2ba31:	48 89 c2             	mov    rdx,rax
   2ba34:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ba38:	48 8d 35 31 a6 1b 00 	lea    rsi,[rip+0x1ba631]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ba3f:	48 89 c7             	mov    rdi,rax
   2ba42:	b8 00 00 00 00       	mov    eax,0x0
   2ba47:	e8 94 7f fd ff       	call   39e0 <fprintf@plt>
   2ba4c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ba50:	48 89 c7             	mov    rdi,rax
   2ba53:	e8 48 7e fd ff       	call   38a0 <fclose@plt>
   2ba58:	b8 01 00 00 00       	mov    eax,0x1
   2ba5d:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   2ba61:	64 48 33 1c 25 28 00 00 00 	xor    rbx,QWORD PTR fs:0x28
   2ba6a:	74 05                	je     2ba71 <save_parameter_file+0x1c91>
   2ba6c:	e8 7f 7e fd ff       	call   38f0 <__stack_chk_fail@plt>
   2ba71:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ba75:	c9                   	leave  
   2ba76:	c3                   	ret    

000000000002ba77 <last_parameter_file>:
   2ba77:	f3 0f 1e fa          	endbr64 
   2ba7b:	55                   	push   rbp
   2ba7c:	48 89 e5             	mov    rbp,rsp
   2ba7f:	48 8b 05 5a 15 2c 00 	mov    rax,QWORD PTR [rip+0x2c155a]        # 2ecfe0 <last_param_file>
   2ba86:	5d                   	pop    rbp
   2ba87:	c3                   	ret    

000000000002ba88 <read_parameter_file>:
   2ba88:	f3 0f 1e fa          	endbr64 
   2ba8c:	55                   	push   rbp
   2ba8d:	48 89 e5             	mov    rbp,rsp
   2ba90:	48 83 ec 10          	sub    rsp,0x10
   2ba94:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ba98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ba9c:	be 00 00 00 00       	mov    esi,0x0
   2baa1:	48 89 c7             	mov    rdi,rax
   2baa4:	e8 e8 a9 ff ff       	call   26491 <vrna_params_load>
   2baa9:	90                   	nop
   2baaa:	c9                   	leave  
   2baab:	c3                   	ret    

000000000002baac <settype>:
   2baac:	f3 0f 1e fa          	endbr64 
   2bab0:	55                   	push   rbp
   2bab1:	48 89 e5             	mov    rbp,rsp
   2bab4:	48 83 ec 10          	sub    rsp,0x10
   2bab8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2babb:	83 7d fc 24          	cmp    DWORD PTR [rbp-0x4],0x24
   2babf:	0f 87 bc 01 00 00    	ja     2bc81 <settype+0x1d5>
   2bac5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2bac8:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bad0:	48 8d 05 19 aa 1b 00 	lea    rax,[rip+0x1baa19]        # 1e64f0 <parameter_set_rna_turner2004+0x5db50>
   2bad7:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2bada:	48 98                	cdqe   
   2badc:	48 8d 15 0d aa 1b 00 	lea    rdx,[rip+0x1baa0d]        # 1e64f0 <parameter_set_rna_turner2004+0x5db50>
   2bae3:	48 01 d0             	add    rax,rdx
   2bae6:	3e ff e0             	notrack jmp rax
   2bae9:	48 8d 05 ac a7 1b 00 	lea    rax,[rip+0x1ba7ac]        # 1e629c <parameter_set_rna_turner2004+0x5d8fc>
   2baf0:	e9 a4 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2baf5:	48 8d 05 a6 a7 1b 00 	lea    rax,[rip+0x1ba7a6]        # 1e62a2 <parameter_set_rna_turner2004+0x5d902>
   2bafc:	e9 98 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb01:	48 8d 05 ab a7 1b 00 	lea    rax,[rip+0x1ba7ab]        # 1e62b3 <parameter_set_rna_turner2004+0x5d913>
   2bb08:	e9 8c 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb0d:	48 8d 05 a7 a7 1b 00 	lea    rax,[rip+0x1ba7a7]        # 1e62bb <parameter_set_rna_turner2004+0x5d91b>
   2bb14:	e9 80 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb19:	48 8d 05 ae a7 1b 00 	lea    rax,[rip+0x1ba7ae]        # 1e62ce <parameter_set_rna_turner2004+0x5d92e>
   2bb20:	e9 74 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb25:	48 8d 05 a8 a7 1b 00 	lea    rax,[rip+0x1ba7a8]        # 1e62d4 <parameter_set_rna_turner2004+0x5d934>
   2bb2c:	e9 68 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb31:	48 8d 05 ad a7 1b 00 	lea    rax,[rip+0x1ba7ad]        # 1e62e5 <parameter_set_rna_turner2004+0x5d945>
   2bb38:	e9 5c 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb3d:	48 8d 05 aa a7 1b 00 	lea    rax,[rip+0x1ba7aa]        # 1e62ee <parameter_set_rna_turner2004+0x5d94e>
   2bb44:	e9 50 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb49:	48 8d 05 b2 a7 1b 00 	lea    rax,[rip+0x1ba7b2]        # 1e6302 <parameter_set_rna_turner2004+0x5d962>
   2bb50:	e9 44 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb55:	48 8d 05 b8 a7 1b 00 	lea    rax,[rip+0x1ba7b8]        # 1e6314 <parameter_set_rna_turner2004+0x5d974>
   2bb5c:	e9 38 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb61:	48 8d 05 c9 a7 1b 00 	lea    rax,[rip+0x1ba7c9]        # 1e6331 <parameter_set_rna_turner2004+0x5d991>
   2bb68:	e9 2c 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb6d:	48 8d 05 ce a7 1b 00 	lea    rax,[rip+0x1ba7ce]        # 1e6342 <parameter_set_rna_turner2004+0x5d9a2>
   2bb74:	e9 20 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb79:	48 8d 05 de a7 1b 00 	lea    rax,[rip+0x1ba7de]        # 1e635e <parameter_set_rna_turner2004+0x5d9be>
   2bb80:	e9 14 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb85:	48 8d 05 e4 a7 1b 00 	lea    rax,[rip+0x1ba7e4]        # 1e6370 <parameter_set_rna_turner2004+0x5d9d0>
   2bb8c:	e9 08 01 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb91:	48 8d 05 f5 a7 1b 00 	lea    rax,[rip+0x1ba7f5]        # 1e638d <parameter_set_rna_turner2004+0x5d9ed>
   2bb98:	e9 fc 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bb9d:	48 8d 05 04 a8 1b 00 	lea    rax,[rip+0x1ba804]        # 1e63a8 <parameter_set_rna_turner2004+0x5da08>
   2bba4:	e9 f0 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bba9:	48 8d 05 18 a8 1b 00 	lea    rax,[rip+0x1ba818]        # 1e63c8 <parameter_set_rna_turner2004+0x5da28>
   2bbb0:	e9 e4 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbb5:	48 8d 05 24 a8 1b 00 	lea    rax,[rip+0x1ba824]        # 1e63e0 <parameter_set_rna_turner2004+0x5da40>
   2bbbc:	e9 d8 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbc1:	48 8d 05 38 a8 1b 00 	lea    rax,[rip+0x1ba838]        # 1e6400 <parameter_set_rna_turner2004+0x5da60>
   2bbc8:	e9 cc 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbcd:	48 8d 05 3b a8 1b 00 	lea    rax,[rip+0x1ba83b]        # 1e640f <parameter_set_rna_turner2004+0x5da6f>
   2bbd4:	e9 c0 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbd9:	48 8d 05 49 a8 1b 00 	lea    rax,[rip+0x1ba849]        # 1e6429 <parameter_set_rna_turner2004+0x5da89>
   2bbe0:	e9 b4 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbe5:	48 8d 05 45 a8 1b 00 	lea    rax,[rip+0x1ba845]        # 1e6431 <parameter_set_rna_turner2004+0x5da91>
   2bbec:	e9 a8 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbf1:	48 8d 05 4c a8 1b 00 	lea    rax,[rip+0x1ba84c]        # 1e6444 <parameter_set_rna_turner2004+0x5daa4>
   2bbf8:	e9 9c 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bbfd:	48 8d 05 48 a8 1b 00 	lea    rax,[rip+0x1ba848]        # 1e644c <parameter_set_rna_turner2004+0x5daac>
   2bc04:	e9 90 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bc09:	48 8d 05 4f a8 1b 00 	lea    rax,[rip+0x1ba84f]        # 1e645f <parameter_set_rna_turner2004+0x5dabf>
   2bc10:	e9 84 00 00 00       	jmp    2bc99 <settype+0x1ed>
   2bc15:	48 8d 05 49 a8 1b 00 	lea    rax,[rip+0x1ba849]        # 1e6465 <parameter_set_rna_turner2004+0x5dac5>
   2bc1c:	eb 7b                	jmp    2bc99 <settype+0x1ed>
   2bc1e:	48 8d 05 51 a8 1b 00 	lea    rax,[rip+0x1ba851]        # 1e6476 <parameter_set_rna_turner2004+0x5dad6>
   2bc25:	eb 72                	jmp    2bc99 <settype+0x1ed>
   2bc27:	48 8d 05 4e a8 1b 00 	lea    rax,[rip+0x1ba84e]        # 1e647c <parameter_set_rna_turner2004+0x5dadc>
   2bc2e:	eb 69                	jmp    2bc99 <settype+0x1ed>
   2bc30:	48 8d 05 56 a8 1b 00 	lea    rax,[rip+0x1ba856]        # 1e648d <parameter_set_rna_turner2004+0x5daed>
   2bc37:	eb 60                	jmp    2bc99 <settype+0x1ed>
   2bc39:	48 8d 05 53 a8 1b 00 	lea    rax,[rip+0x1ba853]        # 1e6493 <parameter_set_rna_turner2004+0x5daf3>
   2bc40:	eb 57                	jmp    2bc99 <settype+0x1ed>
   2bc42:	48 8d 05 5b a8 1b 00 	lea    rax,[rip+0x1ba85b]        # 1e64a4 <parameter_set_rna_turner2004+0x5db04>
   2bc49:	eb 4e                	jmp    2bc99 <settype+0x1ed>
   2bc4b:	48 8d 05 5c a8 1b 00 	lea    rax,[rip+0x1ba85c]        # 1e64ae <parameter_set_rna_turner2004+0x5db0e>
   2bc52:	eb 45                	jmp    2bc99 <settype+0x1ed>
   2bc54:	48 8d 05 59 a8 1b 00 	lea    rax,[rip+0x1ba859]        # 1e64b4 <parameter_set_rna_turner2004+0x5db14>
   2bc5b:	eb 3c                	jmp    2bc99 <settype+0x1ed>
   2bc5d:	48 8d 05 59 a8 1b 00 	lea    rax,[rip+0x1ba859]        # 1e64bd <parameter_set_rna_turner2004+0x5db1d>
   2bc64:	eb 33                	jmp    2bc99 <settype+0x1ed>
   2bc66:	48 8d 05 5b a8 1b 00 	lea    rax,[rip+0x1ba85b]        # 1e64c8 <parameter_set_rna_turner2004+0x5db28>
   2bc6d:	eb 2a                	jmp    2bc99 <settype+0x1ed>
   2bc6f:	48 8d 05 5c a8 1b 00 	lea    rax,[rip+0x1ba85c]        # 1e64d2 <parameter_set_rna_turner2004+0x5db32>
   2bc76:	eb 21                	jmp    2bc99 <settype+0x1ed>
   2bc78:	48 8d 05 57 a8 1b 00 	lea    rax,[rip+0x1ba857]        # 1e64d6 <parameter_set_rna_turner2004+0x5db36>
   2bc7f:	eb 18                	jmp    2bc99 <settype+0x1ed>
   2bc81:	48 8d 3d 53 a8 1b 00 	lea    rdi,[rip+0x1ba853]        # 1e64db <parameter_set_rna_turner2004+0x5db3b>
   2bc88:	b8 00 00 00 00       	mov    eax,0x0
   2bc8d:	e8 a8 31 00 00       	call   2ee3a <vrna_message_error>
   2bc92:	48 8d 05 56 a8 1b 00 	lea    rax,[rip+0x1ba856]        # 1e64ef <parameter_set_rna_turner2004+0x5db4f>
   2bc99:	c9                   	leave  
   2bc9a:	c3                   	ret    

000000000002bc9b <gettype>:
   2bc9b:	f3 0f 1e fa          	endbr64 
   2bc9f:	55                   	push   rbp
   2bca0:	48 89 e5             	mov    rbp,rsp
   2bca3:	48 83 ec 10          	sub    rsp,0x10
   2bca7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bcab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bcaf:	48 8d 35 e6 a5 1b 00 	lea    rsi,[rip+0x1ba5e6]        # 1e629c <parameter_set_rna_turner2004+0x5d8fc>
   2bcb6:	48 89 c7             	mov    rdi,rax
   2bcb9:	e8 02 7d fd ff       	call   39c0 <strcmp@plt>
   2bcbe:	85 c0                	test   eax,eax
   2bcc0:	75 0a                	jne    2bccc <gettype+0x31>
   2bcc2:	b8 01 00 00 00       	mov    eax,0x1
   2bcc7:	e9 9a 04 00 00       	jmp    2c166 <gettype+0x4cb>
   2bccc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bcd0:	48 8d 35 cb a5 1b 00 	lea    rsi,[rip+0x1ba5cb]        # 1e62a2 <parameter_set_rna_turner2004+0x5d902>
   2bcd7:	48 89 c7             	mov    rdi,rax
   2bcda:	e8 e1 7c fd ff       	call   39c0 <strcmp@plt>
   2bcdf:	85 c0                	test   eax,eax
   2bce1:	75 0a                	jne    2bced <gettype+0x52>
   2bce3:	b8 02 00 00 00       	mov    eax,0x2
   2bce8:	e9 79 04 00 00       	jmp    2c166 <gettype+0x4cb>
   2bced:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bcf1:	48 8d 35 bb a5 1b 00 	lea    rsi,[rip+0x1ba5bb]        # 1e62b3 <parameter_set_rna_turner2004+0x5d913>
   2bcf8:	48 89 c7             	mov    rdi,rax
   2bcfb:	e8 c0 7c fd ff       	call   39c0 <strcmp@plt>
   2bd00:	85 c0                	test   eax,eax
   2bd02:	75 0a                	jne    2bd0e <gettype+0x73>
   2bd04:	b8 03 00 00 00       	mov    eax,0x3
   2bd09:	e9 58 04 00 00       	jmp    2c166 <gettype+0x4cb>
   2bd0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd12:	48 8d 35 a2 a5 1b 00 	lea    rsi,[rip+0x1ba5a2]        # 1e62bb <parameter_set_rna_turner2004+0x5d91b>
   2bd19:	48 89 c7             	mov    rdi,rax
   2bd1c:	e8 9f 7c fd ff       	call   39c0 <strcmp@plt>
   2bd21:	85 c0                	test   eax,eax
   2bd23:	75 0a                	jne    2bd2f <gettype+0x94>
   2bd25:	b8 04 00 00 00       	mov    eax,0x4
   2bd2a:	e9 37 04 00 00       	jmp    2c166 <gettype+0x4cb>
   2bd2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd33:	48 8d 35 94 a5 1b 00 	lea    rsi,[rip+0x1ba594]        # 1e62ce <parameter_set_rna_turner2004+0x5d92e>
   2bd3a:	48 89 c7             	mov    rdi,rax
   2bd3d:	e8 7e 7c fd ff       	call   39c0 <strcmp@plt>
   2bd42:	85 c0                	test   eax,eax
   2bd44:	75 0a                	jne    2bd50 <gettype+0xb5>
   2bd46:	b8 05 00 00 00       	mov    eax,0x5
   2bd4b:	e9 16 04 00 00       	jmp    2c166 <gettype+0x4cb>
   2bd50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd54:	48 8d 35 79 a5 1b 00 	lea    rsi,[rip+0x1ba579]        # 1e62d4 <parameter_set_rna_turner2004+0x5d934>
   2bd5b:	48 89 c7             	mov    rdi,rax
   2bd5e:	e8 5d 7c fd ff       	call   39c0 <strcmp@plt>
   2bd63:	85 c0                	test   eax,eax
   2bd65:	75 0a                	jne    2bd71 <gettype+0xd6>
   2bd67:	b8 06 00 00 00       	mov    eax,0x6
   2bd6c:	e9 f5 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2bd71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd75:	48 8d 35 69 a5 1b 00 	lea    rsi,[rip+0x1ba569]        # 1e62e5 <parameter_set_rna_turner2004+0x5d945>
   2bd7c:	48 89 c7             	mov    rdi,rax
   2bd7f:	e8 3c 7c fd ff       	call   39c0 <strcmp@plt>
   2bd84:	85 c0                	test   eax,eax
   2bd86:	75 0a                	jne    2bd92 <gettype+0xf7>
   2bd88:	b8 07 00 00 00       	mov    eax,0x7
   2bd8d:	e9 d4 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2bd92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd96:	48 8d 35 51 a5 1b 00 	lea    rsi,[rip+0x1ba551]        # 1e62ee <parameter_set_rna_turner2004+0x5d94e>
   2bd9d:	48 89 c7             	mov    rdi,rax
   2bda0:	e8 1b 7c fd ff       	call   39c0 <strcmp@plt>
   2bda5:	85 c0                	test   eax,eax
   2bda7:	75 0a                	jne    2bdb3 <gettype+0x118>
   2bda9:	b8 08 00 00 00       	mov    eax,0x8
   2bdae:	e9 b3 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2bdb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bdb7:	48 8d 35 44 a5 1b 00 	lea    rsi,[rip+0x1ba544]        # 1e6302 <parameter_set_rna_turner2004+0x5d962>
   2bdbe:	48 89 c7             	mov    rdi,rax
   2bdc1:	e8 fa 7b fd ff       	call   39c0 <strcmp@plt>
   2bdc6:	85 c0                	test   eax,eax
   2bdc8:	75 0a                	jne    2bdd4 <gettype+0x139>
   2bdca:	b8 13 00 00 00       	mov    eax,0x13
   2bdcf:	e9 92 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2bdd4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bdd8:	48 8d 35 35 a5 1b 00 	lea    rsi,[rip+0x1ba535]        # 1e6314 <parameter_set_rna_turner2004+0x5d974>
   2bddf:	48 89 c7             	mov    rdi,rax
   2bde2:	e8 d9 7b fd ff       	call   39c0 <strcmp@plt>
   2bde7:	85 c0                	test   eax,eax
   2bde9:	75 0a                	jne    2bdf5 <gettype+0x15a>
   2bdeb:	b8 14 00 00 00       	mov    eax,0x14
   2bdf0:	e9 71 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2bdf5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bdf9:	48 8d 35 31 a5 1b 00 	lea    rsi,[rip+0x1ba531]        # 1e6331 <parameter_set_rna_turner2004+0x5d991>
   2be00:	48 89 c7             	mov    rdi,rax
   2be03:	e8 b8 7b fd ff       	call   39c0 <strcmp@plt>
   2be08:	85 c0                	test   eax,eax
   2be0a:	75 0a                	jne    2be16 <gettype+0x17b>
   2be0c:	b8 09 00 00 00       	mov    eax,0x9
   2be11:	e9 50 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2be16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be1a:	48 8d 35 21 a5 1b 00 	lea    rsi,[rip+0x1ba521]        # 1e6342 <parameter_set_rna_turner2004+0x5d9a2>
   2be21:	48 89 c7             	mov    rdi,rax
   2be24:	e8 97 7b fd ff       	call   39c0 <strcmp@plt>
   2be29:	85 c0                	test   eax,eax
   2be2b:	75 0a                	jne    2be37 <gettype+0x19c>
   2be2d:	b8 0a 00 00 00       	mov    eax,0xa
   2be32:	e9 2f 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2be37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be3b:	48 8d 35 1c a5 1b 00 	lea    rsi,[rip+0x1ba51c]        # 1e635e <parameter_set_rna_turner2004+0x5d9be>
   2be42:	48 89 c7             	mov    rdi,rax
   2be45:	e8 76 7b fd ff       	call   39c0 <strcmp@plt>
   2be4a:	85 c0                	test   eax,eax
   2be4c:	75 0a                	jne    2be58 <gettype+0x1bd>
   2be4e:	b8 0b 00 00 00       	mov    eax,0xb
   2be53:	e9 0e 03 00 00       	jmp    2c166 <gettype+0x4cb>
   2be58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be5c:	48 8d 35 0d a5 1b 00 	lea    rsi,[rip+0x1ba50d]        # 1e6370 <parameter_set_rna_turner2004+0x5d9d0>
   2be63:	48 89 c7             	mov    rdi,rax
   2be66:	e8 55 7b fd ff       	call   39c0 <strcmp@plt>
   2be6b:	85 c0                	test   eax,eax
   2be6d:	75 0a                	jne    2be79 <gettype+0x1de>
   2be6f:	b8 0c 00 00 00       	mov    eax,0xc
   2be74:	e9 ed 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2be79:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be7d:	48 8d 35 09 a5 1b 00 	lea    rsi,[rip+0x1ba509]        # 1e638d <parameter_set_rna_turner2004+0x5d9ed>
   2be84:	48 89 c7             	mov    rdi,rax
   2be87:	e8 34 7b fd ff       	call   39c0 <strcmp@plt>
   2be8c:	85 c0                	test   eax,eax
   2be8e:	75 0a                	jne    2be9a <gettype+0x1ff>
   2be90:	b8 0d 00 00 00       	mov    eax,0xd
   2be95:	e9 cc 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2be9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be9e:	48 8d 35 03 a5 1b 00 	lea    rsi,[rip+0x1ba503]        # 1e63a8 <parameter_set_rna_turner2004+0x5da08>
   2bea5:	48 89 c7             	mov    rdi,rax
   2bea8:	e8 13 7b fd ff       	call   39c0 <strcmp@plt>
   2bead:	85 c0                	test   eax,eax
   2beaf:	75 0a                	jne    2bebb <gettype+0x220>
   2beb1:	b8 0e 00 00 00       	mov    eax,0xe
   2beb6:	e9 ab 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2bebb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bebf:	48 8d 35 02 a5 1b 00 	lea    rsi,[rip+0x1ba502]        # 1e63c8 <parameter_set_rna_turner2004+0x5da28>
   2bec6:	48 89 c7             	mov    rdi,rax
   2bec9:	e8 f2 7a fd ff       	call   39c0 <strcmp@plt>
   2bece:	85 c0                	test   eax,eax
   2bed0:	75 0a                	jne    2bedc <gettype+0x241>
   2bed2:	b8 0f 00 00 00       	mov    eax,0xf
   2bed7:	e9 8a 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2bedc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bee0:	48 8d 35 f9 a4 1b 00 	lea    rsi,[rip+0x1ba4f9]        # 1e63e0 <parameter_set_rna_turner2004+0x5da40>
   2bee7:	48 89 c7             	mov    rdi,rax
   2beea:	e8 d1 7a fd ff       	call   39c0 <strcmp@plt>
   2beef:	85 c0                	test   eax,eax
   2bef1:	75 0a                	jne    2befd <gettype+0x262>
   2bef3:	b8 10 00 00 00       	mov    eax,0x10
   2bef8:	e9 69 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2befd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf01:	48 8d 35 f8 a4 1b 00 	lea    rsi,[rip+0x1ba4f8]        # 1e6400 <parameter_set_rna_turner2004+0x5da60>
   2bf08:	48 89 c7             	mov    rdi,rax
   2bf0b:	e8 b0 7a fd ff       	call   39c0 <strcmp@plt>
   2bf10:	85 c0                	test   eax,eax
   2bf12:	75 0a                	jne    2bf1e <gettype+0x283>
   2bf14:	b8 11 00 00 00       	mov    eax,0x11
   2bf19:	e9 48 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2bf1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf22:	48 8d 35 e6 a4 1b 00 	lea    rsi,[rip+0x1ba4e6]        # 1e640f <parameter_set_rna_turner2004+0x5da6f>
   2bf29:	48 89 c7             	mov    rdi,rax
   2bf2c:	e8 8f 7a fd ff       	call   39c0 <strcmp@plt>
   2bf31:	85 c0                	test   eax,eax
   2bf33:	75 0a                	jne    2bf3f <gettype+0x2a4>
   2bf35:	b8 12 00 00 00       	mov    eax,0x12
   2bf3a:	e9 27 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2bf3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf43:	48 8d 35 15 a5 1b 00 	lea    rsi,[rip+0x1ba515]        # 1e645f <parameter_set_rna_turner2004+0x5dabf>
   2bf4a:	48 89 c7             	mov    rdi,rax
   2bf4d:	e8 6e 7a fd ff       	call   39c0 <strcmp@plt>
   2bf52:	85 c0                	test   eax,eax
   2bf54:	75 0a                	jne    2bf60 <gettype+0x2c5>
   2bf56:	b8 19 00 00 00       	mov    eax,0x19
   2bf5b:	e9 06 02 00 00       	jmp    2c166 <gettype+0x4cb>
   2bf60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf64:	48 8d 35 fa a4 1b 00 	lea    rsi,[rip+0x1ba4fa]        # 1e6465 <parameter_set_rna_turner2004+0x5dac5>
   2bf6b:	48 89 c7             	mov    rdi,rax
   2bf6e:	e8 4d 7a fd ff       	call   39c0 <strcmp@plt>
   2bf73:	85 c0                	test   eax,eax
   2bf75:	75 0a                	jne    2bf81 <gettype+0x2e6>
   2bf77:	b8 1a 00 00 00       	mov    eax,0x1a
   2bf7c:	e9 e5 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2bf81:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf85:	48 8d 35 ea a4 1b 00 	lea    rsi,[rip+0x1ba4ea]        # 1e6476 <parameter_set_rna_turner2004+0x5dad6>
   2bf8c:	48 89 c7             	mov    rdi,rax
   2bf8f:	e8 2c 7a fd ff       	call   39c0 <strcmp@plt>
   2bf94:	85 c0                	test   eax,eax
   2bf96:	75 0a                	jne    2bfa2 <gettype+0x307>
   2bf98:	b8 1b 00 00 00       	mov    eax,0x1b
   2bf9d:	e9 c4 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2bfa2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfa6:	48 8d 35 cf a4 1b 00 	lea    rsi,[rip+0x1ba4cf]        # 1e647c <parameter_set_rna_turner2004+0x5dadc>
   2bfad:	48 89 c7             	mov    rdi,rax
   2bfb0:	e8 0b 7a fd ff       	call   39c0 <strcmp@plt>
   2bfb5:	85 c0                	test   eax,eax
   2bfb7:	75 0a                	jne    2bfc3 <gettype+0x328>
   2bfb9:	b8 1c 00 00 00       	mov    eax,0x1c
   2bfbe:	e9 a3 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2bfc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfc7:	48 8d 35 bf a4 1b 00 	lea    rsi,[rip+0x1ba4bf]        # 1e648d <parameter_set_rna_turner2004+0x5daed>
   2bfce:	48 89 c7             	mov    rdi,rax
   2bfd1:	e8 ea 79 fd ff       	call   39c0 <strcmp@plt>
   2bfd6:	85 c0                	test   eax,eax
   2bfd8:	75 0a                	jne    2bfe4 <gettype+0x349>
   2bfda:	b8 1d 00 00 00       	mov    eax,0x1d
   2bfdf:	e9 82 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2bfe4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfe8:	48 8d 35 a4 a4 1b 00 	lea    rsi,[rip+0x1ba4a4]        # 1e6493 <parameter_set_rna_turner2004+0x5daf3>
   2bfef:	48 89 c7             	mov    rdi,rax
   2bff2:	e8 c9 79 fd ff       	call   39c0 <strcmp@plt>
   2bff7:	85 c0                	test   eax,eax
   2bff9:	75 0a                	jne    2c005 <gettype+0x36a>
   2bffb:	b8 1e 00 00 00       	mov    eax,0x1e
   2c000:	e9 61 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2c005:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c009:	48 8d 35 19 a4 1b 00 	lea    rsi,[rip+0x1ba419]        # 1e6429 <parameter_set_rna_turner2004+0x5da89>
   2c010:	48 89 c7             	mov    rdi,rax
   2c013:	e8 a8 79 fd ff       	call   39c0 <strcmp@plt>
   2c018:	85 c0                	test   eax,eax
   2c01a:	75 0a                	jne    2c026 <gettype+0x38b>
   2c01c:	b8 15 00 00 00       	mov    eax,0x15
   2c021:	e9 40 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2c026:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c02a:	48 8d 35 00 a4 1b 00 	lea    rsi,[rip+0x1ba400]        # 1e6431 <parameter_set_rna_turner2004+0x5da91>
   2c031:	48 89 c7             	mov    rdi,rax
   2c034:	e8 87 79 fd ff       	call   39c0 <strcmp@plt>
   2c039:	85 c0                	test   eax,eax
   2c03b:	75 0a                	jne    2c047 <gettype+0x3ac>
   2c03d:	b8 16 00 00 00       	mov    eax,0x16
   2c042:	e9 1f 01 00 00       	jmp    2c166 <gettype+0x4cb>
   2c047:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c04b:	48 8d 35 f2 a3 1b 00 	lea    rsi,[rip+0x1ba3f2]        # 1e6444 <parameter_set_rna_turner2004+0x5daa4>
   2c052:	48 89 c7             	mov    rdi,rax
   2c055:	e8 66 79 fd ff       	call   39c0 <strcmp@plt>
   2c05a:	85 c0                	test   eax,eax
   2c05c:	75 0a                	jne    2c068 <gettype+0x3cd>
   2c05e:	b8 17 00 00 00       	mov    eax,0x17
   2c063:	e9 fe 00 00 00       	jmp    2c166 <gettype+0x4cb>
   2c068:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c06c:	48 8d 35 d9 a3 1b 00 	lea    rsi,[rip+0x1ba3d9]        # 1e644c <parameter_set_rna_turner2004+0x5daac>
   2c073:	48 89 c7             	mov    rdi,rax
   2c076:	e8 45 79 fd ff       	call   39c0 <strcmp@plt>
   2c07b:	85 c0                	test   eax,eax
   2c07d:	75 0a                	jne    2c089 <gettype+0x3ee>
   2c07f:	b8 18 00 00 00       	mov    eax,0x18
   2c084:	e9 dd 00 00 00       	jmp    2c166 <gettype+0x4cb>
   2c089:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c08d:	48 8d 35 10 a4 1b 00 	lea    rsi,[rip+0x1ba410]        # 1e64a4 <parameter_set_rna_turner2004+0x5db04>
   2c094:	48 89 c7             	mov    rdi,rax
   2c097:	e8 24 79 fd ff       	call   39c0 <strcmp@plt>
   2c09c:	85 c0                	test   eax,eax
   2c09e:	75 0a                	jne    2c0aa <gettype+0x40f>
   2c0a0:	b8 1f 00 00 00       	mov    eax,0x1f
   2c0a5:	e9 bc 00 00 00       	jmp    2c166 <gettype+0x4cb>
   2c0aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0ae:	48 8d 35 f9 a3 1b 00 	lea    rsi,[rip+0x1ba3f9]        # 1e64ae <parameter_set_rna_turner2004+0x5db0e>
   2c0b5:	48 89 c7             	mov    rdi,rax
   2c0b8:	e8 03 79 fd ff       	call   39c0 <strcmp@plt>
   2c0bd:	85 c0                	test   eax,eax
   2c0bf:	75 0a                	jne    2c0cb <gettype+0x430>
   2c0c1:	b8 23 00 00 00       	mov    eax,0x23
   2c0c6:	e9 9b 00 00 00       	jmp    2c166 <gettype+0x4cb>
   2c0cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0cf:	48 8d 35 de a3 1b 00 	lea    rsi,[rip+0x1ba3de]        # 1e64b4 <parameter_set_rna_turner2004+0x5db14>
   2c0d6:	48 89 c7             	mov    rdi,rax
   2c0d9:	e8 e2 78 fd ff       	call   39c0 <strcmp@plt>
   2c0de:	85 c0                	test   eax,eax
   2c0e0:	75 07                	jne    2c0e9 <gettype+0x44e>
   2c0e2:	b8 21 00 00 00       	mov    eax,0x21
   2c0e7:	eb 7d                	jmp    2c166 <gettype+0x4cb>
   2c0e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0ed:	48 8d 35 c9 a3 1b 00 	lea    rsi,[rip+0x1ba3c9]        # 1e64bd <parameter_set_rna_turner2004+0x5db1d>
   2c0f4:	48 89 c7             	mov    rdi,rax
   2c0f7:	e8 c4 78 fd ff       	call   39c0 <strcmp@plt>
   2c0fc:	85 c0                	test   eax,eax
   2c0fe:	75 07                	jne    2c107 <gettype+0x46c>
   2c100:	b8 20 00 00 00       	mov    eax,0x20
   2c105:	eb 5f                	jmp    2c166 <gettype+0x4cb>
   2c107:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c10b:	48 8d 35 b6 a3 1b 00 	lea    rsi,[rip+0x1ba3b6]        # 1e64c8 <parameter_set_rna_turner2004+0x5db28>
   2c112:	48 89 c7             	mov    rdi,rax
   2c115:	e8 a6 78 fd ff       	call   39c0 <strcmp@plt>
   2c11a:	85 c0                	test   eax,eax
   2c11c:	75 07                	jne    2c125 <gettype+0x48a>
   2c11e:	b8 22 00 00 00       	mov    eax,0x22
   2c123:	eb 41                	jmp    2c166 <gettype+0x4cb>
   2c125:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c129:	48 8d 35 a6 a3 1b 00 	lea    rsi,[rip+0x1ba3a6]        # 1e64d6 <parameter_set_rna_turner2004+0x5db36>
   2c130:	48 89 c7             	mov    rdi,rax
   2c133:	e8 88 78 fd ff       	call   39c0 <strcmp@plt>
   2c138:	85 c0                	test   eax,eax
   2c13a:	75 07                	jne    2c143 <gettype+0x4a8>
   2c13c:	b8 24 00 00 00       	mov    eax,0x24
   2c141:	eb 23                	jmp    2c166 <gettype+0x4cb>
   2c143:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c147:	48 8d 35 84 a3 1b 00 	lea    rsi,[rip+0x1ba384]        # 1e64d2 <parameter_set_rna_turner2004+0x5db32>
   2c14e:	48 89 c7             	mov    rdi,rax
   2c151:	e8 6a 78 fd ff       	call   39c0 <strcmp@plt>
   2c156:	85 c0                	test   eax,eax
   2c158:	75 07                	jne    2c161 <gettype+0x4c6>
   2c15a:	b8 00 00 00 00       	mov    eax,0x0
   2c15f:	eb 05                	jmp    2c166 <gettype+0x4cb>
   2c161:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2c166:	c9                   	leave  
   2c167:	c3                   	ret    

000000000002c168 <write_parameter_file>:
   2c168:	f3 0f 1e fa          	endbr64 
   2c16c:	55                   	push   rbp
   2c16d:	48 89 e5             	mov    rbp,rsp
   2c170:	53                   	push   rbx
   2c171:	48 81 ec 38 01 00 00 	sub    rsp,0x138
   2c178:	48 89 bd c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rdi
   2c17f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c188:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2c18c:	31 c0                	xor    eax,eax
   2c18e:	48 8d 05 8d 9e 1b 00 	lea    rax,[rip+0x1b9e8d]        # 1e6022 <parameter_set_rna_turner2004+0x5d682>
   2c195:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2c199:	48 8d 05 85 9e 1b 00 	lea    rax,[rip+0x1b9e85]        # 1e6025 <parameter_set_rna_turner2004+0x5d685>
   2c1a0:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   2c1a4:	48 8d 05 7d 9e 1b 00 	lea    rax,[rip+0x1b9e7d]        # 1e6028 <parameter_set_rna_turner2004+0x5d688>
   2c1ab:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2c1af:	48 8d 05 75 9e 1b 00 	lea    rax,[rip+0x1b9e75]        # 1e602b <parameter_set_rna_turner2004+0x5d68b>
   2c1b6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   2c1ba:	48 8d 05 6d 9e 1b 00 	lea    rax,[rip+0x1b9e6d]        # 1e602e <parameter_set_rna_turner2004+0x5d68e>
   2c1c1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2c1c5:	48 8d 05 65 9e 1b 00 	lea    rax,[rip+0x1b9e65]        # 1e6031 <parameter_set_rna_turner2004+0x5d691>
   2c1cc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2c1d0:	48 8d 05 5d 9e 1b 00 	lea    rax,[rip+0x1b9e5d]        # 1e6034 <parameter_set_rna_turner2004+0x5d694>
   2c1d7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2c1db:	48 8d 05 55 9e 1b 00 	lea    rax,[rip+0x1b9e55]        # 1e6037 <parameter_set_rna_turner2004+0x5d697>
   2c1e2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2c1e6:	c7 45 e2 40 41 43 47 	mov    DWORD PTR [rbp-0x1e],0x47434140
   2c1ed:	66 c7 45 e6 55 00    	mov    WORD PTR [rbp-0x1a],0x55
   2c1f3:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
   2c1fa:	48 8d 35 39 9e 1b 00 	lea    rsi,[rip+0x1b9e39]        # 1e603a <parameter_set_rna_turner2004+0x5d69a>
   2c201:	48 89 c7             	mov    rdi,rax
   2c204:	e8 27 77 fd ff       	call   3930 <fopen@plt>
   2c209:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2c20d:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   2c212:	75 25                	jne    2c239 <write_parameter_file+0xd1>
   2c214:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
   2c21b:	48 89 c6             	mov    rsi,rax
   2c21e:	48 8d 3d 17 9e 1b 00 	lea    rdi,[rip+0x1b9e17]        # 1e603c <parameter_set_rna_turner2004+0x5d69c>
   2c225:	b8 00 00 00 00       	mov    eax,0x0
   2c22a:	e8 0b 2c 00 00       	call   2ee3a <vrna_message_error>
   2c22f:	bf 01 00 00 00       	mov    edi,0x1
   2c234:	e8 17 77 fd ff       	call   3950 <exit@plt>
   2c239:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c23d:	48 89 c1             	mov    rcx,rax
   2c240:	ba 1f 00 00 00       	mov    edx,0x1f
   2c245:	be 01 00 00 00       	mov    esi,0x1
   2c24a:	48 8d 3d ff 9d 1b 00 	lea    rdi,[rip+0x1b9dff]        # 1e6050 <parameter_set_rna_turner2004+0x5d6b0>
   2c251:	e8 3a 79 fd ff       	call   3b90 <fwrite@plt>
   2c256:	bf 01 00 00 00       	mov    edi,0x1
   2c25b:	e8 4c f8 ff ff       	call   2baac <settype>
   2c260:	48 89 c2             	mov    rdx,rax
   2c263:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c267:	48 8d 35 02 9e 1b 00 	lea    rsi,[rip+0x1b9e02]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c26e:	48 89 c7             	mov    rdi,rax
   2c271:	b8 00 00 00 00       	mov    eax,0x0
   2c276:	e8 65 77 fd ff       	call   39e0 <fprintf@plt>
   2c27b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c27f:	48 89 c1             	mov    rcx,rax
   2c282:	ba 2e 00 00 00       	mov    edx,0x2e
   2c287:	be 01 00 00 00       	mov    esi,0x1
   2c28c:	48 8d 3d e5 9d 1b 00 	lea    rdi,[rip+0x1b9de5]        # 1e6078 <parameter_set_rna_turner2004+0x5d6d8>
   2c293:	e8 f8 78 fd ff       	call   3b90 <fwrite@plt>
   2c298:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2c2a2:	eb 3a                	jmp    2c2de <write_parameter_file+0x176>
   2c2a4:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2c2aa:	48 98                	cdqe   
   2c2ac:	48 c1 e0 05          	shl    rax,0x5
   2c2b0:	48 89 c2             	mov    rdx,rax
   2c2b3:	48 8d 05 c6 0f 1c 00 	lea    rax,[rip+0x1c0fc6]        # 1ed280 <stack37>
   2c2ba:	48 01 d0             	add    rax,rdx
   2c2bd:	48 8d 78 04          	lea    rdi,[rax+0x4]
   2c2c1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c2c5:	48 89 c1             	mov    rcx,rax
   2c2c8:	ba 07 00 00 00       	mov    edx,0x7
   2c2cd:	be 07 00 00 00       	mov    esi,0x7
   2c2d2:	e8 69 af ff ff       	call   27240 <display_array>
   2c2d7:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2c2de:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2c2e5:	7e bd                	jle    2c2a4 <write_parameter_file+0x13c>
   2c2e7:	bf 02 00 00 00       	mov    edi,0x2
   2c2ec:	e8 bb f7 ff ff       	call   2baac <settype>
   2c2f1:	48 89 c2             	mov    rdx,rax
   2c2f4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c2f8:	48 8d 35 71 9d 1b 00 	lea    rsi,[rip+0x1b9d71]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c2ff:	48 89 c7             	mov    rdi,rax
   2c302:	b8 00 00 00 00       	mov    eax,0x0
   2c307:	e8 d4 76 fd ff       	call   39e0 <fprintf@plt>
   2c30c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c310:	48 89 c1             	mov    rcx,rax
   2c313:	ba 2e 00 00 00       	mov    edx,0x2e
   2c318:	be 01 00 00 00       	mov    esi,0x1
   2c31d:	48 8d 3d 54 9d 1b 00 	lea    rdi,[rip+0x1b9d54]        # 1e6078 <parameter_set_rna_turner2004+0x5d6d8>
   2c324:	e8 67 78 fd ff       	call   3b90 <fwrite@plt>
   2c329:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2c333:	eb 3a                	jmp    2c36f <write_parameter_file+0x207>
   2c335:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2c33b:	48 98                	cdqe   
   2c33d:	48 c1 e0 05          	shl    rax,0x5
   2c341:	48 89 c2             	mov    rdx,rax
   2c344:	48 8d 05 35 10 1c 00 	lea    rax,[rip+0x1c1035]        # 1ed380 <stackdH>
   2c34b:	48 01 d0             	add    rax,rdx
   2c34e:	48 8d 78 04          	lea    rdi,[rax+0x4]
   2c352:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c356:	48 89 c1             	mov    rcx,rax
   2c359:	ba 07 00 00 00       	mov    edx,0x7
   2c35e:	be 07 00 00 00       	mov    esi,0x7
   2c363:	e8 d8 ae ff ff       	call   27240 <display_array>
   2c368:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2c36f:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2c376:	7e bd                	jle    2c335 <write_parameter_file+0x1cd>
   2c378:	bf 09 00 00 00       	mov    edi,0x9
   2c37d:	e8 2a f7 ff ff       	call   2baac <settype>
   2c382:	48 89 c2             	mov    rdx,rax
   2c385:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c389:	48 8d 35 e0 9c 1b 00 	lea    rsi,[rip+0x1b9ce0]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c390:	48 89 c7             	mov    rdi,rax
   2c393:	b8 00 00 00 00       	mov    eax,0x0
   2c398:	e8 43 76 fd ff       	call   39e0 <fprintf@plt>
   2c39d:	c7 85 dc fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x124],0x1
   2c3a7:	e9 86 00 00 00       	jmp    2c432 <write_parameter_file+0x2ca>
   2c3ac:	c7 85 d8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x128],0x0
   2c3b6:	eb 6a                	jmp    2c422 <write_parameter_file+0x2ba>
   2c3b8:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
   2c3be:	48 98                	cdqe   
   2c3c0:	48 89 c2             	mov    rdx,rax
   2c3c3:	48 c1 e2 02          	shl    rdx,0x2
   2c3c7:	48 01 c2             	add    rdx,rax
   2c3ca:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c3d2:	48 89 c2             	mov    rdx,rax
   2c3d5:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
   2c3db:	48 63 c8             	movsxd rcx,eax
   2c3de:	48 89 c8             	mov    rax,rcx
   2c3e1:	48 c1 e0 02          	shl    rax,0x2
   2c3e5:	48 01 c8             	add    rax,rcx
   2c3e8:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c3f0:	48 01 c8             	add    rax,rcx
   2c3f3:	48 c1 e0 02          	shl    rax,0x2
   2c3f7:	48 01 c2             	add    rdx,rax
   2c3fa:	48 8d 05 bf 19 1c 00 	lea    rax,[rip+0x1c19bf]        # 1eddc0 <mismatchH37>
   2c401:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c405:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c409:	48 89 c1             	mov    rcx,rax
   2c40c:	ba 05 00 00 00       	mov    edx,0x5
   2c411:	be 05 00 00 00       	mov    esi,0x5
   2c416:	e8 25 ae ff ff       	call   27240 <display_array>
   2c41b:	83 85 d8 fe ff ff 01 	add    DWORD PTR [rbp-0x128],0x1
   2c422:	83 bd d8 fe ff ff 04 	cmp    DWORD PTR [rbp-0x128],0x4
   2c429:	7e 8d                	jle    2c3b8 <write_parameter_file+0x250>
   2c42b:	83 85 dc fe ff ff 01 	add    DWORD PTR [rbp-0x124],0x1
   2c432:	83 bd dc fe ff ff 07 	cmp    DWORD PTR [rbp-0x124],0x7
   2c439:	0f 8e 6d ff ff ff    	jle    2c3ac <write_parameter_file+0x244>
   2c43f:	bf 0a 00 00 00       	mov    edi,0xa
   2c444:	e8 63 f6 ff ff       	call   2baac <settype>
   2c449:	48 89 c2             	mov    rdx,rax
   2c44c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c450:	48 8d 35 19 9c 1b 00 	lea    rsi,[rip+0x1b9c19]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c457:	48 89 c7             	mov    rdi,rax
   2c45a:	b8 00 00 00 00       	mov    eax,0x0
   2c45f:	e8 7c 75 fd ff       	call   39e0 <fprintf@plt>
   2c464:	c7 85 e4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x11c],0x1
   2c46e:	e9 86 00 00 00       	jmp    2c4f9 <write_parameter_file+0x391>
   2c473:	c7 85 e0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x120],0x0
   2c47d:	eb 6a                	jmp    2c4e9 <write_parameter_file+0x381>
   2c47f:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
   2c485:	48 98                	cdqe   
   2c487:	48 89 c2             	mov    rdx,rax
   2c48a:	48 c1 e2 02          	shl    rdx,0x2
   2c48e:	48 01 c2             	add    rdx,rax
   2c491:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c499:	48 89 c2             	mov    rdx,rax
   2c49c:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
   2c4a2:	48 63 c8             	movsxd rcx,eax
   2c4a5:	48 89 c8             	mov    rax,rcx
   2c4a8:	48 c1 e0 02          	shl    rax,0x2
   2c4ac:	48 01 c8             	add    rax,rcx
   2c4af:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c4b7:	48 01 c8             	add    rax,rcx
   2c4ba:	48 c1 e0 02          	shl    rax,0x2
   2c4be:	48 01 c2             	add    rdx,rax
   2c4c1:	48 8d 05 18 1c 1c 00 	lea    rax,[rip+0x1c1c18]        # 1ee0e0 <mismatchHdH>
   2c4c8:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c4cc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c4d0:	48 89 c1             	mov    rcx,rax
   2c4d3:	ba 05 00 00 00       	mov    edx,0x5
   2c4d8:	be 05 00 00 00       	mov    esi,0x5
   2c4dd:	e8 5e ad ff ff       	call   27240 <display_array>
   2c4e2:	83 85 e0 fe ff ff 01 	add    DWORD PTR [rbp-0x120],0x1
   2c4e9:	83 bd e0 fe ff ff 04 	cmp    DWORD PTR [rbp-0x120],0x4
   2c4f0:	7e 8d                	jle    2c47f <write_parameter_file+0x317>
   2c4f2:	83 85 e4 fe ff ff 01 	add    DWORD PTR [rbp-0x11c],0x1
   2c4f9:	83 bd e4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x11c],0x7
   2c500:	0f 8e 6d ff ff ff    	jle    2c473 <write_parameter_file+0x30b>
   2c506:	bf 0b 00 00 00       	mov    edi,0xb
   2c50b:	e8 9c f5 ff ff       	call   2baac <settype>
   2c510:	48 89 c2             	mov    rdx,rax
   2c513:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c517:	48 8d 35 52 9b 1b 00 	lea    rsi,[rip+0x1b9b52]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c51e:	48 89 c7             	mov    rdi,rax
   2c521:	b8 00 00 00 00       	mov    eax,0x0
   2c526:	e8 b5 74 fd ff       	call   39e0 <fprintf@plt>
   2c52b:	c7 85 ec fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x114],0x1
   2c535:	e9 86 00 00 00       	jmp    2c5c0 <write_parameter_file+0x458>
   2c53a:	c7 85 e8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x118],0x0
   2c544:	eb 6a                	jmp    2c5b0 <write_parameter_file+0x448>
   2c546:	8b 85 e8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x118]
   2c54c:	48 98                	cdqe   
   2c54e:	48 89 c2             	mov    rdx,rax
   2c551:	48 c1 e2 02          	shl    rdx,0x2
   2c555:	48 01 c2             	add    rdx,rax
   2c558:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c560:	48 89 c2             	mov    rdx,rax
   2c563:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
   2c569:	48 63 c8             	movsxd rcx,eax
   2c56c:	48 89 c8             	mov    rax,rcx
   2c56f:	48 c1 e0 02          	shl    rax,0x2
   2c573:	48 01 c8             	add    rax,rcx
   2c576:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c57e:	48 01 c8             	add    rax,rcx
   2c581:	48 c1 e0 02          	shl    rax,0x2
   2c585:	48 01 c2             	add    rdx,rax
   2c588:	48 8d 05 f1 11 1c 00 	lea    rax,[rip+0x1c11f1]        # 1ed780 <mismatchI37>
   2c58f:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c593:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c597:	48 89 c1             	mov    rcx,rax
   2c59a:	ba 05 00 00 00       	mov    edx,0x5
   2c59f:	be 05 00 00 00       	mov    esi,0x5
   2c5a4:	e8 97 ac ff ff       	call   27240 <display_array>
   2c5a9:	83 85 e8 fe ff ff 01 	add    DWORD PTR [rbp-0x118],0x1
   2c5b0:	83 bd e8 fe ff ff 04 	cmp    DWORD PTR [rbp-0x118],0x4
   2c5b7:	7e 8d                	jle    2c546 <write_parameter_file+0x3de>
   2c5b9:	83 85 ec fe ff ff 01 	add    DWORD PTR [rbp-0x114],0x1
   2c5c0:	83 bd ec fe ff ff 07 	cmp    DWORD PTR [rbp-0x114],0x7
   2c5c7:	0f 8e 6d ff ff ff    	jle    2c53a <write_parameter_file+0x3d2>
   2c5cd:	bf 0c 00 00 00       	mov    edi,0xc
   2c5d2:	e8 d5 f4 ff ff       	call   2baac <settype>
   2c5d7:	48 89 c2             	mov    rdx,rax
   2c5da:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c5de:	48 8d 35 8b 9a 1b 00 	lea    rsi,[rip+0x1b9a8b]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c5e5:	48 89 c7             	mov    rdi,rax
   2c5e8:	b8 00 00 00 00       	mov    eax,0x0
   2c5ed:	e8 ee 73 fd ff       	call   39e0 <fprintf@plt>
   2c5f2:	c7 85 f4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x10c],0x1
   2c5fc:	e9 86 00 00 00       	jmp    2c687 <write_parameter_file+0x51f>
   2c601:	c7 85 f0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x110],0x0
   2c60b:	eb 6a                	jmp    2c677 <write_parameter_file+0x50f>
   2c60d:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
   2c613:	48 98                	cdqe   
   2c615:	48 89 c2             	mov    rdx,rax
   2c618:	48 c1 e2 02          	shl    rdx,0x2
   2c61c:	48 01 c2             	add    rdx,rax
   2c61f:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c627:	48 89 c2             	mov    rdx,rax
   2c62a:	8b 85 f4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x10c]
   2c630:	48 63 c8             	movsxd rcx,eax
   2c633:	48 89 c8             	mov    rax,rcx
   2c636:	48 c1 e0 02          	shl    rax,0x2
   2c63a:	48 01 c8             	add    rax,rcx
   2c63d:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c645:	48 01 c8             	add    rax,rcx
   2c648:	48 c1 e0 02          	shl    rax,0x2
   2c64c:	48 01 c2             	add    rdx,rax
   2c64f:	48 8d 05 4a 14 1c 00 	lea    rax,[rip+0x1c144a]        # 1edaa0 <mismatchIdH>
   2c656:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c65a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c65e:	48 89 c1             	mov    rcx,rax
   2c661:	ba 05 00 00 00       	mov    edx,0x5
   2c666:	be 05 00 00 00       	mov    esi,0x5
   2c66b:	e8 d0 ab ff ff       	call   27240 <display_array>
   2c670:	83 85 f0 fe ff ff 01 	add    DWORD PTR [rbp-0x110],0x1
   2c677:	83 bd f0 fe ff ff 04 	cmp    DWORD PTR [rbp-0x110],0x4
   2c67e:	7e 8d                	jle    2c60d <write_parameter_file+0x4a5>
   2c680:	83 85 f4 fe ff ff 01 	add    DWORD PTR [rbp-0x10c],0x1
   2c687:	83 bd f4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x10c],0x7
   2c68e:	0f 8e 6d ff ff ff    	jle    2c601 <write_parameter_file+0x499>
   2c694:	bf 0d 00 00 00       	mov    edi,0xd
   2c699:	e8 0e f4 ff ff       	call   2baac <settype>
   2c69e:	48 89 c2             	mov    rdx,rax
   2c6a1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c6a5:	48 8d 35 c4 99 1b 00 	lea    rsi,[rip+0x1b99c4]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c6ac:	48 89 c7             	mov    rdi,rax
   2c6af:	b8 00 00 00 00       	mov    eax,0x0
   2c6b4:	e8 27 73 fd ff       	call   39e0 <fprintf@plt>
   2c6b9:	c7 85 fc fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x104],0x1
   2c6c3:	e9 86 00 00 00       	jmp    2c74e <write_parameter_file+0x5e6>
   2c6c8:	c7 85 f8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x108],0x0
   2c6d2:	eb 6a                	jmp    2c73e <write_parameter_file+0x5d6>
   2c6d4:	8b 85 f8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x108]
   2c6da:	48 98                	cdqe   
   2c6dc:	48 89 c2             	mov    rdx,rax
   2c6df:	48 c1 e2 02          	shl    rdx,0x2
   2c6e3:	48 01 c2             	add    rdx,rax
   2c6e6:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c6ee:	48 89 c2             	mov    rdx,rax
   2c6f1:	8b 85 fc fe ff ff    	mov    eax,DWORD PTR [rbp-0x104]
   2c6f7:	48 63 c8             	movsxd rcx,eax
   2c6fa:	48 89 c8             	mov    rax,rcx
   2c6fd:	48 c1 e0 02          	shl    rax,0x2
   2c701:	48 01 c8             	add    rax,rcx
   2c704:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c70c:	48 01 c8             	add    rax,rcx
   2c70f:	48 c1 e0 02          	shl    rax,0x2
   2c713:	48 01 c2             	add    rdx,rax
   2c716:	48 8d 05 23 23 1c 00 	lea    rax,[rip+0x1c2323]        # 1eea40 <mismatch1nI37>
   2c71d:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c721:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c725:	48 89 c1             	mov    rcx,rax
   2c728:	ba 05 00 00 00       	mov    edx,0x5
   2c72d:	be 05 00 00 00       	mov    esi,0x5
   2c732:	e8 09 ab ff ff       	call   27240 <display_array>
   2c737:	83 85 f8 fe ff ff 01 	add    DWORD PTR [rbp-0x108],0x1
   2c73e:	83 bd f8 fe ff ff 04 	cmp    DWORD PTR [rbp-0x108],0x4
   2c745:	7e 8d                	jle    2c6d4 <write_parameter_file+0x56c>
   2c747:	83 85 fc fe ff ff 01 	add    DWORD PTR [rbp-0x104],0x1
   2c74e:	83 bd fc fe ff ff 07 	cmp    DWORD PTR [rbp-0x104],0x7
   2c755:	0f 8e 6d ff ff ff    	jle    2c6c8 <write_parameter_file+0x560>
   2c75b:	bf 0e 00 00 00       	mov    edi,0xe
   2c760:	e8 47 f3 ff ff       	call   2baac <settype>
   2c765:	48 89 c2             	mov    rdx,rax
   2c768:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c76c:	48 8d 35 fd 98 1b 00 	lea    rsi,[rip+0x1b98fd]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c773:	48 89 c7             	mov    rdi,rax
   2c776:	b8 00 00 00 00       	mov    eax,0x0
   2c77b:	e8 60 72 fd ff       	call   39e0 <fprintf@plt>
   2c780:	c7 85 04 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xfc],0x1
   2c78a:	e9 86 00 00 00       	jmp    2c815 <write_parameter_file+0x6ad>
   2c78f:	c7 85 00 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x100],0x0
   2c799:	eb 6a                	jmp    2c805 <write_parameter_file+0x69d>
   2c79b:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
   2c7a1:	48 98                	cdqe   
   2c7a3:	48 89 c2             	mov    rdx,rax
   2c7a6:	48 c1 e2 02          	shl    rdx,0x2
   2c7aa:	48 01 c2             	add    rdx,rax
   2c7ad:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c7b5:	48 89 c2             	mov    rdx,rax
   2c7b8:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2c7be:	48 63 c8             	movsxd rcx,eax
   2c7c1:	48 89 c8             	mov    rax,rcx
   2c7c4:	48 c1 e0 02          	shl    rax,0x2
   2c7c8:	48 01 c8             	add    rax,rcx
   2c7cb:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c7d3:	48 01 c8             	add    rax,rcx
   2c7d6:	48 c1 e0 02          	shl    rax,0x2
   2c7da:	48 01 c2             	add    rdx,rax
   2c7dd:	48 8d 05 7c 25 1c 00 	lea    rax,[rip+0x1c257c]        # 1eed60 <mismatch1nIdH>
   2c7e4:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c7e8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c7ec:	48 89 c1             	mov    rcx,rax
   2c7ef:	ba 05 00 00 00       	mov    edx,0x5
   2c7f4:	be 05 00 00 00       	mov    esi,0x5
   2c7f9:	e8 42 aa ff ff       	call   27240 <display_array>
   2c7fe:	83 85 00 ff ff ff 01 	add    DWORD PTR [rbp-0x100],0x1
   2c805:	83 bd 00 ff ff ff 04 	cmp    DWORD PTR [rbp-0x100],0x4
   2c80c:	7e 8d                	jle    2c79b <write_parameter_file+0x633>
   2c80e:	83 85 04 ff ff ff 01 	add    DWORD PTR [rbp-0xfc],0x1
   2c815:	83 bd 04 ff ff ff 07 	cmp    DWORD PTR [rbp-0xfc],0x7
   2c81c:	0f 8e 6d ff ff ff    	jle    2c78f <write_parameter_file+0x627>
   2c822:	bf 0f 00 00 00       	mov    edi,0xf
   2c827:	e8 80 f2 ff ff       	call   2baac <settype>
   2c82c:	48 89 c2             	mov    rdx,rax
   2c82f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c833:	48 8d 35 36 98 1b 00 	lea    rsi,[rip+0x1b9836]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c83a:	48 89 c7             	mov    rdi,rax
   2c83d:	b8 00 00 00 00       	mov    eax,0x0
   2c842:	e8 99 71 fd ff       	call   39e0 <fprintf@plt>
   2c847:	c7 85 0c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xf4],0x1
   2c851:	e9 86 00 00 00       	jmp    2c8dc <write_parameter_file+0x774>
   2c856:	c7 85 08 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x0
   2c860:	eb 6a                	jmp    2c8cc <write_parameter_file+0x764>
   2c862:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2c868:	48 98                	cdqe   
   2c86a:	48 89 c2             	mov    rdx,rax
   2c86d:	48 c1 e2 02          	shl    rdx,0x2
   2c871:	48 01 c2             	add    rdx,rax
   2c874:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c87c:	48 89 c2             	mov    rdx,rax
   2c87f:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2c885:	48 63 c8             	movsxd rcx,eax
   2c888:	48 89 c8             	mov    rax,rcx
   2c88b:	48 c1 e0 02          	shl    rax,0x2
   2c88f:	48 01 c8             	add    rax,rcx
   2c892:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c89a:	48 01 c8             	add    rax,rcx
   2c89d:	48 c1 e0 02          	shl    rax,0x2
   2c8a1:	48 01 c2             	add    rdx,rax
   2c8a4:	48 8d 05 d5 27 1c 00 	lea    rax,[rip+0x1c27d5]        # 1ef080 <mismatch23I37>
   2c8ab:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c8af:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c8b3:	48 89 c1             	mov    rcx,rax
   2c8b6:	ba 05 00 00 00       	mov    edx,0x5
   2c8bb:	be 05 00 00 00       	mov    esi,0x5
   2c8c0:	e8 7b a9 ff ff       	call   27240 <display_array>
   2c8c5:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   2c8cc:	83 bd 08 ff ff ff 04 	cmp    DWORD PTR [rbp-0xf8],0x4
   2c8d3:	7e 8d                	jle    2c862 <write_parameter_file+0x6fa>
   2c8d5:	83 85 0c ff ff ff 01 	add    DWORD PTR [rbp-0xf4],0x1
   2c8dc:	83 bd 0c ff ff ff 07 	cmp    DWORD PTR [rbp-0xf4],0x7
   2c8e3:	0f 8e 6d ff ff ff    	jle    2c856 <write_parameter_file+0x6ee>
   2c8e9:	bf 10 00 00 00       	mov    edi,0x10
   2c8ee:	e8 b9 f1 ff ff       	call   2baac <settype>
   2c8f3:	48 89 c2             	mov    rdx,rax
   2c8f6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c8fa:	48 8d 35 6f 97 1b 00 	lea    rsi,[rip+0x1b976f]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c901:	48 89 c7             	mov    rdi,rax
   2c904:	b8 00 00 00 00       	mov    eax,0x0
   2c909:	e8 d2 70 fd ff       	call   39e0 <fprintf@plt>
   2c90e:	c7 85 14 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xec],0x1
   2c918:	e9 86 00 00 00       	jmp    2c9a3 <write_parameter_file+0x83b>
   2c91d:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
   2c927:	eb 6a                	jmp    2c993 <write_parameter_file+0x82b>
   2c929:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2c92f:	48 98                	cdqe   
   2c931:	48 89 c2             	mov    rdx,rax
   2c934:	48 c1 e2 02          	shl    rdx,0x2
   2c938:	48 01 c2             	add    rdx,rax
   2c93b:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2c943:	48 89 c2             	mov    rdx,rax
   2c946:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2c94c:	48 63 c8             	movsxd rcx,eax
   2c94f:	48 89 c8             	mov    rax,rcx
   2c952:	48 c1 e0 02          	shl    rax,0x2
   2c956:	48 01 c8             	add    rax,rcx
   2c959:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2c961:	48 01 c8             	add    rax,rcx
   2c964:	48 c1 e0 02          	shl    rax,0x2
   2c968:	48 01 c2             	add    rdx,rax
   2c96b:	48 8d 05 2e 2a 1c 00 	lea    rax,[rip+0x1c2a2e]        # 1ef3a0 <mismatch23IdH>
   2c972:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2c976:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c97a:	48 89 c1             	mov    rcx,rax
   2c97d:	ba 05 00 00 00       	mov    edx,0x5
   2c982:	be 05 00 00 00       	mov    esi,0x5
   2c987:	e8 b4 a8 ff ff       	call   27240 <display_array>
   2c98c:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
   2c993:	83 bd 10 ff ff ff 04 	cmp    DWORD PTR [rbp-0xf0],0x4
   2c99a:	7e 8d                	jle    2c929 <write_parameter_file+0x7c1>
   2c99c:	83 85 14 ff ff ff 01 	add    DWORD PTR [rbp-0xec],0x1
   2c9a3:	83 bd 14 ff ff ff 07 	cmp    DWORD PTR [rbp-0xec],0x7
   2c9aa:	0f 8e 6d ff ff ff    	jle    2c91d <write_parameter_file+0x7b5>
   2c9b0:	bf 11 00 00 00       	mov    edi,0x11
   2c9b5:	e8 f2 f0 ff ff       	call   2baac <settype>
   2c9ba:	48 89 c2             	mov    rdx,rax
   2c9bd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2c9c1:	48 8d 35 a8 96 1b 00 	lea    rsi,[rip+0x1b96a8]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2c9c8:	48 89 c7             	mov    rdi,rax
   2c9cb:	b8 00 00 00 00       	mov    eax,0x0
   2c9d0:	e8 0b 70 fd ff       	call   39e0 <fprintf@plt>
   2c9d5:	c7 85 1c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xe4],0x1
   2c9df:	e9 86 00 00 00       	jmp    2ca6a <write_parameter_file+0x902>
   2c9e4:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
   2c9ee:	eb 6a                	jmp    2ca5a <write_parameter_file+0x8f2>
   2c9f0:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2c9f6:	48 98                	cdqe   
   2c9f8:	48 89 c2             	mov    rdx,rax
   2c9fb:	48 c1 e2 02          	shl    rdx,0x2
   2c9ff:	48 01 c2             	add    rdx,rax
   2ca02:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2ca0a:	48 89 c2             	mov    rdx,rax
   2ca0d:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2ca13:	48 63 c8             	movsxd rcx,eax
   2ca16:	48 89 c8             	mov    rax,rcx
   2ca19:	48 c1 e0 02          	shl    rax,0x2
   2ca1d:	48 01 c8             	add    rax,rcx
   2ca20:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2ca28:	48 01 c8             	add    rax,rcx
   2ca2b:	48 c1 e0 02          	shl    rax,0x2
   2ca2f:	48 01 c2             	add    rdx,rax
   2ca32:	48 8d 05 c7 19 1c 00 	lea    rax,[rip+0x1c19c7]        # 1ee400 <mismatchM37>
   2ca39:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2ca3d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ca41:	48 89 c1             	mov    rcx,rax
   2ca44:	ba 05 00 00 00       	mov    edx,0x5
   2ca49:	be 05 00 00 00       	mov    esi,0x5
   2ca4e:	e8 ed a7 ff ff       	call   27240 <display_array>
   2ca53:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
   2ca5a:	83 bd 18 ff ff ff 04 	cmp    DWORD PTR [rbp-0xe8],0x4
   2ca61:	7e 8d                	jle    2c9f0 <write_parameter_file+0x888>
   2ca63:	83 85 1c ff ff ff 01 	add    DWORD PTR [rbp-0xe4],0x1
   2ca6a:	83 bd 1c ff ff ff 07 	cmp    DWORD PTR [rbp-0xe4],0x7
   2ca71:	0f 8e 6d ff ff ff    	jle    2c9e4 <write_parameter_file+0x87c>
   2ca77:	bf 12 00 00 00       	mov    edi,0x12
   2ca7c:	e8 2b f0 ff ff       	call   2baac <settype>
   2ca81:	48 89 c2             	mov    rdx,rax
   2ca84:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ca88:	48 8d 35 e1 95 1b 00 	lea    rsi,[rip+0x1b95e1]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ca8f:	48 89 c7             	mov    rdi,rax
   2ca92:	b8 00 00 00 00       	mov    eax,0x0
   2ca97:	e8 44 6f fd ff       	call   39e0 <fprintf@plt>
   2ca9c:	c7 85 24 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xdc],0x1
   2caa6:	e9 86 00 00 00       	jmp    2cb31 <write_parameter_file+0x9c9>
   2caab:	c7 85 20 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe0],0x0
   2cab5:	eb 6a                	jmp    2cb21 <write_parameter_file+0x9b9>
   2cab7:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
   2cabd:	48 98                	cdqe   
   2cabf:	48 89 c2             	mov    rdx,rax
   2cac2:	48 c1 e2 02          	shl    rdx,0x2
   2cac6:	48 01 c2             	add    rdx,rax
   2cac9:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2cad1:	48 89 c2             	mov    rdx,rax
   2cad4:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
   2cada:	48 63 c8             	movsxd rcx,eax
   2cadd:	48 89 c8             	mov    rax,rcx
   2cae0:	48 c1 e0 02          	shl    rax,0x2
   2cae4:	48 01 c8             	add    rax,rcx
   2cae7:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2caef:	48 01 c8             	add    rax,rcx
   2caf2:	48 c1 e0 02          	shl    rax,0x2
   2caf6:	48 01 c2             	add    rdx,rax
   2caf9:	48 8d 05 20 1c 1c 00 	lea    rax,[rip+0x1c1c20]        # 1ee720 <mismatchMdH>
   2cb00:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2cb04:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cb08:	48 89 c1             	mov    rcx,rax
   2cb0b:	ba 05 00 00 00       	mov    edx,0x5
   2cb10:	be 05 00 00 00       	mov    esi,0x5
   2cb15:	e8 26 a7 ff ff       	call   27240 <display_array>
   2cb1a:	83 85 20 ff ff ff 01 	add    DWORD PTR [rbp-0xe0],0x1
   2cb21:	83 bd 20 ff ff ff 04 	cmp    DWORD PTR [rbp-0xe0],0x4
   2cb28:	7e 8d                	jle    2cab7 <write_parameter_file+0x94f>
   2cb2a:	83 85 24 ff ff ff 01 	add    DWORD PTR [rbp-0xdc],0x1
   2cb31:	83 bd 24 ff ff ff 07 	cmp    DWORD PTR [rbp-0xdc],0x7
   2cb38:	0f 8e 6d ff ff ff    	jle    2caab <write_parameter_file+0x943>
   2cb3e:	bf 13 00 00 00       	mov    edi,0x13
   2cb43:	e8 64 ef ff ff       	call   2baac <settype>
   2cb48:	48 89 c2             	mov    rdx,rax
   2cb4b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cb4f:	48 8d 35 1a 95 1b 00 	lea    rsi,[rip+0x1b951a]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2cb56:	48 89 c7             	mov    rdi,rax
   2cb59:	b8 00 00 00 00       	mov    eax,0x0
   2cb5e:	e8 7d 6e fd ff       	call   39e0 <fprintf@plt>
   2cb63:	c7 85 2c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xd4],0x1
   2cb6d:	e9 86 00 00 00       	jmp    2cbf8 <write_parameter_file+0xa90>
   2cb72:	c7 85 28 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xd8],0x0
   2cb7c:	eb 6a                	jmp    2cbe8 <write_parameter_file+0xa80>
   2cb7e:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   2cb84:	48 98                	cdqe   
   2cb86:	48 89 c2             	mov    rdx,rax
   2cb89:	48 c1 e2 02          	shl    rdx,0x2
   2cb8d:	48 01 c2             	add    rdx,rax
   2cb90:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2cb98:	48 89 c2             	mov    rdx,rax
   2cb9b:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
   2cba1:	48 63 c8             	movsxd rcx,eax
   2cba4:	48 89 c8             	mov    rax,rcx
   2cba7:	48 c1 e0 02          	shl    rax,0x2
   2cbab:	48 01 c8             	add    rax,rcx
   2cbae:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2cbb6:	48 01 c8             	add    rax,rcx
   2cbb9:	48 c1 e0 02          	shl    rax,0x2
   2cbbd:	48 01 c2             	add    rdx,rax
   2cbc0:	48 8d 05 f9 2a 1c 00 	lea    rax,[rip+0x1c2af9]        # 1ef6c0 <mismatchExt37>
   2cbc7:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2cbcb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cbcf:	48 89 c1             	mov    rcx,rax
   2cbd2:	ba 05 00 00 00       	mov    edx,0x5
   2cbd7:	be 05 00 00 00       	mov    esi,0x5
   2cbdc:	e8 5f a6 ff ff       	call   27240 <display_array>
   2cbe1:	83 85 28 ff ff ff 01 	add    DWORD PTR [rbp-0xd8],0x1
   2cbe8:	83 bd 28 ff ff ff 04 	cmp    DWORD PTR [rbp-0xd8],0x4
   2cbef:	7e 8d                	jle    2cb7e <write_parameter_file+0xa16>
   2cbf1:	83 85 2c ff ff ff 01 	add    DWORD PTR [rbp-0xd4],0x1
   2cbf8:	83 bd 2c ff ff ff 07 	cmp    DWORD PTR [rbp-0xd4],0x7
   2cbff:	0f 8e 6d ff ff ff    	jle    2cb72 <write_parameter_file+0xa0a>
   2cc05:	bf 14 00 00 00       	mov    edi,0x14
   2cc0a:	e8 9d ee ff ff       	call   2baac <settype>
   2cc0f:	48 89 c2             	mov    rdx,rax
   2cc12:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cc16:	48 8d 35 53 94 1b 00 	lea    rsi,[rip+0x1b9453]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2cc1d:	48 89 c7             	mov    rdi,rax
   2cc20:	b8 00 00 00 00       	mov    eax,0x0
   2cc25:	e8 b6 6d fd ff       	call   39e0 <fprintf@plt>
   2cc2a:	c7 85 34 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x1
   2cc34:	e9 86 00 00 00       	jmp    2ccbf <write_parameter_file+0xb57>
   2cc39:	c7 85 30 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x0
   2cc43:	eb 6a                	jmp    2ccaf <write_parameter_file+0xb47>
   2cc45:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
   2cc4b:	48 98                	cdqe   
   2cc4d:	48 89 c2             	mov    rdx,rax
   2cc50:	48 c1 e2 02          	shl    rdx,0x2
   2cc54:	48 01 c2             	add    rdx,rax
   2cc57:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2cc5f:	48 89 c2             	mov    rdx,rax
   2cc62:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
   2cc68:	48 63 c8             	movsxd rcx,eax
   2cc6b:	48 89 c8             	mov    rax,rcx
   2cc6e:	48 c1 e0 02          	shl    rax,0x2
   2cc72:	48 01 c8             	add    rax,rcx
   2cc75:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2cc7d:	48 01 c8             	add    rax,rcx
   2cc80:	48 c1 e0 02          	shl    rax,0x2
   2cc84:	48 01 c2             	add    rdx,rax
   2cc87:	48 8d 05 52 2d 1c 00 	lea    rax,[rip+0x1c2d52]        # 1ef9e0 <mismatchExtdH>
   2cc8e:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2cc92:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cc96:	48 89 c1             	mov    rcx,rax
   2cc99:	ba 05 00 00 00       	mov    edx,0x5
   2cc9e:	be 05 00 00 00       	mov    esi,0x5
   2cca3:	e8 98 a5 ff ff       	call   27240 <display_array>
   2cca8:	83 85 30 ff ff ff 01 	add    DWORD PTR [rbp-0xd0],0x1
   2ccaf:	83 bd 30 ff ff ff 04 	cmp    DWORD PTR [rbp-0xd0],0x4
   2ccb6:	7e 8d                	jle    2cc45 <write_parameter_file+0xadd>
   2ccb8:	83 85 34 ff ff ff 01 	add    DWORD PTR [rbp-0xcc],0x1
   2ccbf:	83 bd 34 ff ff ff 07 	cmp    DWORD PTR [rbp-0xcc],0x7
   2ccc6:	0f 8e 6d ff ff ff    	jle    2cc39 <write_parameter_file+0xad1>
   2cccc:	bf 15 00 00 00       	mov    edi,0x15
   2ccd1:	e8 d6 ed ff ff       	call   2baac <settype>
   2ccd6:	48 89 c2             	mov    rdx,rax
   2ccd9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ccdd:	48 8d 35 8c 93 1b 00 	lea    rsi,[rip+0x1b938c]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2cce4:	48 89 c7             	mov    rdi,rax
   2cce7:	b8 00 00 00 00       	mov    eax,0x0
   2ccec:	e8 ef 6c fd ff       	call   39e0 <fprintf@plt>
   2ccf1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ccf5:	48 89 c1             	mov    rcx,rax
   2ccf8:	ba 23 00 00 00       	mov    edx,0x23
   2ccfd:	be 01 00 00 00       	mov    esi,0x1
   2cd02:	48 8d 3d 9f 93 1b 00 	lea    rdi,[rip+0x1b939f]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2cd09:	e8 82 6e fd ff       	call   3b90 <fwrite@plt>
   2cd0e:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2cd18:	eb 3f                	jmp    2cd59 <write_parameter_file+0xbf1>
   2cd1a:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2cd20:	48 63 d0             	movsxd rdx,eax
   2cd23:	48 89 d0             	mov    rax,rdx
   2cd26:	48 c1 e0 02          	shl    rax,0x2
   2cd2a:	48 01 d0             	add    rax,rdx
   2cd2d:	48 c1 e0 02          	shl    rax,0x2
   2cd31:	48 8d 15 c8 2f 1c 00 	lea    rdx,[rip+0x1c2fc8]        # 1efd00 <dangle5_37>
   2cd38:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2cd3c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cd40:	48 89 c1             	mov    rcx,rax
   2cd43:	ba 05 00 00 00       	mov    edx,0x5
   2cd48:	be 05 00 00 00       	mov    esi,0x5
   2cd4d:	e8 ee a4 ff ff       	call   27240 <display_array>
   2cd52:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2cd59:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2cd60:	7e b8                	jle    2cd1a <write_parameter_file+0xbb2>
   2cd62:	bf 16 00 00 00       	mov    edi,0x16
   2cd67:	e8 40 ed ff ff       	call   2baac <settype>
   2cd6c:	48 89 c2             	mov    rdx,rax
   2cd6f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cd73:	48 8d 35 f6 92 1b 00 	lea    rsi,[rip+0x1b92f6]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2cd7a:	48 89 c7             	mov    rdi,rax
   2cd7d:	b8 00 00 00 00       	mov    eax,0x0
   2cd82:	e8 59 6c fd ff       	call   39e0 <fprintf@plt>
   2cd87:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cd8b:	48 89 c1             	mov    rcx,rax
   2cd8e:	ba 23 00 00 00       	mov    edx,0x23
   2cd93:	be 01 00 00 00       	mov    esi,0x1
   2cd98:	48 8d 3d 09 93 1b 00 	lea    rdi,[rip+0x1b9309]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2cd9f:	e8 ec 6d fd ff       	call   3b90 <fwrite@plt>
   2cda4:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2cdae:	eb 3f                	jmp    2cdef <write_parameter_file+0xc87>
   2cdb0:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2cdb6:	48 63 d0             	movsxd rdx,eax
   2cdb9:	48 89 d0             	mov    rax,rdx
   2cdbc:	48 c1 e0 02          	shl    rax,0x2
   2cdc0:	48 01 d0             	add    rax,rdx
   2cdc3:	48 c1 e0 02          	shl    rax,0x2
   2cdc7:	48 8d 15 72 30 1c 00 	lea    rdx,[rip+0x1c3072]        # 1efe40 <dangle5_dH>
   2cdce:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2cdd2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cdd6:	48 89 c1             	mov    rcx,rax
   2cdd9:	ba 05 00 00 00       	mov    edx,0x5
   2cdde:	be 05 00 00 00       	mov    esi,0x5
   2cde3:	e8 58 a4 ff ff       	call   27240 <display_array>
   2cde8:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2cdef:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2cdf6:	7e b8                	jle    2cdb0 <write_parameter_file+0xc48>
   2cdf8:	bf 17 00 00 00       	mov    edi,0x17
   2cdfd:	e8 aa ec ff ff       	call   2baac <settype>
   2ce02:	48 89 c2             	mov    rdx,rax
   2ce05:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ce09:	48 8d 35 60 92 1b 00 	lea    rsi,[rip+0x1b9260]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ce10:	48 89 c7             	mov    rdi,rax
   2ce13:	b8 00 00 00 00       	mov    eax,0x0
   2ce18:	e8 c3 6b fd ff       	call   39e0 <fprintf@plt>
   2ce1d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ce21:	48 89 c1             	mov    rcx,rax
   2ce24:	ba 23 00 00 00       	mov    edx,0x23
   2ce29:	be 01 00 00 00       	mov    esi,0x1
   2ce2e:	48 8d 3d 73 92 1b 00 	lea    rdi,[rip+0x1b9273]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2ce35:	e8 56 6d fd ff       	call   3b90 <fwrite@plt>
   2ce3a:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2ce44:	eb 3f                	jmp    2ce85 <write_parameter_file+0xd1d>
   2ce46:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2ce4c:	48 63 d0             	movsxd rdx,eax
   2ce4f:	48 89 d0             	mov    rax,rdx
   2ce52:	48 c1 e0 02          	shl    rax,0x2
   2ce56:	48 01 d0             	add    rax,rdx
   2ce59:	48 c1 e0 02          	shl    rax,0x2
   2ce5d:	48 8d 15 3c 2f 1c 00 	lea    rdx,[rip+0x1c2f3c]        # 1efda0 <dangle3_37>
   2ce64:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2ce68:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ce6c:	48 89 c1             	mov    rcx,rax
   2ce6f:	ba 05 00 00 00       	mov    edx,0x5
   2ce74:	be 05 00 00 00       	mov    esi,0x5
   2ce79:	e8 c2 a3 ff ff       	call   27240 <display_array>
   2ce7e:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2ce85:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2ce8c:	7e b8                	jle    2ce46 <write_parameter_file+0xcde>
   2ce8e:	bf 18 00 00 00       	mov    edi,0x18
   2ce93:	e8 14 ec ff ff       	call   2baac <settype>
   2ce98:	48 89 c2             	mov    rdx,rax
   2ce9b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ce9f:	48 8d 35 ca 91 1b 00 	lea    rsi,[rip+0x1b91ca]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2cea6:	48 89 c7             	mov    rdi,rax
   2cea9:	b8 00 00 00 00       	mov    eax,0x0
   2ceae:	e8 2d 6b fd ff       	call   39e0 <fprintf@plt>
   2ceb3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ceb7:	48 89 c1             	mov    rcx,rax
   2ceba:	ba 23 00 00 00       	mov    edx,0x23
   2cebf:	be 01 00 00 00       	mov    esi,0x1
   2cec4:	48 8d 3d dd 91 1b 00 	lea    rdi,[rip+0x1b91dd]        # 1e60a8 <parameter_set_rna_turner2004+0x5d708>
   2cecb:	e8 c0 6c fd ff       	call   3b90 <fwrite@plt>
   2ced0:	c7 85 d4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x1
   2ceda:	eb 3f                	jmp    2cf1b <write_parameter_file+0xdb3>
   2cedc:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2cee2:	48 63 d0             	movsxd rdx,eax
   2cee5:	48 89 d0             	mov    rax,rdx
   2cee8:	48 c1 e0 02          	shl    rax,0x2
   2ceec:	48 01 d0             	add    rax,rdx
   2ceef:	48 c1 e0 02          	shl    rax,0x2
   2cef3:	48 8d 15 e6 2f 1c 00 	lea    rdx,[rip+0x1c2fe6]        # 1efee0 <dangle3_dH>
   2cefa:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
   2cefe:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cf02:	48 89 c1             	mov    rcx,rax
   2cf05:	ba 05 00 00 00       	mov    edx,0x5
   2cf0a:	be 05 00 00 00       	mov    esi,0x5
   2cf0f:	e8 2c a3 ff ff       	call   27240 <display_array>
   2cf14:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2cf1b:	83 bd d4 fe ff ff 07 	cmp    DWORD PTR [rbp-0x12c],0x7
   2cf22:	7e b8                	jle    2cedc <write_parameter_file+0xd74>
   2cf24:	bf 19 00 00 00       	mov    edi,0x19
   2cf29:	e8 7e eb ff ff       	call   2baac <settype>
   2cf2e:	48 89 c2             	mov    rdx,rax
   2cf31:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cf35:	48 8d 35 34 91 1b 00 	lea    rsi,[rip+0x1b9134]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2cf3c:	48 89 c7             	mov    rdi,rax
   2cf3f:	b8 00 00 00 00       	mov    eax,0x0
   2cf44:	e8 97 6a fd ff       	call   39e0 <fprintf@plt>
   2cf49:	c7 85 3c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xc4],0x1
   2cf53:	e9 09 01 00 00       	jmp    2d061 <write_parameter_file+0xef9>
   2cf58:	c7 85 40 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xc0],0x1
   2cf62:	e9 e6 00 00 00       	jmp    2d04d <write_parameter_file+0xee5>
   2cf67:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   2cf6d:	48 98                	cdqe   
   2cf6f:	48 8b 4c c5 a0       	mov    rcx,QWORD PTR [rbp+rax*8-0x60]
   2cf74:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
   2cf7a:	48 98                	cdqe   
   2cf7c:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2cf81:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2cf85:	48 8d 35 40 91 1b 00 	lea    rsi,[rip+0x1b9140]        # 1e60cc <parameter_set_rna_turner2004+0x5d72c>
   2cf8c:	48 89 c7             	mov    rdi,rax
   2cf8f:	b8 00 00 00 00       	mov    eax,0x0
   2cf94:	e8 47 6a fd ff       	call   39e0 <fprintf@plt>
   2cf99:	c7 85 38 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xc8],0x0
   2cfa3:	e9 91 00 00 00       	jmp    2d039 <write_parameter_file+0xed1>
   2cfa8:	8b 85 38 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc8]
   2cfae:	48 98                	cdqe   
   2cfb0:	48 89 c2             	mov    rdx,rax
   2cfb3:	48 c1 e2 02          	shl    rdx,0x2
   2cfb7:	48 01 c2             	add    rdx,rax
   2cfba:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2cfc2:	48 89 c2             	mov    rdx,rax
   2cfc5:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   2cfcb:	48 63 c8             	movsxd rcx,eax
   2cfce:	48 89 c8             	mov    rax,rcx
   2cfd1:	48 c1 e0 02          	shl    rax,0x2
   2cfd5:	48 01 c8             	add    rax,rcx
   2cfd8:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2cfe0:	48 01 c8             	add    rax,rcx
   2cfe3:	48 c1 e0 02          	shl    rax,0x2
   2cfe7:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2cfeb:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
   2cff1:	48 63 d0             	movsxd rdx,eax
   2cff4:	48 89 d0             	mov    rax,rdx
   2cff7:	48 c1 e0 02          	shl    rax,0x2
   2cffb:	48 01 d0             	add    rax,rdx
   2cffe:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2d006:	48 01 d0             	add    rax,rdx
   2d009:	48 c1 e0 05          	shl    rax,0x5
   2d00d:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2d011:	48 8d 05 c8 36 1c 00 	lea    rax,[rip+0x1c36c8]        # 1f06e0 <int11_37>
   2d018:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2d01c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d020:	48 89 c1             	mov    rcx,rax
   2d023:	ba 05 00 00 00       	mov    edx,0x5
   2d028:	be 05 00 00 00       	mov    esi,0x5
   2d02d:	e8 0e a2 ff ff       	call   27240 <display_array>
   2d032:	83 85 38 ff ff ff 01 	add    DWORD PTR [rbp-0xc8],0x1
   2d039:	83 bd 38 ff ff ff 04 	cmp    DWORD PTR [rbp-0xc8],0x4
   2d040:	0f 8e 62 ff ff ff    	jle    2cfa8 <write_parameter_file+0xe40>
   2d046:	83 85 40 ff ff ff 01 	add    DWORD PTR [rbp-0xc0],0x1
   2d04d:	83 bd 40 ff ff ff 07 	cmp    DWORD PTR [rbp-0xc0],0x7
   2d054:	0f 8e 0d ff ff ff    	jle    2cf67 <write_parameter_file+0xdff>
   2d05a:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
   2d061:	83 bd 3c ff ff ff 07 	cmp    DWORD PTR [rbp-0xc4],0x7
   2d068:	0f 8e ea fe ff ff    	jle    2cf58 <write_parameter_file+0xdf0>
   2d06e:	bf 1a 00 00 00       	mov    edi,0x1a
   2d073:	e8 34 ea ff ff       	call   2baac <settype>
   2d078:	48 89 c2             	mov    rdx,rax
   2d07b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d07f:	48 8d 35 ea 8f 1b 00 	lea    rsi,[rip+0x1b8fea]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d086:	48 89 c7             	mov    rdi,rax
   2d089:	b8 00 00 00 00       	mov    eax,0x0
   2d08e:	e8 4d 69 fd ff       	call   39e0 <fprintf@plt>
   2d093:	c7 85 48 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xb8],0x1
   2d09d:	e9 09 01 00 00       	jmp    2d1ab <write_parameter_file+0x1043>
   2d0a2:	c7 85 4c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xb4],0x1
   2d0ac:	e9 e6 00 00 00       	jmp    2d197 <write_parameter_file+0x102f>
   2d0b1:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
   2d0b7:	48 98                	cdqe   
   2d0b9:	48 8b 4c c5 a0       	mov    rcx,QWORD PTR [rbp+rax*8-0x60]
   2d0be:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
   2d0c4:	48 98                	cdqe   
   2d0c6:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2d0cb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d0cf:	48 8d 35 f6 8f 1b 00 	lea    rsi,[rip+0x1b8ff6]        # 1e60cc <parameter_set_rna_turner2004+0x5d72c>
   2d0d6:	48 89 c7             	mov    rdi,rax
   2d0d9:	b8 00 00 00 00       	mov    eax,0x0
   2d0de:	e8 fd 68 fd ff       	call   39e0 <fprintf@plt>
   2d0e3:	c7 85 44 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xbc],0x0
   2d0ed:	e9 91 00 00 00       	jmp    2d183 <write_parameter_file+0x101b>
   2d0f2:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   2d0f8:	48 98                	cdqe   
   2d0fa:	48 89 c2             	mov    rdx,rax
   2d0fd:	48 c1 e2 02          	shl    rdx,0x2
   2d101:	48 01 c2             	add    rdx,rax
   2d104:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2d10c:	48 89 c2             	mov    rdx,rax
   2d10f:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
   2d115:	48 63 c8             	movsxd rcx,eax
   2d118:	48 89 c8             	mov    rax,rcx
   2d11b:	48 c1 e0 02          	shl    rax,0x2
   2d11f:	48 01 c8             	add    rax,rcx
   2d122:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2d12a:	48 01 c8             	add    rax,rcx
   2d12d:	48 c1 e0 02          	shl    rax,0x2
   2d131:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2d135:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
   2d13b:	48 63 d0             	movsxd rdx,eax
   2d13e:	48 89 d0             	mov    rax,rdx
   2d141:	48 c1 e0 02          	shl    rax,0x2
   2d145:	48 01 d0             	add    rax,rdx
   2d148:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2d150:	48 01 d0             	add    rax,rdx
   2d153:	48 c1 e0 05          	shl    rax,0x5
   2d157:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2d15b:	48 8d 05 7e 4e 1c 00 	lea    rax,[rip+0x1c4e7e]        # 1f1fe0 <int11_dH>
   2d162:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2d166:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d16a:	48 89 c1             	mov    rcx,rax
   2d16d:	ba 05 00 00 00       	mov    edx,0x5
   2d172:	be 05 00 00 00       	mov    esi,0x5
   2d177:	e8 c4 a0 ff ff       	call   27240 <display_array>
   2d17c:	83 85 44 ff ff ff 01 	add    DWORD PTR [rbp-0xbc],0x1
   2d183:	83 bd 44 ff ff ff 04 	cmp    DWORD PTR [rbp-0xbc],0x4
   2d18a:	0f 8e 62 ff ff ff    	jle    2d0f2 <write_parameter_file+0xf8a>
   2d190:	83 85 4c ff ff ff 01 	add    DWORD PTR [rbp-0xb4],0x1
   2d197:	83 bd 4c ff ff ff 07 	cmp    DWORD PTR [rbp-0xb4],0x7
   2d19e:	0f 8e 0d ff ff ff    	jle    2d0b1 <write_parameter_file+0xf49>
   2d1a4:	83 85 48 ff ff ff 01 	add    DWORD PTR [rbp-0xb8],0x1
   2d1ab:	83 bd 48 ff ff ff 07 	cmp    DWORD PTR [rbp-0xb8],0x7
   2d1b2:	0f 8e ea fe ff ff    	jle    2d0a2 <write_parameter_file+0xf3a>
   2d1b8:	bf 1b 00 00 00       	mov    edi,0x1b
   2d1bd:	e8 ea e8 ff ff       	call   2baac <settype>
   2d1c2:	48 89 c2             	mov    rdx,rax
   2d1c5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d1c9:	48 8d 35 a0 8e 1b 00 	lea    rsi,[rip+0x1b8ea0]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d1d0:	48 89 c7             	mov    rdi,rax
   2d1d3:	b8 00 00 00 00       	mov    eax,0x0
   2d1d8:	e8 03 68 fd ff       	call   39e0 <fprintf@plt>
   2d1dd:	c7 85 50 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xb0],0x1
   2d1e7:	e9 3e 01 00 00       	jmp    2d32a <write_parameter_file+0x11c2>
   2d1ec:	c7 85 54 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xac],0x1
   2d1f6:	e9 1b 01 00 00       	jmp    2d316 <write_parameter_file+0x11ae>
   2d1fb:	c7 85 58 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x0
   2d205:	e9 f8 00 00 00       	jmp    2d302 <write_parameter_file+0x119a>
   2d20a:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   2d210:	48 98                	cdqe   
   2d212:	48 8b 74 c5 a0       	mov    rsi,QWORD PTR [rbp+rax*8-0x60]
   2d217:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   2d21d:	48 98                	cdqe   
   2d21f:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2d224:	0f be c8             	movsx  ecx,al
   2d227:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   2d22d:	48 98                	cdqe   
   2d22f:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2d234:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d238:	49 89 f0             	mov    r8,rsi
   2d23b:	48 8d 35 9a 8e 1b 00 	lea    rsi,[rip+0x1b8e9a]        # 1e60dc <parameter_set_rna_turner2004+0x5d73c>
   2d242:	48 89 c7             	mov    rdi,rax
   2d245:	b8 00 00 00 00       	mov    eax,0x0
   2d24a:	e8 91 67 fd ff       	call   39e0 <fprintf@plt>
   2d24f:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   2d259:	e9 90 00 00 00       	jmp    2d2ee <write_parameter_file+0x1186>
   2d25e:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   2d264:	48 98                	cdqe   
   2d266:	48 89 c2             	mov    rdx,rax
   2d269:	48 c1 e2 02          	shl    rdx,0x2
   2d26d:	48 01 c2             	add    rdx,rax
   2d270:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2d278:	48 89 c2             	mov    rdx,rax
   2d27b:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   2d281:	48 63 c8             	movsxd rcx,eax
   2d284:	48 89 c8             	mov    rax,rcx
   2d287:	48 c1 e0 02          	shl    rax,0x2
   2d28b:	48 01 c8             	add    rax,rcx
   2d28e:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2d296:	48 01 c8             	add    rax,rcx
   2d299:	48 c1 e0 02          	shl    rax,0x2
   2d29d:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2d2a1:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   2d2a7:	48 98                	cdqe   
   2d2a9:	48 69 d0 a0 0f 00 00 	imul   rdx,rax,0xfa0
   2d2b0:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   2d2b6:	48 98                	cdqe   
   2d2b8:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2d2bf:	48 01 d0             	add    rax,rdx
   2d2c2:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2d2c6:	48 8d 05 13 66 1c 00 	lea    rax,[rip+0x1c6613]        # 1f38e0 <int21_37>
   2d2cd:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2d2d1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d2d5:	48 89 c1             	mov    rcx,rax
   2d2d8:	ba 05 00 00 00       	mov    edx,0x5
   2d2dd:	be 05 00 00 00       	mov    esi,0x5
   2d2e2:	e8 59 9f ff ff       	call   27240 <display_array>
   2d2e7:	83 85 5c ff ff ff 01 	add    DWORD PTR [rbp-0xa4],0x1
   2d2ee:	83 bd 5c ff ff ff 04 	cmp    DWORD PTR [rbp-0xa4],0x4
   2d2f5:	0f 8e 63 ff ff ff    	jle    2d25e <write_parameter_file+0x10f6>
   2d2fb:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   2d302:	83 bd 58 ff ff ff 04 	cmp    DWORD PTR [rbp-0xa8],0x4
   2d309:	0f 8e fb fe ff ff    	jle    2d20a <write_parameter_file+0x10a2>
   2d30f:	83 85 54 ff ff ff 01 	add    DWORD PTR [rbp-0xac],0x1
   2d316:	83 bd 54 ff ff ff 07 	cmp    DWORD PTR [rbp-0xac],0x7
   2d31d:	0f 8e d8 fe ff ff    	jle    2d1fb <write_parameter_file+0x1093>
   2d323:	83 85 50 ff ff ff 01 	add    DWORD PTR [rbp-0xb0],0x1
   2d32a:	83 bd 50 ff ff ff 07 	cmp    DWORD PTR [rbp-0xb0],0x7
   2d331:	0f 8e b5 fe ff ff    	jle    2d1ec <write_parameter_file+0x1084>
   2d337:	bf 1c 00 00 00       	mov    edi,0x1c
   2d33c:	e8 6b e7 ff ff       	call   2baac <settype>
   2d341:	48 89 c2             	mov    rdx,rax
   2d344:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d348:	48 8d 35 21 8d 1b 00 	lea    rsi,[rip+0x1b8d21]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d34f:	48 89 c7             	mov    rdi,rax
   2d352:	b8 00 00 00 00       	mov    eax,0x0
   2d357:	e8 84 66 fd ff       	call   39e0 <fprintf@plt>
   2d35c:	c7 85 60 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xa0],0x1
   2d366:	e9 3e 01 00 00       	jmp    2d4a9 <write_parameter_file+0x1341>
   2d36b:	c7 85 64 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x1
   2d375:	e9 1b 01 00 00       	jmp    2d495 <write_parameter_file+0x132d>
   2d37a:	c7 85 68 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x98],0x0
   2d384:	e9 f8 00 00 00       	jmp    2d481 <write_parameter_file+0x1319>
   2d389:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   2d38f:	48 98                	cdqe   
   2d391:	48 8b 74 c5 a0       	mov    rsi,QWORD PTR [rbp+rax*8-0x60]
   2d396:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   2d39c:	48 98                	cdqe   
   2d39e:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2d3a3:	0f be c8             	movsx  ecx,al
   2d3a6:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   2d3ac:	48 98                	cdqe   
   2d3ae:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2d3b3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d3b7:	49 89 f0             	mov    r8,rsi
   2d3ba:	48 8d 35 1b 8d 1b 00 	lea    rsi,[rip+0x1b8d1b]        # 1e60dc <parameter_set_rna_turner2004+0x5d73c>
   2d3c1:	48 89 c7             	mov    rdi,rax
   2d3c4:	b8 00 00 00 00       	mov    eax,0x0
   2d3c9:	e8 12 66 fd ff       	call   39e0 <fprintf@plt>
   2d3ce:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   2d3d8:	e9 90 00 00 00       	jmp    2d46d <write_parameter_file+0x1305>
   2d3dd:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   2d3e3:	48 98                	cdqe   
   2d3e5:	48 89 c2             	mov    rdx,rax
   2d3e8:	48 c1 e2 02          	shl    rdx,0x2
   2d3ec:	48 01 c2             	add    rdx,rax
   2d3ef:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2d3f7:	48 89 c2             	mov    rdx,rax
   2d3fa:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   2d400:	48 63 c8             	movsxd rcx,eax
   2d403:	48 89 c8             	mov    rax,rcx
   2d406:	48 c1 e0 02          	shl    rax,0x2
   2d40a:	48 01 c8             	add    rax,rcx
   2d40d:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2d415:	48 01 c8             	add    rax,rcx
   2d418:	48 c1 e0 02          	shl    rax,0x2
   2d41c:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2d420:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   2d426:	48 98                	cdqe   
   2d428:	48 69 d0 a0 0f 00 00 	imul   rdx,rax,0xfa0
   2d42f:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   2d435:	48 98                	cdqe   
   2d437:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2d43e:	48 01 d0             	add    rax,rdx
   2d441:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2d445:	48 8d 05 94 e1 1c 00 	lea    rax,[rip+0x1ce194]        # 1fb5e0 <int21_dH>
   2d44c:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2d450:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d454:	48 89 c1             	mov    rcx,rax
   2d457:	ba 05 00 00 00       	mov    edx,0x5
   2d45c:	be 05 00 00 00       	mov    esi,0x5
   2d461:	e8 da 9d ff ff       	call   27240 <display_array>
   2d466:	83 85 6c ff ff ff 01 	add    DWORD PTR [rbp-0x94],0x1
   2d46d:	83 bd 6c ff ff ff 04 	cmp    DWORD PTR [rbp-0x94],0x4
   2d474:	0f 8e 63 ff ff ff    	jle    2d3dd <write_parameter_file+0x1275>
   2d47a:	83 85 68 ff ff ff 01 	add    DWORD PTR [rbp-0x98],0x1
   2d481:	83 bd 68 ff ff ff 04 	cmp    DWORD PTR [rbp-0x98],0x4
   2d488:	0f 8e fb fe ff ff    	jle    2d389 <write_parameter_file+0x1221>
   2d48e:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
   2d495:	83 bd 64 ff ff ff 07 	cmp    DWORD PTR [rbp-0x9c],0x7
   2d49c:	0f 8e d8 fe ff ff    	jle    2d37a <write_parameter_file+0x1212>
   2d4a2:	83 85 60 ff ff ff 01 	add    DWORD PTR [rbp-0xa0],0x1
   2d4a9:	83 bd 60 ff ff ff 07 	cmp    DWORD PTR [rbp-0xa0],0x7
   2d4b0:	0f 8e b5 fe ff ff    	jle    2d36b <write_parameter_file+0x1203>
   2d4b6:	bf 1d 00 00 00       	mov    edi,0x1d
   2d4bb:	e8 ec e5 ff ff       	call   2baac <settype>
   2d4c0:	48 89 c2             	mov    rdx,rax
   2d4c3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d4c7:	48 8d 35 a2 8b 1b 00 	lea    rsi,[rip+0x1b8ba2]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d4ce:	48 89 c7             	mov    rdi,rax
   2d4d1:	b8 00 00 00 00       	mov    eax,0x0
   2d4d6:	e8 05 65 fd ff       	call   39e0 <fprintf@plt>
   2d4db:	c7 85 70 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x90],0x1
   2d4e5:	e9 7d 01 00 00       	jmp    2d667 <write_parameter_file+0x14ff>
   2d4ea:	c7 85 74 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x1
   2d4f4:	e9 5a 01 00 00       	jmp    2d653 <write_parameter_file+0x14eb>
   2d4f9:	c7 85 78 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x88],0x1
   2d503:	e9 37 01 00 00       	jmp    2d63f <write_parameter_file+0x14d7>
   2d508:	c7 85 7c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x84],0x1
   2d512:	e9 14 01 00 00       	jmp    2d62b <write_parameter_file+0x14c3>
   2d517:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   2d51d:	48 98                	cdqe   
   2d51f:	48 8b 7c c5 a0       	mov    rdi,QWORD PTR [rbp+rax*8-0x60]
   2d524:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   2d52a:	48 98                	cdqe   
   2d52c:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2d531:	0f be f0             	movsx  esi,al
   2d534:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   2d53a:	48 98                	cdqe   
   2d53c:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2d541:	0f be c8             	movsx  ecx,al
   2d544:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   2d54a:	48 98                	cdqe   
   2d54c:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2d551:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d555:	49 89 f9             	mov    r9,rdi
   2d558:	41 89 f0             	mov    r8d,esi
   2d55b:	48 8d 35 8d 8b 1b 00 	lea    rsi,[rip+0x1b8b8d]        # 1e60ef <parameter_set_rna_turner2004+0x5d74f>
   2d562:	48 89 c7             	mov    rdi,rax
   2d565:	b8 00 00 00 00       	mov    eax,0x0
   2d56a:	e8 71 64 fd ff       	call   39e0 <fprintf@plt>
   2d56f:	c7 45 80 01 00 00 00 	mov    DWORD PTR [rbp-0x80],0x1
   2d576:	e9 9f 00 00 00       	jmp    2d61a <write_parameter_file+0x14b2>
   2d57b:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   2d57e:	48 98                	cdqe   
   2d580:	48 89 c2             	mov    rdx,rax
   2d583:	48 c1 e2 02          	shl    rdx,0x2
   2d587:	48 01 c2             	add    rdx,rax
   2d58a:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2d592:	48 89 c2             	mov    rdx,rax
   2d595:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   2d59b:	48 63 c8             	movsxd rcx,eax
   2d59e:	48 89 c8             	mov    rax,rcx
   2d5a1:	48 c1 e0 02          	shl    rax,0x2
   2d5a5:	48 01 c8             	add    rax,rcx
   2d5a8:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2d5b0:	48 01 c8             	add    rax,rcx
   2d5b3:	48 c1 e0 02          	shl    rax,0x2
   2d5b7:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2d5bb:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   2d5c1:	48 98                	cdqe   
   2d5c3:	48 69 d0 c4 09 00 00 	imul   rdx,rax,0x9c4
   2d5ca:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   2d5d0:	48 98                	cdqe   
   2d5d2:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2d5d9:	48 01 d0             	add    rax,rdx
   2d5dc:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2d5e0:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   2d5e6:	48 98                	cdqe   
   2d5e8:	48 69 c0 20 4e 00 00 	imul   rax,rax,0x4e20
   2d5ef:	48 01 c2             	add    rdx,rax
   2d5f2:	48 8d 05 e7 5c 1d 00 	lea    rax,[rip+0x1d5ce7]        # 2032e0 <int22_37>
   2d5f9:	48 01 d0             	add    rax,rdx
   2d5fc:	48 8d 78 04          	lea    rdi,[rax+0x4]
   2d600:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d604:	48 89 c1             	mov    rcx,rax
   2d607:	ba 05 00 00 00       	mov    edx,0x5
   2d60c:	be 04 00 00 00       	mov    esi,0x4
   2d611:	e8 2a 9c ff ff       	call   27240 <display_array>
   2d616:	83 45 80 01          	add    DWORD PTR [rbp-0x80],0x1
   2d61a:	83 7d 80 04          	cmp    DWORD PTR [rbp-0x80],0x4
   2d61e:	0f 8e 57 ff ff ff    	jle    2d57b <write_parameter_file+0x1413>
   2d624:	83 85 7c ff ff ff 01 	add    DWORD PTR [rbp-0x84],0x1
   2d62b:	83 bd 7c ff ff ff 04 	cmp    DWORD PTR [rbp-0x84],0x4
   2d632:	0f 8e df fe ff ff    	jle    2d517 <write_parameter_file+0x13af>
   2d638:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   2d63f:	83 bd 78 ff ff ff 04 	cmp    DWORD PTR [rbp-0x88],0x4
   2d646:	0f 8e bc fe ff ff    	jle    2d508 <write_parameter_file+0x13a0>
   2d64c:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   2d653:	83 bd 74 ff ff ff 06 	cmp    DWORD PTR [rbp-0x8c],0x6
   2d65a:	0f 8e 99 fe ff ff    	jle    2d4f9 <write_parameter_file+0x1391>
   2d660:	83 85 70 ff ff ff 01 	add    DWORD PTR [rbp-0x90],0x1
   2d667:	83 bd 70 ff ff ff 06 	cmp    DWORD PTR [rbp-0x90],0x6
   2d66e:	0f 8e 76 fe ff ff    	jle    2d4ea <write_parameter_file+0x1382>
   2d674:	bf 1e 00 00 00       	mov    edi,0x1e
   2d679:	e8 2e e4 ff ff       	call   2baac <settype>
   2d67e:	48 89 c2             	mov    rdx,rax
   2d681:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d685:	48 8d 35 e4 89 1b 00 	lea    rsi,[rip+0x1b89e4]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d68c:	48 89 c7             	mov    rdi,rax
   2d68f:	b8 00 00 00 00       	mov    eax,0x0
   2d694:	e8 47 63 fd ff       	call   39e0 <fprintf@plt>
   2d699:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   2d6a0:	e9 47 01 00 00       	jmp    2d7ec <write_parameter_file+0x1684>
   2d6a5:	c7 45 88 01 00 00 00 	mov    DWORD PTR [rbp-0x78],0x1
   2d6ac:	e9 2d 01 00 00       	jmp    2d7de <write_parameter_file+0x1676>
   2d6b1:	c7 45 8c 01 00 00 00 	mov    DWORD PTR [rbp-0x74],0x1
   2d6b8:	e9 13 01 00 00       	jmp    2d7d0 <write_parameter_file+0x1668>
   2d6bd:	c7 45 90 01 00 00 00 	mov    DWORD PTR [rbp-0x70],0x1
   2d6c4:	e9 f9 00 00 00       	jmp    2d7c2 <write_parameter_file+0x165a>
   2d6c9:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   2d6cc:	48 98                	cdqe   
   2d6ce:	48 8b 7c c5 a0       	mov    rdi,QWORD PTR [rbp+rax*8-0x60]
   2d6d3:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   2d6d6:	48 98                	cdqe   
   2d6d8:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2d6dd:	0f be f0             	movsx  esi,al
   2d6e0:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   2d6e3:	48 98                	cdqe   
   2d6e5:	0f b6 44 05 e2       	movzx  eax,BYTE PTR [rbp+rax*1-0x1e]
   2d6ea:	0f be c8             	movsx  ecx,al
   2d6ed:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   2d6f0:	48 98                	cdqe   
   2d6f2:	48 8b 54 c5 a0       	mov    rdx,QWORD PTR [rbp+rax*8-0x60]
   2d6f7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d6fb:	49 89 f9             	mov    r9,rdi
   2d6fe:	41 89 f0             	mov    r8d,esi
   2d701:	48 8d 35 e7 89 1b 00 	lea    rsi,[rip+0x1b89e7]        # 1e60ef <parameter_set_rna_turner2004+0x5d74f>
   2d708:	48 89 c7             	mov    rdi,rax
   2d70b:	b8 00 00 00 00       	mov    eax,0x0
   2d710:	e8 cb 62 fd ff       	call   39e0 <fprintf@plt>
   2d715:	c7 45 94 01 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x1
   2d71c:	e9 93 00 00 00       	jmp    2d7b4 <write_parameter_file+0x164c>
   2d721:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   2d724:	48 98                	cdqe   
   2d726:	48 89 c2             	mov    rdx,rax
   2d729:	48 c1 e2 02          	shl    rdx,0x2
   2d72d:	48 01 c2             	add    rdx,rax
   2d730:	48 8d 04 95 00 00 00 00 	lea    rax,[rdx*4+0x0]
   2d738:	48 89 c2             	mov    rdx,rax
   2d73b:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   2d73e:	48 63 c8             	movsxd rcx,eax
   2d741:	48 89 c8             	mov    rax,rcx
   2d744:	48 c1 e0 02          	shl    rax,0x2
   2d748:	48 01 c8             	add    rax,rcx
   2d74b:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2d753:	48 01 c8             	add    rax,rcx
   2d756:	48 c1 e0 02          	shl    rax,0x2
   2d75a:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   2d75e:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   2d761:	48 98                	cdqe   
   2d763:	48 69 d0 c4 09 00 00 	imul   rdx,rax,0x9c4
   2d76a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   2d76d:	48 98                	cdqe   
   2d76f:	48 69 c0 f4 01 00 00 	imul   rax,rax,0x1f4
   2d776:	48 01 d0             	add    rax,rdx
   2d779:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   2d77d:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   2d780:	48 98                	cdqe   
   2d782:	48 69 c0 20 4e 00 00 	imul   rax,rax,0x4e20
   2d789:	48 01 c2             	add    rdx,rax
   2d78c:	48 8d 05 4d cc 1f 00 	lea    rax,[rip+0x1fcc4d]        # 22a3e0 <int22_dH>
   2d793:	48 01 d0             	add    rax,rdx
   2d796:	48 8d 78 04          	lea    rdi,[rax+0x4]
   2d79a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d79e:	48 89 c1             	mov    rcx,rax
   2d7a1:	ba 05 00 00 00       	mov    edx,0x5
   2d7a6:	be 04 00 00 00       	mov    esi,0x4
   2d7ab:	e8 90 9a ff ff       	call   27240 <display_array>
   2d7b0:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
   2d7b4:	83 7d 94 04          	cmp    DWORD PTR [rbp-0x6c],0x4
   2d7b8:	0f 8e 63 ff ff ff    	jle    2d721 <write_parameter_file+0x15b9>
   2d7be:	83 45 90 01          	add    DWORD PTR [rbp-0x70],0x1
   2d7c2:	83 7d 90 04          	cmp    DWORD PTR [rbp-0x70],0x4
   2d7c6:	0f 8e fd fe ff ff    	jle    2d6c9 <write_parameter_file+0x1561>
   2d7cc:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   2d7d0:	83 7d 8c 04          	cmp    DWORD PTR [rbp-0x74],0x4
   2d7d4:	0f 8e e3 fe ff ff    	jle    2d6bd <write_parameter_file+0x1555>
   2d7da:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   2d7de:	83 7d 88 06          	cmp    DWORD PTR [rbp-0x78],0x6
   2d7e2:	0f 8e c9 fe ff ff    	jle    2d6b1 <write_parameter_file+0x1549>
   2d7e8:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   2d7ec:	83 7d 84 06          	cmp    DWORD PTR [rbp-0x7c],0x6
   2d7f0:	0f 8e af fe ff ff    	jle    2d6a5 <write_parameter_file+0x153d>
   2d7f6:	bf 03 00 00 00       	mov    edi,0x3
   2d7fb:	e8 ac e2 ff ff       	call   2baac <settype>
   2d800:	48 89 c2             	mov    rdx,rax
   2d803:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d807:	48 8d 35 62 88 1b 00 	lea    rsi,[rip+0x1b8862]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d80e:	48 89 c7             	mov    rdi,rax
   2d811:	b8 00 00 00 00       	mov    eax,0x0
   2d816:	e8 c5 61 fd ff       	call   39e0 <fprintf@plt>
   2d81b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d81f:	48 89 c1             	mov    rcx,rax
   2d822:	ba 0a 00 00 00       	mov    edx,0xa
   2d827:	be 1f 00 00 00       	mov    esi,0x1f
   2d82c:	48 8d 3d 4d fc 1b 00 	lea    rdi,[rip+0x1bfc4d]        # 1ed480 <hairpin37>
   2d833:	e8 08 9a ff ff       	call   27240 <display_array>
   2d838:	bf 04 00 00 00       	mov    edi,0x4
   2d83d:	e8 6a e2 ff ff       	call   2baac <settype>
   2d842:	48 89 c2             	mov    rdx,rax
   2d845:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d849:	48 8d 35 20 88 1b 00 	lea    rsi,[rip+0x1b8820]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d850:	48 89 c7             	mov    rdi,rax
   2d853:	b8 00 00 00 00       	mov    eax,0x0
   2d858:	e8 83 61 fd ff       	call   39e0 <fprintf@plt>
   2d85d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d861:	48 89 c1             	mov    rcx,rax
   2d864:	ba 0a 00 00 00       	mov    edx,0xa
   2d869:	be 1f 00 00 00       	mov    esi,0x1f
   2d86e:	48 8d 3d 8b fc 1b 00 	lea    rdi,[rip+0x1bfc8b]        # 1ed500 <hairpindH>
   2d875:	e8 c6 99 ff ff       	call   27240 <display_array>
   2d87a:	bf 05 00 00 00       	mov    edi,0x5
   2d87f:	e8 28 e2 ff ff       	call   2baac <settype>
   2d884:	48 89 c2             	mov    rdx,rax
   2d887:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d88b:	48 8d 35 de 87 1b 00 	lea    rsi,[rip+0x1b87de]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d892:	48 89 c7             	mov    rdi,rax
   2d895:	b8 00 00 00 00       	mov    eax,0x0
   2d89a:	e8 41 61 fd ff       	call   39e0 <fprintf@plt>
   2d89f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d8a3:	48 89 c1             	mov    rcx,rax
   2d8a6:	ba 0a 00 00 00       	mov    edx,0xa
   2d8ab:	be 1f 00 00 00       	mov    esi,0x1f
   2d8b0:	48 8d 3d c9 fc 1b 00 	lea    rdi,[rip+0x1bfcc9]        # 1ed580 <bulge37>
   2d8b7:	e8 84 99 ff ff       	call   27240 <display_array>
   2d8bc:	bf 06 00 00 00       	mov    edi,0x6
   2d8c1:	e8 e6 e1 ff ff       	call   2baac <settype>
   2d8c6:	48 89 c2             	mov    rdx,rax
   2d8c9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d8cd:	48 8d 35 9c 87 1b 00 	lea    rsi,[rip+0x1b879c]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d8d4:	48 89 c7             	mov    rdi,rax
   2d8d7:	b8 00 00 00 00       	mov    eax,0x0
   2d8dc:	e8 ff 60 fd ff       	call   39e0 <fprintf@plt>
   2d8e1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d8e5:	48 89 c1             	mov    rcx,rax
   2d8e8:	ba 0a 00 00 00       	mov    edx,0xa
   2d8ed:	be 1f 00 00 00       	mov    esi,0x1f
   2d8f2:	48 8d 3d 07 fd 1b 00 	lea    rdi,[rip+0x1bfd07]        # 1ed600 <bulgedH>
   2d8f9:	e8 42 99 ff ff       	call   27240 <display_array>
   2d8fe:	bf 07 00 00 00       	mov    edi,0x7
   2d903:	e8 a4 e1 ff ff       	call   2baac <settype>
   2d908:	48 89 c2             	mov    rdx,rax
   2d90b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d90f:	48 8d 35 5a 87 1b 00 	lea    rsi,[rip+0x1b875a]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d916:	48 89 c7             	mov    rdi,rax
   2d919:	b8 00 00 00 00       	mov    eax,0x0
   2d91e:	e8 bd 60 fd ff       	call   39e0 <fprintf@plt>
   2d923:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d927:	48 89 c1             	mov    rcx,rax
   2d92a:	ba 0a 00 00 00       	mov    edx,0xa
   2d92f:	be 1f 00 00 00       	mov    esi,0x1f
   2d934:	48 8d 3d 45 fd 1b 00 	lea    rdi,[rip+0x1bfd45]        # 1ed680 <internal_loop37>
   2d93b:	e8 00 99 ff ff       	call   27240 <display_array>
   2d940:	bf 08 00 00 00       	mov    edi,0x8
   2d945:	e8 62 e1 ff ff       	call   2baac <settype>
   2d94a:	48 89 c2             	mov    rdx,rax
   2d94d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d951:	48 8d 35 18 87 1b 00 	lea    rsi,[rip+0x1b8718]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d958:	48 89 c7             	mov    rdi,rax
   2d95b:	b8 00 00 00 00       	mov    eax,0x0
   2d960:	e8 7b 60 fd ff       	call   39e0 <fprintf@plt>
   2d965:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d969:	48 89 c1             	mov    rcx,rax
   2d96c:	ba 0a 00 00 00       	mov    edx,0xa
   2d971:	be 1f 00 00 00       	mov    esi,0x1f
   2d976:	48 8d 3d 83 fd 1b 00 	lea    rdi,[rip+0x1bfd83]        # 1ed700 <internal_loopdH>
   2d97d:	e8 be 98 ff ff       	call   27240 <display_array>
   2d982:	bf 1f 00 00 00       	mov    edi,0x1f
   2d987:	e8 20 e1 ff ff       	call   2baac <settype>
   2d98c:	48 89 c2             	mov    rdx,rax
   2d98f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d993:	48 8d 35 d6 86 1b 00 	lea    rsi,[rip+0x1b86d6]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2d99a:	48 89 c7             	mov    rdi,rax
   2d99d:	b8 00 00 00 00       	mov    eax,0x0
   2d9a2:	e8 39 60 fd ff       	call   39e0 <fprintf@plt>
   2d9a7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d9ab:	48 89 c1             	mov    rcx,rax
   2d9ae:	ba 38 00 00 00       	mov    edx,0x38
   2d9b3:	be 01 00 00 00       	mov    esi,0x1
   2d9b8:	48 8d 3d 49 87 1b 00 	lea    rdi,[rip+0x1b8749]        # 1e6108 <parameter_set_rna_turner2004+0x5d768>
   2d9bf:	e8 cc 61 fd ff       	call   3b90 <fwrite@plt>
   2d9c4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2d9c8:	48 89 c1             	mov    rcx,rax
   2d9cb:	ba 31 00 00 00       	mov    edx,0x31
   2d9d0:	be 01 00 00 00       	mov    esi,0x1
   2d9d5:	48 8d 3d 6c 87 1b 00 	lea    rdi,[rip+0x1b876c]        # 1e6148 <parameter_set_rna_turner2004+0x5d7a8>
   2d9dc:	e8 af 61 fd ff       	call   3b90 <fwrite@plt>
   2d9e1:	8b 3d 2d f8 1b 00    	mov    edi,DWORD PTR [rip+0x1bf82d]        # 1ed214 <ML_interndH>
   2d9e7:	8b 35 23 f8 1b 00    	mov    esi,DWORD PTR [rip+0x1bf823]        # 1ed210 <ML_intern37>
   2d9ed:	44 8b 0d 28 f8 1b 00 	mov    r9d,DWORD PTR [rip+0x1bf828]        # 1ed21c <ML_closingdH>
   2d9f4:	44 8b 05 1d f8 1b 00 	mov    r8d,DWORD PTR [rip+0x1bf81d]        # 1ed218 <ML_closing37>
   2d9fb:	8b 0d ef 4f 22 00    	mov    ecx,DWORD PTR [rip+0x224fef]        # 2529f0 <ML_BASEdH>
   2da01:	8b 15 e5 4f 22 00    	mov    edx,DWORD PTR [rip+0x224fe5]        # 2529ec <ML_BASE37>
   2da07:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2da0b:	57                   	push   rdi
   2da0c:	56                   	push   rsi
   2da0d:	48 8d 35 66 87 1b 00 	lea    rsi,[rip+0x1b8766]        # 1e617a <parameter_set_rna_turner2004+0x5d7da>
   2da14:	48 89 c7             	mov    rdi,rax
   2da17:	b8 00 00 00 00       	mov    eax,0x0
   2da1c:	e8 bf 5f fd ff       	call   39e0 <fprintf@plt>
   2da21:	48 83 c4 10          	add    rsp,0x10
   2da25:	bf 23 00 00 00       	mov    edi,0x23
   2da2a:	e8 7d e0 ff ff       	call   2baac <settype>
   2da2f:	48 89 c2             	mov    rdx,rax
   2da32:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2da36:	48 8d 35 33 86 1b 00 	lea    rsi,[rip+0x1b8633]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2da3d:	48 89 c7             	mov    rdi,rax
   2da40:	b8 00 00 00 00       	mov    eax,0x0
   2da45:	e8 96 5f fd ff       	call   39e0 <fprintf@plt>
   2da4a:	8b 35 d0 f7 1b 00    	mov    esi,DWORD PTR [rip+0x1bf7d0]        # 1ed220 <MAX_NINIO>
   2da50:	8b 0d d2 f7 1b 00    	mov    ecx,DWORD PTR [rip+0x1bf7d2]        # 1ed228 <niniodH>
   2da56:	8b 15 c8 f7 1b 00    	mov    edx,DWORD PTR [rip+0x1bf7c8]        # 1ed224 <ninio37>
   2da5c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2da60:	41 89 f0             	mov    r8d,esi
   2da63:	48 8d 35 2e 87 1b 00 	lea    rsi,[rip+0x1b872e]        # 1e6198 <parameter_set_rna_turner2004+0x5d7f8>
   2da6a:	48 89 c7             	mov    rdi,rax
   2da6d:	b8 00 00 00 00       	mov    eax,0x0
   2da72:	e8 69 5f fd ff       	call   39e0 <fprintf@plt>
   2da77:	bf 24 00 00 00       	mov    edi,0x24
   2da7c:	e8 2b e0 ff ff       	call   2baac <settype>
   2da81:	48 89 c2             	mov    rdx,rax
   2da84:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2da88:	48 8d 35 e1 85 1b 00 	lea    rsi,[rip+0x1b85e1]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2da8f:	48 89 c7             	mov    rdi,rax
   2da92:	b8 00 00 00 00       	mov    eax,0x0
   2da97:	e8 44 5f fd ff       	call   39e0 <fprintf@plt>
   2da9c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2daa0:	48 89 c1             	mov    rcx,rax
   2daa3:	ba 34 00 00 00       	mov    edx,0x34
   2daa8:	be 01 00 00 00       	mov    esi,0x1
   2daad:	48 8d 3d 34 87 1b 00 	lea    rdi,[rip+0x1b8734]        # 1e61e8 <parameter_set_rna_turner2004+0x5d848>
   2dab4:	e8 d7 60 fd ff       	call   3b90 <fwrite@plt>
   2dab9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dabd:	48 89 c1             	mov    rcx,rax
   2dac0:	ba 2c 00 00 00       	mov    edx,0x2c
   2dac5:	be 01 00 00 00       	mov    esi,0x1
   2daca:	48 8d 3d 4f 87 1b 00 	lea    rdi,[rip+0x1b874f]        # 1e6220 <parameter_set_rna_turner2004+0x5d880>
   2dad1:	e8 ba 60 fd ff       	call   3b90 <fwrite@plt>
   2dad6:	48 8b 35 2b f7 1b 00 	mov    rsi,QWORD PTR [rip+0x1bf72b]        # 1ed208 <lxc37>
   2dadd:	44 8b 05 4c f7 1b 00 	mov    r8d,DWORD PTR [rip+0x1bf74c]        # 1ed230 <TerminalAUdH>
   2dae4:	8b 3d 42 f7 1b 00    	mov    edi,DWORD PTR [rip+0x1bf742]        # 1ed22c <TerminalAU37>
   2daea:	8b 0d 48 f7 1b 00    	mov    ecx,DWORD PTR [rip+0x1bf748]        # 1ed238 <DuplexInitdH>
   2daf0:	8b 15 3e f7 1b 00    	mov    edx,DWORD PTR [rip+0x1bf73e]        # 1ed234 <DuplexInit37>
   2daf6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dafa:	48 83 ec 08          	sub    rsp,0x8
   2dafe:	6a 00                	push   0x0
   2db00:	66 48 0f 6e c6       	movq   xmm0,rsi
   2db05:	45 89 c1             	mov    r9d,r8d
   2db08:	41 89 f8             	mov    r8d,edi
   2db0b:	48 8d 35 3e 87 1b 00 	lea    rsi,[rip+0x1b873e]        # 1e6250 <parameter_set_rna_turner2004+0x5d8b0>
   2db12:	48 89 c7             	mov    rdi,rax
   2db15:	b8 01 00 00 00       	mov    eax,0x1
   2db1a:	e8 c1 5e fd ff       	call   39e0 <fprintf@plt>
   2db1f:	48 83 c4 10          	add    rsp,0x10
   2db23:	bf 22 00 00 00       	mov    edi,0x22
   2db28:	e8 7f df ff ff       	call   2baac <settype>
   2db2d:	48 89 c2             	mov    rdx,rax
   2db30:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2db34:	48 8d 35 35 85 1b 00 	lea    rsi,[rip+0x1b8535]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2db3b:	48 89 c7             	mov    rdi,rax
   2db3e:	b8 00 00 00 00       	mov    eax,0x0
   2db43:	e8 98 5e fd ff       	call   39e0 <fprintf@plt>
   2db48:	c7 85 d4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x0
   2db52:	eb 6f                	jmp    2dbc3 <write_parameter_file+0x1a5b>
   2db54:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2db5a:	48 98                	cdqe   
   2db5c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2db64:	48 8d 05 d5 2a 1c 00 	lea    rax,[rip+0x1c2ad5]        # 1f0640 <HexaloopdH>
   2db6b:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2db6e:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2db74:	48 98                	cdqe   
   2db76:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2db7e:	48 8d 05 1b 2a 1c 00 	lea    rax,[rip+0x1c2a1b]        # 1f05a0 <Hexaloop37>
   2db85:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2db88:	8b 95 d4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x12c]
   2db8e:	89 d0                	mov    eax,edx
   2db90:	c1 e0 03             	shl    eax,0x3
   2db93:	01 d0                	add    eax,edx
   2db95:	48 98                	cdqe   
   2db97:	48 8d 15 82 28 1c 00 	lea    rdx,[rip+0x1c2882]        # 1f0420 <Hexaloops>
   2db9e:	48 01 c2             	add    rdx,rax
   2dba1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dba5:	41 89 f0             	mov    r8d,esi
   2dba8:	48 8d 35 c0 86 1b 00 	lea    rsi,[rip+0x1b86c0]        # 1e626f <parameter_set_rna_turner2004+0x5d8cf>
   2dbaf:	48 89 c7             	mov    rdi,rax
   2dbb2:	b8 00 00 00 00       	mov    eax,0x0
   2dbb7:	e8 24 5e fd ff       	call   39e0 <fprintf@plt>
   2dbbc:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2dbc3:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dbc9:	48 63 d8             	movsxd rbx,eax
   2dbcc:	48 8d 3d 4d 28 1c 00 	lea    rdi,[rip+0x1c284d]        # 1f0420 <Hexaloops>
   2dbd3:	e8 48 5b fd ff       	call   3720 <strlen@plt>
   2dbd8:	48 ba 8f e3 38 8e e3 38 8e e3 	movabs rdx,0xe38e38e38e38e38f
   2dbe2:	48 f7 e2             	mul    rdx
   2dbe5:	48 89 d0             	mov    rax,rdx
   2dbe8:	48 c1 e8 03          	shr    rax,0x3
   2dbec:	48 39 c3             	cmp    rbx,rax
   2dbef:	0f 82 5f ff ff ff    	jb     2db54 <write_parameter_file+0x19ec>
   2dbf5:	bf 20 00 00 00       	mov    edi,0x20
   2dbfa:	e8 ad de ff ff       	call   2baac <settype>
   2dbff:	48 89 c2             	mov    rdx,rax
   2dc02:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dc06:	48 8d 35 63 84 1b 00 	lea    rsi,[rip+0x1b8463]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2dc0d:	48 89 c7             	mov    rdi,rax
   2dc10:	b8 00 00 00 00       	mov    eax,0x0
   2dc15:	e8 c6 5d fd ff       	call   39e0 <fprintf@plt>
   2dc1a:	c7 85 d4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x0
   2dc24:	eb 6f                	jmp    2dc95 <write_parameter_file+0x1b2d>
   2dc26:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dc2c:	48 98                	cdqe   
   2dc2e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2dc36:	48 8d 05 43 27 1c 00 	lea    rax,[rip+0x1c2743]        # 1f0380 <TetraloopdH>
   2dc3d:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2dc40:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dc46:	48 98                	cdqe   
   2dc48:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2dc50:	48 8d 05 89 26 1c 00 	lea    rax,[rip+0x1c2689]        # 1f02e0 <Tetraloop37>
   2dc57:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2dc5a:	8b 95 d4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x12c]
   2dc60:	89 d0                	mov    eax,edx
   2dc62:	c1 e0 03             	shl    eax,0x3
   2dc65:	29 d0                	sub    eax,edx
   2dc67:	48 98                	cdqe   
   2dc69:	48 8d 15 50 25 1c 00 	lea    rdx,[rip+0x1c2550]        # 1f01c0 <Tetraloops>
   2dc70:	48 01 c2             	add    rdx,rax
   2dc73:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dc77:	41 89 f0             	mov    r8d,esi
   2dc7a:	48 8d 35 fd 85 1b 00 	lea    rsi,[rip+0x1b85fd]        # 1e627e <parameter_set_rna_turner2004+0x5d8de>
   2dc81:	48 89 c7             	mov    rdi,rax
   2dc84:	b8 00 00 00 00       	mov    eax,0x0
   2dc89:	e8 52 5d fd ff       	call   39e0 <fprintf@plt>
   2dc8e:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2dc95:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dc9b:	48 63 d8             	movsxd rbx,eax
   2dc9e:	48 8d 3d 1b 25 1c 00 	lea    rdi,[rip+0x1c251b]        # 1f01c0 <Tetraloops>
   2dca5:	e8 76 5a fd ff       	call   3720 <strlen@plt>
   2dcaa:	48 89 c1             	mov    rcx,rax
   2dcad:	48 ba 93 24 49 92 24 49 92 24 	movabs rdx,0x2492492492492493
   2dcb7:	48 89 c8             	mov    rax,rcx
   2dcba:	48 f7 e2             	mul    rdx
   2dcbd:	48 89 c8             	mov    rax,rcx
   2dcc0:	48 29 d0             	sub    rax,rdx
   2dcc3:	48 d1 e8             	shr    rax,1
   2dcc6:	48 01 d0             	add    rax,rdx
   2dcc9:	48 c1 e8 02          	shr    rax,0x2
   2dccd:	48 39 c3             	cmp    rbx,rax
   2dcd0:	0f 82 50 ff ff ff    	jb     2dc26 <write_parameter_file+0x1abe>
   2dcd6:	bf 21 00 00 00       	mov    edi,0x21
   2dcdb:	e8 cc dd ff ff       	call   2baac <settype>
   2dce0:	48 89 c2             	mov    rdx,rax
   2dce3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dce7:	48 8d 35 82 83 1b 00 	lea    rsi,[rip+0x1b8382]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2dcee:	48 89 c7             	mov    rdi,rax
   2dcf1:	b8 00 00 00 00       	mov    eax,0x0
   2dcf6:	e8 e5 5c fd ff       	call   39e0 <fprintf@plt>
   2dcfb:	c7 85 d4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x12c],0x0
   2dd05:	eb 70                	jmp    2dd77 <write_parameter_file+0x1c0f>
   2dd07:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dd0d:	48 98                	cdqe   
   2dd0f:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2dd17:	48 8d 05 02 24 1c 00 	lea    rax,[rip+0x1c2402]        # 1f0120 <TriloopdH>
   2dd1e:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   2dd21:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dd27:	48 98                	cdqe   
   2dd29:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2dd31:	48 8d 05 48 23 1c 00 	lea    rax,[rip+0x1c2348]        # 1f0080 <Triloop37>
   2dd38:	8b 0c 02             	mov    ecx,DWORD PTR [rdx+rax*1]
   2dd3b:	8b 95 d4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x12c]
   2dd41:	89 d0                	mov    eax,edx
   2dd43:	01 c0                	add    eax,eax
   2dd45:	01 d0                	add    eax,edx
   2dd47:	01 c0                	add    eax,eax
   2dd49:	48 98                	cdqe   
   2dd4b:	48 8d 15 2e 22 1c 00 	lea    rdx,[rip+0x1c222e]        # 1eff80 <Triloops>
   2dd52:	48 01 c2             	add    rdx,rax
   2dd55:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2dd59:	41 89 f0             	mov    r8d,esi
   2dd5c:	48 8d 35 2a 85 1b 00 	lea    rsi,[rip+0x1b852a]        # 1e628d <parameter_set_rna_turner2004+0x5d8ed>
   2dd63:	48 89 c7             	mov    rdi,rax
   2dd66:	b8 00 00 00 00       	mov    eax,0x0
   2dd6b:	e8 70 5c fd ff       	call   39e0 <fprintf@plt>
   2dd70:	83 85 d4 fe ff ff 01 	add    DWORD PTR [rbp-0x12c],0x1
   2dd77:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
   2dd7d:	48 63 d8             	movsxd rbx,eax
   2dd80:	48 8d 3d f9 21 1c 00 	lea    rdi,[rip+0x1c21f9]        # 1eff80 <Triloops>
   2dd87:	e8 94 59 fd ff       	call   3720 <strlen@plt>
   2dd8c:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   2dd96:	48 f7 e2             	mul    rdx
   2dd99:	48 89 d0             	mov    rax,rdx
   2dd9c:	48 c1 e8 02          	shr    rax,0x2
   2dda0:	48 39 c3             	cmp    rbx,rax
   2dda3:	0f 82 5e ff ff ff    	jb     2dd07 <write_parameter_file+0x1b9f>
   2dda9:	bf 00 00 00 00       	mov    edi,0x0
   2ddae:	e8 f9 dc ff ff       	call   2baac <settype>
   2ddb3:	48 89 c2             	mov    rdx,rax
   2ddb6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ddba:	48 8d 35 af 82 1b 00 	lea    rsi,[rip+0x1b82af]        # 1e6070 <parameter_set_rna_turner2004+0x5d6d0>
   2ddc1:	48 89 c7             	mov    rdi,rax
   2ddc4:	b8 00 00 00 00       	mov    eax,0x0
   2ddc9:	e8 12 5c fd ff       	call   39e0 <fprintf@plt>
   2ddce:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   2ddd2:	48 89 c7             	mov    rdi,rax
   2ddd5:	e8 c6 5a fd ff       	call   38a0 <fclose@plt>
   2ddda:	90                   	nop
   2dddb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2dddf:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   2dde8:	74 05                	je     2ddef <write_parameter_file+0x1c87>
   2ddea:	e8 01 5b fd ff       	call   38f0 <__stack_chk_fail@plt>
   2ddef:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ddf3:	c9                   	leave  
   2ddf4:	c3                   	ret    

000000000002ddf5 <vrna_fun_dispatch_disable>:
   2ddf5:	f3 0f 1e fa          	endbr64 
   2ddf9:	55                   	push   rbp
   2ddfa:	48 89 e5             	mov    rbp,rsp
   2ddfd:	48 8d 05 a5 00 00 00 	lea    rax,[rip+0xa5]        # 2dea9 <fun_zip_add_min_default>
   2de04:	48 89 05 dd 37 22 00 	mov    QWORD PTR [rip+0x2237dd],rax        # 2515e8 <fun_zip_add_min>
   2de0b:	90                   	nop
   2de0c:	5d                   	pop    rbp
   2de0d:	c3                   	ret    

000000000002de0e <vrna_fun_dispatch_enable>:
   2de0e:	f3 0f 1e fa          	endbr64 
   2de12:	55                   	push   rbp
   2de13:	48 89 e5             	mov    rbp,rsp
   2de16:	48 8d 05 3e 00 00 00 	lea    rax,[rip+0x3e]        # 2de5b <zip_add_min_dispatcher>
   2de1d:	48 89 05 c4 37 22 00 	mov    QWORD PTR [rip+0x2237c4],rax        # 2515e8 <fun_zip_add_min>
   2de24:	90                   	nop
   2de25:	5d                   	pop    rbp
   2de26:	c3                   	ret    

000000000002de27 <vrna_fun_zip_add_min>:
   2de27:	f3 0f 1e fa          	endbr64 
   2de2b:	55                   	push   rbp
   2de2c:	48 89 e5             	mov    rbp,rsp
   2de2f:	48 83 ec 20          	sub    rsp,0x20
   2de33:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2de37:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2de3b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   2de3e:	4c 8b 05 a3 37 22 00 	mov    r8,QWORD PTR [rip+0x2237a3]        # 2515e8 <fun_zip_add_min>
   2de45:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2de48:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2de4c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2de50:	48 89 ce             	mov    rsi,rcx
   2de53:	48 89 c7             	mov    rdi,rax
   2de56:	41 ff d0             	call   r8
   2de59:	c9                   	leave  
   2de5a:	c3                   	ret    

000000000002de5b <zip_add_min_dispatcher>:
   2de5b:	f3 0f 1e fa          	endbr64 
   2de5f:	55                   	push   rbp
   2de60:	48 89 e5             	mov    rbp,rsp
   2de63:	48 83 ec 30          	sub    rsp,0x30
   2de67:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2de6b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2de6f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   2de72:	e8 a5 4e 00 00       	call   32d1c <vrna_cpu_simd_capabilities>
   2de77:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2de7a:	48 8d 05 28 00 00 00 	lea    rax,[rip+0x28]        # 2dea9 <fun_zip_add_min_default>
   2de81:	48 89 05 60 37 22 00 	mov    QWORD PTR [rip+0x223760],rax        # 2515e8 <fun_zip_add_min>
   2de88:	f3 0f 1e fa          	endbr64 
   2de8c:	4c 8b 05 55 37 22 00 	mov    r8,QWORD PTR [rip+0x223755]        # 2515e8 <fun_zip_add_min>
   2de93:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
   2de96:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2de9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2de9e:	48 89 ce             	mov    rsi,rcx
   2dea1:	48 89 c7             	mov    rdi,rax
   2dea4:	41 ff d0             	call   r8
   2dea7:	c9                   	leave  
   2dea8:	c3                   	ret    

000000000002dea9 <fun_zip_add_min_default>:
   2dea9:	f3 0f 1e fa          	endbr64 
   2dead:	55                   	push   rbp
   2deae:	48 89 e5             	mov    rbp,rsp
   2deb1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2deb5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2deb9:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   2debc:	c7 45 f8 80 96 98 00 	mov    DWORD PTR [rbp-0x8],0x989680
   2dec3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   2deca:	eb 7c                	jmp    2df48 <fun_zip_add_min_default+0x9f>
   2decc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2decf:	48 98                	cdqe   
   2ded1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2ded9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2dedd:	48 01 d0             	add    rax,rdx
   2dee0:	8b 00                	mov    eax,DWORD PTR [rax]
   2dee2:	3d 80 96 98 00       	cmp    eax,0x989680
   2dee7:	74 5b                	je     2df44 <fun_zip_add_min_default+0x9b>
   2dee9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2deec:	48 98                	cdqe   
   2deee:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2def6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2defa:	48 01 d0             	add    rax,rdx
   2defd:	8b 00                	mov    eax,DWORD PTR [rax]
   2deff:	3d 80 96 98 00       	cmp    eax,0x989680
   2df04:	74 3e                	je     2df44 <fun_zip_add_min_default+0x9b>
   2df06:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2df09:	48 98                	cdqe   
   2df0b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2df13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2df17:	48 01 d0             	add    rax,rdx
   2df1a:	8b 10                	mov    edx,DWORD PTR [rax]
   2df1c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2df1f:	48 98                	cdqe   
   2df21:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2df29:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2df2d:	48 01 c8             	add    rax,rcx
   2df30:	8b 00                	mov    eax,DWORD PTR [rax]
   2df32:	01 d0                	add    eax,edx
   2df34:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2df37:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2df3a:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
   2df3d:	0f 4e 45 fc          	cmovle eax,DWORD PTR [rbp-0x4]
   2df41:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   2df44:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   2df48:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2df4b:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   2df4e:	0f 8c 78 ff ff ff    	jl     2decc <fun_zip_add_min_default+0x23>
   2df54:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2df57:	5d                   	pop    rbp
   2df58:	c3                   	ret    

000000000002df59 <strdup>:
   2df59:	f3 0f 1e fa          	endbr64 
   2df5d:	55                   	push   rbp
   2df5e:	48 89 e5             	mov    rbp,rsp
   2df61:	48 83 ec 20          	sub    rsp,0x20
   2df65:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2df69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2df6d:	48 89 c7             	mov    rdi,rax
   2df70:	e8 ab 57 fd ff       	call   3720 <strlen@plt>
   2df75:	83 c0 01             	add    eax,0x1
   2df78:	89 c7                	mov    edi,eax
   2df7a:	e8 92 0d 00 00       	call   2ed11 <vrna_alloc>
   2df7f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2df83:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2df87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2df8b:	48 89 d6             	mov    rsi,rdx
   2df8e:	48 89 c7             	mov    rdi,rax
   2df91:	e8 ca 58 fd ff       	call   3860 <strcpy@plt>
   2df96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2df9a:	c9                   	leave  
   2df9b:	c3                   	ret    

000000000002df9c <vrna_strdup_printf>:
   2df9c:	f3 0f 1e fa          	endbr64 
   2dfa0:	55                   	push   rbp
   2dfa1:	48 89 e5             	mov    rbp,rsp
   2dfa4:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   2dfab:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   2dfb2:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
   2dfb9:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   2dfc0:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   2dfc7:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
   2dfce:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
   2dfd5:	84 c0                	test   al,al
   2dfd7:	74 20                	je     2dff9 <vrna_strdup_printf+0x5d>
   2dfd9:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   2dfdd:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
   2dfe1:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
   2dfe5:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
   2dfe9:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
   2dfed:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
   2dff1:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
   2dff5:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
   2dff9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2e002:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2e009:	31 c0                	xor    eax,eax
   2e00b:	c7 85 30 ff ff ff 08 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x8
   2e015:	c7 85 34 ff ff ff 30 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x30
   2e01f:	48 8d 45 10          	lea    rax,[rbp+0x10]
   2e023:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   2e02a:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   2e031:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   2e038:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2e03f:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   2e046:	48 89 d6             	mov    rsi,rdx
   2e049:	48 89 c7             	mov    rdi,rax
   2e04c:	e8 27 00 00 00       	call   2e078 <vrna_strdup_vprintf>
   2e051:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
   2e058:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   2e05f:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
   2e066:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   2e06f:	74 05                	je     2e076 <vrna_strdup_printf+0xda>
   2e071:	e8 7a 58 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2e076:	c9                   	leave  
   2e077:	c3                   	ret    

000000000002e078 <vrna_strdup_vprintf>:
   2e078:	f3 0f 1e fa          	endbr64 
   2e07c:	55                   	push   rbp
   2e07d:	48 89 e5             	mov    rbp,rsp
   2e080:	48 83 ec 50          	sub    rsp,0x50
   2e084:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   2e088:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   2e08c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2e095:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2e099:	31 c0                	xor    eax,eax
   2e09b:	48 c7 45 d0 00 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
   2e0a3:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
   2e0a7:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   2e0ab:	48 8b 06             	mov    rax,QWORD PTR [rsi]
   2e0ae:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
   2e0b2:	48 89 01             	mov    QWORD PTR [rcx],rax
   2e0b5:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   2e0b9:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
   2e0bd:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   2e0c1:	c7 45 c8 ff ff ff ff 	mov    DWORD PTR [rbp-0x38],0xffffffff
   2e0c8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   2e0cc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2e0d0:	48 89 d1             	mov    rcx,rdx
   2e0d3:	48 89 c2             	mov    rdx,rax
   2e0d6:	be 00 00 00 00       	mov    esi,0x0
   2e0db:	bf 00 00 00 00       	mov    edi,0x0
   2e0e0:	e8 db 56 fd ff       	call   37c0 <vsnprintf@plt>
   2e0e5:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   2e0e8:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   2e0ec:	78 66                	js     2e154 <vrna_strdup_vprintf+0xdc>
   2e0ee:	81 7d cc ff ff ff 7f 	cmp    DWORD PTR [rbp-0x34],0x7fffffff
   2e0f5:	74 5d                	je     2e154 <vrna_strdup_vprintf+0xdc>
   2e0f7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   2e0fa:	83 c0 01             	add    eax,0x1
   2e0fd:	89 c7                	mov    edi,eax
   2e0ff:	e8 0d 0c 00 00       	call   2ed11 <vrna_alloc>
   2e104:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2e108:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   2e10d:	75 09                	jne    2e118 <vrna_strdup_vprintf+0xa0>
   2e10f:	c7 45 c8 ff ff ff ff 	mov    DWORD PTR [rbp-0x38],0xffffffff
   2e116:	eb 3c                	jmp    2e154 <vrna_strdup_vprintf+0xdc>
   2e118:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   2e11b:	83 c0 01             	add    eax,0x1
   2e11e:	48 63 f0             	movsxd rsi,eax
   2e121:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
   2e125:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2e129:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e12d:	48 89 c7             	mov    rdi,rax
   2e130:	e8 8b 56 fd ff       	call   37c0 <vsnprintf@plt>
   2e135:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
   2e138:	83 7d c8 00          	cmp    DWORD PTR [rbp-0x38],0x0
   2e13c:	79 0e                	jns    2e14c <vrna_strdup_vprintf+0xd4>
   2e13e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e142:	48 89 c7             	mov    rdi,rax
   2e145:	e8 f6 57 fd ff       	call   3940 <free@plt>
   2e14a:	eb 08                	jmp    2e154 <vrna_strdup_vprintf+0xdc>
   2e14c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e150:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2e154:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
   2e158:	75 19                	jne    2e173 <vrna_strdup_vprintf+0xfb>
   2e15a:	48 8d 3d 2f 84 1b 00 	lea    rdi,[rip+0x1b842f]        # 1e6590 <parameter_set_rna_turner2004+0x5dbf0>
   2e161:	b8 00 00 00 00       	mov    eax,0x0
   2e166:	e8 80 0e 00 00       	call   2efeb <vrna_message_warning>
   2e16b:	48 c7 45 d0 00 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
   2e173:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e177:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2e17b:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   2e184:	74 05                	je     2e18b <vrna_strdup_vprintf+0x113>
   2e186:	e8 65 57 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2e18b:	c9                   	leave  
   2e18c:	c3                   	ret    

000000000002e18d <vrna_strcat_printf>:
   2e18d:	f3 0f 1e fa          	endbr64 
   2e191:	55                   	push   rbp
   2e192:	48 89 e5             	mov    rbp,rsp
   2e195:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   2e19c:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   2e1a3:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
   2e1aa:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   2e1b1:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   2e1b8:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
   2e1bf:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
   2e1c6:	84 c0                	test   al,al
   2e1c8:	74 20                	je     2e1ea <vrna_strcat_printf+0x5d>
   2e1ca:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   2e1ce:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
   2e1d2:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
   2e1d6:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
   2e1da:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
   2e1de:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
   2e1e2:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
   2e1e6:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
   2e1ea:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2e1f3:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2e1fa:	31 c0                	xor    eax,eax
   2e1fc:	c7 85 30 ff ff ff 10 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x10
   2e206:	c7 85 34 ff ff ff 30 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x30
   2e210:	48 8d 45 10          	lea    rax,[rbp+0x10]
   2e214:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   2e21b:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   2e222:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   2e229:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2e230:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   2e237:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
   2e23e:	48 89 ce             	mov    rsi,rcx
   2e241:	48 89 c7             	mov    rdi,rax
   2e244:	e8 25 00 00 00       	call   2e26e <vrna_strcat_vprintf>
   2e249:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
   2e24f:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
   2e255:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
   2e25c:	64 48 33 34 25 28 00 00 00 	xor    rsi,QWORD PTR fs:0x28
   2e265:	74 05                	je     2e26c <vrna_strcat_printf+0xdf>
   2e267:	e8 84 56 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2e26c:	c9                   	leave  
   2e26d:	c3                   	ret    

000000000002e26e <vrna_strcat_vprintf>:
   2e26e:	f3 0f 1e fa          	endbr64 
   2e272:	55                   	push   rbp
   2e273:	48 89 e5             	mov    rbp,rsp
   2e276:	48 83 ec 70          	sub    rsp,0x70
   2e27a:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   2e27e:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   2e282:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2e286:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2e28f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2e293:	31 c0                	xor    eax,eax
   2e295:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   2e29a:	74 07                	je     2e2a3 <vrna_strcat_vprintf+0x35>
   2e29c:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   2e2a1:	75 0a                	jne    2e2ad <vrna_strcat_vprintf+0x3f>
   2e2a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2e2a8:	e9 85 01 00 00       	jmp    2e432 <vrna_strcat_vprintf+0x1c4>
   2e2ad:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
   2e2b1:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
   2e2b5:	48 8b 06             	mov    rax,QWORD PTR [rsi]
   2e2b8:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
   2e2bc:	48 89 01             	mov    QWORD PTR [rcx],rax
   2e2bf:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   2e2c3:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
   2e2c7:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   2e2cb:	c7 45 bc ff ff ff ff 	mov    DWORD PTR [rbp-0x44],0xffffffff
   2e2d2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2e2d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2e2d9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2e2dd:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   2e2e2:	74 0e                	je     2e2f2 <vrna_strcat_vprintf+0x84>
   2e2e4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2e2e8:	48 89 c7             	mov    rdi,rax
   2e2eb:	e8 30 54 fd ff       	call   3720 <strlen@plt>
   2e2f0:	eb 05                	jmp    2e2f7 <vrna_strcat_vprintf+0x89>
   2e2f2:	b8 00 00 00 00       	mov    eax,0x0
   2e2f7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2e2fb:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   2e2ff:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   2e303:	48 89 d1             	mov    rcx,rdx
   2e306:	48 89 c2             	mov    rdx,rax
   2e309:	be 00 00 00 00       	mov    esi,0x0
   2e30e:	bf 00 00 00 00       	mov    edi,0x0
   2e313:	e8 a8 54 fd ff       	call   37c0 <vsnprintf@plt>
   2e318:	48 98                	cdqe   
   2e31a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2e31e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e322:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
   2e326:	76 10                	jbe    2e338 <vrna_strcat_vprintf+0xca>
   2e328:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e32c:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   2e32f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e333:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   2e336:	eb 0e                	jmp    2e346 <vrna_strcat_vprintf+0xd8>
   2e338:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e33c:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   2e33f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e343:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   2e346:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   2e34b:	0f 84 ae 00 00 00    	je     2e3ff <vrna_strcat_vprintf+0x191>
   2e351:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
   2e355:	0f 84 a4 00 00 00    	je     2e3ff <vrna_strcat_vprintf+0x191>
   2e35b:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   2e35e:	48 98                	cdqe   
   2e360:	48 f7 d0             	not    rax
   2e363:	48 89 c2             	mov    rdx,rax
   2e366:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   2e369:	48 98                	cdqe   
   2e36b:	48 39 c2             	cmp    rdx,rax
   2e36e:	0f 86 8b 00 00 00    	jbe    2e3ff <vrna_strcat_vprintf+0x191>
   2e374:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e378:	89 c2                	mov    edx,eax
   2e37a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e37e:	01 d0                	add    eax,edx
   2e380:	8d 50 01             	lea    edx,[rax+0x1]
   2e383:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2e387:	89 d6                	mov    esi,edx
   2e389:	48 89 c7             	mov    rdi,rax
   2e38c:	e8 08 0a 00 00       	call   2ed99 <vrna_realloc>
   2e391:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2e395:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   2e39a:	75 09                	jne    2e3a5 <vrna_strcat_vprintf+0x137>
   2e39c:	c7 45 bc ff ff ff ff 	mov    DWORD PTR [rbp-0x44],0xffffffff
   2e3a3:	eb 68                	jmp    2e40d <vrna_strcat_vprintf+0x19f>
   2e3a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e3a9:	48 8d 70 01          	lea    rsi,[rax+0x1]
   2e3ad:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2e3b1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e3b5:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
   2e3b9:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   2e3bd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   2e3c1:	48 89 d1             	mov    rcx,rdx
   2e3c4:	48 89 c2             	mov    rdx,rax
   2e3c7:	e8 f4 53 fd ff       	call   37c0 <vsnprintf@plt>
   2e3cc:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   2e3cf:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   2e3d3:	79 0e                	jns    2e3e3 <vrna_strcat_vprintf+0x175>
   2e3d5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2e3d9:	48 89 c7             	mov    rdi,rax
   2e3dc:	e8 5f 55 fd ff       	call   3940 <free@plt>
   2e3e1:	eb 2a                	jmp    2e40d <vrna_strcat_vprintf+0x19f>
   2e3e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2e3e7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2e3eb:	48 89 10             	mov    QWORD PTR [rax],rdx
   2e3ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e3f2:	89 c2                	mov    edx,eax
   2e3f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e3f8:	01 d0                	add    eax,edx
   2e3fa:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   2e3fd:	eb 0e                	jmp    2e40d <vrna_strcat_vprintf+0x19f>
   2e3ff:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   2e404:	75 07                	jne    2e40d <vrna_strcat_vprintf+0x19f>
   2e406:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e40a:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   2e40d:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
   2e411:	75 1c                	jne    2e42f <vrna_strcat_vprintf+0x1c1>
   2e413:	48 8d 3d a6 81 1b 00 	lea    rdi,[rip+0x1b81a6]        # 1e65c0 <parameter_set_rna_turner2004+0x5dc20>
   2e41a:	b8 00 00 00 00       	mov    eax,0x0
   2e41f:	e8 c7 0b 00 00       	call   2efeb <vrna_message_warning>
   2e424:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2e428:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   2e42f:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   2e432:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2e436:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   2e43f:	74 05                	je     2e446 <vrna_strcat_vprintf+0x1d8>
   2e441:	e8 aa 54 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2e446:	c9                   	leave  
   2e447:	c3                   	ret    

000000000002e448 <vrna_random_string>:
   2e448:	f3 0f 1e fa          	endbr64 
   2e44c:	55                   	push   rbp
   2e44d:	48 89 e5             	mov    rbp,rsp
   2e450:	48 83 ec 30          	sub    rsp,0x30
   2e454:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
   2e457:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2e45b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e45f:	48 89 c7             	mov    rdi,rax
   2e462:	e8 b9 52 fd ff       	call   3720 <strlen@plt>
   2e467:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   2e46a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2e46d:	83 c0 01             	add    eax,0x1
   2e470:	89 c7                	mov    edi,eax
   2e472:	e8 9a 08 00 00       	call   2ed11 <vrna_alloc>
   2e477:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2e47b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   2e482:	eb 38                	jmp    2e4bc <vrna_random_string+0x74>
   2e484:	e8 3e 0f 00 00       	call   2f3c7 <vrna_urn>
   2e489:	f2 0f 2a 4d f0       	cvtsi2sd xmm1,DWORD PTR [rbp-0x10]
   2e48e:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2e492:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   2e496:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2e499:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2e49c:	48 63 d0             	movsxd rdx,eax
   2e49f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e4a3:	48 01 d0             	add    rax,rdx
   2e4a6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2e4a9:	48 63 ca             	movsxd rcx,edx
   2e4ac:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2e4b0:	48 01 ca             	add    rdx,rcx
   2e4b3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e4b6:	88 02                	mov    BYTE PTR [rdx],al
   2e4b8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   2e4bc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2e4bf:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   2e4c2:	7c c0                	jl     2e484 <vrna_random_string+0x3c>
   2e4c4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   2e4c7:	48 63 d0             	movsxd rdx,eax
   2e4ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e4ce:	48 01 d0             	add    rax,rdx
   2e4d1:	c6 00 00             	mov    BYTE PTR [rax],0x0
   2e4d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e4d8:	c9                   	leave  
   2e4d9:	c3                   	ret    

000000000002e4da <vrna_hamming_distance>:
   2e4da:	f3 0f 1e fa          	endbr64 
   2e4de:	55                   	push   rbp
   2e4df:	48 89 e5             	mov    rbp,rsp
   2e4e2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2e4e6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2e4ea:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   2e4f1:	eb 20                	jmp    2e513 <vrna_hamming_distance+0x39>
   2e4f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e4f7:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   2e4fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2e4fe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e501:	38 c2                	cmp    dl,al
   2e503:	74 04                	je     2e509 <vrna_hamming_distance+0x2f>
   2e505:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   2e509:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
   2e50e:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
   2e513:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e517:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e51a:	84 c0                	test   al,al
   2e51c:	74 0b                	je     2e529 <vrna_hamming_distance+0x4f>
   2e51e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2e522:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e525:	84 c0                	test   al,al
   2e527:	75 ca                	jne    2e4f3 <vrna_hamming_distance+0x19>
   2e529:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2e52c:	5d                   	pop    rbp
   2e52d:	c3                   	ret    

000000000002e52e <vrna_hamming_distance_bound>:
   2e52e:	f3 0f 1e fa          	endbr64 
   2e532:	55                   	push   rbp
   2e533:	48 89 e5             	mov    rbp,rsp
   2e536:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2e53a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2e53e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   2e541:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   2e548:	eb 24                	jmp    2e56e <vrna_hamming_distance_bound+0x40>
   2e54a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e54e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   2e551:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2e555:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e558:	38 c2                	cmp    dl,al
   2e55a:	74 04                	je     2e560 <vrna_hamming_distance_bound+0x32>
   2e55c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   2e560:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
   2e565:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
   2e56a:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
   2e56e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e572:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e575:	84 c0                	test   al,al
   2e577:	74 11                	je     2e58a <vrna_hamming_distance_bound+0x5c>
   2e579:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2e57d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e580:	84 c0                	test   al,al
   2e582:	74 06                	je     2e58a <vrna_hamming_distance_bound+0x5c>
   2e584:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
   2e588:	75 c0                	jne    2e54a <vrna_hamming_distance_bound+0x1c>
   2e58a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2e58d:	5d                   	pop    rbp
   2e58e:	c3                   	ret    

000000000002e58f <vrna_seq_toRNA>:
   2e58f:	f3 0f 1e fa          	endbr64 
   2e593:	55                   	push   rbp
   2e594:	48 89 e5             	mov    rbp,rsp
   2e597:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2e59b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   2e5a0:	74 5a                	je     2e5fc <vrna_seq_toRNA+0x6d>
   2e5a2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   2e5a9:	eb 40                	jmp    2e5eb <vrna_seq_toRNA+0x5c>
   2e5ab:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e5ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e5b2:	48 01 d0             	add    rax,rdx
   2e5b5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e5b8:	3c 54                	cmp    al,0x54
   2e5ba:	75 0d                	jne    2e5c9 <vrna_seq_toRNA+0x3a>
   2e5bc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e5bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e5c3:	48 01 d0             	add    rax,rdx
   2e5c6:	c6 00 55             	mov    BYTE PTR [rax],0x55
   2e5c9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e5cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e5d0:	48 01 d0             	add    rax,rdx
   2e5d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e5d6:	3c 74                	cmp    al,0x74
   2e5d8:	75 0d                	jne    2e5e7 <vrna_seq_toRNA+0x58>
   2e5da:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e5dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e5e1:	48 01 d0             	add    rax,rdx
   2e5e4:	c6 00 75             	mov    BYTE PTR [rax],0x75
   2e5e7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   2e5eb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e5ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e5f2:	48 01 d0             	add    rax,rdx
   2e5f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e5f8:	84 c0                	test   al,al
   2e5fa:	75 af                	jne    2e5ab <vrna_seq_toRNA+0x1c>
   2e5fc:	90                   	nop
   2e5fd:	5d                   	pop    rbp
   2e5fe:	c3                   	ret    

000000000002e5ff <vrna_seq_toupper>:
   2e5ff:	f3 0f 1e fa          	endbr64 
   2e603:	55                   	push   rbp
   2e604:	48 89 e5             	mov    rbp,rsp
   2e607:	48 83 ec 20          	sub    rsp,0x20
   2e60b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2e60f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   2e614:	74 45                	je     2e65b <vrna_seq_toupper+0x5c>
   2e616:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   2e61d:	eb 2b                	jmp    2e64a <vrna_seq_toupper+0x4b>
   2e61f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e622:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e626:	48 01 d0             	add    rax,rdx
   2e629:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e62c:	0f be c0             	movsx  eax,al
   2e62f:	89 c7                	mov    edi,eax
   2e631:	e8 2a 55 fd ff       	call   3b60 <toupper@plt>
   2e636:	89 c1                	mov    ecx,eax
   2e638:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e63b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e63f:	48 01 d0             	add    rax,rdx
   2e642:	89 ca                	mov    edx,ecx
   2e644:	88 10                	mov    BYTE PTR [rax],dl
   2e646:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   2e64a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2e64d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e651:	48 01 d0             	add    rax,rdx
   2e654:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e657:	84 c0                	test   al,al
   2e659:	75 c4                	jne    2e61f <vrna_seq_toupper+0x20>
   2e65b:	90                   	nop
   2e65c:	c9                   	leave  
   2e65d:	c3                   	ret    

000000000002e65e <vrna_cut_point_insert>:
   2e65e:	f3 0f 1e fa          	endbr64 
   2e662:	55                   	push   rbp
   2e663:	48 89 e5             	mov    rbp,rsp
   2e666:	48 83 ec 20          	sub    rsp,0x20
   2e66a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2e66e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   2e671:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   2e675:	7e 70                	jle    2e6e7 <vrna_cut_point_insert+0x89>
   2e677:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e67b:	48 89 c7             	mov    rdi,rax
   2e67e:	e8 9d 50 fd ff       	call   3720 <strlen@plt>
   2e683:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2e686:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2e689:	83 c0 02             	add    eax,0x2
   2e68c:	89 c7                	mov    edi,eax
   2e68e:	e8 7e 06 00 00       	call   2ed11 <vrna_alloc>
   2e693:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2e697:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2e69a:	83 e8 01             	sub    eax,0x1
   2e69d:	48 63 d0             	movsxd rdx,eax
   2e6a0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2e6a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e6a8:	48 89 ce             	mov    rsi,rcx
   2e6ab:	48 89 c7             	mov    rdi,rax
   2e6ae:	e8 bd 50 fd ff       	call   3770 <strncpy@plt>
   2e6b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2e6b6:	48 98                	cdqe   
   2e6b8:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   2e6bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e6c0:	48 01 d0             	add    rax,rdx
   2e6c3:	c6 00 26             	mov    BYTE PTR [rax],0x26
   2e6c6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2e6c9:	48 98                	cdqe   
   2e6cb:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   2e6cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e6d3:	48 01 c2             	add    rdx,rax
   2e6d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e6da:	48 89 d6             	mov    rsi,rdx
   2e6dd:	48 89 c7             	mov    rdi,rax
   2e6e0:	e8 3b 54 fd ff       	call   3b20 <strcat@plt>
   2e6e5:	eb 10                	jmp    2e6f7 <vrna_cut_point_insert+0x99>
   2e6e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2e6eb:	48 89 c7             	mov    rdi,rax
   2e6ee:	e8 66 f8 ff ff       	call   2df59 <strdup>
   2e6f3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2e6f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e6fb:	c9                   	leave  
   2e6fc:	c3                   	ret    

000000000002e6fd <vrna_cut_point_remove>:
   2e6fd:	f3 0f 1e fa          	endbr64 
   2e701:	55                   	push   rbp
   2e702:	48 89 e5             	mov    rbp,rsp
   2e705:	48 83 ec 30          	sub    rsp,0x30
   2e709:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2e70d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2e711:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   2e719:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e71d:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
   2e723:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   2e728:	0f 84 ac 00 00 00    	je     2e7da <vrna_cut_point_remove+0xdd>
   2e72e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e732:	48 89 c7             	mov    rdi,rax
   2e735:	e8 e6 4f fd ff       	call   3720 <strlen@plt>
   2e73a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2e73d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e741:	48 89 c7             	mov    rdi,rax
   2e744:	e8 10 f8 ff ff       	call   2df59 <strdup>
   2e749:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2e74d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e751:	be 26 00 00 00       	mov    esi,0x26
   2e756:	48 89 c7             	mov    rdi,rax
   2e759:	e8 82 4f fd ff       	call   36e0 <strchr@plt>
   2e75e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2e762:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2e767:	74 71                	je     2e7da <vrna_cut_point_remove+0xdd>
   2e769:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2e76d:	48 2b 45 f8          	sub    rax,QWORD PTR [rbp-0x8]
   2e771:	8d 50 01             	lea    edx,[rax+0x1]
   2e774:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e778:	89 10                	mov    DWORD PTR [rax],edx
   2e77a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e77e:	8b 00                	mov    eax,DWORD PTR [rax]
   2e780:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   2e783:	77 0a                	ja     2e78f <vrna_cut_point_remove+0x92>
   2e785:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e789:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
   2e78f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2e793:	48 83 c0 01          	add    rax,0x1
   2e797:	be 26 00 00 00       	mov    esi,0x26
   2e79c:	48 89 c7             	mov    rdi,rax
   2e79f:	e8 3c 4f fd ff       	call   36e0 <strchr@plt>
   2e7a4:	48 85 c0             	test   rax,rax
   2e7a7:	74 26                	je     2e7cf <vrna_cut_point_remove+0xd2>
   2e7a9:	48 8d 3d 40 7e 1b 00 	lea    rdi,[rip+0x1b7e40]        # 1e65f0 <parameter_set_rna_turner2004+0x5dc50>
   2e7b0:	b8 00 00 00 00       	mov    eax,0x0
   2e7b5:	e8 80 06 00 00       	call   2ee3a <vrna_message_error>
   2e7ba:	eb 13                	jmp    2e7cf <vrna_cut_point_remove+0xd2>
   2e7bc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2e7c0:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
   2e7c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2e7c8:	88 10                	mov    BYTE PTR [rax],dl
   2e7ca:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
   2e7cf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2e7d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e7d6:	84 c0                	test   al,al
   2e7d8:	75 e2                	jne    2e7bc <vrna_cut_point_remove+0xbf>
   2e7da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2e7de:	c9                   	leave  
   2e7df:	c3                   	ret    

000000000002e7e0 <vrna_strsplit>:
   2e7e0:	f3 0f 1e fa          	endbr64 
   2e7e4:	55                   	push   rbp
   2e7e5:	48 89 e5             	mov    rbp,rsp
   2e7e8:	53                   	push   rbx
   2e7e9:	48 83 ec 58          	sub    rsp,0x58
   2e7ed:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   2e7f1:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   2e7f5:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2e7fe:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2e802:	31 c0                	xor    eax,eax
   2e804:	48 c7 45 d0 00 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
   2e80c:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   2e813:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   2e818:	0f 84 19 01 00 00    	je     2e937 <vrna_strsplit+0x157>
   2e81e:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   2e823:	74 17                	je     2e83c <vrna_strsplit+0x5c>
   2e825:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   2e829:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e82c:	84 c0                	test   al,al
   2e82e:	74 0c                	je     2e83c <vrna_strsplit+0x5c>
   2e830:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   2e834:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e837:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
   2e83a:	eb 04                	jmp    2e840 <vrna_strsplit+0x60>
   2e83c:	c6 45 e6 26          	mov    BYTE PTR [rbp-0x1a],0x26
   2e840:	c6 45 e7 00          	mov    BYTE PTR [rbp-0x19],0x0
   2e844:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2e848:	48 89 c7             	mov    rdi,rax
   2e84b:	e8 09 f7 ff ff       	call   2df59 <strdup>
   2e850:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2e854:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e858:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2e85c:	eb 13                	jmp    2e871 <vrna_strsplit+0x91>
   2e85e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2e862:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   2e865:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   2e869:	38 c2                	cmp    dl,al
   2e86b:	75 04                	jne    2e871 <vrna_strsplit+0x91>
   2e86d:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
   2e871:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2e875:	48 8d 50 01          	lea    rdx,[rax+0x1]
   2e879:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
   2e87d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2e880:	84 c0                	test   al,al
   2e882:	75 da                	jne    2e85e <vrna_strsplit+0x7e>
   2e884:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   2e887:	83 c0 02             	add    eax,0x2
   2e88a:	c1 e0 03             	shl    eax,0x3
   2e88d:	89 c7                	mov    edi,eax
   2e88f:	e8 7d 04 00 00       	call   2ed11 <vrna_alloc>
   2e894:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2e898:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
   2e89f:	48 8d 55 b8          	lea    rdx,[rbp-0x48]
   2e8a3:	48 8d 4d e6          	lea    rcx,[rbp-0x1a]
   2e8a7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e8ab:	48 89 ce             	mov    rsi,rcx
   2e8ae:	48 89 c7             	mov    rdi,rax
   2e8b1:	e8 9a 52 fd ff       	call   3b50 <strtok_r@plt>
   2e8b6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2e8ba:	eb 4f                	jmp    2e90b <vrna_strsplit+0x12b>
   2e8bc:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   2e8bf:	8d 50 01             	lea    edx,[rax+0x1]
   2e8c2:	89 55 b4             	mov    DWORD PTR [rbp-0x4c],edx
   2e8c5:	89 c0                	mov    eax,eax
   2e8c7:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2e8cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e8d3:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   2e8d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2e8db:	48 89 c6             	mov    rsi,rax
   2e8de:	48 8d 3d 2c 7d 1b 00 	lea    rdi,[rip+0x1b7d2c]        # 1e6611 <parameter_set_rna_turner2004+0x5dc71>
   2e8e5:	b8 00 00 00 00       	mov    eax,0x0
   2e8ea:	e8 ad f6 ff ff       	call   2df9c <vrna_strdup_printf>
   2e8ef:	48 89 03             	mov    QWORD PTR [rbx],rax
   2e8f2:	48 8d 55 b8          	lea    rdx,[rbp-0x48]
   2e8f6:	48 8d 45 e6          	lea    rax,[rbp-0x1a]
   2e8fa:	48 89 c6             	mov    rsi,rax
   2e8fd:	bf 00 00 00 00       	mov    edi,0x0
   2e902:	e8 49 52 fd ff       	call   3b50 <strtok_r@plt>
   2e907:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2e90b:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   2e910:	75 aa                	jne    2e8bc <vrna_strsplit+0xdc>
   2e912:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   2e915:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2e91d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e921:	48 01 d0             	add    rax,rdx
   2e924:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   2e92b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e92f:	48 89 c7             	mov    rdi,rax
   2e932:	e8 09 50 fd ff       	call   3940 <free@plt>
   2e937:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2e93b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2e93f:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   2e948:	74 05                	je     2e94f <vrna_strsplit+0x16f>
   2e94a:	e8 a1 4f fd ff       	call   38f0 <__stack_chk_fail@plt>
   2e94f:	48 83 c4 58          	add    rsp,0x58
   2e953:	5b                   	pop    rbx
   2e954:	5d                   	pop    rbp
   2e955:	c3                   	ret    

000000000002e956 <vrna_strjoin>:
   2e956:	f3 0f 1e fa          	endbr64 
   2e95a:	55                   	push   rbp
   2e95b:	48 89 e5             	mov    rbp,rsp
   2e95e:	53                   	push   rbx
   2e95f:	48 83 ec 48          	sub    rsp,0x48
   2e963:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   2e967:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   2e96b:	48 c7 45 c0 00 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
   2e973:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
   2e978:	0f 84 01 02 00 00    	je     2eb7f <vrna_strjoin+0x229>
   2e97e:	48 c7 45 e8 00 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
   2e986:	48 c7 45 e0 20 00 00 00 	mov    QWORD PTR [rbp-0x20],0x20
   2e98e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2e992:	c1 e0 03             	shl    eax,0x3
   2e995:	89 c7                	mov    edi,eax
   2e997:	e8 75 03 00 00       	call   2ed11 <vrna_alloc>
   2e99c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2e9a0:	48 c7 45 c8 00 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
   2e9a8:	e9 80 00 00 00       	jmp    2ea2d <vrna_strjoin+0xd7>
   2e9ad:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2e9b1:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2e9b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2e9bd:	48 01 d0             	add    rax,rdx
   2e9c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2e9c3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2e9c7:	48 8d 0c d5 00 00 00 00 	lea    rcx,[rdx*8+0x0]
   2e9cf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2e9d3:	48 8d 1c 11          	lea    rbx,[rcx+rdx*1]
   2e9d7:	48 89 c7             	mov    rdi,rax
   2e9da:	e8 41 4d fd ff       	call   3720 <strlen@plt>
   2e9df:	48 89 03             	mov    QWORD PTR [rbx],rax
   2e9e2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2e9e6:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2e9ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2e9f2:	48 01 d0             	add    rax,rdx
   2e9f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2e9f8:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
   2e9fc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ea00:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
   2ea04:	75 22                	jne    2ea28 <vrna_strjoin+0xd2>
   2ea06:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   2ea0b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ea0f:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   2ea16:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ea1a:	89 d6                	mov    esi,edx
   2ea1c:	48 89 c7             	mov    rdi,rax
   2ea1f:	e8 75 03 00 00       	call   2ed99 <vrna_realloc>
   2ea24:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2ea28:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
   2ea2d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ea31:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2ea39:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2ea3d:	48 01 d0             	add    rax,rdx
   2ea40:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ea43:	48 85 c0             	test   rax,rax
   2ea46:	0f 85 61 ff ff ff    	jne    2e9ad <vrna_strjoin+0x57>
   2ea4c:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   2ea51:	74 1e                	je     2ea71 <vrna_strjoin+0x11b>
   2ea53:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2ea57:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ea5a:	84 c0                	test   al,al
   2ea5c:	74 13                	je     2ea71 <vrna_strjoin+0x11b>
   2ea5e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2ea62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2ea66:	48 01 d0             	add    rax,rdx
   2ea69:	48 83 e8 01          	sub    rax,0x1
   2ea6d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ea71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2ea75:	83 c0 01             	add    eax,0x1
   2ea78:	89 c7                	mov    edi,eax
   2ea7a:	e8 92 02 00 00       	call   2ed11 <vrna_alloc>
   2ea7f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2ea83:	48 c7 45 d0 00 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
   2ea8b:	48 c7 45 c8 00 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
   2ea93:	e9 ae 00 00 00       	jmp    2eb46 <vrna_strjoin+0x1f0>
   2ea98:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ea9c:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2eaa4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2eaa8:	48 01 d0             	add    rax,rdx
   2eaab:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2eaae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2eab2:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   2eaba:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2eabe:	48 01 c8             	add    rax,rcx
   2eac1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2eac4:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   2eac8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   2eacc:	48 01 f1             	add    rcx,rsi
   2eacf:	48 89 c6             	mov    rsi,rax
   2ead2:	48 89 cf             	mov    rdi,rcx
   2ead5:	e8 56 4d fd ff       	call   3830 <memcpy@plt>
   2eada:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2eade:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2eae6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2eaea:	48 01 d0             	add    rax,rdx
   2eaed:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2eaf0:	48 01 45 d0          	add    QWORD PTR [rbp-0x30],rax
   2eaf4:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   2eaf9:	74 46                	je     2eb41 <vrna_strjoin+0x1eb>
   2eafb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2eaff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2eb02:	84 c0                	test   al,al
   2eb04:	74 3b                	je     2eb41 <vrna_strjoin+0x1eb>
   2eb06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2eb0a:	48 83 c0 01          	add    rax,0x1
   2eb0e:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2eb16:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2eb1a:	48 01 d0             	add    rax,rdx
   2eb1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2eb20:	48 85 c0             	test   rax,rax
   2eb23:	74 1c                	je     2eb41 <vrna_strjoin+0x1eb>
   2eb25:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2eb29:	48 8d 50 01          	lea    rdx,[rax+0x1]
   2eb2d:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
   2eb31:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2eb35:	48 01 c2             	add    rdx,rax
   2eb38:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2eb3c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2eb3f:	88 02                	mov    BYTE PTR [rdx],al
   2eb41:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
   2eb46:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2eb4a:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   2eb52:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2eb56:	48 01 d0             	add    rax,rdx
   2eb59:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2eb5c:	48 85 c0             	test   rax,rax
   2eb5f:	0f 85 33 ff ff ff    	jne    2ea98 <vrna_strjoin+0x142>
   2eb65:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2eb69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2eb6d:	48 01 d0             	add    rax,rdx
   2eb70:	c6 00 00             	mov    BYTE PTR [rax],0x0
   2eb73:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2eb77:	48 89 c7             	mov    rdi,rax
   2eb7a:	e8 c1 4d fd ff       	call   3940 <free@plt>
   2eb7f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2eb83:	48 83 c4 48          	add    rsp,0x48
   2eb87:	5b                   	pop    rbx
   2eb88:	5d                   	pop    rbp
   2eb89:	c3                   	ret    

000000000002eb8a <vrna_seq_ungapped>:
   2eb8a:	f3 0f 1e fa          	endbr64 
   2eb8e:	55                   	push   rbp
   2eb8f:	48 89 e5             	mov    rbp,rsp
   2eb92:	48 83 ec 30          	sub    rsp,0x30
   2eb96:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2eb9a:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
   2eba2:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   2eba7:	0f 84 a2 00 00 00    	je     2ec4f <vrna_seq_ungapped+0xc5>
   2ebad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ebb1:	48 89 c7             	mov    rdi,rax
   2ebb4:	e8 a0 f3 ff ff       	call   2df59 <strdup>
   2ebb9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ebbd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ebc1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ebc5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   2ebcc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ebd0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ebd3:	3c 2d                	cmp    al,0x2d
   2ebd5:	74 3d                	je     2ec14 <vrna_seq_ungapped+0x8a>
   2ebd7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ebdb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ebde:	3c 5f                	cmp    al,0x5f
   2ebe0:	74 32                	je     2ec14 <vrna_seq_ungapped+0x8a>
   2ebe2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ebe6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ebe9:	3c 7e                	cmp    al,0x7e
   2ebeb:	74 27                	je     2ec14 <vrna_seq_ungapped+0x8a>
   2ebed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ebf1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ebf4:	3c 2e                	cmp    al,0x2e
   2ebf6:	74 1c                	je     2ec14 <vrna_seq_ungapped+0x8a>
   2ebf8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ebfb:	48 63 d0             	movsxd rdx,eax
   2ebfe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ec02:	48 01 c2             	add    rdx,rax
   2ec05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ec09:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ec0c:	88 02                	mov    BYTE PTR [rdx],al
   2ec0e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   2ec12:	eb 01                	jmp    2ec15 <vrna_seq_ungapped+0x8b>
   2ec14:	90                   	nop
   2ec15:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
   2ec1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ec1e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2ec21:	84 c0                	test   al,al
   2ec23:	75 a7                	jne    2ebcc <vrna_seq_ungapped+0x42>
   2ec25:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ec28:	83 c0 01             	add    eax,0x1
   2ec2b:	89 c2                	mov    edx,eax
   2ec2d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ec31:	89 d6                	mov    esi,edx
   2ec33:	48 89 c7             	mov    rdi,rax
   2ec36:	e8 5e 01 00 00       	call   2ed99 <vrna_realloc>
   2ec3b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ec3f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ec42:	48 63 d0             	movsxd rdx,eax
   2ec45:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ec49:	48 01 d0             	add    rax,rdx
   2ec4c:	c6 00 00             	mov    BYTE PTR [rax],0x0
   2ec4f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ec53:	c9                   	leave  
   2ec54:	c3                   	ret    

000000000002ec55 <str_uppercase>:
   2ec55:	f3 0f 1e fa          	endbr64 
   2ec59:	55                   	push   rbp
   2ec5a:	48 89 e5             	mov    rbp,rsp
   2ec5d:	48 83 ec 10          	sub    rsp,0x10
   2ec61:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ec65:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ec69:	48 89 c7             	mov    rdi,rax
   2ec6c:	e8 8e f9 ff ff       	call   2e5ff <vrna_seq_toupper>
   2ec71:	90                   	nop
   2ec72:	c9                   	leave  
   2ec73:	c3                   	ret    

000000000002ec74 <str_DNA2RNA>:
   2ec74:	f3 0f 1e fa          	endbr64 
   2ec78:	55                   	push   rbp
   2ec79:	48 89 e5             	mov    rbp,rsp
   2ec7c:	48 83 ec 08          	sub    rsp,0x8
   2ec80:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ec84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ec88:	48 89 c7             	mov    rdi,rax
   2ec8b:	e8 ff f8 ff ff       	call   2e58f <vrna_seq_toRNA>
   2ec90:	90                   	nop
   2ec91:	c9                   	leave  
   2ec92:	c3                   	ret    

000000000002ec93 <random_string>:
   2ec93:	f3 0f 1e fa          	endbr64 
   2ec97:	55                   	push   rbp
   2ec98:	48 89 e5             	mov    rbp,rsp
   2ec9b:	48 83 ec 10          	sub    rsp,0x10
   2ec9f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2eca2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2eca6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2ecaa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2ecad:	48 89 d6             	mov    rsi,rdx
   2ecb0:	89 c7                	mov    edi,eax
   2ecb2:	e8 91 f7 ff ff       	call   2e448 <vrna_random_string>
   2ecb7:	c9                   	leave  
   2ecb8:	c3                   	ret    

000000000002ecb9 <hamming>:
   2ecb9:	f3 0f 1e fa          	endbr64 
   2ecbd:	55                   	push   rbp
   2ecbe:	48 89 e5             	mov    rbp,rsp
   2ecc1:	48 83 ec 10          	sub    rsp,0x10
   2ecc5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ecc9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2eccd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2ecd1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ecd5:	48 89 d6             	mov    rsi,rdx
   2ecd8:	48 89 c7             	mov    rdi,rax
   2ecdb:	e8 fa f7 ff ff       	call   2e4da <vrna_hamming_distance>
   2ece0:	c9                   	leave  
   2ece1:	c3                   	ret    

000000000002ece2 <hamming_bound>:
   2ece2:	f3 0f 1e fa          	endbr64 
   2ece6:	55                   	push   rbp
   2ece7:	48 89 e5             	mov    rbp,rsp
   2ecea:	48 83 ec 18          	sub    rsp,0x18
   2ecee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ecf2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ecf6:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   2ecf9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2ecfc:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2ed00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ed04:	48 89 ce             	mov    rsi,rcx
   2ed07:	48 89 c7             	mov    rdi,rax
   2ed0a:	e8 1f f8 ff ff       	call   2e52e <vrna_hamming_distance_bound>
   2ed0f:	c9                   	leave  
   2ed10:	c3                   	ret    

000000000002ed11 <vrna_alloc>:
   2ed11:	f3 0f 1e fa          	endbr64 
   2ed15:	55                   	push   rbp
   2ed16:	48 89 e5             	mov    rbp,rsp
   2ed19:	48 83 ec 20          	sub    rsp,0x20
   2ed1d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   2ed20:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ed23:	48 89 c6             	mov    rsi,rax
   2ed26:	bf 01 00 00 00       	mov    edi,0x1
   2ed2b:	e8 b0 4a fd ff       	call   37e0 <calloc@plt>
   2ed30:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ed34:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2ed39:	75 58                	jne    2ed93 <vrna_alloc+0x82>
   2ed3b:	e8 c0 48 fd ff       	call   3600 <__errno_location@plt>
   2ed40:	8b 00                	mov    eax,DWORD PTR [rax]
   2ed42:	83 f8 16             	cmp    eax,0x16
   2ed45:	75 2f                	jne    2ed76 <vrna_alloc+0x65>
   2ed47:	48 8b 05 d2 33 22 00 	mov    rax,QWORD PTR [rip+0x2233d2]        # 252120 <stderr@@GLIBC_2.2.5>
   2ed4e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2ed51:	48 8d 35 c0 78 1b 00 	lea    rsi,[rip+0x1b78c0]        # 1e6618 <parameter_set_rna_turner2004+0x5dc78>
   2ed58:	48 89 c7             	mov    rdi,rax
   2ed5b:	b8 00 00 00 00       	mov    eax,0x0
   2ed60:	e8 7b 4c fd ff       	call   39e0 <fprintf@plt>
   2ed65:	48 8d 3d cc 78 1b 00 	lea    rdi,[rip+0x1b78cc]        # 1e6638 <parameter_set_rna_turner2004+0x5dc98>
   2ed6c:	b8 00 00 00 00       	mov    eax,0x0
   2ed71:	e8 c4 00 00 00       	call   2ee3a <vrna_message_error>
   2ed76:	e8 85 48 fd ff       	call   3600 <__errno_location@plt>
   2ed7b:	8b 00                	mov    eax,DWORD PTR [rax]
   2ed7d:	83 f8 0c             	cmp    eax,0xc
   2ed80:	75 11                	jne    2ed93 <vrna_alloc+0x82>
   2ed82:	48 8d 3d d7 78 1b 00 	lea    rdi,[rip+0x1b78d7]        # 1e6660 <parameter_set_rna_turner2004+0x5dcc0>
   2ed89:	b8 00 00 00 00       	mov    eax,0x0
   2ed8e:	e8 a7 00 00 00       	call   2ee3a <vrna_message_error>
   2ed93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ed97:	c9                   	leave  
   2ed98:	c3                   	ret    

000000000002ed99 <vrna_realloc>:
   2ed99:	f3 0f 1e fa          	endbr64 
   2ed9d:	55                   	push   rbp
   2ed9e:	48 89 e5             	mov    rbp,rsp
   2eda1:	48 83 ec 10          	sub    rsp,0x10
   2eda5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2eda9:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   2edac:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2edb1:	75 0c                	jne    2edbf <vrna_realloc+0x26>
   2edb3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2edb6:	89 c7                	mov    edi,eax
   2edb8:	e8 54 ff ff ff       	call   2ed11 <vrna_alloc>
   2edbd:	eb 79                	jmp    2ee38 <vrna_realloc+0x9f>
   2edbf:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   2edc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2edc6:	48 89 d6             	mov    rsi,rdx
   2edc9:	48 89 c7             	mov    rdi,rax
   2edcc:	e8 cf 4c fd ff       	call   3aa0 <realloc@plt>
   2edd1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2edd5:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2edda:	75 58                	jne    2ee34 <vrna_realloc+0x9b>
   2eddc:	e8 1f 48 fd ff       	call   3600 <__errno_location@plt>
   2ede1:	8b 00                	mov    eax,DWORD PTR [rax]
   2ede3:	83 f8 16             	cmp    eax,0x16
   2ede6:	75 2f                	jne    2ee17 <vrna_realloc+0x7e>
   2ede8:	48 8b 05 31 33 22 00 	mov    rax,QWORD PTR [rip+0x223331]        # 252120 <stderr@@GLIBC_2.2.5>
   2edef:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   2edf2:	48 8d 35 8f 78 1b 00 	lea    rsi,[rip+0x1b788f]        # 1e6688 <parameter_set_rna_turner2004+0x5dce8>
   2edf9:	48 89 c7             	mov    rdi,rax
   2edfc:	b8 00 00 00 00       	mov    eax,0x0
   2ee01:	e8 da 4b fd ff       	call   39e0 <fprintf@plt>
   2ee06:	48 8d 3d a3 78 1b 00 	lea    rdi,[rip+0x1b78a3]        # 1e66b0 <parameter_set_rna_turner2004+0x5dd10>
   2ee0d:	b8 00 00 00 00       	mov    eax,0x0
   2ee12:	e8 23 00 00 00       	call   2ee3a <vrna_message_error>
   2ee17:	e8 e4 47 fd ff       	call   3600 <__errno_location@plt>
   2ee1c:	8b 00                	mov    eax,DWORD PTR [rax]
   2ee1e:	83 f8 0c             	cmp    eax,0xc
   2ee21:	75 11                	jne    2ee34 <vrna_realloc+0x9b>
   2ee23:	48 8d 3d b6 78 1b 00 	lea    rdi,[rip+0x1b78b6]        # 1e66e0 <parameter_set_rna_turner2004+0x5dd40>
   2ee2a:	b8 00 00 00 00       	mov    eax,0x0
   2ee2f:	e8 06 00 00 00       	call   2ee3a <vrna_message_error>
   2ee34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ee38:	c9                   	leave  
   2ee39:	c3                   	ret    

000000000002ee3a <vrna_message_error>:
   2ee3a:	f3 0f 1e fa          	endbr64 
   2ee3e:	55                   	push   rbp
   2ee3f:	48 89 e5             	mov    rbp,rsp
   2ee42:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
   2ee49:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
   2ee50:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
   2ee57:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   2ee5e:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   2ee65:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
   2ee6c:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
   2ee73:	84 c0                	test   al,al
   2ee75:	74 20                	je     2ee97 <vrna_message_error+0x5d>
   2ee77:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   2ee7b:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
   2ee7f:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
   2ee83:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
   2ee87:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
   2ee8b:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
   2ee8f:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
   2ee93:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
   2ee97:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2eea0:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2eea7:	31 c0                	xor    eax,eax
   2eea9:	c7 85 30 ff ff ff 08 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x8
   2eeb3:	c7 85 34 ff ff ff 30 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x30
   2eebd:	48 8d 45 10          	lea    rax,[rbp+0x10]
   2eec1:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   2eec8:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   2eecf:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   2eed6:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2eedd:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   2eee4:	48 89 d6             	mov    rsi,rdx
   2eee7:	48 89 c7             	mov    rdi,rax
   2eeea:	e8 1a 00 00 00       	call   2ef09 <vrna_message_verror>
   2eeef:	90                   	nop
   2eef0:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   2eef7:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   2ef00:	74 05                	je     2ef07 <vrna_message_error+0xcd>
   2ef02:	e8 e9 49 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2ef07:	c9                   	leave  
   2ef08:	c3                   	ret    

000000000002ef09 <vrna_message_verror>:
   2ef09:	f3 0f 1e fa          	endbr64 
   2ef0d:	55                   	push   rbp
   2ef0e:	48 89 e5             	mov    rbp,rsp
   2ef11:	48 83 ec 10          	sub    rsp,0x10
   2ef15:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ef19:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ef1d:	48 8b 05 fc 31 22 00 	mov    rax,QWORD PTR [rip+0x2231fc]        # 252120 <stderr@@GLIBC_2.2.5>
   2ef24:	48 89 c7             	mov    rdi,rax
   2ef27:	e8 a4 49 fd ff       	call   38d0 <fileno@plt>
   2ef2c:	89 c7                	mov    edi,eax
   2ef2e:	e8 ad 4b fd ff       	call   3ae0 <isatty@plt>
   2ef33:	85 c0                	test   eax,eax
   2ef35:	74 5c                	je     2ef93 <vrna_message_verror+0x8a>
   2ef37:	48 8b 05 e2 31 22 00 	mov    rax,QWORD PTR [rip+0x2231e2]        # 252120 <stderr@@GLIBC_2.2.5>
   2ef3e:	48 89 c1             	mov    rcx,rax
   2ef41:	ba 16 00 00 00       	mov    edx,0x16
   2ef46:	be 01 00 00 00       	mov    esi,0x1
   2ef4b:	48 8d 3d bb 77 1b 00 	lea    rdi,[rip+0x1b77bb]        # 1e670d <parameter_set_rna_turner2004+0x5dd6d>
   2ef52:	e8 39 4c fd ff       	call   3b90 <fwrite@plt>
   2ef57:	48 8b 05 c2 31 22 00 	mov    rax,QWORD PTR [rip+0x2231c2]        # 252120 <stderr@@GLIBC_2.2.5>
   2ef5e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2ef62:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2ef66:	48 89 ce             	mov    rsi,rcx
   2ef69:	48 89 c7             	mov    rdi,rax
   2ef6c:	e8 1f 4a fd ff       	call   3990 <vfprintf@plt>
   2ef71:	48 8b 05 a8 31 22 00 	mov    rax,QWORD PTR [rip+0x2231a8]        # 252120 <stderr@@GLIBC_2.2.5>
   2ef78:	48 89 c1             	mov    rcx,rax
   2ef7b:	ba 05 00 00 00       	mov    edx,0x5
   2ef80:	be 01 00 00 00       	mov    esi,0x1
   2ef85:	48 8d 3d 98 77 1b 00 	lea    rdi,[rip+0x1b7798]        # 1e6724 <parameter_set_rna_turner2004+0x5dd84>
   2ef8c:	e8 ff 4b fd ff       	call   3b90 <fwrite@plt>
   2ef91:	eb 4e                	jmp    2efe1 <vrna_message_verror+0xd8>
   2ef93:	48 8b 05 86 31 22 00 	mov    rax,QWORD PTR [rip+0x223186]        # 252120 <stderr@@GLIBC_2.2.5>
   2ef9a:	48 89 c1             	mov    rcx,rax
   2ef9d:	ba 07 00 00 00       	mov    edx,0x7
   2efa2:	be 01 00 00 00       	mov    esi,0x1
   2efa7:	48 8d 3d 7c 77 1b 00 	lea    rdi,[rip+0x1b777c]        # 1e672a <parameter_set_rna_turner2004+0x5dd8a>
   2efae:	e8 dd 4b fd ff       	call   3b90 <fwrite@plt>
   2efb3:	48 8b 05 66 31 22 00 	mov    rax,QWORD PTR [rip+0x223166]        # 252120 <stderr@@GLIBC_2.2.5>
   2efba:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2efbe:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2efc2:	48 89 ce             	mov    rsi,rcx
   2efc5:	48 89 c7             	mov    rdi,rax
   2efc8:	e8 c3 49 fd ff       	call   3990 <vfprintf@plt>
   2efcd:	48 8b 05 4c 31 22 00 	mov    rax,QWORD PTR [rip+0x22314c]        # 252120 <stderr@@GLIBC_2.2.5>
   2efd4:	48 89 c6             	mov    rsi,rax
   2efd7:	bf 0a 00 00 00       	mov    edi,0xa
   2efdc:	e8 8f 49 fd ff       	call   3970 <fputc@plt>
   2efe1:	bf 01 00 00 00       	mov    edi,0x1
   2efe6:	e8 65 49 fd ff       	call   3950 <exit@plt>

000000000002efeb <vrna_message_warning>:
   2efeb:	f3 0f 1e fa          	endbr64 
   2efef:	55                   	push   rbp
   2eff0:	48 89 e5             	mov    rbp,rsp
   2eff3:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
   2effa:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
   2f001:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
   2f008:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   2f00f:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   2f016:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
   2f01d:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
   2f024:	84 c0                	test   al,al
   2f026:	74 20                	je     2f048 <vrna_message_warning+0x5d>
   2f028:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   2f02c:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
   2f030:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
   2f034:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
   2f038:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
   2f03c:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
   2f040:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
   2f044:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
   2f048:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2f051:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2f058:	31 c0                	xor    eax,eax
   2f05a:	c7 85 30 ff ff ff 08 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x8
   2f064:	c7 85 34 ff ff ff 30 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x30
   2f06e:	48 8d 45 10          	lea    rax,[rbp+0x10]
   2f072:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   2f079:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   2f080:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   2f087:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2f08e:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   2f095:	48 89 d6             	mov    rsi,rdx
   2f098:	48 89 c7             	mov    rdi,rax
   2f09b:	e8 1a 00 00 00       	call   2f0ba <vrna_message_vwarning>
   2f0a0:	90                   	nop
   2f0a1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   2f0a8:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   2f0b1:	74 05                	je     2f0b8 <vrna_message_warning+0xcd>
   2f0b3:	e8 38 48 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2f0b8:	c9                   	leave  
   2f0b9:	c3                   	ret    

000000000002f0ba <vrna_message_vwarning>:
   2f0ba:	f3 0f 1e fa          	endbr64 
   2f0be:	55                   	push   rbp
   2f0bf:	48 89 e5             	mov    rbp,rsp
   2f0c2:	48 83 ec 10          	sub    rsp,0x10
   2f0c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2f0ca:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2f0ce:	48 8b 05 4b 30 22 00 	mov    rax,QWORD PTR [rip+0x22304b]        # 252120 <stderr@@GLIBC_2.2.5>
   2f0d5:	48 89 c7             	mov    rdi,rax
   2f0d8:	e8 f3 47 fd ff       	call   38d0 <fileno@plt>
   2f0dd:	89 c7                	mov    edi,eax
   2f0df:	e8 fc 49 fd ff       	call   3ae0 <isatty@plt>
   2f0e4:	85 c0                	test   eax,eax
   2f0e6:	74 5c                	je     2f144 <vrna_message_vwarning+0x8a>
   2f0e8:	48 8b 05 31 30 22 00 	mov    rax,QWORD PTR [rip+0x223031]        # 252120 <stderr@@GLIBC_2.2.5>
   2f0ef:	48 89 c1             	mov    rcx,rax
   2f0f2:	ba 18 00 00 00       	mov    edx,0x18
   2f0f7:	be 01 00 00 00       	mov    esi,0x1
   2f0fc:	48 8d 3d 2f 76 1b 00 	lea    rdi,[rip+0x1b762f]        # 1e6732 <parameter_set_rna_turner2004+0x5dd92>
   2f103:	e8 88 4a fd ff       	call   3b90 <fwrite@plt>
   2f108:	48 8b 05 11 30 22 00 	mov    rax,QWORD PTR [rip+0x223011]        # 252120 <stderr@@GLIBC_2.2.5>
   2f10f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2f113:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2f117:	48 89 ce             	mov    rsi,rcx
   2f11a:	48 89 c7             	mov    rdi,rax
   2f11d:	e8 6e 48 fd ff       	call   3990 <vfprintf@plt>
   2f122:	48 8b 05 f7 2f 22 00 	mov    rax,QWORD PTR [rip+0x222ff7]        # 252120 <stderr@@GLIBC_2.2.5>
   2f129:	48 89 c1             	mov    rcx,rax
   2f12c:	ba 05 00 00 00       	mov    edx,0x5
   2f131:	be 01 00 00 00       	mov    esi,0x1
   2f136:	48 8d 3d e7 75 1b 00 	lea    rdi,[rip+0x1b75e7]        # 1e6724 <parameter_set_rna_turner2004+0x5dd84>
   2f13d:	e8 4e 4a fd ff       	call   3b90 <fwrite@plt>
   2f142:	eb 4e                	jmp    2f192 <vrna_message_vwarning+0xd8>
   2f144:	48 8b 05 d5 2f 22 00 	mov    rax,QWORD PTR [rip+0x222fd5]        # 252120 <stderr@@GLIBC_2.2.5>
   2f14b:	48 89 c1             	mov    rcx,rax
   2f14e:	ba 09 00 00 00       	mov    edx,0x9
   2f153:	be 01 00 00 00       	mov    esi,0x1
   2f158:	48 8d 3d ec 75 1b 00 	lea    rdi,[rip+0x1b75ec]        # 1e674b <parameter_set_rna_turner2004+0x5ddab>
   2f15f:	e8 2c 4a fd ff       	call   3b90 <fwrite@plt>
   2f164:	48 8b 05 b5 2f 22 00 	mov    rax,QWORD PTR [rip+0x222fb5]        # 252120 <stderr@@GLIBC_2.2.5>
   2f16b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2f16f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2f173:	48 89 ce             	mov    rsi,rcx
   2f176:	48 89 c7             	mov    rdi,rax
   2f179:	e8 12 48 fd ff       	call   3990 <vfprintf@plt>
   2f17e:	48 8b 05 9b 2f 22 00 	mov    rax,QWORD PTR [rip+0x222f9b]        # 252120 <stderr@@GLIBC_2.2.5>
   2f185:	48 89 c6             	mov    rsi,rax
   2f188:	bf 0a 00 00 00       	mov    edi,0xa
   2f18d:	e8 de 47 fd ff       	call   3970 <fputc@plt>
   2f192:	90                   	nop
   2f193:	c9                   	leave  
   2f194:	c3                   	ret    

000000000002f195 <vrna_message_info>:
   2f195:	f3 0f 1e fa          	endbr64 
   2f199:	55                   	push   rbp
   2f19a:	48 89 e5             	mov    rbp,rsp
   2f19d:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
   2f1a4:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
   2f1ab:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
   2f1b2:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   2f1b9:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   2f1c0:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
   2f1c7:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
   2f1ce:	84 c0                	test   al,al
   2f1d0:	74 20                	je     2f1f2 <vrna_message_info+0x5d>
   2f1d2:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   2f1d6:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
   2f1da:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
   2f1de:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
   2f1e2:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
   2f1e6:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
   2f1ea:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
   2f1ee:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
   2f1f2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2f1fb:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2f202:	31 c0                	xor    eax,eax
   2f204:	c7 85 30 ff ff ff 10 00 00 00 	mov    DWORD PTR [rbp-0xd0],0x10
   2f20e:	c7 85 34 ff ff ff 30 00 00 00 	mov    DWORD PTR [rbp-0xcc],0x30
   2f218:	48 8d 45 10          	lea    rax,[rbp+0x10]
   2f21c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
   2f223:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
   2f22a:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
   2f231:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2f238:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
   2f23f:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
   2f246:	48 89 ce             	mov    rsi,rcx
   2f249:	48 89 c7             	mov    rdi,rax
   2f24c:	e8 1a 00 00 00       	call   2f26b <vrna_message_vinfo>
   2f251:	90                   	nop
   2f252:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   2f259:	64 48 33 04 25 28 00 00 00 	xor    rax,QWORD PTR fs:0x28
   2f262:	74 05                	je     2f269 <vrna_message_info+0xd4>
   2f264:	e8 87 46 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2f269:	c9                   	leave  
   2f26a:	c3                   	ret    

000000000002f26b <vrna_message_vinfo>:
   2f26b:	f3 0f 1e fa          	endbr64 
   2f26f:	55                   	push   rbp
   2f270:	48 89 e5             	mov    rbp,rsp
   2f273:	48 83 ec 20          	sub    rsp,0x20
   2f277:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2f27b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2f27f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2f283:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2f288:	75 0b                	jne    2f295 <vrna_message_vinfo+0x2a>
   2f28a:	48 8b 05 2f 2d 22 00 	mov    rax,QWORD PTR [rip+0x222d2f]        # 251fc0 <stdout@@GLIBC_2.2.5>
   2f291:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2f295:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f299:	48 89 c7             	mov    rdi,rax
   2f29c:	e8 2f 46 fd ff       	call   38d0 <fileno@plt>
   2f2a1:	89 c7                	mov    edi,eax
   2f2a3:	e8 38 48 fd ff       	call   3ae0 <isatty@plt>
   2f2a8:	85 c0                	test   eax,eax
   2f2aa:	74 53                	je     2f2ff <vrna_message_vinfo+0x94>
   2f2ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f2b0:	48 89 c1             	mov    rcx,rax
   2f2b3:	ba 07 00 00 00       	mov    edx,0x7
   2f2b8:	be 01 00 00 00       	mov    esi,0x1
   2f2bd:	48 8d 3d 91 74 1b 00 	lea    rdi,[rip+0x1b7491]        # 1e6755 <parameter_set_rna_turner2004+0x5ddb5>
   2f2c4:	e8 c7 48 fd ff       	call   3b90 <fwrite@plt>
   2f2c9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2f2cd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2f2d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f2d5:	48 89 ce             	mov    rsi,rcx
   2f2d8:	48 89 c7             	mov    rdi,rax
   2f2db:	e8 b0 46 fd ff       	call   3990 <vfprintf@plt>
   2f2e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f2e4:	48 89 c1             	mov    rcx,rax
   2f2e7:	ba 05 00 00 00       	mov    edx,0x5
   2f2ec:	be 01 00 00 00       	mov    esi,0x1
   2f2f1:	48 8d 3d 2c 74 1b 00 	lea    rdi,[rip+0x1b742c]        # 1e6724 <parameter_set_rna_turner2004+0x5dd84>
   2f2f8:	e8 93 48 fd ff       	call   3b90 <fwrite@plt>
   2f2fd:	eb 28                	jmp    2f327 <vrna_message_vinfo+0xbc>
   2f2ff:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2f303:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2f307:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f30b:	48 89 ce             	mov    rsi,rcx
   2f30e:	48 89 c7             	mov    rdi,rax
   2f311:	e8 7a 46 fd ff       	call   3990 <vfprintf@plt>
   2f316:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f31a:	48 89 c6             	mov    rsi,rax
   2f31d:	bf 0a 00 00 00       	mov    edi,0xa
   2f322:	e8 49 46 fd ff       	call   3970 <fputc@plt>
   2f327:	90                   	nop
   2f328:	c9                   	leave  
   2f329:	c3                   	ret    

000000000002f32a <vrna_init_rand>:
   2f32a:	f3 0f 1e fa          	endbr64 
   2f32e:	55                   	push   rbp
   2f32f:	48 89 e5             	mov    rbp,rsp
   2f332:	41 54                	push   r12
   2f334:	53                   	push   rbx
   2f335:	48 83 ec 10          	sub    rsp,0x10
   2f339:	e8 c2 46 fd ff       	call   3a00 <getpid@plt>
   2f33e:	41 89 c4             	mov    r12d,eax
   2f341:	bf 00 00 00 00       	mov    edi,0x0
   2f346:	e8 05 45 fd ff       	call   3850 <time@plt>
   2f34b:	89 c3                	mov    ebx,eax
   2f34d:	e8 9e 44 fd ff       	call   37f0 <clock@plt>
   2f352:	44 89 e2             	mov    edx,r12d
   2f355:	89 de                	mov    esi,ebx
   2f357:	89 c7                	mov    edi,eax
   2f359:	e8 6c 05 00 00       	call   2f8ca <rj_mix>
   2f35e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2f361:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f364:	66 89 05 27 de 2b 00 	mov    WORD PTR [rip+0x2bde27],ax        # 2ed192 <xsubi+0x4>
   2f36b:	0f b7 05 20 de 2b 00 	movzx  eax,WORD PTR [rip+0x2bde20]        # 2ed192 <xsubi+0x4>
   2f372:	66 89 05 17 de 2b 00 	mov    WORD PTR [rip+0x2bde17],ax        # 2ed190 <xsubi+0x2>
   2f379:	0f b7 05 10 de 2b 00 	movzx  eax,WORD PTR [rip+0x2bde10]        # 2ed190 <xsubi+0x2>
   2f380:	66 89 05 07 de 2b 00 	mov    WORD PTR [rip+0x2bde07],ax        # 2ed18e <xsubi>
   2f387:	0f b7 05 02 de 2b 00 	movzx  eax,WORD PTR [rip+0x2bde02]        # 2ed190 <xsubi+0x2>
   2f38e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2f391:	c1 ea 06             	shr    edx,0x6
   2f394:	01 d0                	add    eax,edx
   2f396:	66 89 05 f3 dd 2b 00 	mov    WORD PTR [rip+0x2bddf3],ax        # 2ed190 <xsubi+0x2>
   2f39d:	0f b7 05 ee dd 2b 00 	movzx  eax,WORD PTR [rip+0x2bddee]        # 2ed192 <xsubi+0x4>
   2f3a4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2f3a7:	c1 ea 0c             	shr    edx,0xc
   2f3aa:	01 d0                	add    eax,edx
   2f3ac:	66 89 05 df dd 2b 00 	mov    WORD PTR [rip+0x2bdddf],ax        # 2ed192 <xsubi+0x4>
   2f3b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f3b6:	89 c7                	mov    edi,eax
   2f3b8:	e8 c3 44 fd ff       	call   3880 <srand@plt>
   2f3bd:	90                   	nop
   2f3be:	48 83 c4 10          	add    rsp,0x10
   2f3c2:	5b                   	pop    rbx
   2f3c3:	41 5c                	pop    r12
   2f3c5:	5d                   	pop    rbp
   2f3c6:	c3                   	ret    

000000000002f3c7 <vrna_urn>:
   2f3c7:	f3 0f 1e fa          	endbr64 
   2f3cb:	55                   	push   rbp
   2f3cc:	48 89 e5             	mov    rbp,rsp
   2f3cf:	e8 ac 42 fd ff       	call   3680 <rand@plt>
   2f3d4:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   2f3d8:	f2 0f 10 0d 20 74 1b 00 	movsd  xmm1,QWORD PTR [rip+0x1b7420]        # 1e6800 <parameter_set_rna_turner2004+0x5de60>
   2f3e0:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2f3e4:	5d                   	pop    rbp
   2f3e5:	c3                   	ret    

000000000002f3e6 <vrna_int_urn>:
   2f3e6:	f3 0f 1e fa          	endbr64 
   2f3ea:	55                   	push   rbp
   2f3eb:	48 89 e5             	mov    rbp,rsp
   2f3ee:	48 83 ec 10          	sub    rsp,0x10
   2f3f2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2f3f5:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   2f3f8:	e8 ca ff ff ff       	call   2f3c7 <vrna_urn>
   2f3fd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f400:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
   2f403:	83 c0 01             	add    eax,0x1
   2f406:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2f40a:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2f40e:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   2f412:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f415:	01 d0                	add    eax,edx
   2f417:	c9                   	leave  
   2f418:	c3                   	ret    

000000000002f419 <vrna_time_stamp>:
   2f419:	f3 0f 1e fa          	endbr64 
   2f41d:	55                   	push   rbp
   2f41e:	48 89 e5             	mov    rbp,rsp
   2f421:	48 83 ec 10          	sub    rsp,0x10
   2f425:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2f42e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2f432:	31 c0                	xor    eax,eax
   2f434:	bf 00 00 00 00       	mov    edi,0x0
   2f439:	e8 12 44 fd ff       	call   3850 <time@plt>
   2f43e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2f442:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2f446:	48 89 c7             	mov    rdi,rax
   2f449:	e8 a2 42 fd ff       	call   36f0 <ctime@plt>
   2f44e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2f452:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   2f45b:	74 05                	je     2f462 <vrna_time_stamp+0x49>
   2f45d:	e8 8e 44 fd ff       	call   38f0 <__stack_chk_fail@plt>
   2f462:	c9                   	leave  
   2f463:	c3                   	ret    

000000000002f464 <get_input_line>:
   2f464:	f3 0f 1e fa          	endbr64 
   2f468:	55                   	push   rbp
   2f469:	48 89 e5             	mov    rbp,rsp
   2f46c:	48 83 ec 30          	sub    rsp,0x30
   2f470:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2f474:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   2f477:	48 8b 05 52 2b 22 00 	mov    rax,QWORD PTR [rip+0x222b52]        # 251fd0 <stdin@@GLIBC_2.2.5>
   2f47e:	48 89 c7             	mov    rdi,rax
   2f481:	e8 3b 30 00 00       	call   324c1 <vrna_read_line>
   2f486:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2f48a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2f48f:	75 0a                	jne    2f49b <get_input_line+0x37>
   2f491:	b8 01 00 00 00       	mov    eax,0x1
   2f496:	e9 e4 01 00 00       	jmp    2f67f <get_input_line+0x21b>
   2f49b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2f49e:	25 80 00 00 00       	and    eax,0x80
   2f4a3:	85 c0                	test   eax,eax
   2f4a5:	75 48                	jne    2f4ef <get_input_line+0x8b>
   2f4a7:	eb 30                	jmp    2f4d9 <get_input_line+0x75>
   2f4a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f4ad:	48 89 c7             	mov    rdi,rax
   2f4b0:	e8 8b 44 fd ff       	call   3940 <free@plt>
   2f4b5:	48 8b 05 14 2b 22 00 	mov    rax,QWORD PTR [rip+0x222b14]        # 251fd0 <stdin@@GLIBC_2.2.5>
   2f4bc:	48 89 c7             	mov    rdi,rax
   2f4bf:	e8 fd 2f 00 00       	call   324c1 <vrna_read_line>
   2f4c4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2f4c8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2f4cd:	75 0a                	jne    2f4d9 <get_input_line+0x75>
   2f4cf:	b8 01 00 00 00       	mov    eax,0x1
   2f4d4:	e9 a6 01 00 00       	jmp    2f67f <get_input_line+0x21b>
   2f4d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f4dd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2f4e0:	3c 2a                	cmp    al,0x2a
   2f4e2:	74 c5                	je     2f4a9 <get_input_line+0x45>
   2f4e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f4e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2f4eb:	84 c0                	test   al,al
   2f4ed:	74 ba                	je     2f4a9 <get_input_line+0x45>
   2f4ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f4f3:	48 89 c7             	mov    rdi,rax
   2f4f6:	e8 25 42 fd ff       	call   3720 <strlen@plt>
   2f4fb:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   2f4fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f502:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2f505:	3c 40                	cmp    al,0x40
   2f507:	75 16                	jne    2f51f <get_input_line+0xbb>
   2f509:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f50d:	48 89 c7             	mov    rdi,rax
   2f510:	e8 2b 44 fd ff       	call   3940 <free@plt>
   2f515:	b8 02 00 00 00       	mov    eax,0x2
   2f51a:	e9 60 01 00 00       	jmp    2f67f <get_input_line+0x21b>
   2f51f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2f522:	25 00 01 00 00       	and    eax,0x100
   2f527:	85 c0                	test   eax,eax
   2f529:	75 62                	jne    2f58d <get_input_line+0x129>
   2f52b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2f52e:	83 e8 01             	sub    eax,0x1
   2f531:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2f534:	eb 2f                	jmp    2f565 <get_input_line+0x101>
   2f536:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f539:	48 63 d0             	movsxd rdx,eax
   2f53c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f540:	48 01 d0             	add    rax,rdx
   2f543:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2f546:	3c 20                	cmp    al,0x20
   2f548:	74 16                	je     2f560 <get_input_line+0xfc>
   2f54a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f54d:	48 63 d0             	movsxd rdx,eax
   2f550:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f554:	48 01 d0             	add    rax,rdx
   2f557:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2f55a:	3c 09                	cmp    al,0x9
   2f55c:	75 0f                	jne    2f56d <get_input_line+0x109>
   2f55e:	eb 01                	jmp    2f561 <get_input_line+0xfd>
   2f560:	90                   	nop
   2f561:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
   2f565:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   2f569:	79 cb                	jns    2f536 <get_input_line+0xd2>
   2f56b:	eb 01                	jmp    2f56e <get_input_line+0x10a>
   2f56d:	90                   	nop
   2f56e:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   2f572:	78 0a                	js     2f57e <get_input_line+0x11a>
   2f574:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f577:	83 c0 01             	add    eax,0x1
   2f57a:	48 98                	cdqe   
   2f57c:	eb 05                	jmp    2f583 <get_input_line+0x11f>
   2f57e:	b8 00 00 00 00       	mov    eax,0x0
   2f583:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2f587:	48 01 d0             	add    rax,rdx
   2f58a:	c6 00 00             	mov    BYTE PTR [rax],0x0
   2f58d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f591:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2f594:	3c 3e                	cmp    al,0x3e
   2f596:	0f 85 bc 00 00 00    	jne    2f658 <get_input_line+0x1f4>
   2f59c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f5a0:	48 89 c7             	mov    rdi,rax
   2f5a3:	e8 78 41 fd ff       	call   3720 <strlen@plt>
   2f5a8:	83 c0 01             	add    eax,0x1
   2f5ab:	89 c7                	mov    edi,eax
   2f5ad:	e8 5f f7 ff ff       	call   2ed11 <vrna_alloc>
   2f5b2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2f5b6:	48 89 02             	mov    QWORD PTR [rdx],rax
   2f5b9:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [rbp-0xc],0x8
   2f5c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2f5c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f5c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f5cb:	48 8d 35 8b 71 1b 00 	lea    rsi,[rip+0x1b718b]        # 1e675d <parameter_set_rna_turner2004+0x5ddbd>
   2f5d2:	48 89 c7             	mov    rdi,rax
   2f5d5:	b8 00 00 00 00       	mov    eax,0x0
   2f5da:	e8 b1 42 fd ff       	call   3890 <__isoc99_sscanf@plt>
   2f5df:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2f5e2:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   2f5e6:	7e 43                	jle    2f62b <get_input_line+0x1c7>
   2f5e8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2f5ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2f5ef:	48 89 c7             	mov    rdi,rax
   2f5f2:	e8 29 41 fd ff       	call   3720 <strlen@plt>
   2f5f7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2f5fa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f5fd:	83 c0 01             	add    eax,0x1
   2f600:	89 c2                	mov    edx,eax
   2f602:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2f606:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2f609:	89 d6                	mov    esi,edx
   2f60b:	48 89 c7             	mov    rdi,rax
   2f60e:	e8 86 f7 ff ff       	call   2ed99 <vrna_realloc>
   2f613:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2f617:	48 89 02             	mov    QWORD PTR [rdx],rax
   2f61a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f61e:	48 89 c7             	mov    rdi,rax
   2f621:	e8 1a 43 fd ff       	call   3940 <free@plt>
   2f626:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f629:	eb 54                	jmp    2f67f <get_input_line+0x21b>
   2f62b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f62f:	48 89 c7             	mov    rdi,rax
   2f632:	e8 09 43 fd ff       	call   3940 <free@plt>
   2f637:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2f63b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2f63e:	48 89 c7             	mov    rdi,rax
   2f641:	e8 fa 42 fd ff       	call   3940 <free@plt>
   2f646:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2f64a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   2f651:	b8 01 00 00 00       	mov    eax,0x1
   2f656:	eb 27                	jmp    2f67f <get_input_line+0x21b>
   2f658:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f65c:	48 89 c7             	mov    rdi,rax
   2f65f:	e8 f5 e8 ff ff       	call   2df59 <strdup>
   2f664:	48 89 c2             	mov    rdx,rax
   2f667:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2f66b:	48 89 10             	mov    QWORD PTR [rax],rdx
   2f66e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f672:	48 89 c7             	mov    rdi,rax
   2f675:	e8 c6 42 fd ff       	call   3940 <free@plt>
   2f67a:	b8 04 00 00 00       	mov    eax,0x4
   2f67f:	c9                   	leave  
   2f680:	c3                   	ret    

000000000002f681 <vrna_message_input_seq_simple>:
   2f681:	f3 0f 1e fa          	endbr64 
   2f685:	55                   	push   rbp
   2f686:	48 89 e5             	mov    rbp,rsp
   2f689:	48 8d 3d d8 70 1b 00 	lea    rdi,[rip+0x1b70d8]        # 1e6768 <parameter_set_rna_turner2004+0x5ddc8>
   2f690:	e8 03 00 00 00       	call   2f698 <vrna_message_input_seq>
   2f695:	90                   	nop
   2f696:	5d                   	pop    rbp
   2f697:	c3                   	ret    

000000000002f698 <vrna_message_input_seq>:
   2f698:	f3 0f 1e fa          	endbr64 
   2f69c:	55                   	push   rbp
   2f69d:	48 89 e5             	mov    rbp,rsp
   2f6a0:	48 83 ec 10          	sub    rsp,0x10
   2f6a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2f6a8:	48 8b 05 11 29 22 00 	mov    rax,QWORD PTR [rip+0x222911]        # 251fc0 <stdout@@GLIBC_2.2.5>
   2f6af:	48 89 c7             	mov    rdi,rax
   2f6b2:	e8 19 42 fd ff       	call   38d0 <fileno@plt>
   2f6b7:	89 c7                	mov    edi,eax
   2f6b9:	e8 22 44 fd ff       	call   3ae0 <isatty@plt>
   2f6be:	85 c0                	test   eax,eax
   2f6c0:	74 39                	je     2f6fb <vrna_message_input_seq+0x63>
   2f6c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f6c6:	48 89 c6             	mov    rsi,rax
   2f6c9:	48 8d 3d bb 70 1b 00 	lea    rdi,[rip+0x1b70bb]        # 1e678b <parameter_set_rna_turner2004+0x5ddeb>
   2f6d0:	b8 00 00 00 00       	mov    eax,0x0
   2f6d5:	e8 36 3f fd ff       	call   3610 <printf@plt>
   2f6da:	48 8d 15 5f 1f 22 00 	lea    rdx,[rip+0x221f5f]        # 251640 <scale2>
   2f6e1:	48 8d 35 18 1f 22 00 	lea    rsi,[rip+0x221f18]        # 251600 <scale1>
   2f6e8:	48 8d 3d b5 70 1b 00 	lea    rdi,[rip+0x1b70b5]        # 1e67a4 <parameter_set_rna_turner2004+0x5de04>
   2f6ef:	b8 00 00 00 00       	mov    eax,0x0
   2f6f4:	e8 17 3f fd ff       	call   3610 <printf@plt>
   2f6f9:	eb 37                	jmp    2f732 <vrna_message_input_seq+0x9a>
   2f6fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f6ff:	48 89 c6             	mov    rsi,rax
   2f702:	48 8d 3d a9 70 1b 00 	lea    rdi,[rip+0x1b70a9]        # 1e67b2 <parameter_set_rna_turner2004+0x5de12>
   2f709:	b8 00 00 00 00       	mov    eax,0x0
   2f70e:	e8 fd 3e fd ff       	call   3610 <printf@plt>
   2f713:	48 8d 15 26 1f 22 00 	lea    rdx,[rip+0x221f26]        # 251640 <scale2>
   2f71a:	48 8d 35 df 1e 22 00 	lea    rsi,[rip+0x221edf]        # 251600 <scale1>
   2f721:	48 8d 3d 9a 70 1b 00 	lea    rdi,[rip+0x1b709a]        # 1e67c2 <parameter_set_rna_turner2004+0x5de22>
   2f728:	b8 00 00 00 00       	mov    eax,0x0
   2f72d:	e8 de 3e fd ff       	call   3610 <printf@plt>
   2f732:	48 8b 05 87 28 22 00 	mov    rax,QWORD PTR [rip+0x222887]        # 251fc0 <stdout@@GLIBC_2.2.5>
   2f739:	48 89 c7             	mov    rdi,rax
   2f73c:	e8 df 41 fd ff       	call   3920 <fflush@plt>
   2f741:	90                   	nop
   2f742:	c9                   	leave  
   2f743:	c3                   	ret    

000000000002f744 <vrna_message_input_msa>:
   2f744:	f3 0f 1e fa          	endbr64 
   2f748:	55                   	push   rbp
   2f749:	48 89 e5             	mov    rbp,rsp
   2f74c:	48 83 ec 10          	sub    rsp,0x10
   2f750:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2f754:	48 8b 05 65 28 22 00 	mov    rax,QWORD PTR [rip+0x222865]        # 251fc0 <stdout@@GLIBC_2.2.5>
   2f75b:	48 89 c7             	mov    rdi,rax
   2f75e:	e8 6d 41 fd ff       	call   38d0 <fileno@plt>
   2f763:	89 c7                	mov    edi,eax
   2f765:	e8 76 43 fd ff       	call   3ae0 <isatty@plt>
   2f76a:	85 c0                	test   eax,eax
   2f76c:	74 39                	je     2f7a7 <vrna_message_input_msa+0x63>
   2f76e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f772:	48 89 c6             	mov    rsi,rax
   2f775:	48 8d 3d 4c 70 1b 00 	lea    rdi,[rip+0x1b704c]        # 1e67c8 <parameter_set_rna_turner2004+0x5de28>
   2f77c:	b8 00 00 00 00       	mov    eax,0x0
   2f781:	e8 8a 3e fd ff       	call   3610 <printf@plt>
   2f786:	48 8d 15 b3 1e 22 00 	lea    rdx,[rip+0x221eb3]        # 251640 <scale2>
   2f78d:	48 8d 35 6c 1e 22 00 	lea    rsi,[rip+0x221e6c]        # 251600 <scale1>
   2f794:	48 8d 3d 09 70 1b 00 	lea    rdi,[rip+0x1b7009]        # 1e67a4 <parameter_set_rna_turner2004+0x5de04>
   2f79b:	b8 00 00 00 00       	mov    eax,0x0
   2f7a0:	e8 6b 3e fd ff       	call   3610 <printf@plt>
   2f7a5:	eb 37                	jmp    2f7de <vrna_message_input_msa+0x9a>
   2f7a7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f7ab:	48 89 c6             	mov    rsi,rax
   2f7ae:	48 8d 3d 31 70 1b 00 	lea    rdi,[rip+0x1b7031]        # 1e67e6 <parameter_set_rna_turner2004+0x5de46>
   2f7b5:	b8 00 00 00 00       	mov    eax,0x0
   2f7ba:	e8 51 3e fd ff       	call   3610 <printf@plt>
   2f7bf:	48 8d 15 7a 1e 22 00 	lea    rdx,[rip+0x221e7a]        # 251640 <scale2>
   2f7c6:	48 8d 35 33 1e 22 00 	lea    rsi,[rip+0x221e33]        # 251600 <scale1>
   2f7cd:	48 8d 3d ee 6f 1b 00 	lea    rdi,[rip+0x1b6fee]        # 1e67c2 <parameter_set_rna_turner2004+0x5de22>
   2f7d4:	b8 00 00 00 00       	mov    eax,0x0
   2f7d9:	e8 32 3e fd ff       	call   3610 <printf@plt>
   2f7de:	48 8b 05 db 27 22 00 	mov    rax,QWORD PTR [rip+0x2227db]        # 251fc0 <stdout@@GLIBC_2.2.5>
   2f7e5:	48 89 c7             	mov    rdi,rax
   2f7e8:	e8 33 41 fd ff       	call   3920 <fflush@plt>
   2f7ed:	90                   	nop
   2f7ee:	c9                   	leave  
   2f7ef:	c3                   	ret    

000000000002f7f0 <vrna_idx_row_wise>:
   2f7f0:	f3 0f 1e fa          	endbr64 
   2f7f4:	55                   	push   rbp
   2f7f5:	48 89 e5             	mov    rbp,rsp
   2f7f8:	48 83 ec 20          	sub    rsp,0x20
   2f7fc:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   2f7ff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f802:	83 c0 01             	add    eax,0x1
   2f805:	c1 e0 02             	shl    eax,0x2
   2f808:	89 c7                	mov    edi,eax
   2f80a:	e8 02 f5 ff ff       	call   2ed11 <vrna_alloc>
   2f80f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2f813:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   2f81a:	eb 40                	jmp    2f85c <vrna_idx_row_wise+0x6c>
   2f81c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f81f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2f822:	29 c2                	sub    edx,eax
   2f824:	89 d0                	mov    eax,edx
   2f826:	8d 48 01             	lea    ecx,[rax+0x1]
   2f829:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f82c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2f82f:	29 c2                	sub    edx,eax
   2f831:	89 d0                	mov    eax,edx
   2f833:	0f af c1             	imul   eax,ecx
   2f836:	d1 e8                	shr    eax,1
   2f838:	89 c2                	mov    edx,eax
   2f83a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f83d:	01 d0                	add    eax,edx
   2f83f:	8d 50 01             	lea    edx,[rax+0x1]
   2f842:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f845:	48 98                	cdqe   
   2f847:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2f84f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f853:	48 01 c8             	add    rax,rcx
   2f856:	89 10                	mov    DWORD PTR [rax],edx
   2f858:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   2f85c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f85f:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   2f862:	73 b8                	jae    2f81c <vrna_idx_row_wise+0x2c>
   2f864:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f868:	c9                   	leave  
   2f869:	c3                   	ret    

000000000002f86a <vrna_idx_col_wise>:
   2f86a:	f3 0f 1e fa          	endbr64 
   2f86e:	55                   	push   rbp
   2f86f:	48 89 e5             	mov    rbp,rsp
   2f872:	48 83 ec 20          	sub    rsp,0x20
   2f876:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   2f879:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2f87c:	83 c0 01             	add    eax,0x1
   2f87f:	c1 e0 02             	shl    eax,0x2
   2f882:	89 c7                	mov    edi,eax
   2f884:	e8 88 f4 ff ff       	call   2ed11 <vrna_alloc>
   2f889:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2f88d:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   2f894:	eb 26                	jmp    2f8bc <vrna_idx_col_wise+0x52>
   2f896:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f899:	83 e8 01             	sub    eax,0x1
   2f89c:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   2f8a0:	d1 e8                	shr    eax,1
   2f8a2:	89 c2                	mov    edx,eax
   2f8a4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f8a7:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2f8af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f8b3:	48 01 c8             	add    rax,rcx
   2f8b6:	89 10                	mov    DWORD PTR [rax],edx
   2f8b8:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   2f8bc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f8bf:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   2f8c2:	76 d2                	jbe    2f896 <vrna_idx_col_wise+0x2c>
   2f8c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f8c8:	c9                   	leave  
   2f8c9:	c3                   	ret    

000000000002f8ca <rj_mix>:
   2f8ca:	f3 0f 1e fa          	endbr64 
   2f8ce:	55                   	push   rbp
   2f8cf:	48 89 e5             	mov    rbp,rsp
   2f8d2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2f8d5:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   2f8d8:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   2f8db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f8de:	29 45 fc             	sub    DWORD PTR [rbp-0x4],eax
   2f8e1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f8e4:	29 45 fc             	sub    DWORD PTR [rbp-0x4],eax
   2f8e7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f8ea:	c1 e8 0d             	shr    eax,0xd
   2f8ed:	31 45 fc             	xor    DWORD PTR [rbp-0x4],eax
   2f8f0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f8f3:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
   2f8f6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f8f9:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
   2f8fc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f8ff:	c1 e0 08             	shl    eax,0x8
   2f902:	31 45 f8             	xor    DWORD PTR [rbp-0x8],eax
   2f905:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f908:	29 45 f4             	sub    DWORD PTR [rbp-0xc],eax
   2f90b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f90e:	29 45 f4             	sub    DWORD PTR [rbp-0xc],eax
   2f911:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f914:	c1 e8 0d             	shr    eax,0xd
   2f917:	31 45 f4             	xor    DWORD PTR [rbp-0xc],eax
   2f91a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f91d:	29 45 fc             	sub    DWORD PTR [rbp-0x4],eax
   2f920:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f923:	29 45 fc             	sub    DWORD PTR [rbp-0x4],eax
   2f926:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f929:	c1 e8 0c             	shr    eax,0xc
   2f92c:	31 45 fc             	xor    DWORD PTR [rbp-0x4],eax
   2f92f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f932:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
   2f935:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f938:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
   2f93b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f93e:	c1 e0 10             	shl    eax,0x10
   2f941:	31 45 f8             	xor    DWORD PTR [rbp-0x8],eax
   2f944:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f947:	29 45 f4             	sub    DWORD PTR [rbp-0xc],eax
   2f94a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f94d:	29 45 f4             	sub    DWORD PTR [rbp-0xc],eax
   2f950:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f953:	c1 e8 05             	shr    eax,0x5
   2f956:	31 45 f4             	xor    DWORD PTR [rbp-0xc],eax
   2f959:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f95c:	29 45 fc             	sub    DWORD PTR [rbp-0x4],eax
   2f95f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f962:	29 45 fc             	sub    DWORD PTR [rbp-0x4],eax
   2f965:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f968:	c1 e8 03             	shr    eax,0x3
   2f96b:	31 45 fc             	xor    DWORD PTR [rbp-0x4],eax
   2f96e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f971:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
   2f974:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f977:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
   2f97a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f97d:	c1 e0 0a             	shl    eax,0xa
   2f980:	31 45 f8             	xor    DWORD PTR [rbp-0x8],eax
   2f983:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f986:	29 45 f4             	sub    DWORD PTR [rbp-0xc],eax
   2f989:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f98c:	29 45 f4             	sub    DWORD PTR [rbp-0xc],eax
   2f98f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2f992:	c1 e8 0f             	shr    eax,0xf
   2f995:	31 45 f4             	xor    DWORD PTR [rbp-0xc],eax
   2f998:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2f99b:	5d                   	pop    rbp
   2f99c:	c3                   	ret    

000000000002f99d <get_iindx>:
   2f99d:	f3 0f 1e fa          	endbr64 
   2f9a1:	55                   	push   rbp
   2f9a2:	48 89 e5             	mov    rbp,rsp
   2f9a5:	48 83 ec 10          	sub    rsp,0x10
   2f9a9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2f9ac:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f9af:	89 c7                	mov    edi,eax
   2f9b1:	e8 3a fe ff ff       	call   2f7f0 <vrna_idx_row_wise>
   2f9b6:	c9                   	leave  
   2f9b7:	c3                   	ret    

000000000002f9b8 <get_indx>:
   2f9b8:	f3 0f 1e fa          	endbr64 
   2f9bc:	55                   	push   rbp
   2f9bd:	48 89 e5             	mov    rbp,rsp
   2f9c0:	48 83 ec 10          	sub    rsp,0x10
   2f9c4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2f9c7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2f9ca:	89 c7                	mov    edi,eax
   2f9cc:	e8 99 fe ff ff       	call   2f86a <vrna_idx_col_wise>
   2f9d1:	c9                   	leave  
   2f9d2:	c3                   	ret    

000000000002f9d3 <print_tty_input_seq>:
   2f9d3:	f3 0f 1e fa          	endbr64 
   2f9d7:	55                   	push   rbp
   2f9d8:	48 89 e5             	mov    rbp,rsp
   2f9db:	e8 a1 fc ff ff       	call   2f681 <vrna_message_input_seq_simple>
   2f9e0:	90                   	nop
   2f9e1:	5d                   	pop    rbp
   2f9e2:	c3                   	ret    

000000000002f9e3 <print_tty_input_seq_str>:
   2f9e3:	f3 0f 1e fa          	endbr64 
   2f9e7:	55                   	push   rbp
   2f9e8:	48 89 e5             	mov    rbp,rsp
   2f9eb:	48 83 ec 10          	sub    rsp,0x10
   2f9ef:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2f9f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2f9f7:	48 89 c7             	mov    rdi,rax
   2f9fa:	e8 99 fc ff ff       	call   2f698 <vrna_message_input_seq>
   2f9ff:	90                   	nop
   2fa00:	c9                   	leave  
   2fa01:	c3                   	ret    

000000000002fa02 <warn_user>:
   2fa02:	f3 0f 1e fa          	endbr64 
   2fa06:	55                   	push   rbp
   2fa07:	48 89 e5             	mov    rbp,rsp
   2fa0a:	48 83 ec 10          	sub    rsp,0x10
   2fa0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2fa12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fa16:	48 89 c7             	mov    rdi,rax
   2fa19:	b8 00 00 00 00       	mov    eax,0x0
   2fa1e:	e8 c8 f5 ff ff       	call   2efeb <vrna_message_warning>
   2fa23:	90                   	nop
   2fa24:	c9                   	leave  
   2fa25:	c3                   	ret    

000000000002fa26 <nrerror>:
   2fa26:	f3 0f 1e fa          	endbr64 
   2fa2a:	55                   	push   rbp
   2fa2b:	48 89 e5             	mov    rbp,rsp
   2fa2e:	48 83 ec 10          	sub    rsp,0x10
   2fa32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2fa36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fa3a:	48 89 c7             	mov    rdi,rax
   2fa3d:	b8 00 00 00 00       	mov    eax,0x0
   2fa42:	e8 f3 f3 ff ff       	call   2ee3a <vrna_message_error>
   2fa47:	90                   	nop
   2fa48:	c9                   	leave  
   2fa49:	c3                   	ret    

000000000002fa4a <space>:
   2fa4a:	f3 0f 1e fa          	endbr64 
   2fa4e:	55                   	push   rbp
   2fa4f:	48 89 e5             	mov    rbp,rsp
   2fa52:	48 83 ec 10          	sub    rsp,0x10
   2fa56:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2fa59:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2fa5c:	89 c7                	mov    edi,eax
   2fa5e:	e8 ae f2 ff ff       	call   2ed11 <vrna_alloc>
   2fa63:	c9                   	leave  
   2fa64:	c3                   	ret    

000000000002fa65 <xrealloc>:
   2fa65:	f3 0f 1e fa          	endbr64 
   2fa69:	55                   	push   rbp
   2fa6a:	48 89 e5             	mov    rbp,rsp
   2fa6d:	48 83 ec 10          	sub    rsp,0x10
   2fa71:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2fa75:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   2fa78:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   2fa7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fa7f:	89 d6                	mov    esi,edx
   2fa81:	48 89 c7             	mov    rdi,rax
   2fa84:	e8 10 f3 ff ff       	call   2ed99 <vrna_realloc>
   2fa89:	c9                   	leave  
   2fa8a:	c3                   	ret    

000000000002fa8b <init_rand>:
   2fa8b:	f3 0f 1e fa          	endbr64 
   2fa8f:	55                   	push   rbp
   2fa90:	48 89 e5             	mov    rbp,rsp
   2fa93:	e8 92 f8 ff ff       	call   2f32a <vrna_init_rand>
   2fa98:	90                   	nop
   2fa99:	5d                   	pop    rbp
   2fa9a:	c3                   	ret    

000000000002fa9b <urn>:
   2fa9b:	f3 0f 1e fa          	endbr64 
   2fa9f:	55                   	push   rbp
   2faa0:	48 89 e5             	mov    rbp,rsp
   2faa3:	e8 1f f9 ff ff       	call   2f3c7 <vrna_urn>
   2faa8:	5d                   	pop    rbp
   2faa9:	c3                   	ret    

000000000002faaa <int_urn>:
   2faaa:	f3 0f 1e fa          	endbr64 
   2faae:	55                   	push   rbp
   2faaf:	48 89 e5             	mov    rbp,rsp
   2fab2:	48 83 ec 10          	sub    rsp,0x10
   2fab6:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2fab9:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   2fabc:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   2fabf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2fac2:	89 d6                	mov    esi,edx
   2fac4:	89 c7                	mov    edi,eax
   2fac6:	e8 1b f9 ff ff       	call   2f3e6 <vrna_int_urn>
   2facb:	c9                   	leave  
   2facc:	c3                   	ret    

000000000002facd <filecopy>:
   2facd:	f3 0f 1e fa          	endbr64 
   2fad1:	55                   	push   rbp
   2fad2:	48 89 e5             	mov    rbp,rsp
   2fad5:	48 83 ec 10          	sub    rsp,0x10
   2fad9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2fadd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2fae1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2fae5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fae9:	48 89 d6             	mov    rsi,rdx
   2faec:	48 89 c7             	mov    rdi,rax
   2faef:	e8 8d 29 00 00       	call   32481 <vrna_file_copy>
   2faf4:	90                   	nop
   2faf5:	c9                   	leave  
   2faf6:	c3                   	ret    

000000000002faf7 <time_stamp>:
   2faf7:	f3 0f 1e fa          	endbr64 
   2fafb:	55                   	push   rbp
   2fafc:	48 89 e5             	mov    rbp,rsp
   2faff:	e8 15 f9 ff ff       	call   2f419 <vrna_time_stamp>
   2fb04:	5d                   	pop    rbp
   2fb05:	c3                   	ret    

000000000002fb06 <get_line>:
   2fb06:	f3 0f 1e fa          	endbr64 
   2fb0a:	55                   	push   rbp
   2fb0b:	48 89 e5             	mov    rbp,rsp
   2fb0e:	48 83 ec 10          	sub    rsp,0x10
   2fb12:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2fb16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fb1a:	48 89 c7             	mov    rdi,rax
   2fb1d:	e8 9f 29 00 00       	call   324c1 <vrna_read_line>
   2fb22:	c9                   	leave  
   2fb23:	c3                   	ret    

000000000002fb24 <vrna_sequence_length_max>:
   2fb24:	f3 0f 1e fa          	endbr64 
   2fb28:	55                   	push   rbp
   2fb29:	48 89 e5             	mov    rbp,rsp
   2fb2c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   2fb2f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2fb32:	83 e0 10             	and    eax,0x10
   2fb35:	85 c0                	test   eax,eax
   2fb37:	74 07                	je     2fb40 <vrna_sequence_length_max+0x1c>
   2fb39:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   2fb3e:	eb 05                	jmp    2fb45 <vrna_sequence_length_max+0x21>
   2fb40:	b8 ff 7f 00 00       	mov    eax,0x7fff
   2fb45:	5d                   	pop    rbp
   2fb46:	c3                   	ret    

000000000002fb47 <vrna_nucleotide_IUPAC_identity>:
   2fb47:	f3 0f 1e fa          	endbr64 
   2fb4b:	55                   	push   rbp
   2fb4c:	48 89 e5             	mov    rbp,rsp
   2fb4f:	48 83 ec 20          	sub    rsp,0x20
   2fb53:	89 fa                	mov    edx,edi
   2fb55:	89 f0                	mov    eax,esi
   2fb57:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
   2fb5a:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
   2fb5d:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   2fb65:	0f be 45 ec          	movsx  eax,BYTE PTR [rbp-0x14]
   2fb69:	89 c7                	mov    edi,eax
   2fb6b:	e8 f0 3f fd ff       	call   3b60 <toupper@plt>
   2fb70:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
   2fb73:	0f be 45 e8          	movsx  eax,BYTE PTR [rbp-0x18]
   2fb77:	89 c7                	mov    edi,eax
   2fb79:	e8 e2 3f fd ff       	call   3b60 <toupper@plt>
   2fb7e:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
   2fb81:	0f be 45 f6          	movsx  eax,BYTE PTR [rbp-0xa]
   2fb85:	83 e8 41             	sub    eax,0x41
   2fb88:	83 f8 18             	cmp    eax,0x18
   2fb8b:	0f 87 db 01 00 00    	ja     2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fb91:	89 c0                	mov    eax,eax
   2fb93:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2fb9b:	48 8d 05 da 6c 1b 00 	lea    rax,[rip+0x1b6cda]        # 1e687c <Law_and_Order+0x74>
   2fba2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   2fba5:	48 98                	cdqe   
   2fba7:	48 8d 15 ce 6c 1b 00 	lea    rdx,[rip+0x1b6cce]        # 1e687c <Law_and_Order+0x74>
   2fbae:	48 01 d0             	add    rax,rdx
   2fbb1:	3e ff e0             	notrack jmp rax
   2fbb4:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fbb8:	89 c6                	mov    esi,eax
   2fbba:	48 8d 3d 51 6c 1b 00 	lea    rdi,[rip+0x1b6c51]        # 1e6812 <Law_and_Order+0xa>
   2fbc1:	e8 1a 3b fd ff       	call   36e0 <strchr@plt>
   2fbc6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fbca:	e9 9d 01 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fbcf:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fbd3:	89 c6                	mov    esi,eax
   2fbd5:	48 8d 3d 3f 6c 1b 00 	lea    rdi,[rip+0x1b6c3f]        # 1e681b <Law_and_Order+0x13>
   2fbdc:	e8 ff 3a fd ff       	call   36e0 <strchr@plt>
   2fbe1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fbe5:	e9 82 01 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fbea:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fbee:	89 c6                	mov    esi,eax
   2fbf0:	48 8d 3d 2d 6c 1b 00 	lea    rdi,[rip+0x1b6c2d]        # 1e6824 <Law_and_Order+0x1c>
   2fbf7:	e8 e4 3a fd ff       	call   36e0 <strchr@plt>
   2fbfc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fc00:	e9 67 01 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fc05:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fc09:	89 c6                	mov    esi,eax
   2fc0b:	48 8d 3d 1b 6c 1b 00 	lea    rdi,[rip+0x1b6c1b]        # 1e682d <Law_and_Order+0x25>
   2fc12:	e8 c9 3a fd ff       	call   36e0 <strchr@plt>
   2fc17:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fc1b:	e9 4c 01 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fc20:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fc24:	89 c6                	mov    esi,eax
   2fc26:	48 8d 3d 09 6c 1b 00 	lea    rdi,[rip+0x1b6c09]        # 1e6836 <Law_and_Order+0x2e>
   2fc2d:	e8 ae 3a fd ff       	call   36e0 <strchr@plt>
   2fc32:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fc36:	e9 31 01 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fc3b:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fc3f:	89 c6                	mov    esi,eax
   2fc41:	48 8d 3d f7 6b 1b 00 	lea    rdi,[rip+0x1b6bf7]        # 1e683f <Law_and_Order+0x37>
   2fc48:	e8 93 3a fd ff       	call   36e0 <strchr@plt>
   2fc4d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fc51:	e9 16 01 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fc56:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fc5a:	89 c6                	mov    esi,eax
   2fc5c:	48 8d 3d df 6b 1b 00 	lea    rdi,[rip+0x1b6bdf]        # 1e6842 <Law_and_Order+0x3a>
   2fc63:	e8 78 3a fd ff       	call   36e0 <strchr@plt>
   2fc68:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fc6c:	e9 fb 00 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fc71:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fc75:	89 c6                	mov    esi,eax
   2fc77:	48 8d 3d c8 6b 1b 00 	lea    rdi,[rip+0x1b6bc8]        # 1e6846 <Law_and_Order+0x3e>
   2fc7e:	e8 5d 3a fd ff       	call   36e0 <strchr@plt>
   2fc83:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fc87:	e9 e0 00 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fc8c:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fc90:	89 c6                	mov    esi,eax
   2fc92:	48 8d 3d b2 6b 1b 00 	lea    rdi,[rip+0x1b6bb2]        # 1e684b <Law_and_Order+0x43>
   2fc99:	e8 42 3a fd ff       	call   36e0 <strchr@plt>
   2fc9e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fca2:	e9 c5 00 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fca7:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fcab:	89 c6                	mov    esi,eax
   2fcad:	48 8d 3d 9c 6b 1b 00 	lea    rdi,[rip+0x1b6b9c]        # 1e6850 <Law_and_Order+0x48>
   2fcb4:	e8 27 3a fd ff       	call   36e0 <strchr@plt>
   2fcb9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fcbd:	e9 aa 00 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fcc2:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fcc6:	89 c6                	mov    esi,eax
   2fcc8:	48 8d 3d 85 6b 1b 00 	lea    rdi,[rip+0x1b6b85]        # 1e6854 <Law_and_Order+0x4c>
   2fccf:	e8 0c 3a fd ff       	call   36e0 <strchr@plt>
   2fcd4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fcd8:	e9 8f 00 00 00       	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fcdd:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fce1:	89 c6                	mov    esi,eax
   2fce3:	48 8d 3d 6e 6b 1b 00 	lea    rdi,[rip+0x1b6b6e]        # 1e6858 <Law_and_Order+0x50>
   2fcea:	e8 f1 39 fd ff       	call   36e0 <strchr@plt>
   2fcef:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fcf3:	eb 77                	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fcf5:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fcf9:	89 c6                	mov    esi,eax
   2fcfb:	48 8d 3d 5b 6b 1b 00 	lea    rdi,[rip+0x1b6b5b]        # 1e685d <Law_and_Order+0x55>
   2fd02:	e8 d9 39 fd ff       	call   36e0 <strchr@plt>
   2fd07:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fd0b:	eb 5f                	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fd0d:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fd11:	89 c6                	mov    esi,eax
   2fd13:	48 8d 3d 49 6b 1b 00 	lea    rdi,[rip+0x1b6b49]        # 1e6863 <Law_and_Order+0x5b>
   2fd1a:	e8 c1 39 fd ff       	call   36e0 <strchr@plt>
   2fd1f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fd23:	eb 47                	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fd25:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fd29:	89 c6                	mov    esi,eax
   2fd2b:	48 8d 3d 37 6b 1b 00 	lea    rdi,[rip+0x1b6b37]        # 1e6869 <Law_and_Order+0x61>
   2fd32:	e8 a9 39 fd ff       	call   36e0 <strchr@plt>
   2fd37:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fd3b:	eb 2f                	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fd3d:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fd41:	89 c6                	mov    esi,eax
   2fd43:	48 8d 3d 25 6b 1b 00 	lea    rdi,[rip+0x1b6b25]        # 1e686f <Law_and_Order+0x67>
   2fd4a:	e8 91 39 fd ff       	call   36e0 <strchr@plt>
   2fd4f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fd53:	eb 17                	jmp    2fd6c <vrna_nucleotide_IUPAC_identity+0x225>
   2fd55:	0f be 45 f7          	movsx  eax,BYTE PTR [rbp-0x9]
   2fd59:	89 c6                	mov    esi,eax
   2fd5b:	48 8d 3d 12 6b 1b 00 	lea    rdi,[rip+0x1b6b12]        # 1e6874 <Law_and_Order+0x6c>
   2fd62:	e8 79 39 fd ff       	call   36e0 <strchr@plt>
   2fd67:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2fd6b:	90                   	nop
   2fd6c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2fd71:	0f 95 c0             	setne  al
   2fd74:	0f b6 c0             	movzx  eax,al
   2fd77:	c9                   	leave  
   2fd78:	c3                   	ret    

000000000002fd79 <vrna_ptypes_prepare>:
   2fd79:	f3 0f 1e fa          	endbr64 
   2fd7d:	55                   	push   rbp
   2fd7e:	48 89 e5             	mov    rbp,rsp
   2fd81:	48 83 ec 10          	sub    rsp,0x10
   2fd85:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2fd89:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   2fd8c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2fd91:	0f 84 99 01 00 00    	je     2ff30 <vrna_ptypes_prepare+0x1b7>
   2fd97:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2fd9a:	83 e0 01             	and    eax,0x1
   2fd9d:	85 c0                	test   eax,eax
   2fd9f:	0f 84 97 00 00 00    	je     2fe3c <vrna_ptypes_prepare+0xc3>
   2fda5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fda9:	8b 00                	mov    eax,DWORD PTR [rax]
   2fdab:	85 c0                	test   eax,eax
   2fdad:	74 0e                	je     2fdbd <vrna_ptypes_prepare+0x44>
   2fdaf:	83 f8 01             	cmp    eax,0x1
   2fdb2:	0f 84 87 00 00 00    	je     2fe3f <vrna_ptypes_prepare+0xc6>
   2fdb8:	e9 86 00 00 00       	jmp    2fe43 <vrna_ptypes_prepare+0xca>
   2fdbd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2fdc0:	83 e0 10             	and    eax,0x10
   2fdc3:	85 c0                	test   eax,eax
   2fdc5:	74 33                	je     2fdfa <vrna_ptypes_prepare+0x81>
   2fdc7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fdcb:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   2fdce:	83 c0 01             	add    eax,0x1
   2fdd1:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   2fdd8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fddc:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   2fde3:	89 d6                	mov    esi,edx
   2fde5:	48 89 c7             	mov    rdi,rax
   2fde8:	e8 ac ef ff ff       	call   2ed99 <vrna_realloc>
   2fded:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2fdf1:	48 89 82 68 01 00 00 	mov    QWORD PTR [rdx+0x168],rax
   2fdf8:	eb 48                	jmp    2fe42 <vrna_ptypes_prepare+0xc9>
   2fdfa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fdfe:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   2fe05:	48 85 c0             	test   rax,rax
   2fe08:	75 38                	jne    2fe42 <vrna_ptypes_prepare+0xc9>
   2fe0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fe0e:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
   2fe12:	48 8d 90 98 35 03 00 	lea    rdx,[rax+0x33598]
   2fe19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fe1d:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
   2fe24:	48 89 d6             	mov    rsi,rdx
   2fe27:	48 89 c7             	mov    rdi,rax
   2fe2a:	e8 0a 01 00 00       	call   2ff39 <vrna_ptypes>
   2fe2f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2fe33:	48 89 82 c8 00 00 00 	mov    QWORD PTR [rdx+0xc8],rax
   2fe3a:	eb 06                	jmp    2fe42 <vrna_ptypes_prepare+0xc9>
   2fe3c:	90                   	nop
   2fe3d:	eb 04                	jmp    2fe43 <vrna_ptypes_prepare+0xca>
   2fe3f:	90                   	nop
   2fe40:	eb 01                	jmp    2fe43 <vrna_ptypes_prepare+0xca>
   2fe42:	90                   	nop
   2fe43:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2fe46:	83 e0 02             	and    eax,0x2
   2fe49:	85 c0                	test   eax,eax
   2fe4b:	0f 84 e6 00 00 00    	je     2ff37 <vrna_ptypes_prepare+0x1be>
   2fe51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fe55:	8b 00                	mov    eax,DWORD PTR [rax]
   2fe57:	85 c0                	test   eax,eax
   2fe59:	74 0e                	je     2fe69 <vrna_ptypes_prepare+0xf0>
   2fe5b:	83 f8 01             	cmp    eax,0x1
   2fe5e:	0f 84 cf 00 00 00    	je     2ff33 <vrna_ptypes_prepare+0x1ba>
   2fe64:	e9 ce 00 00 00       	jmp    2ff37 <vrna_ptypes_prepare+0x1be>
   2fe69:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2fe6c:	83 e0 10             	and    eax,0x10
   2fe6f:	85 c0                	test   eax,eax
   2fe71:	74 36                	je     2fea9 <vrna_ptypes_prepare+0x130>
   2fe73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fe77:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   2fe7a:	83 c0 01             	add    eax,0x1
   2fe7d:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   2fe84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fe88:	48 8b 80 68 01 00 00 	mov    rax,QWORD PTR [rax+0x168]
   2fe8f:	89 d6                	mov    esi,edx
   2fe91:	48 89 c7             	mov    rdi,rax
   2fe94:	e8 00 ef ff ff       	call   2ed99 <vrna_realloc>
   2fe99:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2fe9d:	48 89 82 68 01 00 00 	mov    QWORD PTR [rdx+0x168],rax
   2fea4:	e9 8d 00 00 00       	jmp    2ff36 <vrna_ptypes_prepare+0x1bd>
   2fea9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fead:	48 8b 80 c8 00 00 00 	mov    rax,QWORD PTR [rax+0xc8]
   2feb4:	48 85 c0             	test   rax,rax
   2feb7:	75 30                	jne    2fee9 <vrna_ptypes_prepare+0x170>
   2feb9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2febd:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   2fec1:	48 8d 90 78 5e 06 00 	lea    rdx,[rax+0x65e78]
   2fec8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fecc:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
   2fed3:	48 89 d6             	mov    rsi,rdx
   2fed6:	48 89 c7             	mov    rdi,rax
   2fed9:	e8 5b 00 00 00       	call   2ff39 <vrna_ptypes>
   2fede:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2fee2:	48 89 82 c8 00 00 00 	mov    QWORD PTR [rdx+0xc8],rax
   2fee9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2feed:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
   2fef4:	48 85 c0             	test   rax,rax
   2fef7:	75 3d                	jne    2ff36 <vrna_ptypes_prepare+0x1bd>
   2fef9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2fefd:	48 8b 40 68          	mov    rax,QWORD PTR [rax+0x68]
   2ff01:	48 8d 88 78 5e 06 00 	lea    rcx,[rax+0x65e78]
   2ff08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ff0c:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
   2ff13:	ba 01 00 00 00       	mov    edx,0x1
   2ff18:	48 89 ce             	mov    rsi,rcx
   2ff1b:	48 89 c7             	mov    rdi,rax
   2ff1e:	e8 f5 0c 00 00       	call   30c18 <get_ptypes>
   2ff23:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2ff27:	48 89 82 d0 00 00 00 	mov    QWORD PTR [rdx+0xd0],rax
   2ff2e:	eb 06                	jmp    2ff36 <vrna_ptypes_prepare+0x1bd>
   2ff30:	90                   	nop
   2ff31:	eb 04                	jmp    2ff37 <vrna_ptypes_prepare+0x1be>
   2ff33:	90                   	nop
   2ff34:	eb 01                	jmp    2ff37 <vrna_ptypes_prepare+0x1be>
   2ff36:	90                   	nop
   2ff37:	c9                   	leave  
   2ff38:	c3                   	ret    

000000000002ff39 <vrna_ptypes>:
   2ff39:	f3 0f 1e fa          	endbr64 
   2ff3d:	55                   	push   rbp
   2ff3e:	48 89 e5             	mov    rbp,rsp
   2ff41:	48 83 ec 50          	sub    rsp,0x50
   2ff45:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   2ff49:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   2ff4d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2ff51:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   2ff57:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   2ff5a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2ff5e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   2ff61:	98                   	cwde   
   2ff62:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2ff65:	bf 00 00 00 00       	mov    edi,0x0
   2ff6a:	e8 b5 fb ff ff       	call   2fb24 <vrna_sequence_length_max>
   2ff6f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   2ff72:	39 d0                	cmp    eax,edx
   2ff74:	73 20                	jae    2ff96 <vrna_ptypes+0x5d>
   2ff76:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ff79:	89 c6                	mov    esi,eax
   2ff7b:	48 8d 3d 5e 69 1b 00 	lea    rdi,[rip+0x1b695e]        # 1e68e0 <Law_and_Order+0xd8>
   2ff82:	b8 00 00 00 00       	mov    eax,0x0
   2ff87:	e8 5f f0 ff ff       	call   2efeb <vrna_message_warning>
   2ff8c:	b8 00 00 00 00       	mov    eax,0x0
   2ff91:	e9 db 01 00 00       	jmp    30171 <vrna_ptypes+0x238>
   2ff96:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ff99:	83 c0 01             	add    eax,0x1
   2ff9c:	0f af 45 ec          	imul   eax,DWORD PTR [rbp-0x14]
   2ffa0:	89 c2                	mov    edx,eax
   2ffa2:	c1 ea 1f             	shr    edx,0x1f
   2ffa5:	01 d0                	add    eax,edx
   2ffa7:	d1 f8                	sar    eax,1
   2ffa9:	83 c0 02             	add    eax,0x2
   2ffac:	89 c7                	mov    edi,eax
   2ffae:	e8 5e ed ff ff       	call   2ed11 <vrna_alloc>
   2ffb3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ffb7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2ffba:	89 c7                	mov    edi,eax
   2ffbc:	e8 a9 f8 ff ff       	call   2f86a <vrna_idx_col_wise>
   2ffc1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ffc5:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   2ffcc:	e9 81 01 00 00       	jmp    30152 <vrna_ptypes+0x219>
   2ffd1:	c7 45 d8 01 00 00 00 	mov    DWORD PTR [rbp-0x28],0x1
   2ffd8:	e9 67 01 00 00       	jmp    30144 <vrna_ptypes+0x20b>
   2ffdd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   2ffe4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   2ffeb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   2ffee:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   2fff1:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   2fff4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2fff7:	01 c2                	add    edx,eax
   2fff9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   2fffc:	01 d0                	add    eax,edx
   2fffe:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   30001:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   30004:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   30007:	0f 8f 32 01 00 00    	jg     3013f <vrna_ptypes+0x206>
   3000d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   30010:	48 98                	cdqe   
   30012:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   30016:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   3001a:	48 01 d0             	add    rax,rdx
   3001d:	0f b7 00             	movzx  eax,WORD PTR [rax]
   30020:	98                   	cwde   
   30021:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   30024:	48 63 d2             	movsxd rdx,edx
   30027:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   3002b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   3002f:	48 01 ca             	add    rdx,rcx
   30032:	0f b7 12             	movzx  edx,WORD PTR [rdx]
   30035:	0f bf d2             	movsx  edx,dx
   30038:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   3003c:	48 63 f2             	movsxd rsi,edx
   3003f:	48 63 d0             	movsxd rdx,eax
   30042:	48 89 d0             	mov    rax,rdx
   30045:	48 c1 e0 02          	shl    rax,0x2
   30049:	48 01 d0             	add    rax,rdx
   3004c:	48 c1 e0 02          	shl    rax,0x2
   30050:	48 01 d0             	add    rax,rdx
   30053:	48 01 f0             	add    rax,rsi
   30056:	48 83 c0 40          	add    rax,0x40
   3005a:	8b 44 81 04          	mov    eax,DWORD PTR [rcx+rax*4+0x4]
   3005e:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   30061:	e9 c5 00 00 00       	jmp    3012b <vrna_ptypes+0x1f2>
   30066:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
   3006a:	7e 63                	jle    300cf <vrna_ptypes+0x196>
   3006c:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   3006f:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   30072:	7d 5b                	jge    300cf <vrna_ptypes+0x196>
   30074:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   30077:	48 98                	cdqe   
   30079:	48 01 c0             	add    rax,rax
   3007c:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   30080:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   30084:	48 01 d0             	add    rax,rdx
   30087:	0f b7 00             	movzx  eax,WORD PTR [rax]
   3008a:	98                   	cwde   
   3008b:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   3008e:	48 63 d2             	movsxd rdx,edx
   30091:	48 83 c2 01          	add    rdx,0x1
   30095:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   30099:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   3009d:	48 01 ca             	add    rdx,rcx
   300a0:	0f b7 12             	movzx  edx,WORD PTR [rdx]
   300a3:	0f bf d2             	movsx  edx,dx
   300a6:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   300aa:	48 63 f2             	movsxd rsi,edx
   300ad:	48 63 d0             	movsxd rdx,eax
   300b0:	48 89 d0             	mov    rax,rdx
   300b3:	48 c1 e0 02          	shl    rax,0x2
   300b7:	48 01 d0             	add    rax,rdx
   300ba:	48 c1 e0 02          	shl    rax,0x2
   300be:	48 01 d0             	add    rax,rdx
   300c1:	48 01 f0             	add    rax,rsi
   300c4:	48 83 c0 40          	add    rax,0x40
   300c8:	8b 44 81 04          	mov    eax,DWORD PTR [rcx+rax*4+0x4]
   300cc:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   300cf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   300d3:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   300d6:	85 c0                	test   eax,eax
   300d8:	74 13                	je     300ed <vrna_ptypes+0x1b4>
   300da:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   300de:	75 0d                	jne    300ed <vrna_ptypes+0x1b4>
   300e0:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   300e4:	75 07                	jne    300ed <vrna_ptypes+0x1b4>
   300e6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   300ed:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   300f0:	48 98                	cdqe   
   300f2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   300fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   300fe:	48 01 d0             	add    rax,rdx
   30101:	8b 10                	mov    edx,DWORD PTR [rax]
   30103:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   30106:	01 d0                	add    eax,edx
   30108:	48 63 d0             	movsxd rdx,eax
   3010b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3010f:	48 01 d0             	add    rax,rdx
   30112:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
   30115:	88 10                	mov    BYTE PTR [rax],dl
   30117:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   3011a:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   3011d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   30120:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   30123:	83 6d cc 01          	sub    DWORD PTR [rbp-0x34],0x1
   30127:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   3012b:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   3012f:	7e 0f                	jle    30140 <vrna_ptypes+0x207>
   30131:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   30134:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   30137:	0f 8e 29 ff ff ff    	jle    30066 <vrna_ptypes+0x12d>
   3013d:	eb 01                	jmp    30140 <vrna_ptypes+0x207>
   3013f:	90                   	nop
   30140:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   30144:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
   30148:	0f 8e 8f fe ff ff    	jle    2ffdd <vrna_ptypes+0xa4>
   3014e:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   30152:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   30155:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
   30158:	39 45 d4             	cmp    DWORD PTR [rbp-0x2c],eax
   3015b:	0f 8c 70 fe ff ff    	jl     2ffd1 <vrna_ptypes+0x98>
   30161:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30165:	48 89 c7             	mov    rdi,rax
   30168:	e8 d3 37 fd ff       	call   3940 <free@plt>
   3016d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   30171:	c9                   	leave  
   30172:	c3                   	ret    

0000000000030173 <vrna_seq_encode>:
   30173:	f3 0f 1e fa          	endbr64 
   30177:	55                   	push   rbp
   30178:	48 89 e5             	mov    rbp,rsp
   3017b:	48 83 ec 20          	sub    rsp,0x20
   3017f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   30183:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   30187:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   3018f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   30194:	0f 84 b1 00 00 00    	je     3024b <vrna_seq_encode+0xd8>
   3019a:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   3019f:	0f 84 a6 00 00 00    	je     3024b <vrna_seq_encode+0xd8>
   301a5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   301a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   301ad:	48 89 d6             	mov    rsi,rdx
   301b0:	48 89 c7             	mov    rdi,rax
   301b3:	e8 99 00 00 00       	call   30251 <vrna_seq_encode_simple>
   301b8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   301bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   301c0:	48 89 c7             	mov    rdi,rax
   301c3:	e8 58 35 fd ff       	call   3720 <strlen@plt>
   301c8:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   301cb:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [rbp-0x10],0x1
   301d2:	eb 39                	jmp    3020d <vrna_seq_encode+0x9a>
   301d4:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   301d7:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   301db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   301df:	48 01 d0             	add    rax,rdx
   301e2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   301e5:	0f bf c8             	movsx  ecx,ax
   301e8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   301eb:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   301ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   301f3:	48 01 c2             	add    rdx,rax
   301f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   301fa:	48 63 c9             	movsxd rcx,ecx
   301fd:	48 83 c1 68          	add    rcx,0x68
   30201:	0f b7 44 48 08       	movzx  eax,WORD PTR [rax+rcx*2+0x8]
   30206:	66 89 02             	mov    WORD PTR [rdx],ax
   30209:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   3020d:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   30210:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
   30213:	76 bf                	jbe    301d4 <vrna_seq_encode+0x61>
   30215:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30218:	83 c0 01             	add    eax,0x1
   3021b:	89 c0                	mov    eax,eax
   3021d:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   30221:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30225:	48 01 c2             	add    rdx,rax
   30228:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3022c:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
   30230:	66 89 02             	mov    WORD PTR [rdx],ax
   30233:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30236:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   3023a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3023e:	48 01 d0             	add    rax,rdx
   30241:	0f b7 10             	movzx  edx,WORD PTR [rax]
   30244:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30248:	66 89 10             	mov    WORD PTR [rax],dx
   3024b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3024f:	c9                   	leave  
   30250:	c3                   	ret    

0000000000030251 <vrna_seq_encode_simple>:
   30251:	f3 0f 1e fa          	endbr64 
   30255:	55                   	push   rbp
   30256:	48 89 e5             	mov    rbp,rsp
   30259:	48 83 ec 20          	sub    rsp,0x20
   3025d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   30261:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   30265:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   3026d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   30272:	0f 84 a0 00 00 00    	je     30318 <vrna_seq_encode_simple+0xc7>
   30278:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   3027d:	0f 84 95 00 00 00    	je     30318 <vrna_seq_encode_simple+0xc7>
   30283:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30287:	48 89 c7             	mov    rdi,rax
   3028a:	e8 91 34 fd ff       	call   3720 <strlen@plt>
   3028f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   30292:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30295:	83 c0 02             	add    eax,0x2
   30298:	01 c0                	add    eax,eax
   3029a:	89 c7                	mov    edi,eax
   3029c:	e8 70 ea ff ff       	call   2ed11 <vrna_alloc>
   302a1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   302a5:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [rbp-0x10],0x1
   302ac:	eb 38                	jmp    302e6 <vrna_seq_encode_simple+0x95>
   302ae:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   302b1:	83 e8 01             	sub    eax,0x1
   302b4:	89 c2                	mov    edx,eax
   302b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   302ba:	48 01 d0             	add    rax,rdx
   302bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   302c0:	0f be c0             	movsx  eax,al
   302c3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   302c7:	48 89 d6             	mov    rsi,rdx
   302ca:	89 c7                	mov    edi,eax
   302cc:	e8 4d 00 00 00       	call   3031e <vrna_nucleotide_encode>
   302d1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   302d4:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   302d8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   302dc:	48 01 ca             	add    rdx,rcx
   302df:	66 89 02             	mov    WORD PTR [rdx],ax
   302e2:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   302e6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   302e9:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
   302ec:	76 c0                	jbe    302ae <vrna_seq_encode_simple+0x5d>
   302ee:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   302f1:	83 c0 01             	add    eax,0x1
   302f4:	89 c0                	mov    eax,eax
   302f6:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   302fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   302fe:	48 01 c2             	add    rdx,rax
   30301:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30305:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
   30309:	66 89 02             	mov    WORD PTR [rdx],ax
   3030c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   3030f:	89 c2                	mov    edx,eax
   30311:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30315:	66 89 10             	mov    WORD PTR [rax],dx
   30318:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3031c:	c9                   	leave  
   3031d:	c3                   	ret    

000000000003031e <vrna_nucleotide_encode>:
   3031e:	f3 0f 1e fa          	endbr64 
   30322:	55                   	push   rbp
   30323:	48 89 e5             	mov    rbp,rsp
   30326:	48 83 ec 20          	sub    rsp,0x20
   3032a:	89 f8                	mov    eax,edi
   3032c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   30330:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
   30333:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [rbp-0xc],0xffffffff
   3033a:	0f be 45 ec          	movsx  eax,BYTE PTR [rbp-0x14]
   3033e:	89 c7                	mov    edi,eax
   30340:	e8 1b 38 fd ff       	call   3b60 <toupper@plt>
   30345:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
   30348:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   3034d:	74 65                	je     303b4 <vrna_nucleotide_encode+0x96>
   3034f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30353:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   30356:	85 c0                	test   eax,eax
   30358:	7e 0c                	jle    30366 <vrna_nucleotide_encode+0x48>
   3035a:	0f be 45 ec          	movsx  eax,BYTE PTR [rbp-0x14]
   3035e:	83 e8 40             	sub    eax,0x40
   30361:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   30364:	eb 4e                	jmp    303b4 <vrna_nucleotide_encode+0x96>
   30366:	0f be 45 ec          	movsx  eax,BYTE PTR [rbp-0x14]
   3036a:	89 c6                	mov    esi,eax
   3036c:	48 8d 3d 95 64 1b 00 	lea    rdi,[rip+0x1b6495]        # 1e6808 <Law_and_Order>
   30373:	e8 68 33 fd ff       	call   36e0 <strchr@plt>
   30378:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3037c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   30381:	75 09                	jne    3038c <vrna_nucleotide_encode+0x6e>
   30383:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   3038a:	eb 11                	jmp    3039d <vrna_nucleotide_encode+0x7f>
   3038c:	48 8d 15 75 64 1b 00 	lea    rdx,[rip+0x1b6475]        # 1e6808 <Law_and_Order>
   30393:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30397:	48 29 d0             	sub    rax,rdx
   3039a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   3039d:	83 7d f4 05          	cmp    DWORD PTR [rbp-0xc],0x5
   303a1:	7e 07                	jle    303aa <vrna_nucleotide_encode+0x8c>
   303a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   303aa:	83 7d f4 04          	cmp    DWORD PTR [rbp-0xc],0x4
   303ae:	7e 04                	jle    303b4 <vrna_nucleotide_encode+0x96>
   303b0:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1
   303b4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   303b7:	c9                   	leave  
   303b8:	c3                   	ret    

00000000000303b9 <vrna_nucleotide_decode>:
   303b9:	f3 0f 1e fa          	endbr64 
   303bd:	55                   	push   rbp
   303be:	48 89 e5             	mov    rbp,rsp
   303c1:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   303c4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   303c8:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   303cd:	74 25                	je     303f4 <vrna_nucleotide_decode+0x3b>
   303cf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   303d3:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   303d6:	85 c0                	test   eax,eax
   303d8:	7e 08                	jle    303e2 <vrna_nucleotide_decode+0x29>
   303da:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   303dd:	83 c0 40             	add    eax,0x40
   303e0:	eb 17                	jmp    303f9 <vrna_nucleotide_decode+0x40>
   303e2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   303e5:	48 98                	cdqe   
   303e7:	48 8d 15 1a 64 1b 00 	lea    rdx,[rip+0x1b641a]        # 1e6808 <Law_and_Order>
   303ee:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   303f2:	eb 05                	jmp    303f9 <vrna_nucleotide_decode+0x40>
   303f4:	b8 00 00 00 00       	mov    eax,0x0
   303f9:	5d                   	pop    rbp
   303fa:	c3                   	ret    

00000000000303fb <vrna_aln_encode>:
   303fb:	f3 0f 1e fa          	endbr64 
   303ff:	55                   	push   rbp
   30400:	48 89 e5             	mov    rbp,rsp
   30403:	48 83 ec 40          	sub    rsp,0x40
   30407:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3040b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3040f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   30413:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   30417:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
   3041b:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   3041f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30423:	48 89 c7             	mov    rdi,rax
   30426:	e8 f5 32 fd ff       	call   3720 <strlen@plt>
   3042b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   3042e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30431:	83 c0 02             	add    eax,0x2
   30434:	01 c0                	add    eax,eax
   30436:	89 c7                	mov    edi,eax
   30438:	e8 d4 e8 ff ff       	call   2ed11 <vrna_alloc>
   3043d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   30441:	48 89 02             	mov    QWORD PTR [rdx],rax
   30444:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30447:	83 c0 02             	add    eax,0x2
   3044a:	01 c0                	add    eax,eax
   3044c:	89 c7                	mov    edi,eax
   3044e:	e8 be e8 ff ff       	call   2ed11 <vrna_alloc>
   30453:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   30457:	48 89 02             	mov    QWORD PTR [rdx],rax
   3045a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   3045d:	83 c0 02             	add    eax,0x2
   30460:	c1 e0 02             	shl    eax,0x2
   30463:	89 c7                	mov    edi,eax
   30465:	e8 a7 e8 ff ff       	call   2ed11 <vrna_alloc>
   3046a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   3046e:	48 89 02             	mov    QWORD PTR [rdx],rax
   30471:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30474:	83 c0 02             	add    eax,0x2
   30477:	89 c7                	mov    edi,eax
   30479:	e8 93 e8 ff ff       	call   2ed11 <vrna_alloc>
   3047e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   30482:	48 89 02             	mov    QWORD PTR [rdx],rax
   30485:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30489:	48 8b 75 10          	mov    rsi,QWORD PTR [rbp+0x10]
   3048d:	48 89 c7             	mov    rdi,rax
   30490:	e8 bc fd ff ff       	call   30251 <vrna_seq_encode_simple>
   30495:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   30499:	48 89 02             	mov    QWORD PTR [rdx],rax
   3049c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   304a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   304a3:	48 83 c0 02          	add    rax,0x2
   304a7:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
   304ac:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   304b0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   304b3:	0f b7 00             	movzx  eax,WORD PTR [rax]
   304b6:	66 89 02             	mov    WORD PTR [rdx],ax
   304b9:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   304bd:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [rax+0x94]
   304c3:	85 c0                	test   eax,eax
   304c5:	0f 84 d6 01 00 00    	je     306a1 <vrna_aln_encode+0x2a6>
   304cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   304cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   304d2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   304d6:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   304d9:	88 10                	mov    BYTE PTR [rax],dl
   304db:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   304e2:	e9 8f 00 00 00       	jmp    30576 <vrna_aln_encode+0x17b>
   304e7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   304eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   304ee:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   304f1:	83 ea 01             	sub    edx,0x1
   304f4:	89 d2                	mov    edx,edx
   304f6:	48 01 d2             	add    rdx,rdx
   304f9:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   304fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   30501:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30504:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30507:	48 01 d2             	add    rdx,rdx
   3050a:	48 01 c2             	add    rdx,rax
   3050d:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   30510:	66 89 02             	mov    WORD PTR [rdx],ax
   30513:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30517:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3051a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   3051d:	83 c2 01             	add    edx,0x1
   30520:	89 d2                	mov    edx,edx
   30522:	48 01 d2             	add    rdx,rdx
   30525:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   30529:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3052d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30530:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30533:	48 01 d2             	add    rdx,rdx
   30536:	48 01 c2             	add    rdx,rax
   30539:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   3053c:	66 89 02             	mov    WORD PTR [rdx],ax
   3053f:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30542:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30546:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   3054a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3054e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   30551:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30554:	48 01 c2             	add    rdx,rax
   30557:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   3055a:	88 02                	mov    BYTE PTR [rdx],al
   3055c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   30560:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30563:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30566:	48 c1 e2 02          	shl    rdx,0x2
   3056a:	48 01 c2             	add    rdx,rax
   3056d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30570:	89 02                	mov    DWORD PTR [rdx],eax
   30572:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   30576:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30579:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   3057c:	0f 82 65 ff ff ff    	jb     304e7 <vrna_aln_encode+0xec>
   30582:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   30585:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30589:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   3058d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   30591:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   30594:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30597:	48 01 c2             	add    rdx,rax
   3059a:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   3059d:	88 02                	mov    BYTE PTR [rdx],al
   3059f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   305a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   305a6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   305a9:	48 c1 e2 02          	shl    rdx,0x2
   305ad:	48 01 c2             	add    rdx,rax
   305b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   305b3:	89 02                	mov    DWORD PTR [rdx],eax
   305b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   305b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   305bc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   305bf:	83 ea 01             	sub    edx,0x1
   305c2:	89 d2                	mov    edx,edx
   305c4:	48 01 d2             	add    rdx,rdx
   305c7:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   305cb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   305cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
   305d2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   305d5:	48 01 d2             	add    rdx,rdx
   305d8:	48 01 c2             	add    rdx,rax
   305db:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   305de:	66 89 02             	mov    WORD PTR [rdx],ax
   305e1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   305e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   305e8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   305eb:	48 01 d2             	add    rdx,rdx
   305ee:	48 01 d0             	add    rax,rdx
   305f1:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
   305f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   305fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   305fd:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   30601:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   30604:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
   30607:	83 c1 01             	add    ecx,0x1
   3060a:	89 c9                	mov    ecx,ecx
   3060c:	48 01 c9             	add    rcx,rcx
   3060f:	48 01 ca             	add    rdx,rcx
   30612:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
   30616:	66 89 02             	mov    WORD PTR [rdx],ax
   30619:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3061d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30620:	48 83 c0 02          	add    rax,0x2
   30624:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
   30629:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   3062d:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   30630:	85 c0                	test   eax,eax
   30632:	0f 84 fd 02 00 00    	je     30935 <vrna_aln_encode+0x53a>
   30638:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3063c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3063f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   30642:	48 01 d2             	add    rdx,rdx
   30645:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   30649:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3064d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30650:	48 8d 50 02          	lea    rdx,[rax+0x2]
   30654:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   30657:	66 89 02             	mov    WORD PTR [rdx],ax
   3065a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3065e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30661:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   30665:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   30668:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
   3066b:	48 01 c9             	add    rcx,rcx
   3066e:	48 01 ca             	add    rdx,rcx
   30671:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
   30675:	66 89 02             	mov    WORD PTR [rdx],ax
   30678:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3067c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3067f:	48 83 c0 02          	add    rax,0x2
   30683:	0f b7 08             	movzx  ecx,WORD PTR [rax]
   30686:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3068a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3068d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   30690:	83 c2 01             	add    edx,0x1
   30693:	89 d2                	mov    edx,edx
   30695:	48 01 d0             	add    rax,rdx
   30698:	89 ca                	mov    edx,ecx
   3069a:	88 10                	mov    BYTE PTR [rax],dl
   3069c:	e9 94 02 00 00       	jmp    30935 <vrna_aln_encode+0x53a>
   306a1:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   306a5:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   306a8:	85 c0                	test   eax,eax
   306aa:	0f 84 d4 00 00 00    	je     30784 <vrna_aln_encode+0x389>
   306b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   306b3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   306b6:	eb 57                	jmp    3070f <vrna_aln_encode+0x314>
   306b8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   306bb:	83 e8 01             	sub    eax,0x1
   306be:	89 c2                	mov    edx,eax
   306c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   306c4:	48 01 d0             	add    rax,rdx
   306c7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   306ca:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
   306cd:	80 7d f0 2d          	cmp    BYTE PTR [rbp-0x10],0x2d
   306d1:	74 12                	je     306e5 <vrna_aln_encode+0x2ea>
   306d3:	80 7d f0 5f          	cmp    BYTE PTR [rbp-0x10],0x5f
   306d7:	74 0c                	je     306e5 <vrna_aln_encode+0x2ea>
   306d9:	80 7d f0 7e          	cmp    BYTE PTR [rbp-0x10],0x7e
   306dd:	74 06                	je     306e5 <vrna_aln_encode+0x2ea>
   306df:	80 7d f0 2e          	cmp    BYTE PTR [rbp-0x10],0x2e
   306e3:	75 06                	jne    306eb <vrna_aln_encode+0x2f0>
   306e5:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1
   306e9:	eb 24                	jmp    3070f <vrna_aln_encode+0x314>
   306eb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   306ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
   306f2:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   306f5:	48 01 d2             	add    rdx,rdx
   306f8:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   306fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   30700:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30703:	48 8d 50 02          	lea    rdx,[rax+0x2]
   30707:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   3070a:	66 89 02             	mov    WORD PTR [rdx],ax
   3070d:	eb 06                	jmp    30715 <vrna_aln_encode+0x31a>
   3070f:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   30713:	75 a3                	jne    306b8 <vrna_aln_encode+0x2bd>
   30715:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   3071c:	eb 5c                	jmp    3077a <vrna_aln_encode+0x37f>
   3071e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30721:	83 e8 01             	sub    eax,0x1
   30724:	89 c2                	mov    edx,eax
   30726:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3072a:	48 01 d0             	add    rax,rdx
   3072d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   30730:	88 45 f1             	mov    BYTE PTR [rbp-0xf],al
   30733:	80 7d f1 2d          	cmp    BYTE PTR [rbp-0xf],0x2d
   30737:	74 12                	je     3074b <vrna_aln_encode+0x350>
   30739:	80 7d f1 5f          	cmp    BYTE PTR [rbp-0xf],0x5f
   3073d:	74 0c                	je     3074b <vrna_aln_encode+0x350>
   3073f:	80 7d f1 7e          	cmp    BYTE PTR [rbp-0xf],0x7e
   30743:	74 06                	je     3074b <vrna_aln_encode+0x350>
   30745:	80 7d f1 2e          	cmp    BYTE PTR [rbp-0xf],0x2e
   30749:	75 06                	jne    30751 <vrna_aln_encode+0x356>
   3074b:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   3074f:	eb 29                	jmp    3077a <vrna_aln_encode+0x37f>
   30751:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30755:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30758:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   3075b:	48 01 d2             	add    rdx,rdx
   3075e:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   30762:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   30766:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30769:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   3076c:	48 01 d2             	add    rdx,rdx
   3076f:	48 01 c2             	add    rdx,rax
   30772:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   30775:	66 89 02             	mov    WORD PTR [rdx],ax
   30778:	eb 30                	jmp    307aa <vrna_aln_encode+0x3af>
   3077a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   3077d:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   30780:	76 9c                	jbe    3071e <vrna_aln_encode+0x323>
   30782:	eb 26                	jmp    307aa <vrna_aln_encode+0x3af>
   30784:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   30788:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3078b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   3078e:	48 01 d2             	add    rdx,rdx
   30791:	48 01 d0             	add    rax,rdx
   30794:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
   30799:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3079d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   307a0:	48 83 c2 02          	add    rdx,0x2
   307a4:	0f b7 00             	movzx  eax,WORD PTR [rax]
   307a7:	66 89 02             	mov    WORD PTR [rdx],ax
   307aa:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   307b1:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   307b8:	e9 cc 00 00 00       	jmp    30889 <vrna_aln_encode+0x48e>
   307bd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   307c0:	83 e8 01             	sub    eax,0x1
   307c3:	89 c2                	mov    edx,eax
   307c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   307c9:	48 01 d0             	add    rax,rdx
   307cc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   307cf:	88 45 f3             	mov    BYTE PTR [rbp-0xd],al
   307d2:	80 7d f3 2d          	cmp    BYTE PTR [rbp-0xd],0x2d
   307d6:	74 12                	je     307ea <vrna_aln_encode+0x3ef>
   307d8:	80 7d f3 5f          	cmp    BYTE PTR [rbp-0xd],0x5f
   307dc:	74 0c                	je     307ea <vrna_aln_encode+0x3ef>
   307de:	80 7d f3 7e          	cmp    BYTE PTR [rbp-0xd],0x7e
   307e2:	74 06                	je     307ea <vrna_aln_encode+0x3ef>
   307e4:	80 7d f3 2e          	cmp    BYTE PTR [rbp-0xd],0x2e
   307e8:	75 2e                	jne    30818 <vrna_aln_encode+0x41d>
   307ea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   307ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
   307f1:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   307f4:	48 01 d2             	add    rdx,rdx
   307f7:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   307fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   307ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30802:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30805:	83 c2 01             	add    edx,0x1
   30808:	89 d2                	mov    edx,edx
   3080a:	48 01 d2             	add    rdx,rdx
   3080d:	48 01 c2             	add    rdx,rax
   30810:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   30813:	66 89 02             	mov    WORD PTR [rdx],ax
   30816:	eb 57                	jmp    3086f <vrna_aln_encode+0x474>
   30818:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   3081b:	83 e8 01             	sub    eax,0x1
   3081e:	89 c2                	mov    edx,eax
   30820:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30824:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   30828:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3082c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   3082f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   30832:	8d 50 01             	lea    edx,[rax+0x1]
   30835:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   30838:	89 c0                	mov    eax,eax
   3083a:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
   3083e:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   30841:	88 02                	mov    BYTE PTR [rdx],al
   30843:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30847:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3084a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   3084d:	48 01 d2             	add    rdx,rdx
   30850:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   30854:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   30858:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3085b:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   3085e:	83 c2 01             	add    edx,0x1
   30861:	89 d2                	mov    edx,edx
   30863:	48 01 d2             	add    rdx,rdx
   30866:	48 01 c2             	add    rdx,rax
   30869:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   3086c:	66 89 02             	mov    WORD PTR [rdx],ax
   3086f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   30873:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30876:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30879:	48 c1 e2 02          	shl    rdx,0x2
   3087d:	48 01 c2             	add    rdx,rax
   30880:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   30883:	89 02                	mov    DWORD PTR [rdx],eax
   30885:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   30889:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   3088c:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   3088f:	0f 86 28 ff ff ff    	jbe    307bd <vrna_aln_encode+0x3c2>
   30895:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30898:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   3089b:	e9 8b 00 00 00       	jmp    3092b <vrna_aln_encode+0x530>
   308a0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   308a3:	83 e8 01             	sub    eax,0x1
   308a6:	89 c2                	mov    edx,eax
   308a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   308ac:	48 01 d0             	add    rax,rdx
   308af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   308b2:	88 45 f2             	mov    BYTE PTR [rbp-0xe],al
   308b5:	80 7d f2 2d          	cmp    BYTE PTR [rbp-0xe],0x2d
   308b9:	74 12                	je     308cd <vrna_aln_encode+0x4d2>
   308bb:	80 7d f2 5f          	cmp    BYTE PTR [rbp-0xe],0x5f
   308bf:	74 0c                	je     308cd <vrna_aln_encode+0x4d2>
   308c1:	80 7d f2 7e          	cmp    BYTE PTR [rbp-0xe],0x7e
   308c5:	74 06                	je     308cd <vrna_aln_encode+0x4d2>
   308c7:	80 7d f2 2e          	cmp    BYTE PTR [rbp-0xe],0x2e
   308cb:	75 2e                	jne    308fb <vrna_aln_encode+0x500>
   308cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   308d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   308d4:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   308d7:	48 01 d2             	add    rdx,rdx
   308da:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   308de:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   308e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   308e5:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   308e8:	83 ea 01             	sub    edx,0x1
   308eb:	89 d2                	mov    edx,edx
   308ed:	48 01 d2             	add    rdx,rdx
   308f0:	48 01 c2             	add    rdx,rax
   308f3:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   308f6:	66 89 02             	mov    WORD PTR [rdx],ax
   308f9:	eb 2c                	jmp    30927 <vrna_aln_encode+0x52c>
   308fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   308ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30902:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30905:	48 01 d2             	add    rdx,rdx
   30908:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
   3090c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   30910:	48 8b 00             	mov    rax,QWORD PTR [rax]
   30913:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   30916:	83 ea 01             	sub    edx,0x1
   30919:	89 d2                	mov    edx,edx
   3091b:	48 01 d2             	add    rdx,rdx
   3091e:	48 01 c2             	add    rdx,rax
   30921:	0f b7 01             	movzx  eax,WORD PTR [rcx]
   30924:	66 89 02             	mov    WORD PTR [rdx],ax
   30927:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1
   3092b:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   3092f:	0f 85 6b ff ff ff    	jne    308a0 <vrna_aln_encode+0x4a5>
   30935:	90                   	nop
   30936:	c9                   	leave  
   30937:	c3                   	ret    

0000000000030938 <vrna_get_ptype_md>:
   30938:	f3 0f 1e fa          	endbr64 
   3093c:	55                   	push   rbp
   3093d:	48 89 e5             	mov    rbp,rsp
   30940:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   30943:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   30946:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
   3094a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   3094e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   30951:	48 63 f0             	movsxd rsi,eax
   30954:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   30957:	48 63 d0             	movsxd rdx,eax
   3095a:	48 89 d0             	mov    rax,rdx
   3095d:	48 c1 e0 02          	shl    rax,0x2
   30961:	48 01 d0             	add    rax,rdx
   30964:	48 c1 e0 02          	shl    rax,0x2
   30968:	48 01 d0             	add    rax,rdx
   3096b:	48 01 f0             	add    rax,rsi
   3096e:	48 83 c0 40          	add    rax,0x40
   30972:	8b 44 81 04          	mov    eax,DWORD PTR [rcx+rax*4+0x4]
   30976:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   30979:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   3097d:	74 05                	je     30984 <vrna_get_ptype_md+0x4c>
   3097f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30982:	eb 05                	jmp    30989 <vrna_get_ptype_md+0x51>
   30984:	b8 07 00 00 00       	mov    eax,0x7
   30989:	5d                   	pop    rbp
   3098a:	c3                   	ret    

000000000003098b <vrna_get_ptype>:
   3098b:	f3 0f 1e fa          	endbr64 
   3098f:	55                   	push   rbp
   30990:	48 89 e5             	mov    rbp,rsp
   30993:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   30996:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3099a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   3099d:	48 63 d0             	movsxd rdx,eax
   309a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   309a4:	48 01 d0             	add    rax,rdx
   309a7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   309aa:	0f be c0             	movsx  eax,al
   309ad:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   309b0:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   309b4:	74 05                	je     309bb <vrna_get_ptype+0x30>
   309b6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   309b9:	eb 05                	jmp    309c0 <vrna_get_ptype+0x35>
   309bb:	b8 07 00 00 00       	mov    eax,0x7
   309c0:	5d                   	pop    rbp
   309c1:	c3                   	ret    

00000000000309c2 <vrna_get_ptype_window>:
   309c2:	f3 0f 1e fa          	endbr64 
   309c6:	55                   	push   rbp
   309c7:	48 89 e5             	mov    rbp,rsp
   309ca:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   309cd:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   309d0:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
   309d4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   309d7:	48 98                	cdqe   
   309d9:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   309e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   309e5:	48 01 d0             	add    rax,rdx
   309e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   309eb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   309ee:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
   309f1:	48 98                	cdqe   
   309f3:	48 01 d0             	add    rax,rdx
   309f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   309f9:	0f be c0             	movsx  eax,al
   309fc:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   309ff:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   30a03:	74 05                	je     30a0a <vrna_get_ptype_window+0x48>
   30a05:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   30a08:	eb 05                	jmp    30a0f <vrna_get_ptype_window+0x4d>
   30a0a:	b8 07 00 00 00       	mov    eax,0x7
   30a0f:	5d                   	pop    rbp
   30a10:	c3                   	ret    

0000000000030a11 <wrap_get_ptypes>:
   30a11:	f3 0f 1e fa          	endbr64 
   30a15:	55                   	push   rbp
   30a16:	48 89 e5             	mov    rbp,rsp
   30a19:	48 83 ec 50          	sub    rsp,0x50
   30a1d:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   30a21:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   30a25:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   30a29:	0f b7 00             	movzx  eax,WORD PTR [rax]
   30a2c:	98                   	cwde   
   30a2d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   30a30:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   30a33:	83 c0 01             	add    eax,0x1
   30a36:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
   30a3a:	89 c2                	mov    edx,eax
   30a3c:	c1 ea 1f             	shr    edx,0x1f
   30a3f:	01 d0                	add    eax,edx
   30a41:	d1 f8                	sar    eax,1
   30a43:	83 c0 02             	add    eax,0x2
   30a46:	89 c7                	mov    edi,eax
   30a48:	e8 c4 e2 ff ff       	call   2ed11 <vrna_alloc>
   30a4d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   30a51:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   30a54:	89 c7                	mov    edi,eax
   30a56:	e8 95 ed ff ff       	call   2f7f0 <vrna_idx_row_wise>
   30a5b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   30a5f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   30a63:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   30a69:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   30a6c:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   30a73:	e9 7f 01 00 00       	jmp    30bf7 <wrap_get_ptypes+0x1e6>
   30a78:	c7 45 d8 01 00 00 00 	mov    DWORD PTR [rbp-0x28],0x1
   30a7f:	e9 65 01 00 00       	jmp    30be9 <wrap_get_ptypes+0x1d8>
   30a84:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
   30a8b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   30a92:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   30a95:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   30a98:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   30a9b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   30a9e:	01 c2                	add    edx,eax
   30aa0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   30aa3:	01 d0                	add    eax,edx
   30aa5:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   30aa8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   30aab:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
   30aae:	0f 8f 30 01 00 00    	jg     30be4 <wrap_get_ptypes+0x1d3>
   30ab4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   30ab7:	48 98                	cdqe   
   30ab9:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   30abd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   30ac1:	48 01 d0             	add    rax,rdx
   30ac4:	0f b7 00             	movzx  eax,WORD PTR [rax]
   30ac7:	98                   	cwde   
   30ac8:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   30acb:	48 63 d2             	movsxd rdx,edx
   30ace:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   30ad2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   30ad6:	48 01 ca             	add    rdx,rcx
   30ad9:	0f b7 12             	movzx  edx,WORD PTR [rdx]
   30adc:	0f bf d2             	movsx  edx,dx
   30adf:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   30ae3:	48 63 f2             	movsxd rsi,edx
   30ae6:	48 63 d0             	movsxd rdx,eax
   30ae9:	48 89 d0             	mov    rax,rdx
   30aec:	48 c1 e0 02          	shl    rax,0x2
   30af0:	48 01 d0             	add    rax,rdx
   30af3:	48 c1 e0 02          	shl    rax,0x2
   30af7:	48 01 d0             	add    rax,rdx
   30afa:	48 01 f0             	add    rax,rsi
   30afd:	48 83 c0 40          	add    rax,0x40
   30b01:	8b 44 81 04          	mov    eax,DWORD PTR [rcx+rax*4+0x4]
   30b05:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   30b08:	e9 c3 00 00 00       	jmp    30bd0 <wrap_get_ptypes+0x1bf>
   30b0d:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
   30b11:	7e 63                	jle    30b76 <wrap_get_ptypes+0x165>
   30b13:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   30b16:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
   30b19:	7d 5b                	jge    30b76 <wrap_get_ptypes+0x165>
   30b1b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   30b1e:	48 98                	cdqe   
   30b20:	48 01 c0             	add    rax,rax
   30b23:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   30b27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   30b2b:	48 01 d0             	add    rax,rdx
   30b2e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   30b31:	98                   	cwde   
   30b32:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   30b35:	48 63 d2             	movsxd rdx,edx
   30b38:	48 83 c2 01          	add    rdx,0x1
   30b3c:	48 8d 0c 12          	lea    rcx,[rdx+rdx*1]
   30b40:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   30b44:	48 01 ca             	add    rdx,rcx
   30b47:	0f b7 12             	movzx  edx,WORD PTR [rdx]
   30b4a:	0f bf d2             	movsx  edx,dx
   30b4d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   30b51:	48 63 f2             	movsxd rsi,edx
   30b54:	48 63 d0             	movsxd rdx,eax
   30b57:	48 89 d0             	mov    rax,rdx
   30b5a:	48 c1 e0 02          	shl    rax,0x2
   30b5e:	48 01 d0             	add    rax,rdx
   30b61:	48 c1 e0 02          	shl    rax,0x2
   30b65:	48 01 d0             	add    rax,rdx
   30b68:	48 01 f0             	add    rax,rsi
   30b6b:	48 83 c0 40          	add    rax,0x40
   30b6f:	8b 44 81 04          	mov    eax,DWORD PTR [rcx+rax*4+0x4]
   30b73:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   30b76:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   30b7a:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   30b7d:	85 c0                	test   eax,eax
   30b7f:	74 13                	je     30b94 <wrap_get_ptypes+0x183>
   30b81:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   30b85:	75 0d                	jne    30b94 <wrap_get_ptypes+0x183>
   30b87:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   30b8b:	75 07                	jne    30b94 <wrap_get_ptypes+0x183>
   30b8d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   30b94:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   30b97:	48 98                	cdqe   
   30b99:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   30ba1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30ba5:	48 01 d0             	add    rax,rdx
   30ba8:	8b 00                	mov    eax,DWORD PTR [rax]
   30baa:	2b 45 d0             	sub    eax,DWORD PTR [rbp-0x30]
   30bad:	48 63 d0             	movsxd rdx,eax
   30bb0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   30bb4:	48 01 d0             	add    rax,rdx
   30bb7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
   30bba:	88 10                	mov    BYTE PTR [rax],dl
   30bbc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   30bbf:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   30bc2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   30bc5:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   30bc8:	83 6d cc 01          	sub    DWORD PTR [rbp-0x34],0x1
   30bcc:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   30bd0:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   30bd4:	7e 0f                	jle    30be5 <wrap_get_ptypes+0x1d4>
   30bd6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   30bd9:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
   30bdc:	0f 8e 2b ff ff ff    	jle    30b0d <wrap_get_ptypes+0xfc>
   30be2:	eb 01                	jmp    30be5 <wrap_get_ptypes+0x1d4>
   30be4:	90                   	nop
   30be5:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   30be9:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
   30bed:	0f 8e 91 fe ff ff    	jle    30a84 <wrap_get_ptypes+0x73>
   30bf3:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   30bf7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   30bfa:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
   30bfd:	39 45 d4             	cmp    DWORD PTR [rbp-0x2c],eax
   30c00:	0f 8c 72 fe ff ff    	jl     30a78 <wrap_get_ptypes+0x67>
   30c06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30c0a:	48 89 c7             	mov    rdi,rax
   30c0d:	e8 2e 2d fd ff       	call   3940 <free@plt>
   30c12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   30c16:	c9                   	leave  
   30c17:	c3                   	ret    

0000000000030c18 <get_ptypes>:
   30c18:	f3 0f 1e fa          	endbr64 
   30c1c:	55                   	push   rbp
   30c1d:	48 89 e5             	mov    rbp,rsp
   30c20:	53                   	push   rbx
   30c21:	48 83 ec 28          	sub    rsp,0x28
   30c25:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   30c29:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   30c2d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   30c30:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   30c35:	74 6a                	je     30ca1 <get_ptypes+0x89>
   30c37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30c3b:	0f b7 00             	movzx  eax,WORD PTR [rax]
   30c3e:	0f bf d8             	movsx  ebx,ax
   30c41:	bf 00 00 00 00       	mov    edi,0x0
   30c46:	e8 d9 ee ff ff       	call   2fb24 <vrna_sequence_length_max>
   30c4b:	39 c3                	cmp    ebx,eax
   30c4d:	76 22                	jbe    30c71 <get_ptypes+0x59>
   30c4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30c53:	0f b7 00             	movzx  eax,WORD PTR [rax]
   30c56:	98                   	cwde   
   30c57:	89 c6                	mov    esi,eax
   30c59:	48 8d 3d c8 5c 1b 00 	lea    rdi,[rip+0x1b5cc8]        # 1e6928 <Law_and_Order+0x120>
   30c60:	b8 00 00 00 00       	mov    eax,0x0
   30c65:	e8 81 e3 ff ff       	call   2efeb <vrna_message_warning>
   30c6a:	b8 00 00 00 00       	mov    eax,0x0
   30c6f:	eb 35                	jmp    30ca6 <get_ptypes+0x8e>
   30c71:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
   30c75:	74 15                	je     30c8c <get_ptypes+0x74>
   30c77:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   30c7b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30c7f:	48 89 d6             	mov    rsi,rdx
   30c82:	48 89 c7             	mov    rdi,rax
   30c85:	e8 87 fd ff ff       	call   30a11 <wrap_get_ptypes>
   30c8a:	eb 1a                	jmp    30ca6 <get_ptypes+0x8e>
   30c8c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   30c90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30c94:	48 89 d6             	mov    rsi,rdx
   30c97:	48 89 c7             	mov    rdi,rax
   30c9a:	e8 9a f2 ff ff       	call   2ff39 <vrna_ptypes>
   30c9f:	eb 05                	jmp    30ca6 <get_ptypes+0x8e>
   30ca1:	b8 00 00 00 00       	mov    eax,0x0
   30ca6:	48 83 c4 28          	add    rsp,0x28
   30caa:	5b                   	pop    rbx
   30cab:	5d                   	pop    rbp
   30cac:	c3                   	ret    

0000000000030cad <vrna_md_copy>:
   30cad:	f3 0f 1e fa          	endbr64 
   30cb1:	55                   	push   rbp
   30cb2:	48 89 e5             	mov    rbp,rsp
   30cb5:	48 83 ec 20          	sub    rsp,0x20
   30cb9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   30cbd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   30cc1:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   30cc9:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   30cce:	0f 84 2c 01 00 00    	je     30e00 <vrna_md_copy+0x153>
   30cd4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   30cd9:	75 10                	jne    30ceb <vrna_md_copy+0x3e>
   30cdb:	bf e8 07 00 00       	mov    edi,0x7e8
   30ce0:	e8 2c e0 ff ff       	call   2ed11 <vrna_alloc>
   30ce5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   30ce9:	eb 08                	jmp    30cf3 <vrna_md_copy+0x46>
   30ceb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30cef:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   30cf3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30cf7:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
   30cfb:	0f 84 ff 00 00 00    	je     30e00 <vrna_md_copy+0x153>
   30d01:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   30d05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30d09:	ba e8 07 00 00       	mov    edx,0x7e8
   30d0e:	48 89 ce             	mov    rsi,rcx
   30d11:	48 89 c7             	mov    rdi,rax
   30d14:	e8 17 2b fd ff       	call   3830 <memcpy@plt>
   30d19:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30d1d:	48 8d 88 b8 00 00 00 	lea    rcx,[rax+0xb8]
   30d24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30d28:	48 05 b8 00 00 00    	add    rax,0xb8
   30d2e:	ba 20 00 00 00       	mov    edx,0x20
   30d33:	48 89 ce             	mov    rsi,rcx
   30d36:	48 89 c7             	mov    rdi,rax
   30d39:	e8 f2 2a fd ff       	call   3830 <memcpy@plt>
   30d3e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30d42:	48 8d 88 d8 00 00 00 	lea    rcx,[rax+0xd8]
   30d49:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30d4d:	48 05 d8 00 00 00    	add    rax,0xd8
   30d53:	ba 2a 00 00 00       	mov    edx,0x2a
   30d58:	48 89 ce             	mov    rsi,rcx
   30d5b:	48 89 c7             	mov    rdi,rax
   30d5e:	e8 cd 2a fd ff       	call   3830 <memcpy@plt>
   30d63:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30d67:	48 8d 48 48          	lea    rcx,[rax+0x48]
   30d6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30d6f:	48 83 c0 48          	add    rax,0x48
   30d73:	ba 40 00 00 00       	mov    edx,0x40
   30d78:	48 89 ce             	mov    rsi,rcx
   30d7b:	48 89 c7             	mov    rdi,rax
   30d7e:	e8 ad 2a fd ff       	call   3830 <memcpy@plt>
   30d83:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   30d8a:	eb 6e                	jmp    30dfa <vrna_md_copy+0x14d>
   30d8c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30d8f:	48 63 d0             	movsxd rdx,eax
   30d92:	48 89 d0             	mov    rax,rdx
   30d95:	48 c1 e0 02          	shl    rax,0x2
   30d99:	48 01 d0             	add    rax,rdx
   30d9c:	48 c1 e0 02          	shl    rax,0x2
   30da0:	48 01 d0             	add    rax,rdx
   30da3:	48 c1 e0 02          	shl    rax,0x2
   30da7:	48 8d 90 00 01 00 00 	lea    rdx,[rax+0x100]
   30dae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   30db2:	48 01 d0             	add    rax,rdx
   30db5:	48 8d 48 04          	lea    rcx,[rax+0x4]
   30db9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   30dbc:	48 63 d0             	movsxd rdx,eax
   30dbf:	48 89 d0             	mov    rax,rdx
   30dc2:	48 c1 e0 02          	shl    rax,0x2
   30dc6:	48 01 d0             	add    rax,rdx
   30dc9:	48 c1 e0 02          	shl    rax,0x2
   30dcd:	48 01 d0             	add    rax,rdx
   30dd0:	48 c1 e0 02          	shl    rax,0x2
   30dd4:	48 8d 90 00 01 00 00 	lea    rdx,[rax+0x100]
   30ddb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30ddf:	48 01 d0             	add    rax,rdx
   30de2:	48 83 c0 04          	add    rax,0x4
   30de6:	ba 54 00 00 00       	mov    edx,0x54
   30deb:	48 89 ce             	mov    rsi,rcx
   30dee:	48 89 c7             	mov    rdi,rax
   30df1:	e8 3a 2a fd ff       	call   3830 <memcpy@plt>
   30df6:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   30dfa:	83 7d f4 14          	cmp    DWORD PTR [rbp-0xc],0x14
   30dfe:	7e 8c                	jle    30d8c <vrna_md_copy+0xdf>
   30e00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30e04:	c9                   	leave  
   30e05:	c3                   	ret    

0000000000030e06 <vrna_md_set_default>:
   30e06:	f3 0f 1e fa          	endbr64 
   30e0a:	55                   	push   rbp
   30e0b:	48 89 e5             	mov    rbp,rsp
   30e0e:	48 83 ec 10          	sub    rsp,0x10
   30e12:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   30e16:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   30e1b:	74 13                	je     30e30 <vrna_md_set_default+0x2a>
   30e1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   30e21:	48 8d 35 98 09 22 00 	lea    rsi,[rip+0x220998]        # 2517c0 <defaults>
   30e28:	48 89 c7             	mov    rdi,rax
   30e2b:	e8 7d fe ff ff       	call   30cad <vrna_md_copy>
   30e30:	90                   	nop
   30e31:	c9                   	leave  
   30e32:	c3                   	ret    

0000000000030e33 <vrna_md_option_string>:
   30e33:	f3 0f 1e fa          	endbr64 
   30e37:	55                   	push   rbp
   30e38:	48 89 e5             	mov    rbp,rsp
   30e3b:	53                   	push   rbx
   30e3c:	48 83 ec 18          	sub    rsp,0x18
   30e40:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   30e44:	c6 05 35 c2 2b 00 00 	mov    BYTE PTR [rip+0x2bc235],0x0        # 2ed080 <options.5701>
   30e4b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   30e50:	0f 84 b7 01 00 00    	je     3100d <vrna_md_option_string+0x1da>
   30e56:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30e5a:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   30e5d:	83 f8 02             	cmp    eax,0x2
   30e60:	74 33                	je     30e95 <vrna_md_option_string+0x62>
   30e62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30e66:	8b 58 14             	mov    ebx,DWORD PTR [rax+0x14]
   30e69:	48 8d 3d 10 c2 2b 00 	lea    rdi,[rip+0x2bc210]        # 2ed080 <options.5701>
   30e70:	e8 ab 28 fd ff       	call   3720 <strlen@plt>
   30e75:	48 8d 15 04 c2 2b 00 	lea    rdx,[rip+0x2bc204]        # 2ed080 <options.5701>
   30e7c:	48 01 d0             	add    rax,rdx
   30e7f:	89 da                	mov    edx,ebx
   30e81:	48 8d 35 e8 5a 1b 00 	lea    rsi,[rip+0x1b5ae8]        # 1e6970 <Law_and_Order+0x168>
   30e88:	48 89 c7             	mov    rdi,rax
   30e8b:	b8 00 00 00 00       	mov    eax,0x0
   30e90:	e8 9b 27 fd ff       	call   3630 <sprintf@plt>
   30e95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30e99:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   30e9c:	85 c0                	test   eax,eax
   30e9e:	75 35                	jne    30ed5 <vrna_md_option_string+0xa2>
   30ea0:	48 8d 05 d9 c1 2b 00 	lea    rax,[rip+0x2bc1d9]        # 2ed080 <options.5701>
   30ea7:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   30eae:	48 89 c2             	mov    rdx,rax
   30eb1:	b8 00 00 00 00       	mov    eax,0x0
   30eb6:	48 89 d7             	mov    rdi,rdx
   30eb9:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   30ebb:	48 89 c8             	mov    rax,rcx
   30ebe:	48 f7 d0             	not    rax
   30ec1:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   30ec5:	48 8d 05 b4 c1 2b 00 	lea    rax,[rip+0x2bc1b4]        # 2ed080 <options.5701>
   30ecc:	48 01 d0             	add    rax,rdx
   30ecf:	c7 00 2d 34 20 00    	mov    DWORD PTR [rax],0x20342d
   30ed5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30ed9:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   30edc:	85 c0                	test   eax,eax
   30ede:	74 3c                	je     30f1c <vrna_md_option_string+0xe9>
   30ee0:	48 8d 05 99 c1 2b 00 	lea    rax,[rip+0x2bc199]        # 2ed080 <options.5701>
   30ee7:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   30eee:	48 89 c2             	mov    rdx,rax
   30ef1:	b8 00 00 00 00       	mov    eax,0x0
   30ef6:	48 89 d7             	mov    rdi,rdx
   30ef9:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   30efb:	48 89 c8             	mov    rax,rcx
   30efe:	48 f7 d0             	not    rax
   30f01:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   30f05:	48 8d 05 74 c1 2b 00 	lea    rax,[rip+0x2bc174]        # 2ed080 <options.5701>
   30f0c:	48 01 d0             	add    rax,rdx
   30f0f:	48 be 2d 2d 6e 6f 4c 50 20 00 	movabs rsi,0x20504c6f6e2d2d
   30f19:	48 89 30             	mov    QWORD PTR [rax],rsi
   30f1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30f20:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   30f23:	85 c0                	test   eax,eax
   30f25:	74 3c                	je     30f63 <vrna_md_option_string+0x130>
   30f27:	48 8d 05 52 c1 2b 00 	lea    rax,[rip+0x2bc152]        # 2ed080 <options.5701>
   30f2e:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   30f35:	48 89 c2             	mov    rdx,rax
   30f38:	b8 00 00 00 00       	mov    eax,0x0
   30f3d:	48 89 d7             	mov    rdi,rdx
   30f40:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   30f42:	48 89 c8             	mov    rax,rcx
   30f45:	48 f7 d0             	not    rax
   30f48:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   30f4c:	48 8d 05 2d c1 2b 00 	lea    rax,[rip+0x2bc12d]        # 2ed080 <options.5701>
   30f53:	48 01 d0             	add    rax,rdx
   30f56:	48 be 2d 2d 6e 6f 47 55 20 00 	movabs rsi,0x2055476f6e2d2d
   30f60:	48 89 30             	mov    QWORD PTR [rax],rsi
   30f63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30f67:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   30f6a:	85 c0                	test   eax,eax
   30f6c:	74 4d                	je     30fbb <vrna_md_option_string+0x188>
   30f6e:	48 8d 05 0b c1 2b 00 	lea    rax,[rip+0x2bc10b]        # 2ed080 <options.5701>
   30f75:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   30f7c:	48 89 c2             	mov    rdx,rax
   30f7f:	b8 00 00 00 00       	mov    eax,0x0
   30f84:	48 89 d7             	mov    rdi,rdx
   30f87:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]
   30f89:	48 89 c8             	mov    rax,rcx
   30f8c:	48 f7 d0             	not    rax
   30f8f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   30f93:	48 8d 05 e6 c0 2b 00 	lea    rax,[rip+0x2bc0e6]        # 2ed080 <options.5701>
   30f9a:	48 01 d0             	add    rax,rdx
   30f9d:	48 bb 2d 2d 6e 6f 43 6c 6f 73 	movabs rbx,0x736f6c436f6e2d2d
   30fa7:	48 89 18             	mov    QWORD PTR [rax],rbx
   30faa:	c7 40 08 69 6e 67 47 	mov    DWORD PTR [rax+0x8],0x47676e69
   30fb1:	66 c7 40 0c 55 20    	mov    WORD PTR [rax+0xc],0x2055
   30fb7:	c6 40 0e 00          	mov    BYTE PTR [rax+0xe],0x0
   30fbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30fbf:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
   30fc3:	66 0f 2e 05 f5 5b 1b 00 	ucomisd xmm0,QWORD PTR [rip+0x1b5bf5]        # 1e6bc0 <Law_and_Order+0x3b8>
   30fcb:	7a 0a                	jp     30fd7 <vrna_md_option_string+0x1a4>
   30fcd:	66 0f 2e 05 eb 5b 1b 00 	ucomisd xmm0,QWORD PTR [rip+0x1b5beb]        # 1e6bc0 <Law_and_Order+0x3b8>
   30fd5:	74 36                	je     3100d <vrna_md_option_string+0x1da>
   30fd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   30fdb:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   30fde:	48 8d 3d 9b c0 2b 00 	lea    rdi,[rip+0x2bc09b]        # 2ed080 <options.5701>
   30fe5:	e8 36 27 fd ff       	call   3720 <strlen@plt>
   30fea:	48 8d 15 8f c0 2b 00 	lea    rdx,[rip+0x2bc08f]        # 2ed080 <options.5701>
   30ff1:	48 01 d0             	add    rax,rdx
   30ff4:	66 48 0f 6e c3       	movq   xmm0,rbx
   30ff9:	48 8d 35 76 59 1b 00 	lea    rsi,[rip+0x1b5976]        # 1e6976 <Law_and_Order+0x16e>
   31000:	48 89 c7             	mov    rdi,rax
   31003:	b8 01 00 00 00       	mov    eax,0x1
   31008:	e8 23 26 fd ff       	call   3630 <sprintf@plt>
   3100d:	48 8d 05 6c c0 2b 00 	lea    rax,[rip+0x2bc06c]        # 2ed080 <options.5701>
   31014:	48 83 c4 18          	add    rsp,0x18
   31018:	5b                   	pop    rbx
   31019:	5d                   	pop    rbp
   3101a:	c3                   	ret    

000000000003101b <copy_nonstandards>:
   3101b:	f3 0f 1e fa          	endbr64 
   3101f:	55                   	push   rbp
   31020:	48 89 e5             	mov    rbp,rsp
   31023:	48 83 ec 20          	sub    rsp,0x20
   31027:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3102b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3102f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31033:	48 89 c7             	mov    rdi,rax
   31036:	e8 e5 26 fd ff       	call   3720 <strlen@plt>
   3103b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   3103e:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
   31042:	77 32                	ja     31076 <copy_nonstandards+0x5b>
   31044:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31048:	48 89 c7             	mov    rdi,rax
   3104b:	e8 d0 26 fd ff       	call   3720 <strlen@plt>
   31050:	48 89 c2             	mov    rdx,rax
   31053:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31057:	48 8d 48 48          	lea    rcx,[rax+0x48]
   3105b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3105f:	48 89 c6             	mov    rsi,rax
   31062:	48 89 cf             	mov    rdi,rcx
   31065:	e8 c6 27 fd ff       	call   3830 <memcpy@plt>
   3106a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3106e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   31071:	c6 44 02 48 00       	mov    BYTE PTR [rdx+rax*1+0x48],0x0
   31076:	90                   	nop
   31077:	c9                   	leave  
   31078:	c3                   	ret    

0000000000031079 <vrna_md_set_nonstandards>:
   31079:	f3 0f 1e fa          	endbr64 
   3107d:	55                   	push   rbp
   3107e:	48 89 e5             	mov    rbp,rsp
   31081:	48 83 ec 30          	sub    rsp,0x30
   31085:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   31089:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   3108d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   31092:	0f 84 9b 01 00 00    	je     31233 <vrna_md_set_nonstandards+0x1ba>
   31098:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   3109d:	0f 84 62 01 00 00    	je     31205 <vrna_md_set_nonstandards+0x18c>
   310a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   310a7:	48 89 c7             	mov    rdi,rax
   310aa:	e8 71 26 fd ff       	call   3720 <strlen@plt>
   310af:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   310b2:	83 7d f4 20          	cmp    DWORD PTR [rbp-0xc],0x20
   310b6:	0f 87 36 01 00 00    	ja     311f2 <vrna_md_set_nonstandards+0x179>
   310bc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   310c0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   310c4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   310cb:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   310ce:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   310d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   310d5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   310d8:	3c 2d                	cmp    al,0x2d
   310da:	0f 85 b4 00 00 00    	jne    31194 <vrna_md_set_nonstandards+0x11b>
   310e0:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [rbp-0x10],0x1
   310e7:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
   310ec:	e9 a3 00 00 00       	jmp    31194 <vrna_md_set_nonstandards+0x11b>
   310f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   310f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   310f8:	3c 2c                	cmp    al,0x2c
   310fa:	0f 84 8f 00 00 00    	je     3118f <vrna_md_set_nonstandards+0x116>
   31100:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31104:	48 8d 50 01          	lea    rdx,[rax+0x1]
   31108:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
   3110c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   3110f:	8d 4a 01             	lea    ecx,[rdx+0x1]
   31112:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
   31115:	0f b6 30             	movzx  esi,BYTE PTR [rax]
   31118:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   3111c:	48 63 c2             	movsxd rax,edx
   3111f:	40 88 74 01 48       	mov    BYTE PTR [rcx+rax*1+0x48],sil
   31124:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   31127:	8d 50 01             	lea    edx,[rax+0x1]
   3112a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   3112d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   31131:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
   31134:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   31138:	48 98                	cdqe   
   3113a:	88 4c 02 48          	mov    BYTE PTR [rdx+rax*1+0x48],cl
   3113e:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   31142:	74 4b                	je     3118f <vrna_md_set_nonstandards+0x116>
   31144:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31148:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   3114b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3114f:	48 83 e8 01          	sub    rax,0x1
   31153:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   31156:	38 c2                	cmp    dl,al
   31158:	74 35                	je     3118f <vrna_md_set_nonstandards+0x116>
   3115a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   3115d:	8d 50 01             	lea    edx,[rax+0x1]
   31160:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   31163:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   31167:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
   3116a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3116e:	48 98                	cdqe   
   31170:	88 4c 02 48          	mov    BYTE PTR [rdx+rax*1+0x48],cl
   31174:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   31177:	8d 50 01             	lea    edx,[rax+0x1]
   3117a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   3117d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   31181:	0f b6 4a ff          	movzx  ecx,BYTE PTR [rdx-0x1]
   31185:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   31189:	48 98                	cdqe   
   3118b:	88 4c 02 48          	mov    BYTE PTR [rdx+rax*1+0x48],cl
   3118f:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
   31194:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31198:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   3119b:	84 c0                	test   al,al
   3119d:	0f 85 4e ff ff ff    	jne    310f1 <vrna_md_set_nonstandards+0x78>
   311a3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   311a7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   311aa:	48 98                	cdqe   
   311ac:	c6 44 02 48 00       	mov    BYTE PTR [rdx+rax*1+0x48],0x0
   311b1:	48 8b 05 68 be 2b 00 	mov    rax,QWORD PTR [rip+0x2bbe68]        # 2ed020 <nonstandards>
   311b8:	48 89 c7             	mov    rdi,rax
   311bb:	e8 80 27 fd ff       	call   3940 <free@plt>
   311c0:	bf 21 00 00 00       	mov    edi,0x21
   311c5:	e8 47 db ff ff       	call   2ed11 <vrna_alloc>
   311ca:	48 89 05 4f be 2b 00 	mov    QWORD PTR [rip+0x2bbe4f],rax        # 2ed020 <nonstandards>
   311d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   311d5:	48 8d 48 48          	lea    rcx,[rax+0x48]
   311d9:	48 8b 05 40 be 2b 00 	mov    rax,QWORD PTR [rip+0x2bbe40]        # 2ed020 <nonstandards>
   311e0:	ba 21 00 00 00       	mov    edx,0x21
   311e5:	48 89 ce             	mov    rsi,rcx
   311e8:	48 89 c7             	mov    rdi,rax
   311eb:	e8 40 26 fd ff       	call   3830 <memcpy@plt>
   311f0:	eb 35                	jmp    31227 <vrna_md_set_nonstandards+0x1ae>
   311f2:	48 8d 3d 87 57 1b 00 	lea    rdi,[rip+0x1b5787]        # 1e6980 <Law_and_Order+0x178>
   311f9:	b8 00 00 00 00       	mov    eax,0x0
   311fe:	e8 e8 dd ff ff       	call   2efeb <vrna_message_warning>
   31203:	eb 22                	jmp    31227 <vrna_md_set_nonstandards+0x1ae>
   31205:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   31209:	c6 40 48 00          	mov    BYTE PTR [rax+0x48],0x0
   3120d:	48 8b 05 0c be 2b 00 	mov    rax,QWORD PTR [rip+0x2bbe0c]        # 2ed020 <nonstandards>
   31214:	48 89 c7             	mov    rdi,rax
   31217:	e8 24 27 fd ff       	call   3940 <free@plt>
   3121c:	48 c7 05 f9 bd 2b 00 00 00 00 00 	mov    QWORD PTR [rip+0x2bbdf9],0x0        # 2ed020 <nonstandards>
   31227:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3122b:	48 89 c7             	mov    rdi,rax
   3122e:	e8 d5 09 00 00       	call   31c08 <vrna_md_update>
   31233:	90                   	nop
   31234:	c9                   	leave  
   31235:	c3                   	ret    

0000000000031236 <vrna_md_defaults_reset>:
   31236:	f3 0f 1e fa          	endbr64 
   3123a:	55                   	push   rbp
   3123b:	48 89 e5             	mov    rbp,rsp
   3123e:	48 83 ec 10          	sub    rsp,0x10
   31242:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31246:	c7 05 84 05 22 00 02 00 00 00 	mov    DWORD PTR [rip+0x220584],0x2        # 2517d4 <defaults+0x14>
   31250:	c7 05 7e 05 22 00 01 00 00 00 	mov    DWORD PTR [rip+0x22057e],0x1        # 2517d8 <defaults+0x18>
   3125a:	c7 05 78 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220578],0x0        # 2517dc <defaults+0x1c>
   31264:	c7 05 72 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220572],0x0        # 2517e0 <defaults+0x20>
   3126e:	c7 05 6c 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x22056c],0x0        # 2517e4 <defaults+0x24>
   31278:	c7 05 66 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220566],0x0        # 2517e8 <defaults+0x28>
   31282:	c7 05 64 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220564],0x0        # 2517f0 <defaults+0x30>
   3128c:	c7 05 56 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220556],0x0        # 2517ec <defaults+0x2c>
   31296:	c7 05 54 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220554],0x0        # 2517f4 <defaults+0x34>
   312a0:	c7 05 5a 05 22 00 01 00 00 00 	mov    DWORD PTR [rip+0x22055a],0x1        # 251804 <defaults+0x44>
   312aa:	c7 05 48 05 22 00 01 00 00 00 	mov    DWORD PTR [rip+0x220548],0x1        # 2517fc <defaults+0x3c>
   312b4:	c6 05 45 05 22 00 46 	mov    BYTE PTR [rip+0x220545],0x46        # 251800 <defaults+0x40>
   312bb:	c7 05 33 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220533],0x0        # 2517f8 <defaults+0x38>
   312c5:	c7 05 79 05 22 00 ff ff ff ff 	mov    DWORD PTR [rip+0x220579],0xffffffff        # 251848 <defaults+0x88>
   312cf:	c7 05 73 05 22 00 03 00 00 00 	mov    DWORD PTR [rip+0x220573],0x3        # 25184c <defaults+0x8c>
   312d9:	c7 05 6d 05 22 00 ff ff ff ff 	mov    DWORD PTR [rip+0x22056d],0xffffffff        # 251850 <defaults+0x90>
   312e3:	c7 05 67 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220567],0x0        # 251854 <defaults+0x94>
   312ed:	c7 05 61 05 22 00 00 00 00 00 	mov    DWORD PTR [rip+0x220561],0x0        # 251858 <defaults+0x98>
   312f7:	f2 0f 10 05 c9 58 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b58c9]        # 1e6bc8 <Law_and_Order+0x3c0>
   312ff:	f2 0f 11 05 59 05 22 00 	movsd  QWORD PTR [rip+0x220559],xmm0        # 251860 <defaults+0xa0>
   31307:	f2 0f 10 05 b9 58 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b58b9]        # 1e6bc8 <Law_and_Order+0x3c0>
   3130f:	f2 0f 11 05 51 05 22 00 	movsd  QWORD PTR [rip+0x220551],xmm0        # 251868 <defaults+0xa8>
   31317:	f2 0f 10 05 a1 58 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b58a1]        # 1e6bc0 <Law_and_Order+0x3b8>
   3131f:	f2 0f 11 05 99 04 22 00 	movsd  QWORD PTR [rip+0x220499],xmm0        # 2517c0 <defaults>
   31327:	f2 0f 10 05 99 58 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b5899]        # 1e6bc8 <Law_and_Order+0x3c0>
   3132f:	f2 0f 11 05 91 04 22 00 	movsd  QWORD PTR [rip+0x220491],xmm0        # 2517c8 <defaults+0x8>
   31337:	c7 05 8f 04 22 00 01 00 00 00 	mov    DWORD PTR [rip+0x22048f],0x1        # 2517d0 <defaults+0x10>
   31341:	f2 0f 10 05 87 58 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b5887]        # 1e6bd0 <Law_and_Order+0x3c8>
   31349:	f2 0f 11 05 1f 05 22 00 	movsd  QWORD PTR [rip+0x22051f],xmm0        # 251870 <defaults+0xb0>
   31351:	c6 05 b0 04 22 00 00 	mov    BYTE PTR [rip+0x2204b0],0x0        # 251808 <defaults+0x48>
   31358:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   3135d:	0f 84 96 01 00 00    	je     314f9 <vrna_md_defaults_reset+0x2c3>
   31363:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31367:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   3136a:	89 c7                	mov    edi,eax
   3136c:	e8 52 03 00 00       	call   316c3 <vrna_md_defaults_dangles>
   31371:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31375:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   31378:	89 c7                	mov    edi,eax
   3137a:	e8 98 03 00 00       	call   31717 <vrna_md_defaults_special_hp>
   3137f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31383:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   31386:	89 c7                	mov    edi,eax
   31388:	e8 c4 03 00 00       	call   31751 <vrna_md_defaults_noLP>
   3138d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31391:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   31394:	89 c7                	mov    edi,eax
   31396:	e8 f0 03 00 00       	call   3178b <vrna_md_defaults_noGU>
   3139b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3139f:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   313a2:	89 c7                	mov    edi,eax
   313a4:	e8 2c 04 00 00       	call   317d5 <vrna_md_defaults_noGUclosure>
   313a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313ad:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
   313b0:	89 c7                	mov    edi,eax
   313b2:	e8 58 04 00 00       	call   3180f <vrna_md_defaults_logML>
   313b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313bb:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   313be:	89 c7                	mov    edi,eax
   313c0:	e8 be 04 00 00       	call   31883 <vrna_md_defaults_gquad>
   313c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313c9:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   313cc:	89 c7                	mov    edi,eax
   313ce:	e8 76 04 00 00       	call   31849 <vrna_md_defaults_circ>
   313d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313d7:	8b 40 34             	mov    eax,DWORD PTR [rax+0x34]
   313da:	89 c7                	mov    edi,eax
   313dc:	e8 dc 04 00 00       	call   318bd <vrna_md_defaults_uniq_ML>
   313e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313e5:	8b 40 44             	mov    eax,DWORD PTR [rax+0x44]
   313e8:	89 c7                	mov    edi,eax
   313ea:	e8 10 06 00 00       	call   319ff <vrna_md_defaults_compute_bpp>
   313ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313f3:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
   313f6:	89 c7                	mov    edi,eax
   313f8:	e8 5a 05 00 00       	call   31957 <vrna_md_defaults_backtrack>
   313fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31401:	0f b6 40 40          	movzx  eax,BYTE PTR [rax+0x40]
   31405:	0f be c0             	movsx  eax,al
   31408:	89 c7                	mov    edi,eax
   3140a:	e8 76 05 00 00       	call   31985 <vrna_md_defaults_backtrack_type>
   3140f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31413:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   31416:	89 c7                	mov    edi,eax
   31418:	e8 da 04 00 00       	call   318f7 <vrna_md_defaults_energy_set>
   3141d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31421:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [rax+0x88]
   31427:	89 c7                	mov    edi,eax
   31429:	e8 1a 06 00 00       	call   31a48 <vrna_md_defaults_max_bp_span>
   3142e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31432:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
   31438:	89 c7                	mov    edi,eax
   3143a:	e8 49 06 00 00       	call   31a88 <vrna_md_defaults_min_loop_size>
   3143f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31443:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [rax+0x90]
   31449:	89 c7                	mov    edi,eax
   3144b:	e8 69 06 00 00       	call   31ab9 <vrna_md_defaults_window_size>
   31450:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31454:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [rax+0x94]
   3145a:	89 c7                	mov    edi,eax
   3145c:	e8 8c 06 00 00       	call   31aed <vrna_md_defaults_oldAliEn>
   31461:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31465:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [rax+0x98]
   3146b:	89 c7                	mov    edi,eax
   3146d:	e8 b5 06 00 00       	call   31b27 <vrna_md_defaults_ribo>
   31472:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31476:	48 8b 80 a0 00 00 00 	mov    rax,QWORD PTR [rax+0xa0]
   3147d:	66 48 0f 6e c0       	movq   xmm0,rax
   31482:	e8 da 06 00 00       	call   31b61 <vrna_md_defaults_cv_fact>
   31487:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3148b:	48 8b 80 a8 00 00 00 	mov    rax,QWORD PTR [rax+0xa8]
   31492:	66 48 0f 6e c0       	movq   xmm0,rax
   31497:	e8 01 07 00 00       	call   31b9d <vrna_md_defaults_nc_fact>
   3149c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   314a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   314a3:	66 48 0f 6e c0       	movq   xmm0,rax
   314a8:	e8 5e 01 00 00       	call   3160b <vrna_md_defaults_temperature>
   314ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   314b1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   314b5:	66 48 0f 6e c0       	movq   xmm0,rax
   314ba:	e8 ae 01 00 00       	call   3166d <vrna_md_defaults_betaScale>
   314bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   314c3:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   314c6:	89 c7                	mov    edi,eax
   314c8:	e8 cf 01 00 00       	call   3169c <vrna_md_defaults_pf_smooth>
   314cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   314d1:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
   314d8:	66 48 0f 6e c0       	movq   xmm0,rax
   314dd:	e8 f7 06 00 00       	call   31bd9 <vrna_md_defaults_sfact>
   314e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   314e6:	48 83 c0 48          	add    rax,0x48
   314ea:	48 89 c6             	mov    rsi,rax
   314ed:	48 8d 3d cc 02 22 00 	lea    rdi,[rip+0x2202cc]        # 2517c0 <defaults>
   314f4:	e8 22 fb ff ff       	call   3101b <copy_nonstandards>
   314f9:	48 8d 3d c0 02 22 00 	lea    rdi,[rip+0x2202c0]        # 2517c0 <defaults>
   31500:	e8 03 07 00 00       	call   31c08 <vrna_md_update>
   31505:	f2 0f 10 05 b3 02 22 00 	movsd  xmm0,QWORD PTR [rip+0x2202b3]        # 2517c0 <defaults>
   3150d:	f2 0f 11 05 6b 01 22 00 	movsd  QWORD PTR [rip+0x22016b],xmm0        # 251680 <temperature>
   31515:	f2 0f 10 05 bb 56 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b56bb]        # 1e6bd8 <Law_and_Order+0x3d0>
   3151d:	f2 0f 11 05 63 01 22 00 	movsd  QWORD PTR [rip+0x220163],xmm0        # 251688 <pf_scale>
   31525:	8b 05 a9 02 22 00    	mov    eax,DWORD PTR [rip+0x2202a9]        # 2517d4 <defaults+0x14>
   3152b:	89 05 5f 01 22 00    	mov    DWORD PTR [rip+0x22015f],eax        # 251690 <dangles>
   31531:	8b 05 a1 02 22 00    	mov    eax,DWORD PTR [rip+0x2202a1]        # 2517d8 <defaults+0x18>
   31537:	89 05 57 01 22 00    	mov    DWORD PTR [rip+0x220157],eax        # 251694 <tetra_loop>
   3153d:	8b 05 99 02 22 00    	mov    eax,DWORD PTR [rip+0x220299]        # 2517dc <defaults+0x1c>
   31543:	89 05 b7 ba 2b 00    	mov    DWORD PTR [rip+0x2bbab7],eax        # 2ed000 <noLonelyPairs>
   31549:	8b 05 91 02 22 00    	mov    eax,DWORD PTR [rip+0x220291]        # 2517e0 <defaults+0x20>
   3154f:	89 05 af ba 2b 00    	mov    DWORD PTR [rip+0x2bbaaf],eax        # 2ed004 <noGU>
   31555:	8b 05 89 02 22 00    	mov    eax,DWORD PTR [rip+0x220289]        # 2517e4 <defaults+0x24>
   3155b:	89 05 a7 ba 2b 00    	mov    DWORD PTR [rip+0x2bbaa7],eax        # 2ed008 <no_closingGU>
   31561:	8b 05 85 02 22 00    	mov    eax,DWORD PTR [rip+0x220285]        # 2517ec <defaults+0x2c>
   31567:	89 05 9f ba 2b 00    	mov    DWORD PTR [rip+0x2bba9f],eax        # 2ed00c <circ>
   3156d:	8b 05 7d 02 22 00    	mov    eax,DWORD PTR [rip+0x22027d]        # 2517f0 <defaults+0x30>
   31573:	89 05 97 ba 2b 00    	mov    DWORD PTR [rip+0x2bba97],eax        # 2ed010 <gquad>
   31579:	8b 05 75 02 22 00    	mov    eax,DWORD PTR [rip+0x220275]        # 2517f4 <defaults+0x34>
   3157f:	89 05 8f ba 2b 00    	mov    DWORD PTR [rip+0x2bba8f],eax        # 2ed014 <uniq_ML>
   31585:	8b 05 6d 02 22 00    	mov    eax,DWORD PTR [rip+0x22026d]        # 2517f8 <defaults+0x38>
   3158b:	89 05 87 ba 2b 00    	mov    DWORD PTR [rip+0x2bba87],eax        # 2ed018 <energy_set>
   31591:	8b 05 6d 02 22 00    	mov    eax,DWORD PTR [rip+0x22026d]        # 251804 <defaults+0x44>
   31597:	89 05 fb 00 22 00    	mov    DWORD PTR [rip+0x2200fb],eax        # 251698 <do_backtrack>
   3159d:	0f b6 05 5c 02 22 00 	movzx  eax,BYTE PTR [rip+0x22025c]        # 251800 <defaults+0x40>
   315a4:	88 05 f2 00 22 00    	mov    BYTE PTR [rip+0x2200f2],al        # 25169c <backtrack_type>
   315aa:	48 8d 05 57 02 22 00 	lea    rax,[rip+0x220257]        # 251808 <defaults+0x48>
   315b1:	48 89 05 68 ba 2b 00 	mov    QWORD PTR [rip+0x2bba68],rax        # 2ed020 <nonstandards>
   315b8:	8b 05 8a 02 22 00    	mov    eax,DWORD PTR [rip+0x22028a]        # 251848 <defaults+0x88>
   315be:	89 05 dc 00 22 00    	mov    DWORD PTR [rip+0x2200dc],eax        # 2516a0 <max_bp_span>
   315c4:	8b 05 8a 02 22 00    	mov    eax,DWORD PTR [rip+0x22028a]        # 251854 <defaults+0x94>
   315ca:	89 05 58 ba 2b 00    	mov    DWORD PTR [rip+0x2bba58],eax        # 2ed028 <oldAliEn>
   315d0:	8b 05 82 02 22 00    	mov    eax,DWORD PTR [rip+0x220282]        # 251858 <defaults+0x98>
   315d6:	89 05 50 ba 2b 00    	mov    DWORD PTR [rip+0x2bba50],eax        # 2ed02c <ribo>
   315dc:	f2 0f 10 05 7c 02 22 00 	movsd  xmm0,QWORD PTR [rip+0x22027c]        # 251860 <defaults+0xa0>
   315e4:	f2 0f 11 05 bc 00 22 00 	movsd  QWORD PTR [rip+0x2200bc],xmm0        # 2516a8 <cv_fact>
   315ec:	f2 0f 10 05 74 02 22 00 	movsd  xmm0,QWORD PTR [rip+0x220274]        # 251868 <defaults+0xa8>
   315f4:	f2 0f 11 05 b4 00 22 00 	movsd  QWORD PTR [rip+0x2200b4],xmm0        # 2516b0 <nc_fact>
   315fc:	8b 05 e6 01 22 00    	mov    eax,DWORD PTR [rip+0x2201e6]        # 2517e8 <defaults+0x28>
   31602:	89 05 28 ba 2b 00    	mov    DWORD PTR [rip+0x2bba28],eax        # 2ed030 <logML>
   31608:	90                   	nop
   31609:	c9                   	leave  
   3160a:	c3                   	ret    

000000000003160b <vrna_md_defaults_temperature>:
   3160b:	f3 0f 1e fa          	endbr64 
   3160f:	55                   	push   rbp
   31610:	48 89 e5             	mov    rbp,rsp
   31613:	48 83 ec 10          	sub    rsp,0x10
   31617:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   3161c:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31621:	66 0f 2f 05 b7 55 1b 00 	comisd xmm0,QWORD PTR [rip+0x1b55b7]        # 1e6be0 <Law_and_Order+0x3d8>
   31629:	72 1c                	jb     31647 <vrna_md_defaults_temperature+0x3c>
   3162b:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31630:	f2 0f 11 05 88 01 22 00 	movsd  QWORD PTR [rip+0x220188],xmm0        # 2517c0 <defaults>
   31638:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   3163d:	f2 0f 11 05 3b 00 22 00 	movsd  QWORD PTR [rip+0x22003b],xmm0        # 251680 <temperature>
   31645:	eb 11                	jmp    31658 <vrna_md_defaults_temperature+0x4d>
   31647:	48 8d 3d 72 53 1b 00 	lea    rdi,[rip+0x1b5372]        # 1e69c0 <Law_and_Order+0x1b8>
   3164e:	b8 00 00 00 00       	mov    eax,0x0
   31653:	e8 93 d9 ff ff       	call   2efeb <vrna_message_warning>
   31658:	90                   	nop
   31659:	c9                   	leave  
   3165a:	c3                   	ret    

000000000003165b <vrna_md_defaults_temperature_get>:
   3165b:	f3 0f 1e fa          	endbr64 
   3165f:	55                   	push   rbp
   31660:	48 89 e5             	mov    rbp,rsp
   31663:	f2 0f 10 05 55 01 22 00 	movsd  xmm0,QWORD PTR [rip+0x220155]        # 2517c0 <defaults>
   3166b:	5d                   	pop    rbp
   3166c:	c3                   	ret    

000000000003166d <vrna_md_defaults_betaScale>:
   3166d:	f3 0f 1e fa          	endbr64 
   31671:	55                   	push   rbp
   31672:	48 89 e5             	mov    rbp,rsp
   31675:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   3167a:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   3167f:	f2 0f 11 05 41 01 22 00 	movsd  QWORD PTR [rip+0x220141],xmm0        # 2517c8 <defaults+0x8>
   31687:	90                   	nop
   31688:	5d                   	pop    rbp
   31689:	c3                   	ret    

000000000003168a <vrna_md_defaults_betaScale_get>:
   3168a:	f3 0f 1e fa          	endbr64 
   3168e:	55                   	push   rbp
   3168f:	48 89 e5             	mov    rbp,rsp
   31692:	f2 0f 10 05 2e 01 22 00 	movsd  xmm0,QWORD PTR [rip+0x22012e]        # 2517c8 <defaults+0x8>
   3169a:	5d                   	pop    rbp
   3169b:	c3                   	ret    

000000000003169c <vrna_md_defaults_pf_smooth>:
   3169c:	f3 0f 1e fa          	endbr64 
   316a0:	55                   	push   rbp
   316a1:	48 89 e5             	mov    rbp,rsp
   316a4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   316a7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   316aa:	89 05 20 01 22 00    	mov    DWORD PTR [rip+0x220120],eax        # 2517d0 <defaults+0x10>
   316b0:	90                   	nop
   316b1:	5d                   	pop    rbp
   316b2:	c3                   	ret    

00000000000316b3 <vrna_md_defaults_pf_smooth_get>:
   316b3:	f3 0f 1e fa          	endbr64 
   316b7:	55                   	push   rbp
   316b8:	48 89 e5             	mov    rbp,rsp
   316bb:	8b 05 0f 01 22 00    	mov    eax,DWORD PTR [rip+0x22010f]        # 2517d0 <defaults+0x10>
   316c1:	5d                   	pop    rbp
   316c2:	c3                   	ret    

00000000000316c3 <vrna_md_defaults_dangles>:
   316c3:	f3 0f 1e fa          	endbr64 
   316c7:	55                   	push   rbp
   316c8:	48 89 e5             	mov    rbp,rsp
   316cb:	48 83 ec 10          	sub    rsp,0x10
   316cf:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   316d2:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   316d6:	78 1a                	js     316f2 <vrna_md_defaults_dangles+0x2f>
   316d8:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   316dc:	7f 14                	jg     316f2 <vrna_md_defaults_dangles+0x2f>
   316de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   316e1:	89 05 ed 00 22 00    	mov    DWORD PTR [rip+0x2200ed],eax        # 2517d4 <defaults+0x14>
   316e7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   316ea:	89 05 a0 ff 21 00    	mov    DWORD PTR [rip+0x21ffa0],eax        # 251690 <dangles>
   316f0:	eb 12                	jmp    31704 <vrna_md_defaults_dangles+0x41>
   316f2:	48 8d 3d 3f 53 1b 00 	lea    rdi,[rip+0x1b533f]        # 1e6a38 <Law_and_Order+0x230>
   316f9:	b8 00 00 00 00       	mov    eax,0x0
   316fe:	e8 e8 d8 ff ff       	call   2efeb <vrna_message_warning>
   31703:	90                   	nop
   31704:	90                   	nop
   31705:	c9                   	leave  
   31706:	c3                   	ret    

0000000000031707 <vrna_md_defaults_dangles_get>:
   31707:	f3 0f 1e fa          	endbr64 
   3170b:	55                   	push   rbp
   3170c:	48 89 e5             	mov    rbp,rsp
   3170f:	8b 05 bf 00 22 00    	mov    eax,DWORD PTR [rip+0x2200bf]        # 2517d4 <defaults+0x14>
   31715:	5d                   	pop    rbp
   31716:	c3                   	ret    

0000000000031717 <vrna_md_defaults_special_hp>:
   31717:	f3 0f 1e fa          	endbr64 
   3171b:	55                   	push   rbp
   3171c:	48 89 e5             	mov    rbp,rsp
   3171f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31722:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31726:	0f 95 c0             	setne  al
   31729:	0f b6 c0             	movzx  eax,al
   3172c:	89 05 a6 00 22 00    	mov    DWORD PTR [rip+0x2200a6],eax        # 2517d8 <defaults+0x18>
   31732:	8b 05 a0 00 22 00    	mov    eax,DWORD PTR [rip+0x2200a0]        # 2517d8 <defaults+0x18>
   31738:	89 05 56 ff 21 00    	mov    DWORD PTR [rip+0x21ff56],eax        # 251694 <tetra_loop>
   3173e:	90                   	nop
   3173f:	5d                   	pop    rbp
   31740:	c3                   	ret    

0000000000031741 <vrna_md_defaults_special_hp_get>:
   31741:	f3 0f 1e fa          	endbr64 
   31745:	55                   	push   rbp
   31746:	48 89 e5             	mov    rbp,rsp
   31749:	8b 05 89 00 22 00    	mov    eax,DWORD PTR [rip+0x220089]        # 2517d8 <defaults+0x18>
   3174f:	5d                   	pop    rbp
   31750:	c3                   	ret    

0000000000031751 <vrna_md_defaults_noLP>:
   31751:	f3 0f 1e fa          	endbr64 
   31755:	55                   	push   rbp
   31756:	48 89 e5             	mov    rbp,rsp
   31759:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   3175c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31760:	0f 95 c0             	setne  al
   31763:	0f b6 c0             	movzx  eax,al
   31766:	89 05 70 00 22 00    	mov    DWORD PTR [rip+0x220070],eax        # 2517dc <defaults+0x1c>
   3176c:	8b 05 6a 00 22 00    	mov    eax,DWORD PTR [rip+0x22006a]        # 2517dc <defaults+0x1c>
   31772:	89 05 88 b8 2b 00    	mov    DWORD PTR [rip+0x2bb888],eax        # 2ed000 <noLonelyPairs>
   31778:	90                   	nop
   31779:	5d                   	pop    rbp
   3177a:	c3                   	ret    

000000000003177b <vrna_md_defaults_noLP_get>:
   3177b:	f3 0f 1e fa          	endbr64 
   3177f:	55                   	push   rbp
   31780:	48 89 e5             	mov    rbp,rsp
   31783:	8b 05 53 00 22 00    	mov    eax,DWORD PTR [rip+0x220053]        # 2517dc <defaults+0x1c>
   31789:	5d                   	pop    rbp
   3178a:	c3                   	ret    

000000000003178b <vrna_md_defaults_noGU>:
   3178b:	f3 0f 1e fa          	endbr64 
   3178f:	55                   	push   rbp
   31790:	48 89 e5             	mov    rbp,rsp
   31793:	48 83 ec 10          	sub    rsp,0x10
   31797:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   3179a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   3179e:	0f 95 c0             	setne  al
   317a1:	0f b6 c0             	movzx  eax,al
   317a4:	89 05 36 00 22 00    	mov    DWORD PTR [rip+0x220036],eax        # 2517e0 <defaults+0x20>
   317aa:	8b 05 30 00 22 00    	mov    eax,DWORD PTR [rip+0x220030]        # 2517e0 <defaults+0x20>
   317b0:	89 05 4e b8 2b 00    	mov    DWORD PTR [rip+0x2bb84e],eax        # 2ed004 <noGU>
   317b6:	48 8d 3d 03 00 22 00 	lea    rdi,[rip+0x220003]        # 2517c0 <defaults>
   317bd:	e8 46 04 00 00       	call   31c08 <vrna_md_update>
   317c2:	90                   	nop
   317c3:	c9                   	leave  
   317c4:	c3                   	ret    

00000000000317c5 <vrna_md_defaults_noGU_get>:
   317c5:	f3 0f 1e fa          	endbr64 
   317c9:	55                   	push   rbp
   317ca:	48 89 e5             	mov    rbp,rsp
   317cd:	8b 05 0d 00 22 00    	mov    eax,DWORD PTR [rip+0x22000d]        # 2517e0 <defaults+0x20>
   317d3:	5d                   	pop    rbp
   317d4:	c3                   	ret    

00000000000317d5 <vrna_md_defaults_noGUclosure>:
   317d5:	f3 0f 1e fa          	endbr64 
   317d9:	55                   	push   rbp
   317da:	48 89 e5             	mov    rbp,rsp
   317dd:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   317e0:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   317e4:	0f 95 c0             	setne  al
   317e7:	0f b6 c0             	movzx  eax,al
   317ea:	89 05 f4 ff 21 00    	mov    DWORD PTR [rip+0x21fff4],eax        # 2517e4 <defaults+0x24>
   317f0:	8b 05 ee ff 21 00    	mov    eax,DWORD PTR [rip+0x21ffee]        # 2517e4 <defaults+0x24>
   317f6:	89 05 0c b8 2b 00    	mov    DWORD PTR [rip+0x2bb80c],eax        # 2ed008 <no_closingGU>
   317fc:	90                   	nop
   317fd:	5d                   	pop    rbp
   317fe:	c3                   	ret    

00000000000317ff <vrna_md_defaults_noGUclosure_get>:
   317ff:	f3 0f 1e fa          	endbr64 
   31803:	55                   	push   rbp
   31804:	48 89 e5             	mov    rbp,rsp
   31807:	8b 05 d7 ff 21 00    	mov    eax,DWORD PTR [rip+0x21ffd7]        # 2517e4 <defaults+0x24>
   3180d:	5d                   	pop    rbp
   3180e:	c3                   	ret    

000000000003180f <vrna_md_defaults_logML>:
   3180f:	f3 0f 1e fa          	endbr64 
   31813:	55                   	push   rbp
   31814:	48 89 e5             	mov    rbp,rsp
   31817:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   3181a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   3181e:	0f 95 c0             	setne  al
   31821:	0f b6 c0             	movzx  eax,al
   31824:	89 05 be ff 21 00    	mov    DWORD PTR [rip+0x21ffbe],eax        # 2517e8 <defaults+0x28>
   3182a:	8b 05 b8 ff 21 00    	mov    eax,DWORD PTR [rip+0x21ffb8]        # 2517e8 <defaults+0x28>
   31830:	89 05 fa b7 2b 00    	mov    DWORD PTR [rip+0x2bb7fa],eax        # 2ed030 <logML>
   31836:	90                   	nop
   31837:	5d                   	pop    rbp
   31838:	c3                   	ret    

0000000000031839 <vrna_md_defaults_logML_get>:
   31839:	f3 0f 1e fa          	endbr64 
   3183d:	55                   	push   rbp
   3183e:	48 89 e5             	mov    rbp,rsp
   31841:	8b 05 a1 ff 21 00    	mov    eax,DWORD PTR [rip+0x21ffa1]        # 2517e8 <defaults+0x28>
   31847:	5d                   	pop    rbp
   31848:	c3                   	ret    

0000000000031849 <vrna_md_defaults_circ>:
   31849:	f3 0f 1e fa          	endbr64 
   3184d:	55                   	push   rbp
   3184e:	48 89 e5             	mov    rbp,rsp
   31851:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31854:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31858:	0f 95 c0             	setne  al
   3185b:	0f b6 c0             	movzx  eax,al
   3185e:	89 05 88 ff 21 00    	mov    DWORD PTR [rip+0x21ff88],eax        # 2517ec <defaults+0x2c>
   31864:	8b 05 82 ff 21 00    	mov    eax,DWORD PTR [rip+0x21ff82]        # 2517ec <defaults+0x2c>
   3186a:	89 05 9c b7 2b 00    	mov    DWORD PTR [rip+0x2bb79c],eax        # 2ed00c <circ>
   31870:	90                   	nop
   31871:	5d                   	pop    rbp
   31872:	c3                   	ret    

0000000000031873 <vrna_md_defaults_circ_get>:
   31873:	f3 0f 1e fa          	endbr64 
   31877:	55                   	push   rbp
   31878:	48 89 e5             	mov    rbp,rsp
   3187b:	8b 05 6b ff 21 00    	mov    eax,DWORD PTR [rip+0x21ff6b]        # 2517ec <defaults+0x2c>
   31881:	5d                   	pop    rbp
   31882:	c3                   	ret    

0000000000031883 <vrna_md_defaults_gquad>:
   31883:	f3 0f 1e fa          	endbr64 
   31887:	55                   	push   rbp
   31888:	48 89 e5             	mov    rbp,rsp
   3188b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   3188e:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31892:	0f 95 c0             	setne  al
   31895:	0f b6 c0             	movzx  eax,al
   31898:	89 05 52 ff 21 00    	mov    DWORD PTR [rip+0x21ff52],eax        # 2517f0 <defaults+0x30>
   3189e:	8b 05 4c ff 21 00    	mov    eax,DWORD PTR [rip+0x21ff4c]        # 2517f0 <defaults+0x30>
   318a4:	89 05 66 b7 2b 00    	mov    DWORD PTR [rip+0x2bb766],eax        # 2ed010 <gquad>
   318aa:	90                   	nop
   318ab:	5d                   	pop    rbp
   318ac:	c3                   	ret    

00000000000318ad <vrna_md_defaults_gquad_get>:
   318ad:	f3 0f 1e fa          	endbr64 
   318b1:	55                   	push   rbp
   318b2:	48 89 e5             	mov    rbp,rsp
   318b5:	8b 05 35 ff 21 00    	mov    eax,DWORD PTR [rip+0x21ff35]        # 2517f0 <defaults+0x30>
   318bb:	5d                   	pop    rbp
   318bc:	c3                   	ret    

00000000000318bd <vrna_md_defaults_uniq_ML>:
   318bd:	f3 0f 1e fa          	endbr64 
   318c1:	55                   	push   rbp
   318c2:	48 89 e5             	mov    rbp,rsp
   318c5:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   318c8:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   318cc:	0f 95 c0             	setne  al
   318cf:	0f b6 c0             	movzx  eax,al
   318d2:	89 05 1c ff 21 00    	mov    DWORD PTR [rip+0x21ff1c],eax        # 2517f4 <defaults+0x34>
   318d8:	8b 05 16 ff 21 00    	mov    eax,DWORD PTR [rip+0x21ff16]        # 2517f4 <defaults+0x34>
   318de:	89 05 30 b7 2b 00    	mov    DWORD PTR [rip+0x2bb730],eax        # 2ed014 <uniq_ML>
   318e4:	90                   	nop
   318e5:	5d                   	pop    rbp
   318e6:	c3                   	ret    

00000000000318e7 <vrna_md_defaults_uniq_ML_get>:
   318e7:	f3 0f 1e fa          	endbr64 
   318eb:	55                   	push   rbp
   318ec:	48 89 e5             	mov    rbp,rsp
   318ef:	8b 05 ff fe 21 00    	mov    eax,DWORD PTR [rip+0x21feff]        # 2517f4 <defaults+0x34>
   318f5:	5d                   	pop    rbp
   318f6:	c3                   	ret    

00000000000318f7 <vrna_md_defaults_energy_set>:
   318f7:	f3 0f 1e fa          	endbr64 
   318fb:	55                   	push   rbp
   318fc:	48 89 e5             	mov    rbp,rsp
   318ff:	48 83 ec 10          	sub    rsp,0x10
   31903:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31906:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   3190a:	78 26                	js     31932 <vrna_md_defaults_energy_set+0x3b>
   3190c:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   31910:	7f 20                	jg     31932 <vrna_md_defaults_energy_set+0x3b>
   31912:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   31915:	89 05 dd fe 21 00    	mov    DWORD PTR [rip+0x21fedd],eax        # 2517f8 <defaults+0x38>
   3191b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   3191e:	89 05 f4 b6 2b 00    	mov    DWORD PTR [rip+0x2bb6f4],eax        # 2ed018 <energy_set>
   31924:	48 8d 3d 95 fe 21 00 	lea    rdi,[rip+0x21fe95]        # 2517c0 <defaults>
   3192b:	e8 d8 02 00 00       	call   31c08 <vrna_md_update>
   31930:	eb 12                	jmp    31944 <vrna_md_defaults_energy_set+0x4d>
   31932:	48 8d 3d 67 51 1b 00 	lea    rdi,[rip+0x1b5167]        # 1e6aa0 <Law_and_Order+0x298>
   31939:	b8 00 00 00 00       	mov    eax,0x0
   3193e:	e8 a8 d6 ff ff       	call   2efeb <vrna_message_warning>
   31943:	90                   	nop
   31944:	90                   	nop
   31945:	c9                   	leave  
   31946:	c3                   	ret    

0000000000031947 <vrna_md_defaults_energy_set_get>:
   31947:	f3 0f 1e fa          	endbr64 
   3194b:	55                   	push   rbp
   3194c:	48 89 e5             	mov    rbp,rsp
   3194f:	8b 05 a3 fe 21 00    	mov    eax,DWORD PTR [rip+0x21fea3]        # 2517f8 <defaults+0x38>
   31955:	5d                   	pop    rbp
   31956:	c3                   	ret    

0000000000031957 <vrna_md_defaults_backtrack>:
   31957:	f3 0f 1e fa          	endbr64 
   3195b:	55                   	push   rbp
   3195c:	48 89 e5             	mov    rbp,rsp
   3195f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31962:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31966:	0f 95 c0             	setne  al
   31969:	0f b6 c0             	movzx  eax,al
   3196c:	89 05 8a fe 21 00    	mov    DWORD PTR [rip+0x21fe8a],eax        # 2517fc <defaults+0x3c>
   31972:	90                   	nop
   31973:	5d                   	pop    rbp
   31974:	c3                   	ret    

0000000000031975 <vrna_md_defaults_backtrack_get>:
   31975:	f3 0f 1e fa          	endbr64 
   31979:	55                   	push   rbp
   3197a:	48 89 e5             	mov    rbp,rsp
   3197d:	8b 05 79 fe 21 00    	mov    eax,DWORD PTR [rip+0x21fe79]        # 2517fc <defaults+0x3c>
   31983:	5d                   	pop    rbp
   31984:	c3                   	ret    

0000000000031985 <vrna_md_defaults_backtrack_type>:
   31985:	f3 0f 1e fa          	endbr64 
   31989:	55                   	push   rbp
   3198a:	48 89 e5             	mov    rbp,rsp
   3198d:	48 83 ec 10          	sub    rsp,0x10
   31991:	89 f8                	mov    eax,edi
   31993:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
   31996:	0f be 45 fc          	movsx  eax,BYTE PTR [rbp-0x4]
   3199a:	83 e8 43             	sub    eax,0x43
   3199d:	83 f8 0a             	cmp    eax,0xa
   319a0:	0f 97 c2             	seta   dl
   319a3:	84 d2                	test   dl,dl
   319a5:	75 32                	jne    319d9 <vrna_md_defaults_backtrack_type+0x54>
   319a7:	ba 01 00 00 00       	mov    edx,0x1
   319ac:	89 c1                	mov    ecx,eax
   319ae:	48 d3 e2             	shl    rdx,cl
   319b1:	48 89 d0             	mov    rax,rdx
   319b4:	25 09 04 00 00       	and    eax,0x409
   319b9:	48 85 c0             	test   rax,rax
   319bc:	0f 95 c0             	setne  al
   319bf:	84 c0                	test   al,al
   319c1:	74 16                	je     319d9 <vrna_md_defaults_backtrack_type+0x54>
   319c3:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
   319c7:	88 05 33 fe 21 00    	mov    BYTE PTR [rip+0x21fe33],al        # 251800 <defaults+0x40>
   319cd:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
   319d1:	88 05 c5 fc 21 00    	mov    BYTE PTR [rip+0x21fcc5],al        # 25169c <backtrack_type>
   319d7:	eb 12                	jmp    319eb <vrna_md_defaults_backtrack_type+0x66>
   319d9:	48 8d 3d 30 51 1b 00 	lea    rdi,[rip+0x1b5130]        # 1e6b10 <Law_and_Order+0x308>
   319e0:	b8 00 00 00 00       	mov    eax,0x0
   319e5:	e8 01 d6 ff ff       	call   2efeb <vrna_message_warning>
   319ea:	90                   	nop
   319eb:	90                   	nop
   319ec:	c9                   	leave  
   319ed:	c3                   	ret    

00000000000319ee <vrna_md_defaults_backtrack_type_get>:
   319ee:	f3 0f 1e fa          	endbr64 
   319f2:	55                   	push   rbp
   319f3:	48 89 e5             	mov    rbp,rsp
   319f6:	0f b6 05 03 fe 21 00 	movzx  eax,BYTE PTR [rip+0x21fe03]        # 251800 <defaults+0x40>
   319fd:	5d                   	pop    rbp
   319fe:	c3                   	ret    

00000000000319ff <vrna_md_defaults_compute_bpp>:
   319ff:	f3 0f 1e fa          	endbr64 
   31a03:	55                   	push   rbp
   31a04:	48 89 e5             	mov    rbp,rsp
   31a07:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31a0a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31a0e:	78 1a                	js     31a2a <vrna_md_defaults_compute_bpp+0x2b>
   31a10:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
   31a14:	7f 14                	jg     31a2a <vrna_md_defaults_compute_bpp+0x2b>
   31a16:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   31a19:	89 05 e5 fd 21 00    	mov    DWORD PTR [rip+0x21fde5],eax        # 251804 <defaults+0x44>
   31a1f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   31a22:	89 05 70 fc 21 00    	mov    DWORD PTR [rip+0x21fc70],eax        # 251698 <do_backtrack>
   31a28:	eb 0b                	jmp    31a35 <vrna_md_defaults_compute_bpp+0x36>
   31a2a:	c7 05 d0 fd 21 00 01 00 00 00 	mov    DWORD PTR [rip+0x21fdd0],0x1        # 251804 <defaults+0x44>
   31a34:	90                   	nop
   31a35:	90                   	nop
   31a36:	5d                   	pop    rbp
   31a37:	c3                   	ret    

0000000000031a38 <vrna_md_defaults_compute_bpp_get>:
   31a38:	f3 0f 1e fa          	endbr64 
   31a3c:	55                   	push   rbp
   31a3d:	48 89 e5             	mov    rbp,rsp
   31a40:	8b 05 be fd 21 00    	mov    eax,DWORD PTR [rip+0x21fdbe]        # 251804 <defaults+0x44>
   31a46:	5d                   	pop    rbp
   31a47:	c3                   	ret    

0000000000031a48 <vrna_md_defaults_max_bp_span>:
   31a48:	f3 0f 1e fa          	endbr64 
   31a4c:	55                   	push   rbp
   31a4d:	48 89 e5             	mov    rbp,rsp
   31a50:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31a53:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31a57:	7e 05                	jle    31a5e <vrna_md_defaults_max_bp_span+0x16>
   31a59:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   31a5c:	eb 05                	jmp    31a63 <vrna_md_defaults_max_bp_span+0x1b>
   31a5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   31a63:	89 05 df fd 21 00    	mov    DWORD PTR [rip+0x21fddf],eax        # 251848 <defaults+0x88>
   31a69:	8b 05 d9 fd 21 00    	mov    eax,DWORD PTR [rip+0x21fdd9]        # 251848 <defaults+0x88>
   31a6f:	89 05 2b fc 21 00    	mov    DWORD PTR [rip+0x21fc2b],eax        # 2516a0 <max_bp_span>
   31a75:	90                   	nop
   31a76:	5d                   	pop    rbp
   31a77:	c3                   	ret    

0000000000031a78 <vrna_md_defaults_max_bp_span_get>:
   31a78:	f3 0f 1e fa          	endbr64 
   31a7c:	55                   	push   rbp
   31a7d:	48 89 e5             	mov    rbp,rsp
   31a80:	8b 05 c2 fd 21 00    	mov    eax,DWORD PTR [rip+0x21fdc2]        # 251848 <defaults+0x88>
   31a86:	5d                   	pop    rbp
   31a87:	c3                   	ret    

0000000000031a88 <vrna_md_defaults_min_loop_size>:
   31a88:	f3 0f 1e fa          	endbr64 
   31a8c:	55                   	push   rbp
   31a8d:	48 89 e5             	mov    rbp,rsp
   31a90:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31a93:	b8 00 00 00 00       	mov    eax,0x0
   31a98:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31a9c:	0f 49 45 fc          	cmovns eax,DWORD PTR [rbp-0x4]
   31aa0:	89 05 a6 fd 21 00    	mov    DWORD PTR [rip+0x21fda6],eax        # 25184c <defaults+0x8c>
   31aa6:	90                   	nop
   31aa7:	5d                   	pop    rbp
   31aa8:	c3                   	ret    

0000000000031aa9 <vrna_md_defaults_min_loop_size_get>:
   31aa9:	f3 0f 1e fa          	endbr64 
   31aad:	55                   	push   rbp
   31aae:	48 89 e5             	mov    rbp,rsp
   31ab1:	8b 05 95 fd 21 00    	mov    eax,DWORD PTR [rip+0x21fd95]        # 25184c <defaults+0x8c>
   31ab7:	5d                   	pop    rbp
   31ab8:	c3                   	ret    

0000000000031ab9 <vrna_md_defaults_window_size>:
   31ab9:	f3 0f 1e fa          	endbr64 
   31abd:	55                   	push   rbp
   31abe:	48 89 e5             	mov    rbp,rsp
   31ac1:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31ac4:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31ac8:	7e 05                	jle    31acf <vrna_md_defaults_window_size+0x16>
   31aca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   31acd:	eb 05                	jmp    31ad4 <vrna_md_defaults_window_size+0x1b>
   31acf:	b8 ff ff ff ff       	mov    eax,0xffffffff
   31ad4:	89 05 76 fd 21 00    	mov    DWORD PTR [rip+0x21fd76],eax        # 251850 <defaults+0x90>
   31ada:	90                   	nop
   31adb:	5d                   	pop    rbp
   31adc:	c3                   	ret    

0000000000031add <vrna_md_defaults_window_size_get>:
   31add:	f3 0f 1e fa          	endbr64 
   31ae1:	55                   	push   rbp
   31ae2:	48 89 e5             	mov    rbp,rsp
   31ae5:	8b 05 65 fd 21 00    	mov    eax,DWORD PTR [rip+0x21fd65]        # 251850 <defaults+0x90>
   31aeb:	5d                   	pop    rbp
   31aec:	c3                   	ret    

0000000000031aed <vrna_md_defaults_oldAliEn>:
   31aed:	f3 0f 1e fa          	endbr64 
   31af1:	55                   	push   rbp
   31af2:	48 89 e5             	mov    rbp,rsp
   31af5:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31af8:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31afc:	0f 95 c0             	setne  al
   31aff:	0f b6 c0             	movzx  eax,al
   31b02:	89 05 4c fd 21 00    	mov    DWORD PTR [rip+0x21fd4c],eax        # 251854 <defaults+0x94>
   31b08:	8b 05 46 fd 21 00    	mov    eax,DWORD PTR [rip+0x21fd46]        # 251854 <defaults+0x94>
   31b0e:	89 05 14 b5 2b 00    	mov    DWORD PTR [rip+0x2bb514],eax        # 2ed028 <oldAliEn>
   31b14:	90                   	nop
   31b15:	5d                   	pop    rbp
   31b16:	c3                   	ret    

0000000000031b17 <vrna_md_defaults_oldAliEn_get>:
   31b17:	f3 0f 1e fa          	endbr64 
   31b1b:	55                   	push   rbp
   31b1c:	48 89 e5             	mov    rbp,rsp
   31b1f:	8b 05 2f fd 21 00    	mov    eax,DWORD PTR [rip+0x21fd2f]        # 251854 <defaults+0x94>
   31b25:	5d                   	pop    rbp
   31b26:	c3                   	ret    

0000000000031b27 <vrna_md_defaults_ribo>:
   31b27:	f3 0f 1e fa          	endbr64 
   31b2b:	55                   	push   rbp
   31b2c:	48 89 e5             	mov    rbp,rsp
   31b2f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   31b32:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   31b36:	0f 95 c0             	setne  al
   31b39:	0f b6 c0             	movzx  eax,al
   31b3c:	89 05 16 fd 21 00    	mov    DWORD PTR [rip+0x21fd16],eax        # 251858 <defaults+0x98>
   31b42:	8b 05 10 fd 21 00    	mov    eax,DWORD PTR [rip+0x21fd10]        # 251858 <defaults+0x98>
   31b48:	89 05 de b4 2b 00    	mov    DWORD PTR [rip+0x2bb4de],eax        # 2ed02c <ribo>
   31b4e:	90                   	nop
   31b4f:	5d                   	pop    rbp
   31b50:	c3                   	ret    

0000000000031b51 <vrna_md_defaults_ribo_get>:
   31b51:	f3 0f 1e fa          	endbr64 
   31b55:	55                   	push   rbp
   31b56:	48 89 e5             	mov    rbp,rsp
   31b59:	8b 05 f9 fc 21 00    	mov    eax,DWORD PTR [rip+0x21fcf9]        # 251858 <defaults+0x98>
   31b5f:	5d                   	pop    rbp
   31b60:	c3                   	ret    

0000000000031b61 <vrna_md_defaults_cv_fact>:
   31b61:	f3 0f 1e fa          	endbr64 
   31b65:	55                   	push   rbp
   31b66:	48 89 e5             	mov    rbp,rsp
   31b69:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   31b6e:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31b73:	f2 0f 11 05 e5 fc 21 00 	movsd  QWORD PTR [rip+0x21fce5],xmm0        # 251860 <defaults+0xa0>
   31b7b:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31b80:	f2 0f 11 05 20 fb 21 00 	movsd  QWORD PTR [rip+0x21fb20],xmm0        # 2516a8 <cv_fact>
   31b88:	90                   	nop
   31b89:	5d                   	pop    rbp
   31b8a:	c3                   	ret    

0000000000031b8b <vrna_md_defaults_cv_fact_get>:
   31b8b:	f3 0f 1e fa          	endbr64 
   31b8f:	55                   	push   rbp
   31b90:	48 89 e5             	mov    rbp,rsp
   31b93:	f2 0f 10 05 c5 fc 21 00 	movsd  xmm0,QWORD PTR [rip+0x21fcc5]        # 251860 <defaults+0xa0>
   31b9b:	5d                   	pop    rbp
   31b9c:	c3                   	ret    

0000000000031b9d <vrna_md_defaults_nc_fact>:
   31b9d:	f3 0f 1e fa          	endbr64 
   31ba1:	55                   	push   rbp
   31ba2:	48 89 e5             	mov    rbp,rsp
   31ba5:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   31baa:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31baf:	f2 0f 11 05 b1 fc 21 00 	movsd  QWORD PTR [rip+0x21fcb1],xmm0        # 251868 <defaults+0xa8>
   31bb7:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31bbc:	f2 0f 11 05 ec fa 21 00 	movsd  QWORD PTR [rip+0x21faec],xmm0        # 2516b0 <nc_fact>
   31bc4:	90                   	nop
   31bc5:	5d                   	pop    rbp
   31bc6:	c3                   	ret    

0000000000031bc7 <vrna_md_defaults_nc_fact_get>:
   31bc7:	f3 0f 1e fa          	endbr64 
   31bcb:	55                   	push   rbp
   31bcc:	48 89 e5             	mov    rbp,rsp
   31bcf:	f2 0f 10 05 91 fc 21 00 	movsd  xmm0,QWORD PTR [rip+0x21fc91]        # 251868 <defaults+0xa8>
   31bd7:	5d                   	pop    rbp
   31bd8:	c3                   	ret    

0000000000031bd9 <vrna_md_defaults_sfact>:
   31bd9:	f3 0f 1e fa          	endbr64 
   31bdd:	55                   	push   rbp
   31bde:	48 89 e5             	mov    rbp,rsp
   31be1:	f2 0f 11 45 f8       	movsd  QWORD PTR [rbp-0x8],xmm0
   31be6:	f2 0f 10 45 f8       	movsd  xmm0,QWORD PTR [rbp-0x8]
   31beb:	f2 0f 11 05 7d fc 21 00 	movsd  QWORD PTR [rip+0x21fc7d],xmm0        # 251870 <defaults+0xb0>
   31bf3:	90                   	nop
   31bf4:	5d                   	pop    rbp
   31bf5:	c3                   	ret    

0000000000031bf6 <vrna_md_defaults_sfact_get>:
   31bf6:	f3 0f 1e fa          	endbr64 
   31bfa:	55                   	push   rbp
   31bfb:	48 89 e5             	mov    rbp,rsp
   31bfe:	f2 0f 10 05 6a fc 21 00 	movsd  xmm0,QWORD PTR [rip+0x21fc6a]        # 251870 <defaults+0xb0>
   31c06:	5d                   	pop    rbp
   31c07:	c3                   	ret    

0000000000031c08 <vrna_md_update>:
   31c08:	f3 0f 1e fa          	endbr64 
   31c0c:	55                   	push   rbp
   31c0d:	48 89 e5             	mov    rbp,rsp
   31c10:	48 83 ec 10          	sub    rsp,0x10
   31c14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31c18:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   31c1d:	74 0c                	je     31c2b <vrna_md_update+0x23>
   31c1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c23:	48 89 c7             	mov    rdi,rax
   31c26:	e8 03 00 00 00       	call   31c2e <fill_pair_matrices>
   31c2b:	90                   	nop
   31c2c:	c9                   	leave  
   31c2d:	c3                   	ret    

0000000000031c2e <fill_pair_matrices>:
   31c2e:	f3 0f 1e fa          	endbr64 
   31c32:	55                   	push   rbp
   31c33:	48 89 e5             	mov    rbp,rsp
   31c36:	48 83 ec 20          	sub    rsp,0x20
   31c3a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   31c3e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   31c45:	eb 43                	jmp    31c8a <fill_pair_matrices+0x5c>
   31c47:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31c4a:	48 63 d0             	movsxd rdx,eax
   31c4d:	48 89 d0             	mov    rax,rdx
   31c50:	48 c1 e0 02          	shl    rax,0x2
   31c54:	48 01 d0             	add    rax,rdx
   31c57:	48 c1 e0 02          	shl    rax,0x2
   31c5b:	48 01 d0             	add    rax,rdx
   31c5e:	48 c1 e0 02          	shl    rax,0x2
   31c62:	48 8d 90 00 01 00 00 	lea    rdx,[rax+0x100]
   31c69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31c6d:	48 01 d0             	add    rax,rdx
   31c70:	48 83 c0 04          	add    rax,0x4
   31c74:	ba 54 00 00 00       	mov    edx,0x54
   31c79:	be 00 00 00 00       	mov    esi,0x0
   31c7e:	48 89 c7             	mov    rdi,rax
   31c81:	e8 1a 1b fd ff       	call   37a0 <memset@plt>
   31c86:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31c8a:	83 7d f8 14          	cmp    DWORD PTR [rbp-0x8],0x14
   31c8e:	7e b7                	jle    31c47 <fill_pair_matrices+0x19>
   31c90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31c94:	48 05 d8 00 00 00    	add    rax,0xd8
   31c9a:	ba 2a 00 00 00       	mov    edx,0x2a
   31c9f:	be 00 00 00 00       	mov    esi,0x0
   31ca4:	48 89 c7             	mov    rdi,rax
   31ca7:	e8 f4 1a fd ff       	call   37a0 <memset@plt>
   31cac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31cb0:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   31cb3:	83 f8 03             	cmp    eax,0x3
   31cb6:	0f 84 c4 01 00 00    	je     31e80 <fill_pair_matrices+0x252>
   31cbc:	83 f8 03             	cmp    eax,0x3
   31cbf:	0f 8f 26 03 00 00    	jg     31feb <fill_pair_matrices+0x3bd>
   31cc5:	83 f8 02             	cmp    eax,0x2
   31cc8:	0f 84 ed 00 00 00    	je     31dbb <fill_pair_matrices+0x18d>
   31cce:	83 f8 02             	cmp    eax,0x2
   31cd1:	0f 8f 14 03 00 00    	jg     31feb <fill_pair_matrices+0x3bd>
   31cd7:	85 c0                	test   eax,eax
   31cd9:	74 0a                	je     31ce5 <fill_pair_matrices+0xb7>
   31cdb:	83 f8 01             	cmp    eax,0x1
   31cde:	74 16                	je     31cf6 <fill_pair_matrices+0xc8>
   31ce0:	e9 06 03 00 00       	jmp    31feb <fill_pair_matrices+0x3bd>
   31ce5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31ce9:	48 89 c7             	mov    rdi,rax
   31cec:	e8 dc 03 00 00       	call   320cd <prepare_default_pairs>
   31cf1:	e9 27 03 00 00       	jmp    3201d <fill_pair_matrices+0x3ef>
   31cf6:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
   31cfd:	eb 34                	jmp    31d33 <fill_pair_matrices+0x105>
   31cff:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31d02:	8d 50 01             	lea    edx,[rax+0x1]
   31d05:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31d08:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31d0c:	48 98                	cdqe   
   31d0e:	48 83 c0 68          	add    rax,0x68
   31d12:	66 c7 44 42 08 03 00 	mov    WORD PTR [rdx+rax*2+0x8],0x3
   31d19:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31d1c:	8d 50 01             	lea    edx,[rax+0x1]
   31d1f:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31d22:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31d26:	48 98                	cdqe   
   31d28:	48 83 c0 68          	add    rax,0x68
   31d2c:	66 c7 44 42 08 02 00 	mov    WORD PTR [rdx+rax*2+0x8],0x2
   31d33:	83 7d f8 13          	cmp    DWORD PTR [rbp-0x8],0x13
   31d37:	7e c6                	jle    31cff <fill_pair_matrices+0xd1>
   31d39:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
   31d40:	eb 6e                	jmp    31db0 <fill_pair_matrices+0x182>
   31d42:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31d45:	83 c0 01             	add    eax,0x1
   31d48:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31d4c:	48 63 f0             	movsxd rsi,eax
   31d4f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31d52:	48 63 d0             	movsxd rdx,eax
   31d55:	48 89 d0             	mov    rax,rdx
   31d58:	48 c1 e0 02          	shl    rax,0x2
   31d5c:	48 01 d0             	add    rax,rdx
   31d5f:	48 c1 e0 02          	shl    rax,0x2
   31d63:	48 01 d0             	add    rax,rdx
   31d66:	48 01 f0             	add    rax,rsi
   31d69:	48 83 c0 40          	add    rax,0x40
   31d6d:	c7 44 81 04 02 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x2
   31d75:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31d79:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31d7c:	83 e8 01             	sub    eax,0x1
   31d7f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31d83:	48 63 f0             	movsxd rsi,eax
   31d86:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31d89:	48 63 d0             	movsxd rdx,eax
   31d8c:	48 89 d0             	mov    rax,rdx
   31d8f:	48 c1 e0 02          	shl    rax,0x2
   31d93:	48 01 d0             	add    rax,rdx
   31d96:	48 c1 e0 02          	shl    rax,0x2
   31d9a:	48 01 d0             	add    rax,rdx
   31d9d:	48 01 f0             	add    rax,rsi
   31da0:	48 83 c0 40          	add    rax,0x40
   31da4:	c7 44 81 04 01 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x1
   31dac:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31db0:	83 7d f8 13          	cmp    DWORD PTR [rbp-0x8],0x13
   31db4:	7e 8c                	jle    31d42 <fill_pair_matrices+0x114>
   31db6:	e9 62 02 00 00       	jmp    3201d <fill_pair_matrices+0x3ef>
   31dbb:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
   31dc2:	eb 34                	jmp    31df8 <fill_pair_matrices+0x1ca>
   31dc4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31dc7:	8d 50 01             	lea    edx,[rax+0x1]
   31dca:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31dcd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31dd1:	48 98                	cdqe   
   31dd3:	48 83 c0 68          	add    rax,0x68
   31dd7:	66 c7 44 42 08 01 00 	mov    WORD PTR [rdx+rax*2+0x8],0x1
   31dde:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31de1:	8d 50 01             	lea    edx,[rax+0x1]
   31de4:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31de7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31deb:	48 98                	cdqe   
   31ded:	48 83 c0 68          	add    rax,0x68
   31df1:	66 c7 44 42 08 04 00 	mov    WORD PTR [rdx+rax*2+0x8],0x4
   31df8:	83 7d f8 13          	cmp    DWORD PTR [rbp-0x8],0x13
   31dfc:	7e c6                	jle    31dc4 <fill_pair_matrices+0x196>
   31dfe:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
   31e05:	eb 6e                	jmp    31e75 <fill_pair_matrices+0x247>
   31e07:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31e0a:	83 c0 01             	add    eax,0x1
   31e0d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31e11:	48 63 f0             	movsxd rsi,eax
   31e14:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31e17:	48 63 d0             	movsxd rdx,eax
   31e1a:	48 89 d0             	mov    rax,rdx
   31e1d:	48 c1 e0 02          	shl    rax,0x2
   31e21:	48 01 d0             	add    rax,rdx
   31e24:	48 c1 e0 02          	shl    rax,0x2
   31e28:	48 01 d0             	add    rax,rdx
   31e2b:	48 01 f0             	add    rax,rsi
   31e2e:	48 83 c0 40          	add    rax,0x40
   31e32:	c7 44 81 04 05 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x5
   31e3a:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31e3e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31e41:	83 e8 01             	sub    eax,0x1
   31e44:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31e48:	48 63 f0             	movsxd rsi,eax
   31e4b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31e4e:	48 63 d0             	movsxd rdx,eax
   31e51:	48 89 d0             	mov    rax,rdx
   31e54:	48 c1 e0 02          	shl    rax,0x2
   31e58:	48 01 d0             	add    rax,rdx
   31e5b:	48 c1 e0 02          	shl    rax,0x2
   31e5f:	48 01 d0             	add    rax,rdx
   31e62:	48 01 f0             	add    rax,rsi
   31e65:	48 83 c0 40          	add    rax,0x40
   31e69:	c7 44 81 04 06 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x6
   31e71:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31e75:	83 7d f8 13          	cmp    DWORD PTR [rbp-0x8],0x13
   31e79:	7e 8c                	jle    31e07 <fill_pair_matrices+0x1d9>
   31e7b:	e9 9d 01 00 00       	jmp    3201d <fill_pair_matrices+0x3ef>
   31e80:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
   31e87:	eb 68                	jmp    31ef1 <fill_pair_matrices+0x2c3>
   31e89:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31e8c:	8d 50 01             	lea    edx,[rax+0x1]
   31e8f:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31e92:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31e96:	48 98                	cdqe   
   31e98:	48 83 c0 68          	add    rax,0x68
   31e9c:	66 c7 44 42 08 03 00 	mov    WORD PTR [rdx+rax*2+0x8],0x3
   31ea3:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31ea6:	8d 50 01             	lea    edx,[rax+0x1]
   31ea9:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31eac:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31eb0:	48 98                	cdqe   
   31eb2:	48 83 c0 68          	add    rax,0x68
   31eb6:	66 c7 44 42 08 02 00 	mov    WORD PTR [rdx+rax*2+0x8],0x2
   31ebd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31ec0:	8d 50 01             	lea    edx,[rax+0x1]
   31ec3:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31ec6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31eca:	48 98                	cdqe   
   31ecc:	48 83 c0 68          	add    rax,0x68
   31ed0:	66 c7 44 42 08 01 00 	mov    WORD PTR [rdx+rax*2+0x8],0x1
   31ed7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31eda:	8d 50 01             	lea    edx,[rax+0x1]
   31edd:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   31ee0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31ee4:	48 98                	cdqe   
   31ee6:	48 83 c0 68          	add    rax,0x68
   31eea:	66 c7 44 42 08 04 00 	mov    WORD PTR [rdx+rax*2+0x8],0x4
   31ef1:	83 7d f8 11          	cmp    DWORD PTR [rbp-0x8],0x11
   31ef5:	7e 92                	jle    31e89 <fill_pair_matrices+0x25b>
   31ef7:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
   31efe:	e9 dc 00 00 00       	jmp    31fdf <fill_pair_matrices+0x3b1>
   31f03:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31f06:	83 c0 01             	add    eax,0x1
   31f09:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31f0d:	48 63 f0             	movsxd rsi,eax
   31f10:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31f13:	48 63 d0             	movsxd rdx,eax
   31f16:	48 89 d0             	mov    rax,rdx
   31f19:	48 c1 e0 02          	shl    rax,0x2
   31f1d:	48 01 d0             	add    rax,rdx
   31f20:	48 c1 e0 02          	shl    rax,0x2
   31f24:	48 01 d0             	add    rax,rdx
   31f27:	48 01 f0             	add    rax,rsi
   31f2a:	48 83 c0 40          	add    rax,0x40
   31f2e:	c7 44 81 04 02 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x2
   31f36:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31f3a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31f3d:	83 e8 01             	sub    eax,0x1
   31f40:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31f44:	48 63 f0             	movsxd rsi,eax
   31f47:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31f4a:	48 63 d0             	movsxd rdx,eax
   31f4d:	48 89 d0             	mov    rax,rdx
   31f50:	48 c1 e0 02          	shl    rax,0x2
   31f54:	48 01 d0             	add    rax,rdx
   31f57:	48 c1 e0 02          	shl    rax,0x2
   31f5b:	48 01 d0             	add    rax,rdx
   31f5e:	48 01 f0             	add    rax,rsi
   31f61:	48 83 c0 40          	add    rax,0x40
   31f65:	c7 44 81 04 01 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x1
   31f6d:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31f71:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31f74:	83 c0 01             	add    eax,0x1
   31f77:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31f7b:	48 63 f0             	movsxd rsi,eax
   31f7e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31f81:	48 63 d0             	movsxd rdx,eax
   31f84:	48 89 d0             	mov    rax,rdx
   31f87:	48 c1 e0 02          	shl    rax,0x2
   31f8b:	48 01 d0             	add    rax,rdx
   31f8e:	48 c1 e0 02          	shl    rax,0x2
   31f92:	48 01 d0             	add    rax,rdx
   31f95:	48 01 f0             	add    rax,rsi
   31f98:	48 83 c0 40          	add    rax,0x40
   31f9c:	c7 44 81 04 05 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x5
   31fa4:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31fa8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31fab:	83 e8 01             	sub    eax,0x1
   31fae:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   31fb2:	48 63 f0             	movsxd rsi,eax
   31fb5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   31fb8:	48 63 d0             	movsxd rdx,eax
   31fbb:	48 89 d0             	mov    rax,rdx
   31fbe:	48 c1 e0 02          	shl    rax,0x2
   31fc2:	48 01 d0             	add    rax,rdx
   31fc5:	48 c1 e0 02          	shl    rax,0x2
   31fc9:	48 01 d0             	add    rax,rdx
   31fcc:	48 01 f0             	add    rax,rsi
   31fcf:	48 83 c0 40          	add    rax,0x40
   31fd3:	c7 44 81 04 06 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x6
   31fdb:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   31fdf:	83 7d f8 11          	cmp    DWORD PTR [rbp-0x8],0x11
   31fe3:	0f 8e 1a ff ff ff    	jle    31f03 <fill_pair_matrices+0x2d5>
   31fe9:	eb 32                	jmp    3201d <fill_pair_matrices+0x3ef>
   31feb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31fef:	8b 40 38             	mov    eax,DWORD PTR [rax+0x38]
   31ff2:	89 c6                	mov    esi,eax
   31ff4:	48 8d 3d 85 4b 1b 00 	lea    rdi,[rip+0x1b4b85]        # 1e6b80 <Law_and_Order+0x378>
   31ffb:	b8 00 00 00 00       	mov    eax,0x0
   32000:	e8 e6 cf ff ff       	call   2efeb <vrna_message_warning>
   32005:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32009:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
   32010:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32014:	48 89 c7             	mov    rdi,rax
   32017:	e8 b1 00 00 00       	call   320cd <prepare_default_pairs>
   3201c:	90                   	nop
   3201d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   32024:	eb 7e                	jmp    320a4 <fill_pair_matrices+0x476>
   32026:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   3202d:	eb 6b                	jmp    3209a <fill_pair_matrices+0x46c>
   3202f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   32033:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   32036:	48 63 f0             	movsxd rsi,eax
   32039:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   3203c:	48 63 d0             	movsxd rdx,eax
   3203f:	48 89 d0             	mov    rax,rdx
   32042:	48 c1 e0 02          	shl    rax,0x2
   32046:	48 01 d0             	add    rax,rdx
   32049:	48 c1 e0 02          	shl    rax,0x2
   3204d:	48 01 d0             	add    rax,rdx
   32050:	48 01 f0             	add    rax,rsi
   32053:	48 83 c0 40          	add    rax,0x40
   32057:	8b 74 81 04          	mov    esi,DWORD PTR [rcx+rax*4+0x4]
   3205b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   3205f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   32062:	48 63 f8             	movsxd rdi,eax
   32065:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   32068:	48 63 d0             	movsxd rdx,eax
   3206b:	48 89 d0             	mov    rax,rdx
   3206e:	48 c1 e0 02          	shl    rax,0x2
   32072:	48 01 d0             	add    rax,rdx
   32075:	48 c1 e0 02          	shl    rax,0x2
   32079:	48 01 d0             	add    rax,rdx
   3207c:	48 01 f8             	add    rax,rdi
   3207f:	48 83 c0 40          	add    rax,0x40
   32083:	8b 54 81 04          	mov    edx,DWORD PTR [rcx+rax*4+0x4]
   32087:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3208b:	48 63 ce             	movsxd rcx,esi
   3208e:	48 83 c1 2c          	add    rcx,0x2c
   32092:	89 54 88 08          	mov    DWORD PTR [rax+rcx*4+0x8],edx
   32096:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   3209a:	83 7d fc 14          	cmp    DWORD PTR [rbp-0x4],0x14
   3209e:	7e 8f                	jle    3202f <fill_pair_matrices+0x401>
   320a0:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   320a4:	83 7d f8 14          	cmp    DWORD PTR [rbp-0x8],0x14
   320a8:	0f 8e 78 ff ff ff    	jle    32026 <fill_pair_matrices+0x3f8>
   320ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   320b2:	c7 80 b8 00 00 00 00 00 00 00 	mov    DWORD PTR [rax+0xb8],0x0
   320bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   320c0:	c7 80 d4 00 00 00 07 00 00 00 	mov    DWORD PTR [rax+0xd4],0x7
   320ca:	90                   	nop
   320cb:	c9                   	leave  
   320cc:	c3                   	ret    

00000000000320cd <prepare_default_pairs>:
   320cd:	f3 0f 1e fa          	endbr64 
   320d1:	55                   	push   rbp
   320d2:	48 89 e5             	mov    rbp,rsp
   320d5:	53                   	push   rbx
   320d6:	48 83 ec 28          	sub    rsp,0x28
   320da:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   320de:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   320e5:	eb 19                	jmp    32100 <prepare_default_pairs+0x33>
   320e7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   320ea:	89 c1                	mov    ecx,eax
   320ec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   320f0:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   320f3:	48 83 c2 68          	add    rdx,0x68
   320f7:	66 89 4c 50 08       	mov    WORD PTR [rax+rdx*2+0x8],cx
   320fc:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   32100:	83 7d e8 04          	cmp    DWORD PTR [rbp-0x18],0x4
   32104:	76 e1                	jbe    320e7 <prepare_default_pairs+0x1a>
   32106:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3210a:	66 c7 80 e2 00 00 00 03 00 	mov    WORD PTR [rax+0xe2],0x3
   32113:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32117:	66 c7 80 e4 00 00 00 02 00 	mov    WORD PTR [rax+0xe4],0x2
   32120:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32124:	66 c7 80 e6 00 00 00 00 00 	mov    WORD PTR [rax+0xe6],0x0
   3212d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   32134:	eb 5c                	jmp    32192 <prepare_default_pairs+0xc5>
   32136:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   3213d:	eb 49                	jmp    32188 <prepare_default_pairs+0xbb>
   3213f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   32142:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   32145:	48 c1 e2 03          	shl    rdx,0x3
   32149:	48 01 d0             	add    rax,rdx
   3214c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   32154:	48 8d 05 65 f5 21 00 	lea    rax,[rip+0x21f565]        # 2516c0 <BP_pair>
   3215b:	8b 34 02             	mov    esi,DWORD PTR [rdx+rax*1]
   3215e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   32162:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
   32165:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   32168:	48 89 d0             	mov    rax,rdx
   3216b:	48 c1 e0 02          	shl    rax,0x2
   3216f:	48 01 d0             	add    rax,rdx
   32172:	48 c1 e0 02          	shl    rax,0x2
   32176:	48 01 d0             	add    rax,rdx
   32179:	48 01 f8             	add    rax,rdi
   3217c:	48 83 c0 40          	add    rax,0x40
   32180:	89 74 81 04          	mov    DWORD PTR [rcx+rax*4+0x4],esi
   32184:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   32188:	83 7d ec 07          	cmp    DWORD PTR [rbp-0x14],0x7
   3218c:	76 b1                	jbe    3213f <prepare_default_pairs+0x72>
   3218e:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   32192:	83 7d e8 07          	cmp    DWORD PTR [rbp-0x18],0x7
   32196:	76 9e                	jbe    32136 <prepare_default_pairs+0x69>
   32198:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3219c:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   3219f:	85 c0                	test   eax,eax
   321a1:	74 22                	je     321c5 <prepare_default_pairs+0xf8>
   321a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   321a7:	c7 80 60 02 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x260],0x0
   321b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   321b5:	8b 90 60 02 00 00    	mov    edx,DWORD PTR [rax+0x260]
   321bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   321bf:	89 90 10 02 00 00    	mov    DWORD PTR [rax+0x210],edx
   321c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   321c9:	0f b6 40 48          	movzx  eax,BYTE PTR [rax+0x48]
   321cd:	84 c0                	test   al,al
   321cf:	0f 84 94 00 00 00    	je     32269 <prepare_default_pairs+0x19c>
   321d5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   321dc:	eb 6f                	jmp    3224d <prepare_default_pairs+0x180>
   321de:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   321e2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   321e5:	0f b6 44 02 48       	movzx  eax,BYTE PTR [rdx+rax*1+0x48]
   321ea:	0f be c0             	movsx  eax,al
   321ed:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   321f1:	48 89 d6             	mov    rsi,rdx
   321f4:	89 c7                	mov    edi,eax
   321f6:	e8 23 e1 ff ff       	call   3031e <vrna_nucleotide_encode>
   321fb:	89 c3                	mov    ebx,eax
   321fd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   32200:	8d 50 01             	lea    edx,[rax+0x1]
   32203:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32207:	89 d2                	mov    edx,edx
   32209:	0f b6 44 10 48       	movzx  eax,BYTE PTR [rax+rdx*1+0x48]
   3220e:	0f be c0             	movsx  eax,al
   32211:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   32215:	48 89 d6             	mov    rsi,rdx
   32218:	89 c7                	mov    edi,eax
   3221a:	e8 ff e0 ff ff       	call   3031e <vrna_nucleotide_encode>
   3221f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   32223:	48 63 f0             	movsxd rsi,eax
   32226:	48 63 d3             	movsxd rdx,ebx
   32229:	48 89 d0             	mov    rax,rdx
   3222c:	48 c1 e0 02          	shl    rax,0x2
   32230:	48 01 d0             	add    rax,rdx
   32233:	48 c1 e0 02          	shl    rax,0x2
   32237:	48 01 d0             	add    rax,rdx
   3223a:	48 01 f0             	add    rax,rsi
   3223d:	48 83 c0 40          	add    rax,0x40
   32241:	c7 44 81 04 07 00 00 00 	mov    DWORD PTR [rcx+rax*4+0x4],0x7
   32249:	83 45 e8 02          	add    DWORD PTR [rbp-0x18],0x2
   3224d:	8b 5d e8             	mov    ebx,DWORD PTR [rbp-0x18]
   32250:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32254:	48 83 c0 48          	add    rax,0x48
   32258:	48 89 c7             	mov    rdi,rax
   3225b:	e8 c0 14 fd ff       	call   3720 <strlen@plt>
   32260:	48 39 c3             	cmp    rbx,rax
   32263:	0f 82 75 ff ff ff    	jb     321de <prepare_default_pairs+0x111>
   32269:	90                   	nop
   3226a:	48 83 c4 28          	add    rsp,0x28
   3226e:	5b                   	pop    rbx
   3226f:	5d                   	pop    rbp
   32270:	c3                   	ret    

0000000000032271 <set_model_details>:
   32271:	f3 0f 1e fa          	endbr64 
   32275:	55                   	push   rbp
   32276:	48 89 e5             	mov    rbp,rsp
   32279:	48 83 ec 10          	sub    rsp,0x10
   3227d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32281:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   32286:	0f 84 a0 01 00 00    	je     3242c <set_model_details+0x1bb>
   3228c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32290:	ba e8 07 00 00       	mov    edx,0x7e8
   32295:	be 00 00 00 00       	mov    esi,0x0
   3229a:	48 89 c7             	mov    rdi,rax
   3229d:	e8 fe 14 fd ff       	call   37a0 <memset@plt>
   322a2:	8b 15 e8 f3 21 00    	mov    edx,DWORD PTR [rip+0x21f3e8]        # 251690 <dangles>
   322a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322ac:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   322af:	8b 15 df f3 21 00    	mov    edx,DWORD PTR [rip+0x21f3df]        # 251694 <tetra_loop>
   322b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322b9:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
   322bc:	8b 15 3e ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad3e]        # 2ed000 <noLonelyPairs>
   322c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322c6:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
   322c9:	8b 15 35 ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad35]        # 2ed004 <noGU>
   322cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322d3:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   322d6:	8b 15 2c ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad2c]        # 2ed008 <no_closingGU>
   322dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322e0:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   322e3:	8b 15 47 ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad47]        # 2ed030 <logML>
   322e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322ed:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   322f0:	8b 15 1a ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad1a]        # 2ed010 <gquad>
   322f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   322fa:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   322fd:	8b 15 09 ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad09]        # 2ed00c <circ>
   32303:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32307:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   3230a:	8b 15 04 ad 2b 00    	mov    edx,DWORD PTR [rip+0x2bad04]        # 2ed014 <uniq_ML>
   32310:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32314:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   32317:	8b 15 7b f3 21 00    	mov    edx,DWORD PTR [rip+0x21f37b]        # 251698 <do_backtrack>
   3231d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32321:	89 50 44             	mov    DWORD PTR [rax+0x44],edx
   32324:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32328:	c7 40 3c 01 00 00 00 	mov    DWORD PTR [rax+0x3c],0x1
   3232f:	0f b6 15 66 f3 21 00 	movzx  edx,BYTE PTR [rip+0x21f366]        # 25169c <backtrack_type>
   32336:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3233a:	88 50 40             	mov    BYTE PTR [rax+0x40],dl
   3233d:	8b 15 d5 ac 2b 00    	mov    edx,DWORD PTR [rip+0x2bacd5]        # 2ed018 <energy_set>
   32343:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32347:	89 50 38             	mov    DWORD PTR [rax+0x38],edx
   3234a:	8b 15 50 f3 21 00    	mov    edx,DWORD PTR [rip+0x21f350]        # 2516a0 <max_bp_span>
   32350:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32354:	89 90 88 00 00 00    	mov    DWORD PTR [rax+0x88],edx
   3235a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3235e:	c7 80 8c 00 00 00 03 00 00 00 	mov    DWORD PTR [rax+0x8c],0x3
   32368:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3236c:	c7 80 90 00 00 00 ff ff ff ff 	mov    DWORD PTR [rax+0x90],0xffffffff
   32376:	8b 15 ac ac 2b 00    	mov    edx,DWORD PTR [rip+0x2bacac]        # 2ed028 <oldAliEn>
   3237c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32380:	89 90 94 00 00 00    	mov    DWORD PTR [rax+0x94],edx
   32386:	8b 15 a0 ac 2b 00    	mov    edx,DWORD PTR [rip+0x2baca0]        # 2ed02c <ribo>
   3238c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32390:	89 90 98 00 00 00    	mov    DWORD PTR [rax+0x98],edx
   32396:	f2 0f 10 05 0a f3 21 00 	movsd  xmm0,QWORD PTR [rip+0x21f30a]        # 2516a8 <cv_fact>
   3239e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323a2:	f2 0f 11 80 a0 00 00 00 	movsd  QWORD PTR [rax+0xa0],xmm0
   323aa:	f2 0f 10 05 fe f2 21 00 	movsd  xmm0,QWORD PTR [rip+0x21f2fe]        # 2516b0 <nc_fact>
   323b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323b6:	f2 0f 11 80 a8 00 00 00 	movsd  QWORD PTR [rax+0xa8],xmm0
   323be:	f2 0f 10 05 ba f2 21 00 	movsd  xmm0,QWORD PTR [rip+0x21f2ba]        # 251680 <temperature>
   323c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323ca:	f2 0f 11 00          	movsd  QWORD PTR [rax],xmm0
   323ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323d2:	f2 0f 10 05 ee 47 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b47ee]        # 1e6bc8 <Law_and_Order+0x3c0>
   323da:	f2 0f 11 40 08       	movsd  QWORD PTR [rax+0x8],xmm0
   323df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323e3:	c7 40 10 01 00 00 00 	mov    DWORD PTR [rax+0x10],0x1
   323ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   323ee:	f2 0f 10 05 da 47 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b47da]        # 1e6bd0 <Law_and_Order+0x3c8>
   323f6:	f2 0f 11 80 b0 00 00 00 	movsd  QWORD PTR [rax+0xb0],xmm0
   323fe:	48 8b 05 1b ac 2b 00 	mov    rax,QWORD PTR [rip+0x2bac1b]        # 2ed020 <nonstandards>
   32405:	48 85 c0             	test   rax,rax
   32408:	74 16                	je     32420 <set_model_details+0x1af>
   3240a:	48 8b 15 0f ac 2b 00 	mov    rdx,QWORD PTR [rip+0x2bac0f]        # 2ed020 <nonstandards>
   32411:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32415:	48 89 d6             	mov    rsi,rdx
   32418:	48 89 c7             	mov    rdi,rax
   3241b:	e8 fb eb ff ff       	call   3101b <copy_nonstandards>
   32420:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32424:	48 89 c7             	mov    rdi,rax
   32427:	e8 dc f7 ff ff       	call   31c08 <vrna_md_update>
   3242c:	90                   	nop
   3242d:	c9                   	leave  
   3242e:	c3                   	ret    

000000000003242f <option_string>:
   3242f:	f3 0f 1e fa          	endbr64 
   32433:	55                   	push   rbp
   32434:	48 89 e5             	mov    rbp,rsp
   32437:	48 81 ec f0 07 00 00 	sub    rsp,0x7f0
   3243e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32447:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3244b:	31 c0                	xor    eax,eax
   3244d:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   32454:	48 89 c7             	mov    rdi,rax
   32457:	e8 15 fe ff ff       	call   32271 <set_model_details>
   3245c:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   32463:	48 89 c7             	mov    rdi,rax
   32466:	e8 c8 e9 ff ff       	call   30e33 <vrna_md_option_string>
   3246b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3246f:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   32478:	74 05                	je     3247f <option_string+0x50>
   3247a:	e8 71 14 fd ff       	call   38f0 <__stack_chk_fail@plt>
   3247f:	c9                   	leave  
   32480:	c3                   	ret    

0000000000032481 <vrna_file_copy>:
   32481:	f3 0f 1e fa          	endbr64 
   32485:	55                   	push   rbp
   32486:	48 89 e5             	mov    rbp,rsp
   32489:	48 83 ec 20          	sub    rsp,0x20
   3248d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32491:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   32495:	eb 11                	jmp    324a8 <vrna_file_copy+0x27>
   32497:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3249b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   3249e:	48 89 d6             	mov    rsi,rdx
   324a1:	89 c7                	mov    edi,eax
   324a3:	e8 d8 16 fd ff       	call   3b80 <putc@plt>
   324a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   324ac:	48 89 c7             	mov    rdi,rax
   324af:	e8 ec 11 fd ff       	call   36a0 <getc@plt>
   324b4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   324b7:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
   324bb:	75 da                	jne    32497 <vrna_file_copy+0x16>
   324bd:	90                   	nop
   324be:	90                   	nop
   324bf:	c9                   	leave  
   324c0:	c3                   	ret    

00000000000324c1 <vrna_read_line>:
   324c1:	f3 0f 1e fa          	endbr64 
   324c5:	55                   	push   rbp
   324c6:	48 89 e5             	mov    rbp,rsp
   324c9:	48 81 ec 40 02 00 00 	sub    rsp,0x240
   324d0:	48 89 bd c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdi
   324d7:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   324e0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   324e4:	31 c0                	xor    eax,eax
   324e6:	c7 85 d0 fd ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x230],0x0
   324f0:	c7 85 d4 fd ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x22c],0x0
   324fa:	48 c7 85 e0 fd ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x220],0x0
   32505:	48 8b 95 c8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x238]
   3250c:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
   32513:	be 00 02 00 00       	mov    esi,0x200
   32518:	48 89 c7             	mov    rdi,rax
   3251b:	e8 30 15 fd ff       	call   3a50 <fgets@plt>
   32520:	48 85 c0             	test   rax,rax
   32523:	0f 84 07 01 00 00    	je     32630 <vrna_read_line+0x16f>
   32529:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
   32530:	be 0a 00 00 00       	mov    esi,0xa
   32535:	48 89 c7             	mov    rdi,rax
   32538:	e8 a3 11 fd ff       	call   36e0 <strchr@plt>
   3253d:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
   32544:	48 83 bd e8 fd ff ff 00 	cmp    QWORD PTR [rbp-0x218],0x0
   3254c:	74 0a                	je     32558 <vrna_read_line+0x97>
   3254e:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
   32555:	c6 00 00             	mov    BYTE PTR [rax],0x0
   32558:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
   3255f:	48 89 c7             	mov    rdi,rax
   32562:	e8 b9 11 fd ff       	call   3720 <strlen@plt>
   32567:	89 85 d8 fd ff ff    	mov    DWORD PTR [rbp-0x228],eax
   3256d:	8b 95 d0 fd ff ff    	mov    edx,DWORD PTR [rbp-0x230]
   32573:	8b 85 d8 fd ff ff    	mov    eax,DWORD PTR [rbp-0x228]
   32579:	01 d0                	add    eax,edx
   3257b:	89 85 dc fd ff ff    	mov    DWORD PTR [rbp-0x224],eax
   32581:	8b 85 dc fd ff ff    	mov    eax,DWORD PTR [rbp-0x224]
   32587:	3b 85 d4 fd ff ff    	cmp    eax,DWORD PTR [rbp-0x22c]
   3258d:	7c 41                	jl     325d0 <vrna_read_line+0x10f>
   3258f:	8b 85 dc fd ff ff    	mov    eax,DWORD PTR [rbp-0x224]
   32595:	83 c0 01             	add    eax,0x1
   32598:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   3259c:	f2 0f 10 05 ac 46 1b 00 	movsd  xmm0,QWORD PTR [rip+0x1b46ac]        # 1e6c50 <Law_and_Order+0x448>
   325a4:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   325a8:	f2 0f 2c c0          	cvttsd2si eax,xmm0
   325ac:	89 85 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],eax
   325b2:	8b 95 d4 fd ff ff    	mov    edx,DWORD PTR [rbp-0x22c]
   325b8:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
   325bf:	89 d6                	mov    esi,edx
   325c1:	48 89 c7             	mov    rdi,rax
   325c4:	e8 d0 c7 ff ff       	call   2ed99 <vrna_realloc>
   325c9:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
   325d0:	8b 85 d8 fd ff ff    	mov    eax,DWORD PTR [rbp-0x228]
   325d6:	48 63 d0             	movsxd rdx,eax
   325d9:	8b 85 d0 fd ff ff    	mov    eax,DWORD PTR [rbp-0x230]
   325df:	48 63 c8             	movsxd rcx,eax
   325e2:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
   325e9:	48 01 c1             	add    rcx,rax
   325ec:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
   325f3:	48 89 c6             	mov    rsi,rax
   325f6:	48 89 cf             	mov    rdi,rcx
   325f9:	e8 32 12 fd ff       	call   3830 <memcpy@plt>
   325fe:	8b 85 dc fd ff ff    	mov    eax,DWORD PTR [rbp-0x224]
   32604:	48 63 d0             	movsxd rdx,eax
   32607:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
   3260e:	48 01 d0             	add    rax,rdx
   32611:	c6 00 00             	mov    BYTE PTR [rax],0x0
   32614:	8b 85 dc fd ff ff    	mov    eax,DWORD PTR [rbp-0x224]
   3261a:	89 85 d0 fd ff ff    	mov    DWORD PTR [rbp-0x230],eax
   32620:	48 83 bd e8 fd ff ff 00 	cmp    QWORD PTR [rbp-0x218],0x0
   32628:	0f 84 d7 fe ff ff    	je     32505 <vrna_read_line+0x44>
   3262e:	eb 01                	jmp    32631 <vrna_read_line+0x170>
   32630:	90                   	nop
   32631:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
   32638:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   3263c:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   32645:	74 05                	je     3264c <vrna_read_line+0x18b>
   32647:	e8 a4 12 fd ff       	call   38f0 <__stack_chk_fail@plt>
   3264c:	c9                   	leave  
   3264d:	c3                   	ret    

000000000003264e <vrna_mkdir_p>:
   3264e:	f3 0f 1e fa          	endbr64 
   32652:	55                   	push   rbp
   32653:	48 89 e5             	mov    rbp,rsp
   32656:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
   3265d:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
   32664:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3266d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32671:	31 c0                	xor    eax,eax
   32673:	c7 85 4c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xb4],0x0
   3267d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   32684:	48 89 c7             	mov    rdi,rax
   32687:	e8 eb 05 00 00       	call   32c77 <is_absolute_path>
   3268c:	85 c0                	test   eax,eax
   3268e:	75 29                	jne    326b9 <vrna_mkdir_p+0x6b>
   32690:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   32697:	48 89 c2             	mov    rdx,rax
   3269a:	be 2f 00 00 00       	mov    esi,0x2f
   3269f:	48 8d 3d 42 45 1b 00 	lea    rdi,[rip+0x1b4542]        # 1e6be8 <Law_and_Order+0x3e0>
   326a6:	b8 00 00 00 00       	mov    eax,0x0
   326ab:	e8 ec b8 ff ff       	call   2df9c <vrna_strdup_printf>
   326b0:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
   326b7:	eb 16                	jmp    326cf <vrna_mkdir_p+0x81>
   326b9:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   326c0:	48 89 c7             	mov    rdi,rax
   326c3:	e8 91 b8 ff ff       	call   2df59 <strdup>
   326c8:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
   326cf:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   326d6:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
   326dd:	e9 3c 01 00 00       	jmp    3281e <vrna_mkdir_p+0x1d0>
   326e2:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   326e9:	48 8d 35 fe 44 1b 00 	lea    rsi,[rip+0x1b44fe]        # 1e6bee <Law_and_Order+0x3e6>
   326f0:	48 89 c7             	mov    rdi,rax
   326f3:	e8 18 10 fd ff       	call   3710 <strspn@plt>
   326f8:	48 01 85 50 ff ff ff 	add    QWORD PTR [rbp-0xb0],rax
   326ff:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   32706:	48 8d 35 e1 44 1b 00 	lea    rsi,[rip+0x1b44e1]        # 1e6bee <Law_and_Order+0x3e6>
   3270d:	48 89 c7             	mov    rdi,rax
   32710:	e8 0b 0f fd ff       	call   3620 <strcspn@plt>
   32715:	48 01 85 50 ff ff ff 	add    QWORD PTR [rbp-0xb0],rax
   3271c:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   32723:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   32726:	84 c0                	test   al,al
   32728:	0f 94 c0             	sete   al
   3272b:	0f b6 c0             	movzx  eax,al
   3272e:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
   32734:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   3273b:	c6 00 00             	mov    BYTE PTR [rax],0x0
   3273e:	48 8d 95 60 ff ff ff 	lea    rdx,[rbp-0xa0]
   32745:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   3274c:	48 89 d6             	mov    rsi,rdx
   3274f:	48 89 c7             	mov    rdi,rax
   32752:	e8 f9 07 00 00       	call   32f50 <__stat>
   32757:	85 c0                	test   eax,eax
   32759:	74 69                	je     327c4 <vrna_mkdir_p+0x176>
   3275b:	e8 a0 0e fd ff       	call   3600 <__errno_location@plt>
   32760:	8b 00                	mov    eax,DWORD PTR [rax]
   32762:	83 f8 02             	cmp    eax,0x2
   32765:	75 2c                	jne    32793 <vrna_mkdir_p+0x145>
   32767:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   3276e:	be ff 01 00 00       	mov    esi,0x1ff
   32773:	48 89 c7             	mov    rdi,rax
   32776:	e8 c5 0f fd ff       	call   3740 <mkdir@plt>
   3277b:	85 c0                	test   eax,eax
   3277d:	0f 84 91 00 00 00    	je     32814 <vrna_mkdir_p+0x1c6>
   32783:	e8 78 0e fd ff       	call   3600 <__errno_location@plt>
   32788:	8b 00                	mov    eax,DWORD PTR [rax]
   3278a:	83 f8 11             	cmp    eax,0x11
   3278d:	0f 84 81 00 00 00    	je     32814 <vrna_mkdir_p+0x1c6>
   32793:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   3279a:	48 89 c6             	mov    rsi,rax
   3279d:	48 8d 3d 4c 44 1b 00 	lea    rdi,[rip+0x1b444c]        # 1e6bf0 <Law_and_Order+0x3e8>
   327a4:	b8 00 00 00 00       	mov    eax,0x0
   327a9:	e8 3d c8 ff ff       	call   2efeb <vrna_message_warning>
   327ae:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   327b5:	48 89 c7             	mov    rdi,rax
   327b8:	e8 83 11 fd ff       	call   3940 <free@plt>
   327bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
   327c2:	eb 7b                	jmp    3283f <vrna_mkdir_p+0x1f1>
   327c4:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   327ca:	25 00 f0 00 00       	and    eax,0xf000
   327cf:	3d 00 40 00 00       	cmp    eax,0x4000
   327d4:	74 3e                	je     32814 <vrna_mkdir_p+0x1c6>
   327d6:	bf 14 00 00 00       	mov    edi,0x14
   327db:	e8 e0 0e fd ff       	call   36c0 <strerror@plt>
   327e0:	48 89 c2             	mov    rdx,rax
   327e3:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   327ea:	48 89 c6             	mov    rsi,rax
   327ed:	48 8d 3d 1c 44 1b 00 	lea    rdi,[rip+0x1b441c]        # 1e6c10 <Law_and_Order+0x408>
   327f4:	b8 00 00 00 00       	mov    eax,0x0
   327f9:	e8 ed c7 ff ff       	call   2efeb <vrna_message_warning>
   327fe:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   32805:	48 89 c7             	mov    rdi,rax
   32808:	e8 33 11 fd ff       	call   3940 <free@plt>
   3280d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   32812:	eb 2b                	jmp    3283f <vrna_mkdir_p+0x1f1>
   32814:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   3281b:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
   3281e:	83 bd 4c ff ff ff 00 	cmp    DWORD PTR [rbp-0xb4],0x0
   32825:	0f 84 b7 fe ff ff    	je     326e2 <vrna_mkdir_p+0x94>
   3282b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   32832:	48 89 c7             	mov    rdi,rax
   32835:	e8 06 11 fd ff       	call   3940 <free@plt>
   3283a:	b8 00 00 00 00       	mov    eax,0x0
   3283f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   32843:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   3284c:	74 05                	je     32853 <vrna_mkdir_p+0x205>
   3284e:	e8 9d 10 fd ff       	call   38f0 <__stack_chk_fail@plt>
   32853:	c9                   	leave  
   32854:	c3                   	ret    

0000000000032855 <vrna_basename>:
   32855:	f3 0f 1e fa          	endbr64 
   32859:	55                   	push   rbp
   3285a:	48 89 e5             	mov    rbp,rsp
   3285d:	48 83 ec 20          	sub    rsp,0x20
   32861:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32865:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
   3286d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   32872:	74 58                	je     328cc <vrna_basename+0x77>
   32874:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32878:	be 2f 00 00 00       	mov    esi,0x2f
   3287d:	48 89 c7             	mov    rdi,rax
   32880:	e8 5b 10 fd ff       	call   38e0 <strrchr@plt>
   32885:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32889:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   3288e:	74 25                	je     328b5 <vrna_basename+0x60>
   32890:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32894:	48 83 c0 01          	add    rax,0x1
   32898:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   3289b:	84 c0                	test   al,al
   3289d:	74 16                	je     328b5 <vrna_basename+0x60>
   3289f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   328a3:	48 83 c0 01          	add    rax,0x1
   328a7:	48 89 c7             	mov    rdi,rax
   328aa:	e8 aa b6 ff ff       	call   2df59 <strdup>
   328af:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   328b3:	eb 17                	jmp    328cc <vrna_basename+0x77>
   328b5:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   328ba:	75 10                	jne    328cc <vrna_basename+0x77>
   328bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   328c0:	48 89 c7             	mov    rdi,rax
   328c3:	e8 91 b6 ff ff       	call   2df59 <strdup>
   328c8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   328cc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   328d0:	c9                   	leave  
   328d1:	c3                   	ret    

00000000000328d2 <vrna_dirname>:
   328d2:	f3 0f 1e fa          	endbr64 
   328d6:	55                   	push   rbp
   328d7:	48 89 e5             	mov    rbp,rsp
   328da:	48 83 ec 30          	sub    rsp,0x30
   328de:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   328e2:	48 c7 45 e8 00 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
   328ea:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   328ef:	0f 84 96 00 00 00    	je     3298b <vrna_dirname+0xb9>
   328f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   328f9:	48 89 c7             	mov    rdi,rax
   328fc:	e8 76 03 00 00       	call   32c77 <is_absolute_path>
   32901:	85 c0                	test   eax,eax
   32903:	75 23                	jne    32928 <vrna_dirname+0x56>
   32905:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32909:	48 89 c2             	mov    rdx,rax
   3290c:	be 2f 00 00 00       	mov    esi,0x2f
   32911:	48 8d 3d d0 42 1b 00 	lea    rdi,[rip+0x1b42d0]        # 1e6be8 <Law_and_Order+0x3e0>
   32918:	b8 00 00 00 00       	mov    eax,0x0
   3291d:	e8 7a b6 ff ff       	call   2df9c <vrna_strdup_printf>
   32922:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32926:	eb 10                	jmp    32938 <vrna_dirname+0x66>
   32928:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3292c:	48 89 c7             	mov    rdi,rax
   3292f:	e8 25 b6 ff ff       	call   2df59 <strdup>
   32934:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32938:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3293c:	48 89 c7             	mov    rdi,rax
   3293f:	e8 dc 0d fd ff       	call   3720 <strlen@plt>
   32944:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   32947:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   3294a:	48 63 d0             	movsxd rdx,eax
   3294d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32951:	48 01 d0             	add    rax,rdx
   32954:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   32958:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3295c:	c6 00 00             	mov    BYTE PTR [rax],0x0
   3295f:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
   32964:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32968:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
   3296c:	76 0b                	jbe    32979 <vrna_dirname+0xa7>
   3296e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32972:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   32975:	3c 2f                	cmp    al,0x2f
   32977:	75 df                	jne    32958 <vrna_dirname+0x86>
   32979:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3297d:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
   32981:	76 08                	jbe    3298b <vrna_dirname+0xb9>
   32983:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32987:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3298b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3298f:	c9                   	leave  
   32990:	c3                   	ret    

0000000000032991 <vrna_filename_sanitize>:
   32991:	f3 0f 1e fa          	endbr64 
   32995:	55                   	push   rbp
   32996:	48 89 e5             	mov    rbp,rsp
   32999:	53                   	push   rbx
   3299a:	48 83 ec 58          	sub    rsp,0x58
   3299e:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   329a2:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   329a6:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   329ab:	0f 84 48 02 00 00    	je     32bf9 <vrna_filename_sanitize+0x268>
   329b1:	48 8d 05 82 42 1b 00 	lea    rax,[rip+0x1b4282]        # 1e6c3a <Law_and_Order+0x432>
   329b8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   329bc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   329c0:	48 89 c7             	mov    rdi,rax
   329c3:	e8 58 0d fd ff       	call   3720 <strlen@plt>
   329c8:	83 c0 01             	add    eax,0x1
   329cb:	89 c7                	mov    edi,eax
   329cd:	e8 3f c3 ff ff       	call   2ed11 <vrna_alloc>
   329d2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   329d6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   329da:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   329de:	c7 45 b8 00 00 00 00 	mov    DWORD PTR [rbp-0x48],0x0
   329e5:	eb 6c                	jmp    32a53 <vrna_filename_sanitize+0xc2>
   329e7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   329eb:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
   329ef:	48 89 c6             	mov    rsi,rax
   329f2:	8b 55 b8             	mov    edx,DWORD PTR [rbp-0x48]
   329f5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   329f9:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   329fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a01:	48 89 f2             	mov    rdx,rsi
   32a04:	48 89 c6             	mov    rsi,rax
   32a07:	48 89 cf             	mov    rdi,rcx
   32a0a:	e8 61 0d fd ff       	call   3770 <strncpy@plt>
   32a0f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   32a13:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
   32a17:	01 45 b8             	add    DWORD PTR [rbp-0x48],eax
   32a1a:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   32a1f:	74 26                	je     32a47 <vrna_filename_sanitize+0xb6>
   32a21:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   32a25:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   32a28:	84 c0                	test   al,al
   32a2a:	74 1b                	je     32a47 <vrna_filename_sanitize+0xb6>
   32a2c:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   32a2f:	8d 50 01             	lea    edx,[rax+0x1]
   32a32:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
   32a35:	89 c2                	mov    edx,eax
   32a37:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32a3b:	48 01 c2             	add    rdx,rax
   32a3e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   32a42:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   32a45:	88 02                	mov    BYTE PTR [rdx],al
   32a47:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   32a4b:	48 83 c0 01          	add    rax,0x1
   32a4f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   32a53:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   32a57:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a5b:	48 89 d6             	mov    rsi,rdx
   32a5e:	48 89 c7             	mov    rdi,rax
   32a61:	e8 9a 10 fd ff       	call   3b00 <strpbrk@plt>
   32a66:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   32a6a:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   32a6f:	0f 85 72 ff ff ff    	jne    329e7 <vrna_filename_sanitize+0x56>
   32a75:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   32a79:	48 89 c7             	mov    rdi,rax
   32a7c:	e8 9f 0c fd ff       	call   3720 <strlen@plt>
   32a81:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   32a85:	48 01 d0             	add    rax,rdx
   32a88:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
   32a8c:	73 3d                	jae    32acb <vrna_filename_sanitize+0x13a>
   32a8e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   32a92:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
   32a96:	89 c3                	mov    ebx,eax
   32a98:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   32a9c:	48 89 c7             	mov    rdi,rax
   32a9f:	e8 7c 0c fd ff       	call   3720 <strlen@plt>
   32aa4:	01 d8                	add    eax,ebx
   32aa6:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   32aa9:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
   32aac:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
   32aaf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32ab3:	48 01 c1             	add    rcx,rax
   32ab6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32aba:	48 89 c6             	mov    rsi,rax
   32abd:	48 89 cf             	mov    rdi,rcx
   32ac0:	e8 ab 0c fd ff       	call   3770 <strncpy@plt>
   32ac5:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   32ac8:	01 45 b8             	add    DWORD PTR [rbp-0x48],eax
   32acb:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   32ace:	8d 50 01             	lea    edx,[rax+0x1]
   32ad1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32ad5:	89 d6                	mov    esi,edx
   32ad7:	48 89 c7             	mov    rdi,rax
   32ada:	e8 ba c2 ff ff       	call   2ed99 <vrna_realloc>
   32adf:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   32ae3:	8b 55 b8             	mov    edx,DWORD PTR [rbp-0x48]
   32ae6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32aea:	48 01 d0             	add    rax,rdx
   32aed:	c6 00 00             	mov    BYTE PTR [rax],0x0
   32af0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32af4:	48 8d 35 4b 41 1b 00 	lea    rsi,[rip+0x1b414b]        # 1e6c46 <Law_and_Order+0x43e>
   32afb:	48 89 c7             	mov    rdi,rax
   32afe:	e8 bd 0e fd ff       	call   39c0 <strcmp@plt>
   32b03:	85 c0                	test   eax,eax
   32b05:	74 17                	je     32b1e <vrna_filename_sanitize+0x18d>
   32b07:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b0b:	48 8d 35 36 41 1b 00 	lea    rsi,[rip+0x1b4136]        # 1e6c48 <Law_and_Order+0x440>
   32b12:	48 89 c7             	mov    rdi,rax
   32b15:	e8 a6 0e fd ff       	call   39c0 <strcmp@plt>
   32b1a:	85 c0                	test   eax,eax
   32b1c:	75 1c                	jne    32b3a <vrna_filename_sanitize+0x1a9>
   32b1e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b22:	be 01 00 00 00       	mov    esi,0x1
   32b27:	48 89 c7             	mov    rdi,rax
   32b2a:	e8 6a c2 ff ff       	call   2ed99 <vrna_realloc>
   32b2f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   32b33:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b37:	c6 00 00             	mov    BYTE PTR [rax],0x0
   32b3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b3e:	48 89 c7             	mov    rdi,rax
   32b41:	e8 da 0b fd ff       	call   3720 <strlen@plt>
   32b46:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   32b49:	81 7d c0 ff 00 00 00 	cmp    DWORD PTR [rbp-0x40],0xff
   32b50:	0f 86 9d 00 00 00    	jbe    32bf3 <vrna_filename_sanitize+0x262>
   32b56:	48 c7 45 e8 00 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
   32b5e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b62:	be 2e 00 00 00       	mov    esi,0x2e
   32b67:	48 89 c7             	mov    rdi,rax
   32b6a:	e8 71 0d fd ff       	call   38e0 <strrchr@plt>
   32b6f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   32b73:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   32b78:	74 57                	je     32bd1 <vrna_filename_sanitize+0x240>
   32b7a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   32b7d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b81:	48 01 d0             	add    rax,rdx
   32b84:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   32b88:	48 3d fe 00 00 00    	cmp    rax,0xfe
   32b8e:	7f 41                	jg     32bd1 <vrna_filename_sanitize+0x240>
   32b90:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   32b93:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b97:	48 01 d0             	add    rax,rdx
   32b9a:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   32b9e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   32ba1:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   32ba4:	8b 4d c0             	mov    ecx,DWORD PTR [rbp-0x40]
   32ba7:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
   32baa:	48 29 d1             	sub    rcx,rdx
   32bad:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   32bb1:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
   32bb5:	ba ff 00 00 00       	mov    edx,0xff
   32bba:	2b 55 c4             	sub    edx,DWORD PTR [rbp-0x3c]
   32bbd:	89 d1                	mov    ecx,edx
   32bbf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   32bc3:	48 01 d1             	add    rcx,rdx
   32bc6:	48 89 c2             	mov    rdx,rax
   32bc9:	48 89 cf             	mov    rdi,rcx
   32bcc:	e8 af 0e fd ff       	call   3a80 <memmove@plt>
   32bd1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32bd5:	be 00 01 00 00       	mov    esi,0x100
   32bda:	48 89 c7             	mov    rdi,rax
   32bdd:	e8 b7 c1 ff ff       	call   2ed99 <vrna_realloc>
   32be2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   32be6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32bea:	48 05 ff 00 00 00    	add    rax,0xff
   32bf0:	c6 00 00             	mov    BYTE PTR [rax],0x0
   32bf3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32bf7:	eb 05                	jmp    32bfe <vrna_filename_sanitize+0x26d>
   32bf9:	b8 00 00 00 00       	mov    eax,0x0
   32bfe:	48 83 c4 58          	add    rsp,0x58
   32c02:	5b                   	pop    rbx
   32c03:	5d                   	pop    rbp
   32c04:	c3                   	ret    

0000000000032c05 <vrna_file_exists>:
   32c05:	f3 0f 1e fa          	endbr64 
   32c09:	55                   	push   rbp
   32c0a:	48 89 e5             	mov    rbp,rsp
   32c0d:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
   32c14:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
   32c1b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32c24:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32c28:	31 c0                	xor    eax,eax
   32c2a:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   32c34:	48 8d 95 60 ff ff ff 	lea    rdx,[rbp-0xa0]
   32c3b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   32c42:	48 89 d6             	mov    rsi,rdx
   32c45:	48 89 c7             	mov    rdi,rax
   32c48:	e8 03 03 00 00       	call   32f50 <__stat>
   32c4d:	85 c0                	test   eax,eax
   32c4f:	0f 94 c0             	sete   al
   32c52:	0f b6 c0             	movzx  eax,al
   32c55:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   32c5b:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   32c61:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   32c65:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   32c6e:	74 05                	je     32c75 <vrna_file_exists+0x70>
   32c70:	e8 7b 0c fd ff       	call   38f0 <__stack_chk_fail@plt>
   32c75:	c9                   	leave  
   32c76:	c3                   	ret    

0000000000032c77 <is_absolute_path>:
   32c77:	f3 0f 1e fa          	endbr64 
   32c7b:	55                   	push   rbp
   32c7c:	48 89 e5             	mov    rbp,rsp
   32c7f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32c83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c87:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   32c8a:	3c 2f                	cmp    al,0x2f
   32c8c:	75 07                	jne    32c95 <is_absolute_path+0x1e>
   32c8e:	b8 01 00 00 00       	mov    eax,0x1
   32c93:	eb 05                	jmp    32c9a <is_absolute_path+0x23>
   32c95:	b8 00 00 00 00       	mov    eax,0x0
   32c9a:	5d                   	pop    rbp
   32c9b:	c3                   	ret    

0000000000032c9c <vrna_cpu_vendor_string>:
   32c9c:	f3 0f 1e fa          	endbr64 
   32ca0:	55                   	push   rbp
   32ca1:	48 89 e5             	mov    rbp,rsp
   32ca4:	48 83 ec 20          	sub    rsp,0x20
   32ca8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32cb1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32cb5:	31 c0                	xor    eax,eax
   32cb7:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   32cbf:	48 c7 45 e8 00 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
   32cc7:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   32ccb:	48 89 c7             	mov    rdi,rax
   32cce:	e8 71 00 00 00       	call   32d44 <execute_cpuid>
   32cd3:	85 c0                	test   eax,eax
   32cd5:	74 28                	je     32cff <vrna_cpu_vendor_string+0x63>
   32cd7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   32cda:	89 05 a0 a4 2b 00    	mov    DWORD PTR [rip+0x2ba4a0],eax        # 2ed180 <name.4485>
   32ce0:	48 8d 15 9d a4 2b 00 	lea    rdx,[rip+0x2ba49d]        # 2ed184 <name.4485+0x4>
   32ce7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   32cea:	89 02                	mov    DWORD PTR [rdx],eax
   32cec:	48 8d 15 95 a4 2b 00 	lea    rdx,[rip+0x2ba495]        # 2ed188 <name.4485+0x8>
   32cf3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   32cf6:	89 02                	mov    DWORD PTR [rdx],eax
   32cf8:	c6 05 8d a4 2b 00 00 	mov    BYTE PTR [rip+0x2ba48d],0x0        # 2ed18c <name.4485+0xc>
   32cff:	48 8d 05 7a a4 2b 00 	lea    rax,[rip+0x2ba47a]        # 2ed180 <name.4485>
   32d06:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   32d0a:	64 48 33 0c 25 28 00 00 00 	xor    rcx,QWORD PTR fs:0x28
   32d13:	74 05                	je     32d1a <vrna_cpu_vendor_string+0x7e>
   32d15:	e8 d6 0b fd ff       	call   38f0 <__stack_chk_fail@plt>
   32d1a:	c9                   	leave  
   32d1b:	c3                   	ret    

0000000000032d1c <vrna_cpu_simd_capabilities>:
   32d1c:	f3 0f 1e fa          	endbr64 
   32d20:	55                   	push   rbp
   32d21:	48 89 e5             	mov    rbp,rsp
   32d24:	48 83 ec 10          	sub    rsp,0x10
   32d28:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   32d2f:	e8 5e 00 00 00       	call   32d92 <cpu_feature_bits>
   32d34:	09 45 fc             	or     DWORD PTR [rbp-0x4],eax
   32d37:	e8 0b 01 00 00       	call   32e47 <cpu_extended_feature_bits>
   32d3c:	09 45 fc             	or     DWORD PTR [rbp-0x4],eax
   32d3f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   32d42:	c9                   	leave  
   32d43:	c3                   	ret    

0000000000032d44 <execute_cpuid>:
   32d44:	55                   	push   rbp
   32d45:	48 89 e5             	mov    rbp,rsp
   32d48:	53                   	push   rbx
   32d49:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
   32d4d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32d51:	4c 8d 50 04          	lea    r10,[rax+0x4]
   32d55:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32d59:	4c 8d 48 08          	lea    r9,[rax+0x8]
   32d5d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32d61:	4c 8d 40 0c          	lea    r8,[rax+0xc]
   32d65:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32d69:	8b 00                	mov    eax,DWORD PTR [rax]
   32d6b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   32d6f:	48 83 c2 08          	add    rdx,0x8
   32d73:	8b 12                	mov    edx,DWORD PTR [rdx]
   32d75:	89 d1                	mov    ecx,edx
   32d77:	0f a2                	cpuid  
   32d79:	89 de                	mov    esi,ebx
   32d7b:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
   32d7f:	89 07                	mov    DWORD PTR [rdi],eax
   32d81:	41 89 32             	mov    DWORD PTR [r10],esi
   32d84:	41 89 09             	mov    DWORD PTR [r9],ecx
   32d87:	41 89 10             	mov    DWORD PTR [r8],edx
   32d8a:	b8 01 00 00 00       	mov    eax,0x1
   32d8f:	5b                   	pop    rbx
   32d90:	5d                   	pop    rbp
   32d91:	c3                   	ret    

0000000000032d92 <cpu_feature_bits>:
   32d92:	f3 0f 1e fa          	endbr64 
   32d96:	55                   	push   rbp
   32d97:	48 89 e5             	mov    rbp,rsp
   32d9a:	48 83 ec 30          	sub    rsp,0x30
   32d9e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32da7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32dab:	31 c0                	xor    eax,eax
   32dad:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   32db4:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
   32dbb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   32dc2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   32dc9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   32dd0:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   32dd4:	48 89 c7             	mov    rdi,rax
   32dd7:	e8 68 ff ff ff       	call   32d44 <execute_cpuid>
   32ddc:	85 c0                	test   eax,eax
   32dde:	74 4e                	je     32e2e <cpu_feature_bits+0x9c>
   32de0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   32de3:	25 00 00 00 04       	and    eax,0x4000000
   32de8:	85 c0                	test   eax,eax
   32dea:	74 04                	je     32df0 <cpu_feature_bits+0x5e>
   32dec:	83 4d dc 01          	or     DWORD PTR [rbp-0x24],0x1
   32df0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   32df3:	83 e0 01             	and    eax,0x1
   32df6:	85 c0                	test   eax,eax
   32df8:	74 04                	je     32dfe <cpu_feature_bits+0x6c>
   32dfa:	83 4d dc 02          	or     DWORD PTR [rbp-0x24],0x2
   32dfe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   32e01:	25 00 00 08 00       	and    eax,0x80000
   32e06:	85 c0                	test   eax,eax
   32e08:	74 04                	je     32e0e <cpu_feature_bits+0x7c>
   32e0a:	83 4d dc 04          	or     DWORD PTR [rbp-0x24],0x4
   32e0e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   32e11:	25 00 00 10 00       	and    eax,0x100000
   32e16:	85 c0                	test   eax,eax
   32e18:	74 04                	je     32e1e <cpu_feature_bits+0x8c>
   32e1a:	83 4d dc 08          	or     DWORD PTR [rbp-0x24],0x8
   32e1e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   32e21:	25 00 00 00 10       	and    eax,0x10000000
   32e26:	85 c0                	test   eax,eax
   32e28:	74 04                	je     32e2e <cpu_feature_bits+0x9c>
   32e2a:	83 4d dc 10          	or     DWORD PTR [rbp-0x24],0x10
   32e2e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   32e31:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   32e35:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   32e3e:	74 05                	je     32e45 <cpu_feature_bits+0xb3>
   32e40:	e8 ab 0a fd ff       	call   38f0 <__stack_chk_fail@plt>
   32e45:	c9                   	leave  
   32e46:	c3                   	ret    

0000000000032e47 <cpu_extended_feature_bits>:
   32e47:	f3 0f 1e fa          	endbr64 
   32e4b:	55                   	push   rbp
   32e4c:	48 89 e5             	mov    rbp,rsp
   32e4f:	48 83 ec 30          	sub    rsp,0x30
   32e53:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32e5c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32e60:	31 c0                	xor    eax,eax
   32e62:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   32e69:	c7 45 e0 07 00 00 00 	mov    DWORD PTR [rbp-0x20],0x7
   32e70:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   32e77:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   32e7e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   32e85:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   32e89:	48 89 c7             	mov    rdi,rax
   32e8c:	e8 b3 fe ff ff       	call   32d44 <execute_cpuid>
   32e91:	85 c0                	test   eax,eax
   32e93:	74 1e                	je     32eb3 <cpu_extended_feature_bits+0x6c>
   32e95:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   32e98:	83 e0 20             	and    eax,0x20
   32e9b:	85 c0                	test   eax,eax
   32e9d:	74 04                	je     32ea3 <cpu_extended_feature_bits+0x5c>
   32e9f:	83 4d dc 20          	or     DWORD PTR [rbp-0x24],0x20
   32ea3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   32ea6:	25 00 00 01 00       	and    eax,0x10000
   32eab:	85 c0                	test   eax,eax
   32ead:	74 04                	je     32eb3 <cpu_extended_feature_bits+0x6c>
   32eaf:	83 4d dc 40          	or     DWORD PTR [rbp-0x24],0x40
   32eb3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   32eb6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   32eba:	64 48 33 14 25 28 00 00 00 	xor    rdx,QWORD PTR fs:0x28
   32ec3:	74 05                	je     32eca <cpu_extended_feature_bits+0x83>
   32ec5:	e8 26 0a fd ff       	call   38f0 <__stack_chk_fail@plt>
   32eca:	c9                   	leave  
   32ecb:	c3                   	ret    
   32ecc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000032ed0 <__libc_csu_init>:
   32ed0:	f3 0f 1e fa          	endbr64 
   32ed4:	41 57                	push   r15
   32ed6:	4c 8d 3d b3 9b 1b 00 	lea    r15,[rip+0x1b9bb3]        # 1eca90 <__frame_dummy_init_array_entry>
   32edd:	41 56                	push   r14
   32edf:	49 89 d6             	mov    r14,rdx
   32ee2:	41 55                	push   r13
   32ee4:	49 89 f5             	mov    r13,rsi
   32ee7:	41 54                	push   r12
   32ee9:	41 89 fc             	mov    r12d,edi
   32eec:	55                   	push   rbp
   32eed:	48 8d 2d bc 9b 1b 00 	lea    rbp,[rip+0x1b9bbc]        # 1ecab0 <__do_global_dtors_aux_fini_array_entry>
   32ef4:	53                   	push   rbx
   32ef5:	4c 29 fd             	sub    rbp,r15
   32ef8:	48 83 ec 08          	sub    rsp,0x8
   32efc:	e8 ff 00 fd ff       	call   3000 <_init>
   32f01:	48 c1 fd 03          	sar    rbp,0x3
   32f05:	74 1f                	je     32f26 <__libc_csu_init+0x56>
   32f07:	31 db                	xor    ebx,ebx
   32f09:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   32f10:	4c 89 f2             	mov    rdx,r14
   32f13:	4c 89 ee             	mov    rsi,r13
   32f16:	44 89 e7             	mov    edi,r12d
   32f19:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
   32f1d:	48 83 c3 01          	add    rbx,0x1
   32f21:	48 39 dd             	cmp    rbp,rbx
   32f24:	75 ea                	jne    32f10 <__libc_csu_init+0x40>
   32f26:	48 83 c4 08          	add    rsp,0x8
   32f2a:	5b                   	pop    rbx
   32f2b:	5d                   	pop    rbp
   32f2c:	41 5c                	pop    r12
   32f2e:	41 5d                	pop    r13
   32f30:	41 5e                	pop    r14
   32f32:	41 5f                	pop    r15
   32f34:	c3                   	ret    
   32f35:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000032f40 <__libc_csu_fini>:
   32f40:	f3 0f 1e fa          	endbr64 
   32f44:	c3                   	ret    
   32f45:	66 2e 0f 1f 84 00 00 00 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
   32f4f:	90                   	nop

0000000000032f50 <__stat>:
   32f50:	f3 0f 1e fa          	endbr64 
   32f54:	48 89 f2             	mov    rdx,rsi
   32f57:	48 89 fe             	mov    rsi,rdi
   32f5a:	bf 01 00 00 00       	mov    edi,0x1
   32f5f:	e9 5c 09 fd ff       	jmp    38c0 <__xstat@plt>

Disassembly of section .fini:

0000000000032f64 <_fini>:
   32f64:	f3 0f 1e fa          	endbr64 
   32f68:	48 83 ec 08          	sub    rsp,0x8
   32f6c:	48 83 c4 08          	add    rsp,0x8
   32f70:	c3                   	ret    
